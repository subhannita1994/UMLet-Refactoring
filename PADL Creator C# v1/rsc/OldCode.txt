	private boolean errorMessages = false;
	public void setMeaningfulErrorMessages(boolean errorMessages) {
		this.errorMessages = errorMessages;
	}
	public String getErrorMessage(RecognitionException e, String[] tokenNames) {
		if (errorMessages) {
			List stack = getRuleInvocationStack(e, this.getClass().getName());
			String msg = null;
			if ( e instanceof NoViableAltException ) {
				NoViableAltException nvae = (NoViableAltException)e;
				msg = " no viable alT; token="+e.token+" (decision="+nvae.decisionNumber
						+" state "+nvae.stateNumber+")"+" decision=<<"+nvae.grammarDecisionDescription+">>";
			} else {
				msg = super.getErrorMessage(e, tokenNames);
			}
			return stack+" "+msg;
		} else {
			return super.getErrorMessage(e, tokenNames);
		}
	}

	public String getTokenErrorDisplay(Token t) {
		if (errorMessages) {
			return t.toString();
		} else {
			return super.getTokenErrorDisplay(t);
		}
	}
	
	private static String vers = "0.1";
	private static String id = "C# Parser";

	//------------------------------------------------------------
	/* Field and methods to recognize a global field */
	private static boolean isGlobalField = false;
	private static void setIsGlobalField(final boolean b) {
		CSharpParser.isGlobalField = b;
	}
	private static boolean getIsGlobalField() {
		return CSharpParser.isGlobalField;
	}

	//------------------------------------------------------------
	/* Field and methods to manage the members acces */

	private static int accessFlag = Modifier.PUBLIC;
	private static void setAccess(final int theAccess) {
		CSharpParser.accessFlag = theAccess;
	}
	private static int getAccess() {
		return CSharpParser.accessFlag;
	}

	//------------------------------------------------------------
	/* Field and methods to recognize a member */

	private static boolean isMember = false;
	private static void enableMember(final boolean b) {
		CSharpParser.isMember = b;
	}
	private static boolean getIsMember() {
		return CSharpParser.isMember;
	}

	//------------------------------------------------------------
	/* Field and methods to manage the member type */

	private static String typeMember = "";
	private static void setTypeMember(final String unType) {
		CSharpParser.typeMember = unType;
	}
	private static String getTypeMember() {
		return CSharpParser.typeMember;
	}
	private static void resetTypeMember() {
		CSharpParser.typeMember = "";
	}

	//------------------------------------------------------------
	/* Field and methods to manage the global field type */

	private static String typeGlobalField = "";
	private static void setTypeGlobalField(final String unType) {
		CSharpParser.typeGlobalField = unType;
	}
	private static String getTypeGlobalField() {
		return CSharpParser.typeGlobalField;
	}

	//------------------------------------------------------------
	/* Field and methods to manage the members of a class */

	private static List listOfElements = new ArrayList();
	private static List getListOfElements() {
		return CSharpParser.listOfElements;
	}
	private static void addToListOfElements(final IElement anElement) {
		CSharpParser.listOfElements.add(anElement);
	}
	private static void resetListOfElements() {
		CSharpParser.listOfElements.clear();
	}

	//------------------------------------------------------------
	/* Field and methods to manage the super classes of a class */

	private static List listOfGeneralizations = new ArrayList();
	private static List getListOfGeneralizations() {
		return CSharpParser.listOfGeneralizations;
	}
	private static void addToListOfGeneralizations(final String aName) {
		CSharpParser.listOfGeneralizations.add(aName);
	}
	private static void resetListOfGeneralizations() {
		CSharpParser.listOfGeneralizations.clear();
	}

	//------------------------------------------------------------
	/* Field and methods to manage the useRelationships of a class */

	private static List listOfUseDisplay = new ArrayList();
	private static List getListOfUseDisplay() {
		return CSharpParser.listOfUseDisplay;
	}
	private static void addToListOfUseDisplay(final String aName) {
		final Iterator iterator = CSharpParser.listOfUseDisplay.iterator();
		while (iterator.hasNext())
			if (aName.equals((String) iterator.next()))
				return;
		CSharpParser.listOfUseDisplay.add(aName);
	}
	private static void resetListOfUseDisplay() {
		CSharpParser.listOfUseDisplay.clear();
	}

	//------------------------------------------------------------
	/* Field and methods to recognize a parameter */

	private static boolean isParameter = false;
	private static void enableParameter(final boolean b) {
		CSharpParser.isParameter = b;
	}
	private static boolean getIsParameter() {
		return CSharpParser.isParameter;
	}

	//------------------------------------------------------------
	/* Field and methods to manage the parameter type */

	private static String typeParameter = "";
	private static void setTypeParameter(final String unType) {
		CSharpParser.typeParameter = unType;
	}
	private static String getTypeParameter() {
		return CSharpParser.typeParameter;
	}
	private static void resetTypeParameter() {
		CSharpParser.typeParameter = "";
	}

	//------------------------------------------------------------
	/* Field and methods to manage the parameters */

	private static List listOfArguments = new ArrayList();
	private static List getListOfArguments() {
		return CSharpParser.listOfArguments;
	}
	private static void addToListOfArguments(final IParameter aParameter) {
		CSharpParser.listOfArguments.add(aParameter);
	}
	private static void resetListOfArguments() {
		CSharpParser.listOfArguments.clear();
	}

	//------------------------------------------------------------
	/* Field and methods to manage the display of table suffixes */

	private static String suffix = "";
	private static void setSuffix(final String aSuffix) {
		CSharpParser.suffix += aSuffix;
	}
	private static String getSuffix() {
		return CSharpParser.suffix;
	}
	private static void resetSuffix() {
		CSharpParser.suffix = "";
	}

	//------------------------------------------------------------
	/* Field and methods to manage the codeLevelModel */
	/* and the default package to contain entities    */

	private static ICodeLevelModel codeLevelModel;
	private static int UniqueIdentifier;
	public static ICodeLevelModel getCodeLevelModel() {
		return CSharpParser.codeLevelModel;
	}
	public static void setCodeLevelModel(final ICodeLevelModel aCodeLevelModel) {
		CSharpParser.codeLevelModel = aCodeLevelModel;
	}
	private static IPackage createAndGetDefaultPackage() {
		IPackage enclosingPackage =
			(IPackage) CSharpParser.getCodeLevelModel().getConstituentFromID(
				CSharpCreator.CSHARP_PACKAGE_ID);
		if (enclosingPackage == null) {
//			try {
//				enclosingPackage =
//					factory.createPackage(CSharpCreator.CSHARP_PACKAGE_ID);
//				CSharpParser.getCodeLevelModel().addConstituent(enclosingPackage);
//			}
//			catch (final ModelDeclarationException mde) {
//				mde.printStackTrace();
//			}
		}
		return enclosingPackage;
	}

	//------------------------------------------------------------
	/* Field and methods to manage the factory */

	public static ICSharpFactory factory;
	public static ICSharpFactory getFactory() {
		return CSharpParser.factory;
	}
	public static void setFactory(final ICSharpFactory aFactory) {
		CSharpParser.factory = aFactory;
	}
	
	//------------------------------------------------------------
	// This method replace any ghost find with the same name of a new entity
    	// This method will fixed any relation create with the ghost
    	// This method will fixed any inheritance create with the ghost
    	private static void replaceGhost(final IEntity anEntity)
    			throws RecognitionException {
    		final IEntity entity =
    			(IEntity) CSharpParser
    				.createAndGetDefaultPackage()
    				.getConstituentFromName(anEntity.getName());

    		// If we find a ghost...
    		if (entity != null && entity instanceof IGhost) {
    			final String tempId = entity.getID();
    			// Remove the Ghost from the model
    			CSharpParser.createAndGetDefaultPackage().removeConstituentFromID(
    				tempId);

    			// Look in each Entity for link with this ghost
    			final Iterator tempListEntities =
    				CSharpParser
					.createAndGetDefaultPackage()
					.getIteratorOnConstituents();
    			while (tempListEntities.hasNext()) {
    				final IEntity tempEntity = (IEntity) tempListEntities.next();

    				// Look in each possible element of the entity
    				final Iterator tempListOfElement =
    					tempEntity.getIteratorOnConstituents();
    				while (tempListOfElement.hasNext()) {
    					final IElement tempElement =
    						(IElement) tempListOfElement.next();

    					// If we find a relationship
    					if (tempElement instanceof IRelationship) {
    						final IRelationship tempLink =
    							(IRelationship) tempElement;
    						if (tempId.equals(tempLink.getTargetEntity().getID())) {
    							tempLink.setTargetEntity(anEntity);
    						}
    					}
    				}

    				final List tempListOfInherited =
    					tempEntity.listOfInheritedEntities();
    				// Look in each inhereted
    				for (int j = 0; j < tempListOfInherited.size(); j++) {
    					final IEntity tempInherited =
    						(IEntity) tempListOfInherited.get(j);
    					// If we find a ghost in the inheritance list...
    					if (tempId.equals(tempInherited.getID())) {
    						tempEntity.removeInheritedEntity(entity);
    						try {
    							tempEntity.addInheritedEntity(anEntity);
    						}
    						catch (ModelDeclarationException e) {
    							msg("Error with the code-level model. |addInheritedActior()|");
    							throw new RecognitionException();
    						}
    					}
    				}
    			}
    		}
    	}
    	
    	//------------------------------------------------------------
    	private static void msg(String s) {
    		System.out.println(id + " Version " + vers + ": " + s);
    	}

	/*public static ICodeLevelModel parse(
		//String aFileName,
		ICodeLevelModel aCodeLevelModel) {
		//InputStream input;
		CSharpParser.setCodeLevelModel(aCodeLevelModel);
		
		CSharpParser.setFactory((ICSharpFactory) CSharpParser
			.getCodeLevelModel()
			.getFactory());*/
			
		/* END */

		/*try {
			input = new FileInputStream(aFileName);
		}
		catch (FileNotFoundException fnfe) {
			return CSharpParser.getCodeLevelModel();
		}*/

		/*try {
			if (jj_initialized_once) {
				ReInit(input);
				sym.depth = 0;
				CPPParser.resetTypeParameter();
				CPPParser.resetListOfArguments();
				CPPParser.resetListOfElements();
				CPPParser.resetListOfGeneralizations();
				CPPParser.resetListOfUseDisplay();
				CPPParser.resetSuffix();
				CPPParser.resetTypeMember();
			}
			else {
				new CPPParser(input);
			}*/
			//**************************
			/**compilationunit();
			msg("File parsed successfully: \"" + aFileName + "\".");
		}
		catch (ParseException e) {
			msg("Encountered errors during parse in file: \"" + aFileName
					+ "\".");
		}

		return CPPParser.getCodeLevelModel();
	}*/


