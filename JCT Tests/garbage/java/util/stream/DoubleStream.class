package java.util.stream;
abstract public interface DoubleStream
extends java.util.stream.BaseStream
{
abstract public static interface Builder
extends java.util.function.DoubleConsumer
{
abstract public void accept(java.lang.Object arg0)
{

}

public java.util.stream.DoubleStream.Builder add(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream build()
{

}


}

abstract public java.util.stream.DoubleStream filter(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream map(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream mapToObj(java.lang.Object arg0)
{

}

abstract public java.util.stream.IntStream mapToInt(java.lang.Object arg0)
{

}

abstract public java.util.stream.LongStream mapToLong(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream flatMap(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream distinct()
{

}

abstract public java.util.stream.DoubleStream sorted()
{

}

abstract public java.util.stream.DoubleStream peek(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream limit(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream skip(java.lang.Object arg0)
{

}

abstract public void forEach(java.lang.Object arg0)
{

}

abstract public void forEachOrdered(java.lang.Object arg0)
{

}

abstract public double[] toArray()
{

}

abstract public double reduce(java.lang.Object arg0, java.lang.Object arg1)
{

}

abstract public java.util.OptionalDouble reduce(java.lang.Object arg0)
{

}

abstract public java.lang.Object collect(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

abstract public double sum()
{

}

abstract public java.util.OptionalDouble min()
{

}

abstract public java.util.OptionalDouble max()
{

}

abstract public long count()
{

}

abstract public java.util.OptionalDouble average()
{

}

abstract public java.util.DoubleSummaryStatistics summaryStatistics()
{

}

abstract public boolean anyMatch(java.lang.Object arg0)
{

}

abstract public boolean allMatch(java.lang.Object arg0)
{

}

abstract public boolean noneMatch(java.lang.Object arg0)
{

}

abstract public java.util.OptionalDouble findFirst()
{

}

abstract public java.util.OptionalDouble findAny()
{

}

abstract public java.util.stream.Stream boxed()
{

}

abstract public java.util.stream.DoubleStream sequential()
{

}

abstract public java.util.stream.DoubleStream parallel()
{

}

abstract public java.util.PrimitiveIterator.OfDouble iterator()
{

}

abstract public java.util.Spliterator.OfDouble spliterator()
{

}

public static java.util.stream.DoubleStream.Builder builder()
{

}

public static java.util.stream.DoubleStream empty()
{

}

public static java.util.stream.DoubleStream of(java.lang.Object arg0)
{

}

public static java.util.stream.DoubleStream of(java.lang.Object arg0)
{

}

public static java.util.stream.DoubleStream iterate(java.lang.Object arg0, java.lang.Object arg1)
{

}

public static java.util.stream.DoubleStream generate(java.lang.Object arg0)
{

}

public static java.util.stream.DoubleStream concat(java.lang.Object arg0, java.lang.Object arg1)
{

}


}
