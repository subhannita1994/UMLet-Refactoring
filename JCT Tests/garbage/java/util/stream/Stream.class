package java.util.stream;
abstract public interface Stream
extends java.util.stream.BaseStream
{
abstract public static interface Builder
extends java.util.function.Consumer
{
abstract public void accept(java.lang.Object arg0)
{

}

public java.util.stream.Stream.Builder add(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream build()
{

}


}

abstract public java.util.stream.Stream filter(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream map(java.lang.Object arg0)
{

}

abstract public java.util.stream.IntStream mapToInt(java.lang.Object arg0)
{

}

abstract public java.util.stream.LongStream mapToLong(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream mapToDouble(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream flatMap(java.lang.Object arg0)
{

}

abstract public java.util.stream.IntStream flatMapToInt(java.lang.Object arg0)
{

}

abstract public java.util.stream.LongStream flatMapToLong(java.lang.Object arg0)
{

}

abstract public java.util.stream.DoubleStream flatMapToDouble(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream distinct()
{

}

abstract public java.util.stream.Stream sorted()
{

}

abstract public java.util.stream.Stream sorted(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream peek(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream limit(java.lang.Object arg0)
{

}

abstract public java.util.stream.Stream skip(java.lang.Object arg0)
{

}

abstract public void forEach(java.lang.Object arg0)
{

}

abstract public void forEachOrdered(java.lang.Object arg0)
{

}

abstract public java.lang.Object[] toArray()
{

}

abstract public java.lang.Object[] toArray(java.lang.Object arg0)
{

}

abstract public java.lang.Object reduce(java.lang.Object arg0, java.lang.Object arg1)
{

}

abstract public java.util.Optional reduce(java.lang.Object arg0)
{

}

abstract public java.lang.Object reduce(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

abstract public java.lang.Object collect(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

abstract public java.lang.Object collect(java.lang.Object arg0)
{

}

abstract public java.util.Optional min(java.lang.Object arg0)
{

}

abstract public java.util.Optional max(java.lang.Object arg0)
{

}

abstract public long count()
{

}

abstract public boolean anyMatch(java.lang.Object arg0)
{

}

abstract public boolean allMatch(java.lang.Object arg0)
{

}

abstract public boolean noneMatch(java.lang.Object arg0)
{

}

abstract public java.util.Optional findFirst()
{

}

abstract public java.util.Optional findAny()
{

}

public static java.util.stream.Stream.Builder builder()
{

}

public static java.util.stream.Stream empty()
{

}

public static java.util.stream.Stream of(java.lang.Object arg0)
{

}

public static java.util.stream.Stream of(java.lang.Object arg0)
{

}

public static java.util.stream.Stream iterate(java.lang.Object arg0, java.lang.Object arg1)
{

}

public static java.util.stream.Stream generate(java.lang.Object arg0)
{

}

public static java.util.stream.Stream concat(java.lang.Object arg0, java.lang.Object arg1)
{

}


}
