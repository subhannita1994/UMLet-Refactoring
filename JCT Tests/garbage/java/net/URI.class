package java.net;
final public class URI
implements java.io.Serializable, java.lang.Comparable
{
private class Parser
{
private java.lang.Object input;

private java.lang.Object requireServerAuthority;

private java.lang.Object ipv6byteCount;

void <init>(java.lang.Object arg0)
{

}

private void fail(java.lang.Object arg0) throws java.net.URISyntaxException
{

}

private void fail(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private void failExpecting(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private void failExpecting(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.net.URISyntaxException
{

}

private java.lang.String substring(java.lang.Object arg0, java.lang.Object arg1)
{

}

private char charAt(java.lang.Object arg0)
{

}

private boolean at(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private boolean at(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private int scan(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private int scan(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private int scanEscape(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.net.URISyntaxException
{

}

private int scan(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3) throws java.net.URISyntaxException
{

}

private void checkChars(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4) throws java.net.URISyntaxException
{

}

private void checkChar(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3) throws java.net.URISyntaxException
{

}

void parse(java.lang.Object arg0) throws java.net.URISyntaxException
{

}

private int parseHierarchical(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private int parseAuthority(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private int parseServer(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private int scanByte(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private int scanIPv4Address(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.net.URISyntaxException
{

}

private int takeIPv4Address(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.net.URISyntaxException
{

}

private int parseIPv4Address(java.lang.Object arg0, java.lang.Object arg1)
{

}

private int parseHostname(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private int parseIPv6Reference(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private int scanHexPost(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}

private int scanHexSeq(java.lang.Object arg0, java.lang.Object arg1) throws java.net.URISyntaxException
{

}


}

final static java.lang.Object serialVersionUID;

private transient java.lang.Object scheme;

private transient java.lang.Object fragment;

private transient java.lang.Object authority;

private transient java.lang.Object userInfo;

private transient java.lang.Object host;

private transient java.lang.Object port;

private transient java.lang.Object path;

private transient java.lang.Object query;

private transient volatile java.lang.Object schemeSpecificPart;

private transient volatile java.lang.Object hash;

private transient volatile java.lang.Object decodedUserInfo;

private transient volatile java.lang.Object decodedAuthority;

private transient volatile java.lang.Object decodedPath;

private transient volatile java.lang.Object decodedQuery;

private transient volatile java.lang.Object decodedFragment;

private transient volatile java.lang.Object decodedSchemeSpecificPart;

private volatile java.lang.Object string;

final private static java.lang.Object L_DIGIT;

final private static java.lang.Object H_DIGIT;

final private static java.lang.Object L_UPALPHA;

final private static java.lang.Object H_UPALPHA;

final private static java.lang.Object L_LOWALPHA;

final private static java.lang.Object H_LOWALPHA;

final private static java.lang.Object L_ALPHA;

final private static java.lang.Object H_ALPHA;

final private static java.lang.Object L_ALPHANUM;

final private static java.lang.Object H_ALPHANUM;

final private static java.lang.Object L_HEX;

final private static java.lang.Object H_HEX;

final private static java.lang.Object L_MARK;

final private static java.lang.Object H_MARK;

final private static java.lang.Object L_UNRESERVED;

final private static java.lang.Object H_UNRESERVED;

final private static java.lang.Object L_RESERVED;

final private static java.lang.Object H_RESERVED;

final private static java.lang.Object L_ESCAPED;

final private static java.lang.Object H_ESCAPED;

final private static java.lang.Object L_URIC;

final private static java.lang.Object H_URIC;

final private static java.lang.Object L_PCHAR;

final private static java.lang.Object H_PCHAR;

final private static java.lang.Object L_PATH;

final private static java.lang.Object H_PATH;

final private static java.lang.Object L_DASH;

final private static java.lang.Object H_DASH;

final private static java.lang.Object L_DOT;

final private static java.lang.Object H_DOT;

final private static java.lang.Object L_USERINFO;

final private static java.lang.Object H_USERINFO;

final private static java.lang.Object L_REG_NAME;

final private static java.lang.Object H_REG_NAME;

final private static java.lang.Object L_SERVER;

final private static java.lang.Object H_SERVER;

final private static java.lang.Object L_SERVER_PERCENT;

final private static java.lang.Object H_SERVER_PERCENT;

final private static java.lang.Object L_LEFT_BRACKET;

final private static java.lang.Object H_LEFT_BRACKET;

final private static java.lang.Object L_SCHEME;

final private static java.lang.Object H_SCHEME;

final private static java.lang.Object L_URIC_NO_SLASH;

final private static java.lang.Object H_URIC_NO_SLASH;

final private static java.lang.Object hexDigits;

private void <init>()
{

}

public void <init>(java.lang.Object arg0) throws java.net.URISyntaxException
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6) throws java.net.URISyntaxException
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4) throws java.net.URISyntaxException
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3) throws java.net.URISyntaxException
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.net.URISyntaxException
{

}

public static java.net.URI create(java.lang.Object arg0)
{

}

public java.net.URI parseServerAuthority() throws java.net.URISyntaxException
{

}

public java.net.URI normalize()
{

}

public java.net.URI resolve(java.lang.Object arg0)
{

}

public java.net.URI resolve(java.lang.Object arg0)
{

}

public java.net.URI relativize(java.lang.Object arg0)
{

}

public java.net.URL toURL() throws java.net.MalformedURLException
{

}

public java.lang.String getScheme()
{

}

public boolean isAbsolute()
{

}

public boolean isOpaque()
{

}

public java.lang.String getRawSchemeSpecificPart()
{

}

public java.lang.String getSchemeSpecificPart()
{

}

public java.lang.String getRawAuthority()
{

}

public java.lang.String getAuthority()
{

}

public java.lang.String getRawUserInfo()
{

}

public java.lang.String getUserInfo()
{

}

public java.lang.String getHost()
{

}

public int getPort()
{

}

public java.lang.String getRawPath()
{

}

public java.lang.String getPath()
{

}

public java.lang.String getRawQuery()
{

}

public java.lang.String getQuery()
{

}

public java.lang.String getRawFragment()
{

}

public java.lang.String getFragment()
{

}

public boolean equals(java.lang.Object arg0)
{

}

public int hashCode()
{

}

public int compareTo(java.lang.Object arg0)
{

}

public java.lang.String toString()
{

}

public java.lang.String toASCIIString()
{

}

private void writeObject(java.lang.Object arg0) throws java.io.IOException
{

}

private void readObject(java.lang.Object arg0) throws java.io.IOException, java.lang.ClassNotFoundException
{

}

private static int toLower(java.lang.Object arg0)
{

}

private static int toUpper(java.lang.Object arg0)
{

}

private static boolean equal(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static boolean equalIgnoringCase(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int hash(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int normalizedHash(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int hashIgnoringCase(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int compare(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int compareIgnoringCase(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static void checkPath(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.net.URISyntaxException
{

}

private void appendAuthority(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

private void appendSchemeSpecificPart(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6, java.lang.Object arg7)
{

}

private void appendFragment(java.lang.Object arg0, java.lang.Object arg1)
{

}

private java.lang.String toString(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6, java.lang.Object arg7, java.lang.Object arg8)
{

}

private void defineSchemeSpecificPart()
{

}

private void defineString()
{

}

private static java.lang.String resolvePath(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static java.net.URI resolve(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.net.URI normalize(java.lang.Object arg0)
{

}

private static java.net.URI relativize(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int needsNormalization(java.lang.Object arg0)
{

}

private static void split(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int join(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static void removeDots(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static void maybeAddLeadingDot(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.lang.String normalize(java.lang.Object arg0)
{

}

private static long lowMask(java.lang.Object arg0)
{

}

private static long highMask(java.lang.Object arg0)
{

}

private static long lowMask(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static long highMask(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static boolean match(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static void appendEscape(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static void appendEncoded(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.lang.String quote(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static java.lang.String encode(java.lang.Object arg0)
{

}

private static int decode(java.lang.Object arg0)
{

}

private static byte decode(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.lang.String decode(java.lang.Object arg0)
{

}

static void <clinit>()
{

}


}
