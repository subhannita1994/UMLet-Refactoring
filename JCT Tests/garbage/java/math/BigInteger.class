package java.math;
public class BigInteger
extends java.lang.Number
implements java.lang.Comparable
{
private static class UnsafeHolder
{
final private static java.lang.Object unsafe;

final private static java.lang.Object signumOffset;

final private static java.lang.Object magOffset;

private void <init>()
{

}

static void putSign(java.lang.Object arg0, java.lang.Object arg1)
{

}

static void putMag(java.lang.Object arg0, java.lang.Object arg1)
{

}

static void <clinit>()
{

}


}

final java.lang.Object signum;

final java.lang.Object mag;

private java.lang.Object bitCount;

private java.lang.Object bitLength;

private java.lang.Object lowestSetBit;

private java.lang.Object firstNonzeroIntNum;

final static java.lang.Object LONG_MASK;

final private static java.lang.Object MAX_MAG_LENGTH;

final private static java.lang.Object PRIME_SEARCH_BIT_LENGTH_LIMIT;

final private static java.lang.Object KARATSUBA_THRESHOLD;

final private static java.lang.Object TOOM_COOK_THRESHOLD;

final private static java.lang.Object KARATSUBA_SQUARE_THRESHOLD;

final private static java.lang.Object TOOM_COOK_SQUARE_THRESHOLD;

final static java.lang.Object BURNIKEL_ZIEGLER_THRESHOLD;

final static java.lang.Object BURNIKEL_ZIEGLER_OFFSET;

final private static java.lang.Object SCHOENHAGE_BASE_CONVERSION_THRESHOLD;

final private static java.lang.Object MULTIPLY_SQUARE_THRESHOLD;

final private static java.lang.Object MONTGOMERY_INTRINSIC_THRESHOLD;

private static java.lang.Object bitsPerDigit;

final private static java.lang.Object SMALL_PRIME_THRESHOLD;

final private static java.lang.Object DEFAULT_PRIME_CERTAINTY;

final private static java.lang.Object SMALL_PRIME_PRODUCT;

final private static java.lang.Object MAX_CONSTANT;

private static java.lang.Object posConst;

private static java.lang.Object negConst;

private static volatile java.lang.Object powerCache;

final private static java.lang.Object logCache;

final private static java.lang.Object LOG_TWO;

final public static java.lang.Object ZERO;

final public static java.lang.Object ONE;

final private static java.lang.Object TWO;

final private static java.lang.Object NEGATIVE_ONE;

final public static java.lang.Object TEN;

static java.lang.Object bnExpModThreshTable;

private static java.lang.Object zeros;

private static java.lang.Object digitsPerLong;

private static java.lang.Object longRadix;

private static java.lang.Object digitsPerInt;

private static java.lang.Object intRadix;

final private static java.lang.Object serialVersionUID;

final private static java.lang.Object serialPersistentFields;

public void <init>(java.lang.Object arg0)
{

}

private void <init>(java.lang.Object arg0)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

private void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private int parseInt(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static void destructiveMulAdd(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

public void <init>(java.lang.Object arg0)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static byte[] randomBits(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

public static java.math.BigInteger probablePrime(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.math.BigInteger smallPrime(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static java.math.BigInteger largePrime(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

public java.math.BigInteger nextProbablePrime()
{

}

private static int getPrimeSearchLen(java.lang.Object arg0)
{

}

boolean primeToCertainty(java.lang.Object arg0, java.lang.Object arg1)
{

}

private boolean passesLucasLehmer()
{

}

private static int jacobiSymbol(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.math.BigInteger lucasLehmerSequence(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private boolean passesMillerRabin(java.lang.Object arg0, java.lang.Object arg1)
{

}

void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

private void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

private void checkRange()
{

}

private static void reportOverflow()
{

}

public static java.math.BigInteger valueOf(java.lang.Object arg0)
{

}

private void <init>(java.lang.Object arg0)
{

}

private static java.math.BigInteger valueOf(java.lang.Object arg0)
{

}

public java.math.BigInteger add(java.lang.Object arg0)
{

}

java.math.BigInteger add(java.lang.Object arg0)
{

}

private static int[] add(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int[] add(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int[] subtract(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int[] subtract(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.math.BigInteger subtract(java.lang.Object arg0)
{

}

private static int[] subtract(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.math.BigInteger multiply(java.lang.Object arg0)
{

}

private static java.math.BigInteger multiplyByInt(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.math.BigInteger multiply(java.lang.Object arg0)
{

}

private static int[] multiplyToLen(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

private static java.math.BigInteger multiplyKaratsuba(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.math.BigInteger multiplyToomCook3(java.lang.Object arg0, java.lang.Object arg1)
{

}

private java.math.BigInteger getToomSlice(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private java.math.BigInteger exactDivideBy3()
{

}

private java.math.BigInteger getLower(java.lang.Object arg0)
{

}

private java.math.BigInteger getUpper(java.lang.Object arg0)
{

}

private java.math.BigInteger square()
{

}

final private static int[] squareToLen(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static void implSquareToLenChecks(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3) throws java.lang.RuntimeException
{

}

final private static int[] implSquareToLen(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private java.math.BigInteger squareKaratsuba()
{

}

private java.math.BigInteger squareToomCook3()
{

}

public java.math.BigInteger divide(java.lang.Object arg0)
{

}

private java.math.BigInteger divideKnuth(java.lang.Object arg0)
{

}

public java.math.BigInteger[] divideAndRemainder(java.lang.Object arg0)
{

}

private java.math.BigInteger[] divideAndRemainderKnuth(java.lang.Object arg0)
{

}

public java.math.BigInteger remainder(java.lang.Object arg0)
{

}

private java.math.BigInteger remainderKnuth(java.lang.Object arg0)
{

}

private java.math.BigInteger divideBurnikelZiegler(java.lang.Object arg0)
{

}

private java.math.BigInteger remainderBurnikelZiegler(java.lang.Object arg0)
{

}

private java.math.BigInteger[] divideAndRemainderBurnikelZiegler(java.lang.Object arg0)
{

}

public java.math.BigInteger pow(java.lang.Object arg0)
{

}

public java.math.BigInteger gcd(java.lang.Object arg0)
{

}

static int bitLengthForInt(java.lang.Object arg0)
{

}

private static int[] leftShift(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static void primitiveRightShift(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static void primitiveLeftShift(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static int bitLength(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.math.BigInteger abs()
{

}

public java.math.BigInteger negate()
{

}

public int signum()
{

}

public java.math.BigInteger mod(java.lang.Object arg0)
{

}

public java.math.BigInteger modPow(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int[] montgomeryMultiply(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5)
{

}

private static int[] montgomerySquare(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

private static void implMontgomeryMultiplyChecks(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4) throws java.lang.RuntimeException
{

}

private static int[] materialize(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int[] implMontgomeryMultiply(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5)
{

}

private static int[] implMontgomerySquare(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

private java.math.BigInteger oddModPow(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static int[] montReduce(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private static int intArrayCmpToLen(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static int subN(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static int mulAdd(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

private static void implMulAddCheck(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

private static int implMulAdd(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

static int addOne(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private java.math.BigInteger modPow2(java.lang.Object arg0, java.lang.Object arg1)
{

}

private java.math.BigInteger mod2(java.lang.Object arg0)
{

}

public java.math.BigInteger modInverse(java.lang.Object arg0)
{

}

public java.math.BigInteger shiftLeft(java.lang.Object arg0)
{

}

private static int[] shiftLeft(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.math.BigInteger shiftRight(java.lang.Object arg0)
{

}

private java.math.BigInteger shiftRightImpl(java.lang.Object arg0)
{

}

int[] javaIncrement(java.lang.Object arg0)
{

}

public java.math.BigInteger and(java.lang.Object arg0)
{

}

public java.math.BigInteger or(java.lang.Object arg0)
{

}

public java.math.BigInteger xor(java.lang.Object arg0)
{

}

public java.math.BigInteger not()
{

}

public java.math.BigInteger andNot(java.lang.Object arg0)
{

}

public boolean testBit(java.lang.Object arg0)
{

}

public java.math.BigInteger setBit(java.lang.Object arg0)
{

}

public java.math.BigInteger clearBit(java.lang.Object arg0)
{

}

public java.math.BigInteger flipBit(java.lang.Object arg0)
{

}

public int getLowestSetBit()
{

}

public int bitLength()
{

}

public int bitCount()
{

}

public boolean isProbablePrime(java.lang.Object arg0)
{

}

public int compareTo(java.lang.Object arg0)
{

}

final int compareMagnitude(java.lang.Object arg0)
{

}

final int compareMagnitude(java.lang.Object arg0)
{

}

public boolean equals(java.lang.Object arg0)
{

}

public java.math.BigInteger min(java.lang.Object arg0)
{

}

public java.math.BigInteger max(java.lang.Object arg0)
{

}

public int hashCode()
{

}

public java.lang.String toString(java.lang.Object arg0)
{

}

private java.lang.String smallToString(java.lang.Object arg0)
{

}

private static void toString(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private static java.math.BigInteger getRadixConversionCache(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.lang.String toString()
{

}

public byte[] toByteArray()
{

}

public int intValue()
{

}

public long longValue()
{

}

public float floatValue()
{

}

public double doubleValue()
{

}

private static int[] stripLeadingZeroInts(java.lang.Object arg0)
{

}

private static int[] trustedStripLeadingZeroInts(java.lang.Object arg0)
{

}

private static int[] stripLeadingZeroBytes(java.lang.Object arg0)
{

}

private static int[] makePositive(java.lang.Object arg0)
{

}

private static int[] makePositive(java.lang.Object arg0)
{

}

private int intLength()
{

}

private int signBit()
{

}

private int signInt()
{

}

private int getInt(java.lang.Object arg0)
{

}

private int firstNonzeroIntNum()
{

}

private void readObject(java.lang.Object arg0) throws java.io.IOException, java.lang.ClassNotFoundException
{

}

private void writeObject(java.lang.Object arg0) throws java.io.IOException
{

}

private byte[] magSerializedForm()
{

}

public long longValueExact()
{

}

public int intValueExact()
{

}

public short shortValueExact()
{

}

public byte byteValueExact()
{

}

static void <clinit>()
{

}


}
