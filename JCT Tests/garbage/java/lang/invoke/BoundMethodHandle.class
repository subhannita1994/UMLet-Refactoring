package java.lang.invoke;
abstract class BoundMethodHandle
extends java.lang.invoke.MethodHandle
{
static class Factory
{
final static java.lang.Object JLO_SIG;

final static java.lang.Object JLS_SIG;

final static java.lang.Object JLC_SIG;

final static java.lang.Object MH;

final static java.lang.Object MH_SIG;

final static java.lang.Object BMH;

final static java.lang.Object BMH_SIG;

final static java.lang.Object SPECIES_DATA;

final static java.lang.Object SPECIES_DATA_SIG;

final static java.lang.Object STABLE_SIG;

final static java.lang.Object SPECIES_PREFIX_NAME;

final static java.lang.Object SPECIES_PREFIX_PATH;

final static java.lang.Object BMHSPECIES_DATA_EWI_SIG;

final static java.lang.Object BMHSPECIES_DATA_GFC_SIG;

final static java.lang.Object MYSPECIES_DATA_SIG;

final static java.lang.Object VOID_SIG;

final static java.lang.Object INT_SIG;

final static java.lang.Object SIG_INCIPIT;

final static java.lang.Object E_THROWABLE;

final static java.lang.Object CLASS_CACHE;

void <init>()
{

}

static java.lang.Class getConcreteBMHClass(java.lang.Object arg0)
{

}

static java.lang.Class generateConcreteBMHClass(java.lang.Object arg0)
{

}

private static int typeLoadOp(java.lang.Object arg0)
{

}

private static void emitPushFields(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.String typeSig(java.lang.Object arg0)
{

}

private static java.lang.invoke.MethodHandle makeGetter(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.invoke.MethodHandle[] makeGetters(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.invoke.MethodHandle[] makeCtors(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.invoke.LambdaForm.NamedFunction[] makeNominalGetters(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData getSpeciesDataFromConcreteBMHClass(java.lang.Object arg0)
{

}

static void setSpeciesDataToConcreteBMHClass(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.lang.String makeFieldName(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.lang.String makeSignature(java.lang.Object arg0, java.lang.Object arg1)
{

}

static java.lang.invoke.MethodHandle makeCbmhCtor(java.lang.Object arg0, java.lang.Object arg1)
{

}

static void <clinit>()
{

}


}

static class SpeciesData
{
final private java.lang.Object typeChars;

final private java.lang.Object typeCodes;

final private java.lang.Object clazz;

final private java.lang.Object constructor;

final private java.lang.Object getters;

final private java.lang.Object nominalGetters;

final private java.lang.Object extensions;

final static java.lang.Object EMPTY;

final private static java.lang.Object CACHE;

final private static java.lang.Object INIT_DONE;

int fieldCount()
{

}

java.lang.invoke.LambdaForm.BasicType fieldType(java.lang.Object arg0)
{

}

char fieldTypeChar(java.lang.Object arg0)
{

}

java.lang.Object fieldSignature()
{

}

public java.lang.Class fieldHolder()
{

}

public java.lang.String toString()
{

}

java.lang.invoke.LambdaForm.NamedFunction getterFunction(java.lang.Object arg0)
{

}

java.lang.invoke.LambdaForm.NamedFunction[] getterFunctions()
{

}

java.lang.invoke.MethodHandle[] getterHandles()
{

}

java.lang.invoke.MethodHandle constructor()
{

}

void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

private void initForBootstrap()
{

}

java.lang.invoke.BoundMethodHandle.SpeciesData extendWith(java.lang.Object arg0)
{

}

java.lang.invoke.BoundMethodHandle.SpeciesData extendWith(java.lang.Object arg0)
{

}

private static java.lang.invoke.BoundMethodHandle.SpeciesData get(java.lang.Object arg0)
{

}

static boolean speciesDataCachePopulated()
{

}

static void <clinit>()
{

}


}

final private static class Species_L
extends java.lang.invoke.BoundMethodHandle
{
final java.lang.Object argL0;

final static java.lang.Object SPECIES_DATA;

private void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.BoundMethodHandle.SpeciesData speciesData()
{

}

int fieldCount()
{

}

static java.lang.invoke.BoundMethodHandle make(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

final java.lang.invoke.BoundMethodHandle copyWith(java.lang.Object arg0, java.lang.Object arg1)
{

}

final java.lang.invoke.BoundMethodHandle copyWithExtendL(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

final java.lang.invoke.BoundMethodHandle copyWithExtendI(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

final java.lang.invoke.BoundMethodHandle copyWithExtendJ(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

final java.lang.invoke.BoundMethodHandle copyWithExtendF(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

final java.lang.invoke.BoundMethodHandle copyWithExtendD(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static void <clinit>()
{

}


}

final private static java.lang.Object FIELD_COUNT_THRESHOLD;

final private static java.lang.Object FORM_EXPRESSION_THRESHOLD;

final private static java.lang.Object LOOKUP;

final static java.lang.Object SPECIES_DATA;

final private static java.lang.Object SPECIES_DATA_CACHE;

void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

static java.lang.invoke.BoundMethodHandle bindSingle(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

java.lang.invoke.LambdaFormEditor editor()
{

}

static java.lang.invoke.BoundMethodHandle bindSingle(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentL(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentI(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentJ(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentF(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentD(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.BoundMethodHandle rebind()
{

}

private boolean tooComplex()
{

}

static java.lang.invoke.BoundMethodHandle makeReinvoker(java.lang.Object arg0)
{

}

abstract java.lang.invoke.BoundMethodHandle.SpeciesData speciesData()
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData speciesData(java.lang.Object arg0)
{

}

abstract int fieldCount()
{

}

java.lang.Object internalProperties()
{

}

final java.lang.Object internalValues()
{

}

final java.lang.Object arg(java.lang.Object arg0)
{

}

abstract java.lang.invoke.BoundMethodHandle copyWith(java.lang.Object arg0, java.lang.Object arg1)
{

}

abstract java.lang.invoke.BoundMethodHandle copyWithExtendL(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

abstract java.lang.invoke.BoundMethodHandle copyWithExtendI(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

abstract java.lang.invoke.BoundMethodHandle copyWithExtendJ(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

abstract java.lang.invoke.BoundMethodHandle copyWithExtendF(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

abstract java.lang.invoke.BoundMethodHandle copyWithExtendD(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData getSpeciesData(java.lang.Object arg0)
{

}

private static java.lang.invoke.BoundMethodHandle.SpeciesData checkCache(java.lang.Object arg0, java.lang.Object arg1)
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData speciesData_L()
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData speciesData_LL()
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData speciesData_LLL()
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData speciesData_LLLL()
{

}

static java.lang.invoke.BoundMethodHandle.SpeciesData speciesData_LLLLL()
{

}

static void <clinit>()
{

}


}
