package java.lang.invoke;
class LambdaFormEditor
{
final private static class Transform
extends java.lang.ref.SoftReference
{
final private static class Kind
extends java.lang.Enum
{
final public static java.lang.Object NO_KIND;

final public static java.lang.Object BIND_ARG;

final public static java.lang.Object ADD_ARG;

final public static java.lang.Object DUP_ARG;

final public static java.lang.Object SPREAD_ARGS;

final public static java.lang.Object FILTER_ARG;

final public static java.lang.Object FILTER_RETURN;

final public static java.lang.Object FILTER_RETURN_TO_ZERO;

final public static java.lang.Object COLLECT_ARGS;

final public static java.lang.Object COLLECT_ARGS_TO_VOID;

final public static java.lang.Object COLLECT_ARGS_TO_ARRAY;

final public static java.lang.Object FOLD_ARGS;

final public static java.lang.Object FOLD_ARGS_TO_VOID;

final public static java.lang.Object PERMUTE_ARGS;

public static java.lang.invoke.LambdaFormEditor.Transform.Kind[] values()
{

}

public static java.lang.invoke.LambdaFormEditor.Transform.Kind valueOf(java.lang.Object arg0)
{

}

private void <init>()
{

}

static void <clinit>()
{

}


}

final java.lang.Object packedBytes;

final java.lang.Object fullBytes;

final private static java.lang.Object STRESS_TEST;

final private static java.lang.Object PACKED_BYTE_SIZE;

final private static java.lang.Object PACKED_BYTE_MASK;

final private static java.lang.Object PACKED_BYTE_MAX_LENGTH;

final private static java.lang.Object NO_BYTES;

private static long packedBytes(java.lang.Object arg0)
{

}

private static long packedBytes(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static long packedBytes(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private static long packedBytes(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private static boolean inRange(java.lang.Object arg0)
{

}

private static byte[] fullBytes(java.lang.Object arg0)
{

}

private byte byteAt(java.lang.Object arg0)
{

}

java.lang.invoke.LambdaFormEditor.Transform.Kind kind()
{

}

private void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private void <init>(java.lang.Object arg0)
{

}

private void <init>(java.lang.Object arg0)
{

}

private static byte bval(java.lang.Object arg0)
{

}

private static byte bval(java.lang.Object arg0)
{

}

static java.lang.invoke.LambdaFormEditor.Transform of(java.lang.Object arg0, java.lang.Object arg1)
{

}

static java.lang.invoke.LambdaFormEditor.Transform of(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.invoke.LambdaFormEditor.Transform of(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

static java.lang.invoke.LambdaFormEditor.Transform of(java.lang.Object arg0, java.lang.Object arg1)
{

}

static java.lang.invoke.LambdaFormEditor.Transform of(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.invoke.LambdaFormEditor.Transform of(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private static java.lang.invoke.LambdaFormEditor.Transform ofBothArrays(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.LambdaFormEditor.Transform withResult(java.lang.Object arg0)
{

}

public boolean equals(java.lang.Object arg0)
{

}

public boolean equals(java.lang.Object arg0)
{

}

public int hashCode()
{

}

public java.lang.String toString()
{

}

static void <clinit>()
{

}


}

final java.lang.Object lambdaForm;

final private static java.lang.Object MIN_CACHE_ARRAY_SIZE;

final private static java.lang.Object MAX_CACHE_ARRAY_SIZE;

private void <init>(java.lang.Object arg0)
{

}

static java.lang.invoke.LambdaFormEditor lambdaFormEditor(java.lang.Object arg0)
{

}

private java.lang.invoke.LambdaForm getInCache(java.lang.Object arg0)
{

}

private java.lang.invoke.LambdaForm putInCache(java.lang.Object arg0, java.lang.Object arg1)
{

}

private java.lang.invoke.LambdaFormBuffer buffer()
{

}

private java.lang.invoke.BoundMethodHandle.SpeciesData oldSpeciesData()
{

}

private java.lang.invoke.BoundMethodHandle.SpeciesData newSpeciesData(java.lang.Object arg0)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentL(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentI(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentJ(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentF(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.BoundMethodHandle bindArgumentD(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

private java.lang.invoke.MethodType bindArgumentType(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.LambdaForm bindArgumentForm(java.lang.Object arg0)
{

}

java.lang.invoke.LambdaForm addArgumentForm(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.LambdaForm dupArgumentForm(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.LambdaForm spreadArgumentsForm(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.LambdaForm collectArgumentsForm(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.LambdaForm collectArgumentArrayForm(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.LambdaForm filterArgumentForm(java.lang.Object arg0, java.lang.Object arg1)
{

}

private java.lang.invoke.LambdaForm makeArgumentCombinationForm(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

java.lang.invoke.LambdaForm filterReturnForm(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.lang.invoke.LambdaForm foldArgumentsForm(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.invoke.LambdaForm permuteArgumentsForm(java.lang.Object arg0, java.lang.Object arg1)
{

}

static boolean permutedTypesMatch(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

static void <clinit>()
{

}


}
