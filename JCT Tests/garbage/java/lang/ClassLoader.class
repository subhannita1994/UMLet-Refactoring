package java.lang;
abstract public class ClassLoader
{
static class NativeLibrary
{
java.lang.Object handle;

private java.lang.Object jniVersion;

final private java.lang.Object fromClass;

java.lang.Object name;

java.lang.Object isBuiltin;

java.lang.Object loaded;

native void load(java.lang.Object arg0, java.lang.Object arg1)
{

}

native long find(java.lang.Object arg0)
{

}

native void unload(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

protected void finalize()
{

}

static java.lang.Class getFromClass()
{

}


}

private static class ParallelLoaders
{
final private static java.lang.Object loaderTypes;

private void <init>()
{

}

static boolean register(java.lang.Object arg0)
{

}

static boolean isRegistered(java.lang.Object arg0)
{

}

static void <clinit>()
{

}


}

final private java.lang.Object parent;

final private java.lang.Object parallelLockMap;

final private java.lang.Object package2certs;

final private static java.lang.Object nocerts;

final private java.lang.Object classes;

final private java.lang.Object defaultDomain;

final private java.lang.Object domains;

final private java.lang.Object packages;

private static java.lang.Object scl;

private static java.lang.Object sclSet;

private static java.lang.Object loadedLibraryNames;

private static java.lang.Object systemNativeLibraries;

private java.lang.Object nativeLibraries;

private static java.lang.Object nativeLibraryContext;

private static java.lang.Object usr_paths;

private static java.lang.Object sys_paths;

final java.lang.Object assertionLock;

private java.lang.Object defaultAssertionStatus;

private java.lang.Object packageAssertionStatus;

java.lang.Object classAssertionStatus;

native private static void registerNatives()
{

}

void addClass(java.lang.Object arg0)
{

}

private static java.lang.Void checkCreateClassLoader()
{

}

private void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

protected void <init>(java.lang.Object arg0)
{

}

protected void <init>()
{

}

public java.lang.Class loadClass(java.lang.Object arg0) throws java.lang.ClassNotFoundException
{

}

protected java.lang.Class loadClass(java.lang.Object arg0, java.lang.Object arg1) throws java.lang.ClassNotFoundException
{

}

protected java.lang.Object getClassLoadingLock(java.lang.Object arg0)
{

}

private java.lang.Class loadClassInternal(java.lang.Object arg0) throws java.lang.ClassNotFoundException
{

}

private void checkPackageAccess(java.lang.Object arg0, java.lang.Object arg1)
{

}

protected java.lang.Class findClass(java.lang.Object arg0) throws java.lang.ClassNotFoundException
{

}

final protected java.lang.Class defineClass(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.lang.ClassFormatError
{

}

final protected java.lang.Class defineClass(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3) throws java.lang.ClassFormatError
{

}

private java.security.ProtectionDomain preDefineClass(java.lang.Object arg0, java.lang.Object arg1)
{

}

private java.lang.String defineClassSourceLocation(java.lang.Object arg0)
{

}

private void postDefineClass(java.lang.Object arg0, java.lang.Object arg1)
{

}

final protected java.lang.Class defineClass(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4) throws java.lang.ClassFormatError
{

}

final protected java.lang.Class defineClass(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.lang.ClassFormatError
{

}

native private java.lang.Class defineClass0(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

native private java.lang.Class defineClass1(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5)
{

}

native private java.lang.Class defineClass2(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5)
{

}

private boolean checkName(java.lang.Object arg0)
{

}

private void checkCerts(java.lang.Object arg0, java.lang.Object arg1)
{

}

private boolean compareCerts(java.lang.Object arg0, java.lang.Object arg1)
{

}

final protected void resolveClass(java.lang.Object arg0)
{

}

native private void resolveClass0(java.lang.Object arg0)
{

}

final protected java.lang.Class findSystemClass(java.lang.Object arg0) throws java.lang.ClassNotFoundException
{

}

private java.lang.Class findBootstrapClassOrNull(java.lang.Object arg0)
{

}

native private java.lang.Class findBootstrapClass(java.lang.Object arg0)
{

}

final protected java.lang.Class findLoadedClass(java.lang.Object arg0)
{

}

final native private java.lang.Class findLoadedClass0(java.lang.Object arg0)
{

}

final protected void setSigners(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.net.URL getResource(java.lang.Object arg0)
{

}

public java.util.Enumeration getResources(java.lang.Object arg0) throws java.io.IOException
{

}

protected java.net.URL findResource(java.lang.Object arg0)
{

}

protected java.util.Enumeration findResources(java.lang.Object arg0) throws java.io.IOException
{

}

protected static boolean registerAsParallelCapable()
{

}

public static java.net.URL getSystemResource(java.lang.Object arg0)
{

}

public static java.util.Enumeration getSystemResources(java.lang.Object arg0) throws java.io.IOException
{

}

private static java.net.URL getBootstrapResource(java.lang.Object arg0)
{

}

private static java.util.Enumeration getBootstrapResources(java.lang.Object arg0) throws java.io.IOException
{

}

static sun.misc.URLClassPath getBootstrapClassPath()
{

}

public java.io.InputStream getResourceAsStream(java.lang.Object arg0)
{

}

public static java.io.InputStream getSystemResourceAsStream(java.lang.Object arg0)
{

}

final public java.lang.ClassLoader getParent()
{

}

public static java.lang.ClassLoader getSystemClassLoader()
{

}

private static synchronized void initSystemClassLoader()
{

}

boolean isAncestor(java.lang.Object arg0)
{

}

private static boolean needsClassLoaderPermissionCheck(java.lang.Object arg0, java.lang.Object arg1)
{

}

static java.lang.ClassLoader getClassLoader(java.lang.Object arg0)
{

}

static void checkClassLoaderPermission(java.lang.Object arg0, java.lang.Object arg1)
{

}

protected java.lang.Package definePackage(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6, java.lang.Object arg7) throws java.lang.IllegalArgumentException
{

}

protected java.lang.Package getPackage(java.lang.Object arg0)
{

}

protected java.lang.Package[] getPackages()
{

}

protected java.lang.String findLibrary(java.lang.Object arg0)
{

}

private static java.lang.String[] initializePath(java.lang.Object arg0)
{

}

static void loadLibrary(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

native private static java.lang.String findBuiltinLib(java.lang.Object arg0)
{

}

private static boolean loadLibrary0(java.lang.Object arg0, java.lang.Object arg1)
{

}

static long findNative(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void setDefaultAssertionStatus(java.lang.Object arg0)
{

}

public void setPackageAssertionStatus(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void setClassAssertionStatus(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void clearAssertionStatus()
{

}

boolean desiredAssertionStatus(java.lang.Object arg0)
{

}

private void initializeJavaAssertionMaps()
{

}

native private static java.lang.AssertionStatusDirectives retrieveDirectives()
{

}

static void <clinit>()
{

}


}
