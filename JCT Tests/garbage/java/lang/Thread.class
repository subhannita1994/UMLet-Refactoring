package java.lang;
public class Thread
implements java.lang.Runnable
{
private static class Caches
{
final static java.lang.Object subclassAudits;

final static java.lang.Object subclassAuditsQueue;

private void <init>()
{

}

static void <clinit>()
{

}


}

final public static class State
extends java.lang.Enum
{
final public static java.lang.Object NEW;

final public static java.lang.Object RUNNABLE;

final public static java.lang.Object BLOCKED;

final public static java.lang.Object WAITING;

final public static java.lang.Object TIMED_WAITING;

final public static java.lang.Object TERMINATED;

public static java.lang.Thread.State[] values()
{

}

public static java.lang.Thread.State valueOf(java.lang.Object arg0)
{

}

private void <init>()
{

}

static void <clinit>()
{

}


}

abstract public static interface UncaughtExceptionHandler
{
abstract public void uncaughtException(java.lang.Object arg0, java.lang.Object arg1)
{

}


}

static class WeakClassKey
extends java.lang.ref.WeakReference
{
final private java.lang.Object hash;

void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

public int hashCode()
{

}

public boolean equals(java.lang.Object arg0)
{

}


}

private volatile java.lang.Object name;

private java.lang.Object priority;

private java.lang.Object threadQ;

private java.lang.Object eetop;

private java.lang.Object single_step;

private java.lang.Object daemon;

private java.lang.Object stillborn;

private java.lang.Object target;

private java.lang.Object group;

private java.lang.Object contextClassLoader;

private java.lang.Object inheritedAccessControlContext;

private static java.lang.Object threadInitNumber;

java.lang.Object threadLocals;

java.lang.Object inheritableThreadLocals;

private java.lang.Object stackSize;

private java.lang.Object nativeParkEventPointer;

private java.lang.Object tid;

private static java.lang.Object threadSeqNumber;

private volatile java.lang.Object threadStatus;

volatile java.lang.Object parkBlocker;

private volatile java.lang.Object blocker;

final private java.lang.Object blockerLock;

final public static java.lang.Object MIN_PRIORITY;

final public static java.lang.Object NORM_PRIORITY;

final public static java.lang.Object MAX_PRIORITY;

final private static java.lang.Object EMPTY_STACK_TRACE;

final private static java.lang.Object SUBCLASS_IMPLEMENTATION_PERMISSION;

private volatile java.lang.Object uncaughtExceptionHandler;

private static volatile java.lang.Object defaultUncaughtExceptionHandler;

java.lang.Object threadLocalRandomSeed;

java.lang.Object threadLocalRandomProbe;

java.lang.Object threadLocalRandomSecondarySeed;

native private static void registerNatives()
{

}

private static synchronized int nextThreadNum()
{

}

private static synchronized long nextThreadID()
{

}

void blockedOn(java.lang.Object arg0)
{

}

native public static java.lang.Thread currentThread()
{

}

native public static void yield()
{

}

native public static void sleep(java.lang.Object arg0) throws java.lang.InterruptedException
{

}

public static void sleep(java.lang.Object arg0, java.lang.Object arg1) throws java.lang.InterruptedException
{

}

private void init(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

private void init(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
{

}

public void <init>()
{

}

public void <init>(java.lang.Object arg0)
{

}

void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void <init>(java.lang.Object arg0)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

public void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

public synchronized void start()
{

}

native private void start0()
{

}

public void run()
{

}

private void exit()
{

}

final public void stop()
{

}

final public synchronized void stop(java.lang.Object arg0)
{

}

public void interrupt()
{

}

public static boolean interrupted()
{

}

public boolean isInterrupted()
{

}

native private boolean isInterrupted(java.lang.Object arg0)
{

}

public void destroy()
{

}

final native public boolean isAlive()
{

}

final public void suspend()
{

}

final public void resume()
{

}

final public void setPriority(java.lang.Object arg0)
{

}

final public int getPriority()
{

}

final public synchronized void setName(java.lang.Object arg0)
{

}

final public java.lang.String getName()
{

}

final public java.lang.ThreadGroup getThreadGroup()
{

}

public static int activeCount()
{

}

public static int enumerate(java.lang.Object arg0)
{

}

native public int countStackFrames()
{

}

final public synchronized void join(java.lang.Object arg0) throws java.lang.InterruptedException
{

}

final public synchronized void join(java.lang.Object arg0, java.lang.Object arg1) throws java.lang.InterruptedException
{

}

final public void join() throws java.lang.InterruptedException
{

}

public static void dumpStack()
{

}

final public void setDaemon(java.lang.Object arg0)
{

}

final public boolean isDaemon()
{

}

final public void checkAccess()
{

}

public java.lang.String toString()
{

}

public java.lang.ClassLoader getContextClassLoader()
{

}

public void setContextClassLoader(java.lang.Object arg0)
{

}

native public static boolean holdsLock(java.lang.Object arg0)
{

}

public java.lang.StackTraceElement[] getStackTrace()
{

}

public static java.util.Map getAllStackTraces()
{

}

private static boolean isCCLOverridden(java.lang.Object arg0)
{

}

private static boolean auditSubclass(java.lang.Object arg0)
{

}

native private static java.lang.StackTraceElement[][] dumpThreads(java.lang.Object arg0)
{

}

native private static java.lang.Thread[] getThreads()
{

}

public long getId()
{

}

public java.lang.Thread.State getState()
{

}

public static void setDefaultUncaughtExceptionHandler(java.lang.Object arg0)
{

}

public static java.lang.Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()
{

}

public java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()
{

}

public void setUncaughtExceptionHandler(java.lang.Object arg0)
{

}

private void dispatchUncaughtException(java.lang.Object arg0)
{

}

static void processQueue(java.lang.Object arg0, java.lang.Object arg1)
{

}

native private void setPriority0(java.lang.Object arg0)
{

}

native private void stop0(java.lang.Object arg0)
{

}

native private void suspend0()
{

}

native private void resume0()
{

}

native private void interrupt0()
{

}

native private void setNativeName(java.lang.Object arg0)
{

}

static void <clinit>()
{

}


}
