package java.lang.reflect;
public class AccessibleObject
implements java.lang.reflect.AnnotatedElement
{
final private static java.lang.Object ACCESS_PERMISSION;

java.lang.Object override;

final static java.lang.Object reflectionFactory;

volatile java.lang.Object securityCheckCache;

public static void setAccessible(java.lang.Object arg0, java.lang.Object arg1) throws java.lang.SecurityException
{

}

public void setAccessible(java.lang.Object arg0) throws java.lang.SecurityException
{

}

private static void setAccessible0(java.lang.Object arg0, java.lang.Object arg1) throws java.lang.SecurityException
{

}

public boolean isAccessible()
{

}

protected void <init>()
{

}

public java.lang.annotation.Annotation getAnnotation(java.lang.Object arg0)
{

}

public boolean isAnnotationPresent(java.lang.Object arg0)
{

}

public java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Object arg0)
{

}

public java.lang.annotation.Annotation[] getAnnotations()
{

}

public java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Object arg0)
{

}

public java.lang.annotation.Annotation[] getDeclaredAnnotationsByType(java.lang.Object arg0)
{

}

public java.lang.annotation.Annotation[] getDeclaredAnnotations()
{

}

void checkAccess(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3) throws java.lang.IllegalAccessException
{

}

void slowCheckMemberAccess(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4) throws java.lang.IllegalAccessException
{

}

static void <clinit>()
{

}


}
