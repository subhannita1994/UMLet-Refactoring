package java.time.chrono;
final public class IsoChronology
extends java.time.chrono.AbstractChronology
implements java.io.Serializable
{
final public static java.lang.Object INSTANCE;

final private static java.lang.Object serialVersionUID;

private void <init>()
{

}

public java.lang.String getId()
{

}

public java.lang.String getCalendarType()
{

}

public java.time.LocalDate date(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3)
{

}

public java.time.LocalDate date(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

public java.time.LocalDate dateYearDay(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

public java.time.LocalDate dateYearDay(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.time.LocalDate dateEpochDay(java.lang.Object arg0)
{

}

public java.time.LocalDate date(java.lang.Object arg0)
{

}

public java.time.LocalDateTime localDateTime(java.lang.Object arg0)
{

}

public java.time.ZonedDateTime zonedDateTime(java.lang.Object arg0)
{

}

public java.time.ZonedDateTime zonedDateTime(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.time.LocalDate dateNow()
{

}

public java.time.LocalDate dateNow(java.lang.Object arg0)
{

}

public java.time.LocalDate dateNow(java.lang.Object arg0)
{

}

public boolean isLeapYear(java.lang.Object arg0)
{

}

public int prolepticYear(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.time.chrono.IsoEra eraOf(java.lang.Object arg0)
{

}

public java.util.List eras()
{

}

public java.time.LocalDate resolveDate(java.lang.Object arg0, java.lang.Object arg1)
{

}

void resolveProlepticMonth(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.time.LocalDate resolveYearOfEra(java.lang.Object arg0, java.lang.Object arg1)
{

}

java.time.LocalDate resolveYMD(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.time.temporal.ValueRange range(java.lang.Object arg0)
{

}

public java.time.Period period(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

java.lang.Object writeReplace()
{

}

private void readObject(java.lang.Object arg0) throws java.io.InvalidObjectException
{

}

static void <clinit>()
{

}


}
