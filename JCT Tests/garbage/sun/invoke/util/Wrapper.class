package sun.invoke.util;
final public class Wrapper
extends java.lang.Enum
{
abstract private static class Format
{
final static java.lang.Object SLOT_SHIFT;

final static java.lang.Object SIZE_SHIFT;

final static java.lang.Object KIND_SHIFT;

final static java.lang.Object SIGNED;

final static java.lang.Object UNSIGNED;

final static java.lang.Object FLOATING;

final static java.lang.Object SLOT_MASK;

final static java.lang.Object SIZE_MASK;

final static java.lang.Object INT;

final static java.lang.Object SHORT;

final static java.lang.Object BOOLEAN;

final static java.lang.Object CHAR;

final static java.lang.Object FLOAT;

final static java.lang.Object VOID;

final static java.lang.Object NUM_MASK;

private void <init>()
{

}

static int format(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static int signed(java.lang.Object arg0)
{

}

static int unsigned(java.lang.Object arg0)
{

}

static int floating(java.lang.Object arg0)
{

}

static int other(java.lang.Object arg0)
{

}

static void <clinit>()
{

}


}

final public static java.lang.Object BOOLEAN;

final public static java.lang.Object BYTE;

final public static java.lang.Object SHORT;

final public static java.lang.Object CHAR;

final public static java.lang.Object INT;

final public static java.lang.Object LONG;

final public static java.lang.Object FLOAT;

final public static java.lang.Object DOUBLE;

final public static java.lang.Object OBJECT;

final public static java.lang.Object VOID;

final private java.lang.Object wrapperType;

final private java.lang.Object primitiveType;

final private java.lang.Object basicTypeChar;

final private java.lang.Object zero;

final private java.lang.Object emptyArray;

final private java.lang.Object format;

final private java.lang.Object wrapperSimpleName;

final private java.lang.Object primitiveSimpleName;

final private static java.lang.Object FROM_PRIM;

final private static java.lang.Object FROM_WRAP;

final private static java.lang.Object FROM_CHAR;

public static sun.invoke.util.Wrapper[] values()
{

}

public static sun.invoke.util.Wrapper valueOf(java.lang.Object arg0)
{

}

private void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5)
{

}

public java.lang.String detailString()
{

}

public int bitWidth()
{

}

public int stackSlots()
{

}

public boolean isSingleWord()
{

}

public boolean isDoubleWord()
{

}

public boolean isNumeric()
{

}

public boolean isIntegral()
{

}

public boolean isSubwordOrInt()
{

}

public boolean isSigned()
{

}

public boolean isUnsigned()
{

}

public boolean isFloating()
{

}

public boolean isOther()
{

}

public boolean isConvertibleFrom(java.lang.Object arg0)
{

}

private static boolean checkConvertibleFrom()
{

}

public java.lang.Object zero()
{

}

public java.lang.Object zero(java.lang.Object arg0)
{

}

public static sun.invoke.util.Wrapper forPrimitiveType(java.lang.Object arg0)
{

}

static sun.invoke.util.Wrapper findPrimitiveType(java.lang.Object arg0)
{

}

public static sun.invoke.util.Wrapper forWrapperType(java.lang.Object arg0)
{

}

static sun.invoke.util.Wrapper findWrapperType(java.lang.Object arg0)
{

}

public static sun.invoke.util.Wrapper forBasicType(java.lang.Object arg0)
{

}

public static sun.invoke.util.Wrapper forBasicType(java.lang.Object arg0)
{

}

private static int hashPrim(java.lang.Object arg0)
{

}

private static int hashWrap(java.lang.Object arg0)
{

}

private static int hashChar(java.lang.Object arg0)
{

}

public java.lang.Class primitiveType()
{

}

public java.lang.Class wrapperType()
{

}

public java.lang.Class wrapperType(java.lang.Object arg0)
{

}

private static java.lang.ClassCastException newClassCastException(java.lang.Object arg0, java.lang.Object arg1)
{

}

public static java.lang.Class asWrapperType(java.lang.Object arg0)
{

}

public static java.lang.Class asPrimitiveType(java.lang.Object arg0)
{

}

public static boolean isWrapperType(java.lang.Object arg0)
{

}

public static boolean isPrimitiveType(java.lang.Object arg0)
{

}

public static char basicTypeChar(java.lang.Object arg0)
{

}

public char basicTypeChar()
{

}

public java.lang.String wrapperSimpleName()
{

}

public java.lang.String primitiveSimpleName()
{

}

public java.lang.Object cast(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.lang.Object convert(java.lang.Object arg0, java.lang.Object arg1)
{

}

private java.lang.Object convert(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2)
{

}

static java.lang.Class forceType(java.lang.Object arg0, java.lang.Object arg1)
{

}

public java.lang.Object wrap(java.lang.Object arg0)
{

}

public java.lang.Object wrap(java.lang.Object arg0)
{

}

private static java.lang.Number numberValue(java.lang.Object arg0)
{

}

private static boolean boolValue(java.lang.Object arg0)
{

}

private static java.lang.RuntimeException newIllegalArgumentException(java.lang.Object arg0, java.lang.Object arg1)
{

}

private static java.lang.RuntimeException newIllegalArgumentException(java.lang.Object arg0)
{

}

public java.lang.Object makeArray(java.lang.Object arg0)
{

}

public java.lang.Class arrayType()
{

}

public void copyArrayUnboxing(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

public void copyArrayBoxing(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4)
{

}

static void <clinit>()
{

}


}
