package sun.reflect;
abstract public interface LangReflectAccess
{
abstract public java.lang.reflect.Field newField(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6)
{

}

abstract public java.lang.reflect.Method newMethod(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6, java.lang.Object arg7, java.lang.Object arg8, java.lang.Object arg9, java.lang.Object arg10)
{

}

abstract public java.lang.reflect.Constructor newConstructor(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6, java.lang.Object arg7)
{

}

abstract public sun.reflect.MethodAccessor getMethodAccessor(java.lang.Object arg0)
{

}

abstract public void setMethodAccessor(java.lang.Object arg0, java.lang.Object arg1)
{

}

abstract public sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.Object arg0)
{

}

abstract public void setConstructorAccessor(java.lang.Object arg0, java.lang.Object arg1)
{

}

abstract public byte[] getExecutableTypeAnnotationBytes(java.lang.Object arg0)
{

}

abstract public int getConstructorSlot(java.lang.Object arg0)
{

}

abstract public java.lang.String getConstructorSignature(java.lang.Object arg0)
{

}

abstract public byte[] getConstructorAnnotations(java.lang.Object arg0)
{

}

abstract public byte[] getConstructorParameterAnnotations(java.lang.Object arg0)
{

}

abstract public java.lang.reflect.Method copyMethod(java.lang.Object arg0)
{

}

abstract public java.lang.reflect.Field copyField(java.lang.Object arg0)
{

}

abstract public java.lang.reflect.Constructor copyConstructor(java.lang.Object arg0)
{

}


}
