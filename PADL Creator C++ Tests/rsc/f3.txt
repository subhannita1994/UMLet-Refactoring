C++ Parser Version 0.1: Reading from file cpoint3.cpp . . .
->translation_unit( class ,  ) 0
-> external_declaration( class , ; ) 1
->  declaration( class , ; ) 5
->   declaration_specifiers( class , } ) 7
->    class_specifier( class CPoint , } ) 20
->     member_declaration( public , : ) 24
->      access_specifier( public , public ) 23
->     member_declaration( CPoint , ; ) 24
->      ctor_definition( CPoint , ; ) 41
->       dtor_ctor_decl_spec( CPoint , : ) 39
->       ctor_declarator( CPoint , ) ) 43
->        qualified_id( CPoint , CPoint ) 11
->     member_declaration( CPoint , ; ) 24
->      ctor_definition( CPoint , ; ) 41
->       dtor_ctor_decl_spec( CPoint , ; ) 39
->       ctor_declarator( CPoint , ) ) 43
->        qualified_id( CPoint , CPoint ) 11
->        parameter_list( double , y ) 48
->         parameter_declaration_list( double , y ) 49
->          parameter_declaration( double , x ) 50
->           declaration_specifiers( double , double ) 7
->            builtin_type_specifier( double , double ) 16
->           declarator( x , x ) 33
->            direct_declarator( x , x ) 34
->             qualified_id( x , x ) 11
->          parameter_declaration( double , y ) 50
->           declaration_specifiers( double , double ) 7
->            builtin_type_specifier( double , double ) 16
->           declarator( y , y ) 33
->            direct_declarator( y , y ) 34
->             qualified_id( y , y ) 11
->     member_declaration( double , ; ) 24
->      function_definition( double , ; ) 2
->       declaration_specifiers( double , double ) 7
->        builtin_type_specifier( double , double ) 16
->       function_declarator( lire_x , ) ) 37
->        function_direct_declarator( lire_x , ) ) 38
->         qualified_id( lire_x , lire_x ) 11
->       func_decl_def( ; , ; ) 3
->     member_declaration( double , ; ) 24
->      function_definition( double , ; ) 2
->       declaration_specifiers( double , double ) 7
->        builtin_type_specifier( double , double ) 16
->       function_declarator( lire_y , ) ) 37
->        function_direct_declarator( lire_y , ) ) 38
->         qualified_id( lire_y , lire_y ) 11
->       func_decl_def( ; , ; ) 3
->     member_declaration( void , ; ) 24
->      function_definition( void , ; ) 2
->       declaration_specifiers( void , void ) 7
->        builtin_type_specifier( void , void ) 16
->       function_declarator( ecrire , ) ) 37
->        function_direct_declarator( ecrire , ) ) 38
->         qualified_id( ecrire , ecrire ) 11
->         parameter_list( double , y ) 48
->          parameter_declaration_list( double , y ) 49
->           parameter_declaration( double , x ) 50
->            declaration_specifiers( double , double ) 7
->             builtin_type_specifier( double , double ) 16
->            declarator( x , x ) 33
->             direct_declarator( x , x ) 34
->              qualified_id( x , x ) 11
->           parameter_declaration( double , y ) 50
->            declaration_specifiers( double , double ) 7
->             builtin_type_specifier( double , double ) 16
->            declarator( y , y ) 33
->             direct_declarator( y , y ) 34
->              qualified_id( y , y ) 11
->       func_decl_def( ; , ; ) 3
->     member_declaration( void , ; ) 24
->      function_definition( void , ; ) 2
->       declaration_specifiers( void , void ) 7
->        builtin_type_specifier( void , void ) 16
->       function_declarator( afficher , ) ) 37
->        function_direct_declarator( afficher , ) ) 38
->         qualified_id( afficher , afficher ) 11
->       func_decl_def( ; , ; ) 3
->     member_declaration( double , ; ) 24
->      function_definition( double , ; ) 2
->       declaration_specifiers( double , double ) 7
->        builtin_type_specifier( double , double ) 16
->       function_declarator( calculer_origine , ) ) 37
->        function_direct_declarator( calculer_origine , ) ) 38
->         qualified_id( calculer_origine , calculer_origine ) 11
->       func_decl_def( ; , ; ) 3
->     member_declaration( void , ; ) 24
->      function_definition( void , ; ) 2
->       declaration_specifiers( void , void ) 7
->        builtin_type_specifier( void , void ) 16
->       function_declarator( dephasage , ) ) 37
->        function_direct_declarator( dephasage , ) ) 38
->         qualified_id( dephasage , dephasage ) 11
->         parameter_list( CPoint , point ) 48
->          parameter_declaration_list( CPoint , point ) 49
->           parameter_declaration( CPoint , point ) 50
->            declaration_specifiers( CPoint , CPoint ) 7
->             qualified_type( CPoint , CPoint ) 13
->              qualified_id( CPoint , CPoint ) 11
->            declarator( point , point ) 33
->             direct_declarator( point , point ) 34
->              qualified_id( point , point ) 11
->       func_decl_def( ; , ; ) 3
->     member_declaration( private , : ) 24
->      access_specifier( private , private ) 23
->     member_declaration( double , ; ) 24
->      declaration_specifiers( double , double ) 7
->       builtin_type_specifier( double , double ) 16
->      member_declarator_list( m_x , m_x ) 25
->       member_declarator( m_x , m_x ) 26
->        declarator( m_x , m_x ) 33
->         direct_declarator( m_x , m_x ) 34
->          qualified_id( m_x , m_x ) 11
->     member_declaration( double , ; ) 24
->      declaration_specifiers( double , double ) 7
->       builtin_type_specifier( double , double ) 16
->      member_declarator_list( m_y , m_y ) 25
->       member_declarator( m_y , m_y ) 26
->        declarator( m_y , m_y ) 33
->         direct_declarator( m_y , m_y ) 34
->          qualified_id( m_y , m_y ) 11
-> external_declaration( CPoint , } ) 1
->  ctor_definition( CPoint , } ) 41
->   dtor_ctor_decl_spec( CPoint , ; ) 39
->   ctor_declarator( CPoint , ) ) 43
->    qualified_id( CPoint , CPoint ) 11
->     scope_override( CPoint , :: ) 10
->   compound_statement( { , } ) 64
->    statement_list( m_x , ; ) 61
->     statement( m_x , ; ) 62
->      expression( m_x , 0 ) 72
->       assignment_expression( m_x , 0 ) 73
->        conditional_expression( m_x , m_x ) 74
->         logical_or_expression( m_x , m_x ) 76
->          logical_and_expression( m_x , m_x ) 77
->           inclusive_or_expression( m_x , m_x ) 78
->            exclusive_or_expression( m_x , m_x ) 79
->             and_expression( m_x , m_x ) 80
->              equality_expression( m_x , m_x ) 81
->               relational_expression( m_x , m_x ) 82
->                shift_expression( m_x , m_x ) 83
->                 additive_expression( m_x , m_x ) 84
->                  multiplicative_expression( m_x , m_x ) 85
->                   pm_expression( m_x , m_x ) 86
->                    cast_expression( m_x , m_x ) 87
->                     unary_expression( m_x , m_x ) 88
->                      postfix_expression( m_x , m_x ) 96
->                       primary_expression( m_x , m_x ) 98
->                        id_expression( m_x , m_x ) 97
->        assignment_expression( m_y , 0 ) 73
->         conditional_expression( m_y , m_y ) 74
->          logical_or_expression( m_y , m_y ) 76
->           logical_and_expression( m_y , m_y ) 77
->            inclusive_or_expression( m_y , m_y ) 78
->             exclusive_or_expression( m_y , m_y ) 79
->              and_expression( m_y , m_y ) 80
->               equality_expression( m_y , m_y ) 81
->                relational_expression( m_y , m_y ) 82
->                 shift_expression( m_y , m_y ) 83
->                  additive_expression( m_y , m_y ) 84
->                   multiplicative_expression( m_y , m_y ) 85
->                    pm_expression( m_y , m_y ) 86
->                     cast_expression( m_y , m_y ) 87
->                      unary_expression( m_y , m_y ) 88
->                       postfix_expression( m_y , m_y ) 96
->                        primary_expression( m_y , m_y ) 98
->                         id_expression( m_y , m_y ) 97
->         assignment_expression( 0 , 0 ) 73
->          conditional_expression( 0 , 0 ) 74
->           logical_or_expression( 0 , 0 ) 76
->            logical_and_expression( 0 , 0 ) 77
->             inclusive_or_expression( 0 , 0 ) 78
->              exclusive_or_expression( 0 , 0 ) 79
->               and_expression( 0 , 0 ) 80
->                equality_expression( 0 , 0 ) 81
->                 relational_expression( 0 , 0 ) 82
->                  shift_expression( 0 , 0 ) 83
->                   additive_expression( 0 , 0 ) 84
->                    multiplicative_expression( 0 , 0 ) 85
->                     pm_expression( 0 , 0 ) 86
->                      cast_expression( 0 , 0 ) 87
->                       unary_expression( 0 , 0 ) 88
->                        postfix_expression( 0 , 0 ) 96
->                         primary_expression( 0 , 0 ) 98
->                          constant( 0 , 0 ) 100
-> external_declaration( CPoint , } ) 1
->  ctor_definition( CPoint , } ) 41
->   dtor_ctor_decl_spec( CPoint , } ) 39
->   ctor_declarator( CPoint , ) ) 43
->    qualified_id( CPoint , CPoint ) 11
->     scope_override( CPoint , :: ) 10
->    parameter_list( double , y ) 48
->     parameter_declaration_list( double , y ) 49
->      parameter_declaration( double , x ) 50
->       declaration_specifiers( double , double ) 7
->        builtin_type_specifier( double , double ) 16
->       declarator( x , x ) 33
->        direct_declarator( x , x ) 34
->         qualified_id( x , x ) 11
->      parameter_declaration( double , y ) 50
->       declaration_specifiers( double , double ) 7
->        builtin_type_specifier( double , double ) 16
->       declarator( y , y ) 33
->        direct_declarator( y , y ) 34
->         qualified_id( y , y ) 11
->   compound_statement( { , } ) 64
->    statement_list( ecrire , ; ) 61
->     statement( ecrire , ; ) 62
->      expression( ecrire , ) ) 72
->       assignment_expression( ecrire , ) ) 73
->        conditional_expression( ecrire , ) ) 74
->         logical_or_expression( ecrire , ) ) 76
->          logical_and_expression( ecrire , ) ) 77
->           inclusive_or_expression( ecrire , ) ) 78
->            exclusive_or_expression( ecrire , ) ) 79
->             and_expression( ecrire , ) ) 80
->              equality_expression( ecrire , ) ) 81
->               relational_expression( ecrire , ) ) 82
->                shift_expression( ecrire , ) ) 83
->                 additive_expression( ecrire , ) ) 84
->                  multiplicative_expression( ecrire , ) ) 85
->                   pm_expression( ecrire , ) ) 86
->                    cast_expression( ecrire , ) ) 87
->                     unary_expression( ecrire , ) ) 88
->                      postfix_expression( ecrire , ) ) 96
->                       primary_expression( ecrire , ecrire ) 98
->                        id_expression( ecrire , ecrire ) 97
->                       expression_list( x , y ) 99
->                        assignment_expression( x , x ) 73
->                         conditional_expression( x , x ) 74
->                          logical_or_expression( x , x ) 76
->                           logical_and_expression( x , x ) 77
->                            inclusive_or_expression( x , x ) 78
->                             exclusive_or_expression( x , x ) 79
->                              and_expression( x , x ) 80
->                               equality_expression( x , x ) 81
->                                relational_expression( x , x ) 82
->                                 shift_expression( x , x ) 83
->                                  additive_expression( x , x ) 84
->                                   multiplicative_expression( x , x ) 85
->                                    pm_expression( x , x ) 86
->                                     cast_expression( x , x ) 87
->                                      unary_expression( x , x ) 88
->                                       postfix_expression( x , x ) 96
->                                        primary_expression( x , x ) 98
->                                         id_expression( x , x ) 97
->                        assignment_expression( y , y ) 73
->                         conditional_expression( y , y ) 74
->                          logical_or_expression( y , y ) 76
->                           logical_and_expression( y , y ) 77
->                            inclusive_or_expression( y , y ) 78
->                             exclusive_or_expression( y , y ) 79
->                              and_expression( y , y ) 80
->                               equality_expression( y , y ) 81
->                                relational_expression( y , y ) 82
->                                 shift_expression( y , y ) 83
->                                  additive_expression( y , y ) 84
->                                   multiplicative_expression( y , y ) 85
->                                    pm_expression( y , y ) 86
->                                     cast_expression( y , y ) 87
->                                      unary_expression( y , y ) 88
->                                       postfix_expression( y , y ) 96
->                                        primary_expression( y , y ) 98
->                                         id_expression( y , y ) 97
-> external_declaration( double , } ) 1
->  function_definition( double , } ) 2
->   declaration_specifiers( double , double ) 7
->    builtin_type_specifier( double , double ) 16
->   function_declarator( CPoint , ) ) 37
->    function_direct_declarator( CPoint , ) ) 38
->     qualified_id( CPoint , lire_x ) 11
->      scope_override( CPoint , :: ) 10
->   func_decl_def( { , } ) 3
->    compound_statement( { , } ) 64
->     statement_list( return , ; ) 61
->      statement( return , ; ) 62
->       jump_statement( return , ; ) 67
->        expression( ( , ) ) 72
->         assignment_expression( ( , ) ) 73
->          conditional_expression( ( , ) ) 74
->           logical_or_expression( ( , ) ) 76
->            logical_and_expression( ( , ) ) 77
->             inclusive_or_expression( ( , ) ) 78
->              exclusive_or_expression( ( , ) ) 79
->               and_expression( ( , ) ) 80
->                equality_expression( ( , ) ) 81
->                 relational_expression( ( , ) ) 82
->                  shift_expression( ( , ) ) 83
->                   additive_expression( ( , ) ) 84
->                    multiplicative_expression( ( , ) ) 85
->                     pm_expression( ( , ) ) 86
->                      cast_expression( ( , ) ) 87
->                       unary_expression( ( , ) ) 88
->                        postfix_expression( ( , ) ) 96
->                         primary_expression( ( , ) ) 98
->                          expression( m_x , m_x ) 72
->                           assignment_expression( m_x , m_x ) 73
->                            conditional_expression( m_x , m_x ) 74
->                             logical_or_expression( m_x , m_x ) 76
->                              logical_and_expression( m_x , m_x ) 77
->                               inclusive_or_expression( m_x , m_x ) 78
->                                exclusive_or_expression( m_x , m_x ) 79
->                                 and_expression( m_x , m_x ) 80
->                                  equality_expression( m_x , m_x ) 81
->                                   relational_expression( m_x , m_x ) 82
->                                    shift_expression( m_x , m_x ) 83
->                                     additive_expression( m_x , m_x ) 84
->                                      multiplicative_expression( m_x , m_x ) 85
->                                       pm_expression( m_x , m_x ) 86
->                                        cast_expression( m_x , m_x ) 87
->                                         unary_expression( m_x , m_x ) 88
->                                          postfix_expression( m_x , m_x ) 96
->                                           primary_expression( m_x , m_x ) 98
->                                            id_expression( m_x , m_x ) 97
-> external_declaration( double , } ) 1
->  function_definition( double , } ) 2
->   declaration_specifiers( double , double ) 7
->    builtin_type_specifier( double , double ) 16
->   function_declarator( CPoint , ) ) 37
->    function_direct_declarator( CPoint , ) ) 38
->     qualified_id( CPoint , lire_y ) 11
->      scope_override( CPoint , :: ) 10
->   func_decl_def( { , } ) 3
->    compound_statement( { , } ) 64
->     statement_list( return , ; ) 61
->      statement( return , ; ) 62
->       jump_statement( return , ; ) 67
->        expression( ( , ) ) 72
->         assignment_expression( ( , ) ) 73
->          conditional_expression( ( , ) ) 74
->           logical_or_expression( ( , ) ) 76
->            logical_and_expression( ( , ) ) 77
->             inclusive_or_expression( ( , ) ) 78
->              exclusive_or_expression( ( , ) ) 79
->               and_expression( ( , ) ) 80
->                equality_expression( ( , ) ) 81
->                 relational_expression( ( , ) ) 82
->                  shift_expression( ( , ) ) 83
->                   additive_expression( ( , ) ) 84
->                    multiplicative_expression( ( , ) ) 85
->                     pm_expression( ( , ) ) 86
->                      cast_expression( ( , ) ) 87
->                       unary_expression( ( , ) ) 88
->                        postfix_expression( ( , ) ) 96
->                         primary_expression( ( , ) ) 98
->                          expression( m_y , m_y ) 72
->                           assignment_expression( m_y , m_y ) 73
->                            conditional_expression( m_y , m_y ) 74
->                             logical_or_expression( m_y , m_y ) 76
->                              logical_and_expression( m_y , m_y ) 77
->                               inclusive_or_expression( m_y , m_y ) 78
->                                exclusive_or_expression( m_y , m_y ) 79
->                                 and_expression( m_y , m_y ) 80
->                                  equality_expression( m_y , m_y ) 81
->                                   relational_expression( m_y , m_y ) 82
->                                    shift_expression( m_y , m_y ) 83
->                                     additive_expression( m_y , m_y ) 84
->                                      multiplicative_expression( m_y , m_y ) 85
->                                       pm_expression( m_y , m_y ) 86
->                                        cast_expression( m_y , m_y ) 87
->                                         unary_expression( m_y , m_y ) 88
->                                          postfix_expression( m_y , m_y ) 96
->                                           primary_expression( m_y , m_y ) 98
->                                            id_expression( m_y , m_y ) 97
-> external_declaration( void , } ) 1
->  function_definition( void , } ) 2
->   declaration_specifiers( void , void ) 7
->    builtin_type_specifier( void , void ) 16
->   function_declarator( CPoint , ) ) 37
->    function_direct_declarator( CPoint , ) ) 38
->     qualified_id( CPoint , ecrire ) 11
->      scope_override( CPoint , :: ) 10
->     parameter_list( double , y ) 48
->      parameter_declaration_list( double , y ) 49
->       parameter_declaration( double , x ) 50
->        declaration_specifiers( double , double ) 7
->         builtin_type_specifier( double , double ) 16
->        declarator( x , x ) 33
->         direct_declarator( x , x ) 34
->          qualified_id( x , x ) 11
->       parameter_declaration( double , y ) 50
->        declaration_specifiers( double , double ) 7
->         builtin_type_specifier( double , double ) 16
->        declarator( y , y ) 33
->         direct_declarator( y , y ) 34
->          qualified_id( y , y ) 11
->   func_decl_def( { , } ) 3
->    compound_statement( { , } ) 64
->     statement_list( m_x , ; ) 61
->      statement( m_x , ; ) 62
->       expression( m_x , x ) 72
->        assignment_expression( m_x , x ) 73
->         conditional_expression( m_x , m_x ) 74
->          logical_or_expression( m_x , m_x ) 76
->           logical_and_expression( m_x , m_x ) 77
->            inclusive_or_expression( m_x , m_x ) 78
->             exclusive_or_expression( m_x , m_x ) 79
->              and_expression( m_x , m_x ) 80
->               equality_expression( m_x , m_x ) 81
->                relational_expression( m_x , m_x ) 82
->                 shift_expression( m_x , m_x ) 83
->                  additive_expression( m_x , m_x ) 84
->                   multiplicative_expression( m_x , m_x ) 85
->                    pm_expression( m_x , m_x ) 86
->                     cast_expression( m_x , m_x ) 87
->                      unary_expression( m_x , m_x ) 88
->                       postfix_expression( m_x , m_x ) 96
->                        primary_expression( m_x , m_x ) 98
->                         id_expression( m_x , m_x ) 97
->         assignment_expression( x , x ) 73
->          conditional_expression( x , x ) 74
->           logical_or_expression( x , x ) 76
->            logical_and_expression( x , x ) 77
->             inclusive_or_expression( x , x ) 78
->              exclusive_or_expression( x , x ) 79
->               and_expression( x , x ) 80
->                equality_expression( x , x ) 81
->                 relational_expression( x , x ) 82
->                  shift_expression( x , x ) 83
->                   additive_expression( x , x ) 84
->                    multiplicative_expression( x , x ) 85
->                     pm_expression( x , x ) 86
->                      cast_expression( x , x ) 87
->                       unary_expression( x , x ) 88
->                        postfix_expression( x , x ) 96
->                         primary_expression( x , x ) 98
->                          id_expression( x , x ) 97
->      statement( m_y , ; ) 62
->       expression( m_y , y ) 72
->        assignment_expression( m_y , y ) 73
->         conditional_expression( m_y , m_y ) 74
->          logical_or_expression( m_y , m_y ) 76
->           logical_and_expression( m_y , m_y ) 77
->            inclusive_or_expression( m_y , m_y ) 78
->             exclusive_or_expression( m_y , m_y ) 79
->              and_expression( m_y , m_y ) 80
->               equality_expression( m_y , m_y ) 81
->                relational_expression( m_y , m_y ) 82
->                 shift_expression( m_y , m_y ) 83
->                  additive_expression( m_y , m_y ) 84
->                   multiplicative_expression( m_y , m_y ) 85
->                    pm_expression( m_y , m_y ) 86
->                     cast_expression( m_y , m_y ) 87
->                      unary_expression( m_y , m_y ) 88
->                       postfix_expression( m_y , m_y ) 96
->                        primary_expression( m_y , m_y ) 98
->                         id_expression( m_y , m_y ) 97
->         assignment_expression( y , y ) 73
->          conditional_expression( y , y ) 74
->           logical_or_expression( y , y ) 76
->            logical_and_expression( y , y ) 77
->             inclusive_or_expression( y , y ) 78
->              exclusive_or_expression( y , y ) 79
->               and_expression( y , y ) 80
->                equality_expression( y , y ) 81
->                 relational_expression( y , y ) 82
->                  shift_expression( y , y ) 83
->                   additive_expression( y , y ) 84
->                    multiplicative_expression( y , y ) 85
->                     pm_expression( y , y ) 86
->                      cast_expression( y , y ) 87
->                       unary_expression( y , y ) 88
->                        postfix_expression( y , y ) 96
->                         primary_expression( y , y ) 98
->                          id_expression( y , y ) 97
-> external_declaration( void , } ) 1
->  function_definition( void , } ) 2
->   declaration_specifiers( void , void ) 7
->    builtin_type_specifier( void , void ) 16
->   function_declarator( CPoint , ) ) 37
->    function_direct_declarator( CPoint , ) ) 38
->     qualified_id( CPoint , afficher ) 11
->      scope_override( CPoint , :: ) 10
->   func_decl_def( { , } ) 3
->    compound_statement( { , } ) 64
->     statement_list( printf , ; ) 61
->      statement( printf , ; ) 62
->       expression( printf , ) ) 72
->        assignment_expression( printf , ) ) 73
->         conditional_expression( printf , ) ) 74
->          logical_or_expression( printf , ) ) 76
->           logical_and_expression( printf , ) ) 77
->            inclusive_or_expression( printf , ) ) 78
->             exclusive_or_expression( printf , ) ) 79
->              and_expression( printf , ) ) 80
->               equality_expression( printf , ) ) 81
->                relational_expression( printf , ) ) 82
->                 shift_expression( printf , ) ) 83
->                  additive_expression( printf , ) ) 84
->                   multiplicative_expression( printf , ) ) 85
->                    pm_expression( printf , ) ) 86
->                     cast_expression( printf , ) ) 87
->                      unary_expression( printf , ) ) 88
->                       postfix_expression( printf , ) ) 96
->                        primary_expression( printf , printf ) 98
->                         id_expression( printf , printf ) 97
->                        expression_list( "(%.2f,%.2f)" , m_y ) 99
->                         assignment_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 73
->                          conditional_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 74
->                           logical_or_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 76
->                            logical_and_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 77
->                             inclusive_or_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 78
->                              exclusive_or_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 79
->                               and_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 80
->                                equality_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 81
->                                 relational_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 82
->                                  shift_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 83
->                                   additive_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 84
->                                    multiplicative_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 85
->                                     pm_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 86
->                                      cast_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 87
->                                       unary_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 88
->                                        postfix_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 96
->                                         primary_expression( "(%.2f,%.2f)" , "(%.2f,%.2f)" ) 98
->                         assignment_expression( m_x , m_x ) 73
->                          conditional_expression( m_x , m_x ) 74
->                           logical_or_expression( m_x , m_x ) 76
->                            logical_and_expression( m_x , m_x ) 77
->                             inclusive_or_expression( m_x , m_x ) 78
->                              exclusive_or_expression( m_x , m_x ) 79
->                               and_expression( m_x , m_x ) 80
->                                equality_expression( m_x , m_x ) 81
->                                 relational_expression( m_x , m_x ) 82
->                                  shift_expression( m_x , m_x ) 83
->                                   additive_expression( m_x , m_x ) 84
->                                    multiplicative_expression( m_x , m_x ) 85
->                                     pm_expression( m_x , m_x ) 86
->                                      cast_expression( m_x , m_x ) 87
->                                       unary_expression( m_x , m_x ) 88
->                                        postfix_expression( m_x , m_x ) 96
->                                         primary_expression( m_x , m_x ) 98
->                                          id_expression( m_x , m_x ) 97
->                         assignment_expression( m_y , m_y ) 73
->                          conditional_expression( m_y , m_y ) 74
->                           logical_or_expression( m_y , m_y ) 76
->                            logical_and_expression( m_y , m_y ) 77
->                             inclusive_or_expression( m_y , m_y ) 78
->                              exclusive_or_expression( m_y , m_y ) 79
->                               and_expression( m_y , m_y ) 80
->                                equality_expression( m_y , m_y ) 81
->                                 relational_expression( m_y , m_y ) 82
->                                  shift_expression( m_y , m_y ) 83
->                                   additive_expression( m_y , m_y ) 84
->                                    multiplicative_expression( m_y , m_y ) 85
->                                     pm_expression( m_y , m_y ) 86
->                                      cast_expression( m_y , m_y ) 87
->                                       unary_expression( m_y , m_y ) 88
->                                        postfix_expression( m_y , m_y ) 96
->                                         primary_expression( m_y , m_y ) 98
->                                          id_expression( m_y , m_y ) 97
-> external_declaration( double , } ) 1
->  function_definition( double , } ) 2
->   declaration_specifiers( double , double ) 7
->    builtin_type_specifier( double , double ) 16
->   function_declarator( CPoint , ) ) 37
->    function_direct_declarator( CPoint , ) ) 38
->     qualified_id( CPoint , calculer_origine ) 11
->      scope_override( CPoint , :: ) 10
->   func_decl_def( { , } ) 3
->    compound_statement( { , } ) 64
->     statement_list( return , ; ) 61
->      statement( return , ; ) 62
->       jump_statement( return , ; ) 67
->        expression( ( , ) ) 72
->         assignment_expression( ( , ) ) 73
->          conditional_expression( ( , ) ) 74
->           logical_or_expression( ( , ) ) 76
->            logical_and_expression( ( , ) ) 77
->             inclusive_or_expression( ( , ) ) 78
->              exclusive_or_expression( ( , ) ) 79
->               and_expression( ( , ) ) 80
->                equality_expression( ( , ) ) 81
->                 relational_expression( ( , ) ) 82
->                  shift_expression( ( , ) ) 83
->                   additive_expression( ( , ) ) 84
->                    multiplicative_expression( ( , ) ) 85
->                     pm_expression( ( , ) ) 86
->                      cast_expression( ( , ) ) 87
->                       unary_expression( ( , ) ) 88
->                        postfix_expression( ( , ) ) 96
->                         primary_expression( ( , ) ) 98
->                          expression( sqrt , ) ) 72
->                           assignment_expression( sqrt , ) ) 73
->                            conditional_expression( sqrt , ) ) 74
->                             logical_or_expression( sqrt , ) ) 76
->                              logical_and_expression( sqrt , ) ) 77
->                               inclusive_or_expression( sqrt , ) ) 78
->                                exclusive_or_expression( sqrt , ) ) 79
->                                 and_expression( sqrt , ) ) 80
->                                  equality_expression( sqrt , ) ) 81
->                                   relational_expression( sqrt , ) ) 82
->                                    shift_expression( sqrt , ) ) 83
->                                     additive_expression( sqrt , ) ) 84
->                                      multiplicative_expression( sqrt , ) ) 85
->                                       pm_expression( sqrt , ) ) 86
->                                        cast_expression( sqrt , ) ) 87
->                                         unary_expression( sqrt , ) ) 88
->                                          postfix_expression( sqrt , ) ) 96
->                                           primary_expression( sqrt , sqrt ) 98
->                                            id_expression( sqrt , sqrt ) 97
->                                           expression_list( ( , ) ) 99
->                                            assignment_expression( ( , ) ) 73
->                                             conditional_expression( ( , ) ) 74
->                                              logical_or_expression( ( , ) ) 76
->                                               logical_and_expression( ( , ) ) 77
->                                                inclusive_or_expression( ( , ) ) 78
->                                                 exclusive_or_expression( ( , ) ) 79
->                                                  and_expression( ( , ) ) 80
->                                                   equality_expression( ( , ) ) 81
->                                                    relational_expression( ( , ) ) 82
->                                                     shift_expression( ( , ) ) 83
->                                                      additive_expression( ( , ) ) 84
->                                                       multiplicative_expression( ( , ) ) 85
->                                                        pm_expression( ( , ) ) 86
->                                                         cast_expression( ( , ) ) 87
->                                                          unary_expression( ( , ) ) 88
->                                                           postfix_expression( ( , ) ) 96
->                                                            primary_expression( ( , ) ) 98
->                                                             expression( pow , ) ) 72
->                                                              assignment_expression( pow , ) ) 73
->                                                               conditional_expression( pow , ) ) 74
->                                                                logical_or_expression( pow , ) ) 76
->                                                                 logical_and_expression( pow , ) ) 77
->                                                                  inclusive_or_expression( pow , ) ) 78
->                                                                   exclusive_or_expression( pow , ) ) 79
->                                                                    and_expression( pow , ) ) 80
->                                                                     equality_expression( pow , ) ) 81
->                                                                      relational_expression( pow , ) ) 82
->                                                                       shift_expression( pow , ) ) 83
->                                                                        additive_expression( pow , ) ) 84
->                                                                         multiplicative_expression( pow , ) ) 85
->                                                                          pm_expression( pow , ) ) 86
->                                                                           cast_expression( pow , ) ) 87
->                                                                            unary_expression( pow , ) ) 88
->                                                                             postfix_expression( pow , ) ) 96
->                                                                              primary_expression( pow , pow ) 98
->                                                                               id_expression( pow , pow ) 97
->                                                                              expression_list( m_x , 2 ) 99
->                                                                               assignment_expression( m_x , m_x ) 73
->                                                                                conditional_expression( m_x , m_x ) 74
->                                                                                 logical_or_expression( m_x , m_x ) 76
->                                                                                  logical_and_expression( m_x , m_x ) 77
->                                                                                   inclusive_or_expression( m_x , m_x ) 78
->                                                                                    exclusive_or_expression( m_x , m_x ) 79
->                                                                                     and_expression( m_x , m_x ) 80
->                                                                                      equality_expression( m_x , m_x ) 81
->                                                                                       relational_expression( m_x , m_x ) 82
->                                                                                        shift_expression( m_x , m_x ) 83
->                                                                                         additive_expression( m_x , m_x ) 84
->                                                                                          multiplicative_expression( m_x , m_x ) 85
->                                                                                           pm_expression( m_x , m_x ) 86
->                                                                                            cast_expression( m_x , m_x ) 87
->                                                                                             unary_expression( m_x , m_x ) 88
->                                                                                              postfix_expression( m_x , m_x ) 96
->                                                                                               primary_expression( m_x , m_x ) 98
->                                                                                                id_expression( m_x , m_x ) 97
->                                                                               assignment_expression( 2 , 2 ) 73
->                                                                                conditional_expression( 2 , 2 ) 74
->                                                                                 logical_or_expression( 2 , 2 ) 76
->                                                                                  logical_and_expression( 2 , 2 ) 77
->                                                                                   inclusive_or_expression( 2 , 2 ) 78
->                                                                                    exclusive_or_expression( 2 , 2 ) 79
->                                                                                     and_expression( 2 , 2 ) 80
->                                                                                      equality_expression( 2 , 2 ) 81
->                                                                                       relational_expression( 2 , 2 ) 82
->                                                                                        shift_expression( 2 , 2 ) 83
->                                                                                         additive_expression( 2 , 2 ) 84
->                                                                                          multiplicative_expression( 2 , 2 ) 85
->                                                                                           pm_expression( 2 , 2 ) 86
->                                                                                            cast_expression( 2 , 2 ) 87
->                                                                                             unary_expression( 2 , 2 ) 88
->                                                                                              postfix_expression( 2 , 2 ) 96
->                                                                                               primary_expression( 2 , 2 ) 98
->                                                                                                constant( 2 , 2 ) 100
->                                                       multiplicative_expression( ( , ) ) 85
->                                                        pm_expression( ( , ) ) 86
->                                                         cast_expression( ( , ) ) 87
->                                                          unary_expression( ( , ) ) 88
->                                                           postfix_expression( ( , ) ) 96
->                                                            primary_expression( ( , ) ) 98
->                                                             expression( pow , ) ) 72
->                                                              assignment_expression( pow , ) ) 73
->                                                               conditional_expression( pow , ) ) 74
->                                                                logical_or_expression( pow , ) ) 76
->                                                                 logical_and_expression( pow , ) ) 77
->                                                                  inclusive_or_expression( pow , ) ) 78
->                                                                   exclusive_or_expression( pow , ) ) 79
->                                                                    and_expression( pow , ) ) 80
->                                                                     equality_expression( pow , ) ) 81
->                                                                      relational_expression( pow , ) ) 82
->                                                                       shift_expression( pow , ) ) 83
->                                                                        additive_expression( pow , ) ) 84
->                                                                         multiplicative_expression( pow , ) ) 85
->                                                                          pm_expression( pow , ) ) 86
->                                                                           cast_expression( pow , ) ) 87
->                                                                            unary_expression( pow , ) ) 88
->                                                                             postfix_expression( pow , ) ) 96
->                                                                              primary_expression( pow , pow ) 98
->                                                                               id_expression( pow , pow ) 97
->                                                                              expression_list( m_y , 2 ) 99
->                                                                               assignment_expression( m_y , m_y ) 73
->                                                                                conditional_expression( m_y , m_y ) 74
->                                                                                 logical_or_expression( m_y , m_y ) 76
->                                                                                  logical_and_expression( m_y , m_y ) 77
->                                                                                   inclusive_or_expression( m_y , m_y ) 78
->                                                                                    exclusive_or_expression( m_y , m_y ) 79
->                                                                                     and_expression( m_y , m_y ) 80
->                                                                                      equality_expression( m_y , m_y ) 81
->                                                                                       relational_expression( m_y , m_y ) 82
->                                                                                        shift_expression( m_y , m_y ) 83
->                                                                                         additive_expression( m_y , m_y ) 84
->                                                                                          multiplicative_expression( m_y , m_y ) 85
->                                                                                           pm_expression( m_y , m_y ) 86
->                                                                                            cast_expression( m_y , m_y ) 87
->                                                                                             unary_expression( m_y , m_y ) 88
->                                                                                              postfix_expression( m_y , m_y ) 96
->                                                                                               primary_expression( m_y , m_y ) 98
->                                                                                                id_expression( m_y , m_y ) 97
->                                                                               assignment_expression( 2 , 2 ) 73
->                                                                                conditional_expression( 2 , 2 ) 74
->                                                                                 logical_or_expression( 2 , 2 ) 76
->                                                                                  logical_and_expression( 2 , 2 ) 77
->                                                                                   inclusive_or_expression( 2 , 2 ) 78
->                                                                                    exclusive_or_expression( 2 , 2 ) 79
->                                                                                     and_expression( 2 , 2 ) 80
->                                                                                      equality_expression( 2 , 2 ) 81
->                                                                                       relational_expression( 2 , 2 ) 82
->                                                                                        shift_expression( 2 , 2 ) 83
->                                                                                         additive_expression( 2 , 2 ) 84
->                                                                                          multiplicative_expression( 2 , 2 ) 85
->                                                                                           pm_expression( 2 , 2 ) 86
->                                                                                            cast_expression( 2 , 2 ) 87
->                                                                                             unary_expression( 2 , 2 ) 88
->                                                                                              postfix_expression( 2 , 2 ) 96
->                                                                                               primary_expression( 2 , 2 ) 98
->                                                                                                constant( 2 , 2 ) 100
-> external_declaration( void , } ) 1
->  function_definition( void , } ) 2
->   declaration_specifiers( void , void ) 7
->    builtin_type_specifier( void , void ) 16
->   function_declarator( CPoint , ) ) 37
->    function_direct_declarator( CPoint , ) ) 38
->     qualified_id( CPoint , dephasage ) 11
->      scope_override( CPoint , :: ) 10
->     parameter_list( CPoint , point ) 48
->      parameter_declaration_list( CPoint , point ) 49
->       parameter_declaration( CPoint , point ) 50
->        declaration_specifiers( CPoint , CPoint ) 7
->         qualified_type( CPoint , CPoint ) 13
->          qualified_id( CPoint , CPoint ) 11
->        declarator( point , point ) 33
->         direct_declarator( point , point ) 34
->          qualified_id( point , point ) 11
->   func_decl_def( { , } ) 3
->    compound_statement( { , } ) 64
->     statement_list( m_x , ; ) 61
->      statement( m_x , ; ) 62
->       expression( m_x , m_x ) 72
->        assignment_expression( m_x , m_x ) 73
->         conditional_expression( m_x , m_x ) 74
->          logical_or_expression( m_x , m_x ) 76
->           logical_and_expression( m_x , m_x ) 77
->            inclusive_or_expression( m_x , m_x ) 78
->             exclusive_or_expression( m_x , m_x ) 79
->              and_expression( m_x , m_x ) 80
->               equality_expression( m_x , m_x ) 81
->                relational_expression( m_x , m_x ) 82
->                 shift_expression( m_x , m_x ) 83
->                  additive_expression( m_x , m_x ) 84
->                   multiplicative_expression( m_x , m_x ) 85
->                    pm_expression( m_x , m_x ) 86
->                     cast_expression( m_x , m_x ) 87
->                      unary_expression( m_x , m_x ) 88
->                       postfix_expression( m_x , m_x ) 96
->                        primary_expression( m_x , m_x ) 98
->                         id_expression( m_x , m_x ) 97
->         assignment_expression( point , m_x ) 73
->          conditional_expression( point , m_x ) 74
->           logical_or_expression( point , m_x ) 76
->            logical_and_expression( point , m_x ) 77
->             inclusive_or_expression( point , m_x ) 78
->              exclusive_or_expression( point , m_x ) 79
->               and_expression( point , m_x ) 80
->                equality_expression( point , m_x ) 81
->                 relational_expression( point , m_x ) 82
->                  shift_expression( point , m_x ) 83
->                   additive_expression( point , m_x ) 84
->                    multiplicative_expression( point , m_x ) 85
->                     pm_expression( point , m_x ) 86
->                      cast_expression( point , m_x ) 87
->                       unary_expression( point , m_x ) 88
->                        postfix_expression( point , m_x ) 96
->                         primary_expression( point , point ) 98
->                          id_expression( point , point ) 97
->                         id_expression( m_x , m_x ) 97
->      statement( m_y , ; ) 62
->       expression( m_y , m_y ) 72
->        assignment_expression( m_y , m_y ) 73
->         conditional_expression( m_y , m_y ) 74
->          logical_or_expression( m_y , m_y ) 76
->           logical_and_expression( m_y , m_y ) 77
->            inclusive_or_expression( m_y , m_y ) 78
->             exclusive_or_expression( m_y , m_y ) 79
->              and_expression( m_y , m_y ) 80
->               equality_expression( m_y , m_y ) 81
->                relational_expression( m_y , m_y ) 82
->                 shift_expression( m_y , m_y ) 83
->                  additive_expression( m_y , m_y ) 84
->                   multiplicative_expression( m_y , m_y ) 85
->                    pm_expression( m_y , m_y ) 86
->                     cast_expression( m_y , m_y ) 87
->                      unary_expression( m_y , m_y ) 88
->                       postfix_expression( m_y , m_y ) 96
->                        primary_expression( m_y , m_y ) 98
->                         id_expression( m_y , m_y ) 97
->         assignment_expression( point , m_y ) 73
->          conditional_expression( point , m_y ) 74
->           logical_or_expression( point , m_y ) 76
->            logical_and_expression( point , m_y ) 77
->             inclusive_or_expression( point , m_y ) 78
->              exclusive_or_expression( point , m_y ) 79
->               and_expression( point , m_y ) 80
->                equality_expression( point , m_y ) 81
->                 relational_expression( point , m_y ) 82
->                  shift_expression( point , m_y ) 83
->                   additive_expression( point , m_y ) 84
->                    multiplicative_expression( point , m_y ) 85
->                     pm_expression( point , m_y ) 86
->                      cast_expression( point , m_y ) 87
->                       unary_expression( point , m_y ) 88
->                        postfix_expression( point , m_y ) 96
->                         primary_expression( point , point ) 98
->                          id_expression( point , point ) 97
->                         id_expression( m_y , m_y ) 97
C++ Parser Version 0.1: Program parsed successfully.
