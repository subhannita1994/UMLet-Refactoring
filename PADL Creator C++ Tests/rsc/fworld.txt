C++ Parser Version 0.1: Reading from file world.cpp . . .
->translation_unit( enum ,  )
-> external_declaration( enum , ; )
->  enum_specifier( enum , } )
->   enumerator_list( Africa , Americas )
->    enumerator( Africa , Africa )
->    enumerator( Asia , Asia )
->    enumerator( Australia , Australia )
->    enumerator( Europe , Europe )
->    enumerator( Americas , Americas )
-> external_declaration( struct , ; )
->  declaration( struct , ; )
->   declaration_specifiers( struct , } )
->    class_specifier( struct , } )
->     member_declaration( char , ; )
->      declaration_specifiers( char , char )
->       builtin_type_specifier( char , char )
->      member_declarator_list( country , ] )
->       member_declarator( country , ] )
->        declarator( country , ] )
->         direct_declarator( country , ] )
->          qualified_id( country , country )
->          declarator_suffixes( [ , ] )
->           constant_expression( 20 , 20 )
->            conditional_expression( 20 , 20 )
->             logical_or_expression( 20 , 20 )
->              logical_and_expression( 20 , 20 )
->               inclusive_or_expression( 20 , 20 )
->                exclusive_or_expression( 20 , 20 )
->                 and_expression( 20 , 20 )
->                  equality_expression( 20 , 20 )
->                   relational_expression( 20 , 20 )
->                    shift_expression( 20 , 20 )
->                     additive_expression( 20 , 20 )
->                      multiplicative_expression( 20 , 20 )
->                       pm_expression( 20 , 20 )
->                        cast_expression( 20 , 20 )
->                         unary_expression( 20 , 20 )
->                          postfix_expression( 20 , 20 )
->                           primary_expression( 20 , 20 )
->                            constant( 20 , 20 )
->     member_declaration( int , ; )
->      declaration_specifiers( int , int )
->       builtin_type_specifier( int , int )
->      member_declarator_list( continent , continent )
->       member_declarator( continent , continent )
->        declarator( continent , continent )
->         direct_declarator( continent , continent )
->          qualified_id( continent , continent )
-> external_declaration( class , ; )
->  declaration( class , ; )
->   declaration_specifiers( class , } )
->    class_specifier( class , } )
->     member_declaration( public , : )
->      access_specifier( public , public )
->     member_declaration( Team , } )
->      ctor_definition( Team , } )
->       dtor_ctor_decl_spec( Team , : )
->       ctor_declarator( Team , ) )
->        qualified_id( Team , Team )
->       compound_statement( { , } )
->     member_declaration( ; , ; )
->     member_declaration( Team , ; )
->      ctor_definition( Team , ; )
->       dtor_ctor_decl_spec( Team , ; )
->       ctor_declarator( Team , ) )
->        qualified_id( Team , Team )
->        parameter_list( char , continent )
->         parameter_declaration_list( char , continent )
->          parameter_declaration( char , * )
->           declaration_specifiers( char , char )
->            builtin_type_specifier( char , char )
->           abstract_declarator( * , * )
->            ptr_operator( * , * )
->             cv_qualifier_seq( , , * )
->            abstract_declarator( , , * )
->          parameter_declaration( continent , continent )
->           declaration_specifiers( continent , continent )
->            qualified_type( continent , continent )
->             qualified_id( continent , continent )
->           abstract_declarator( ) , continent )
->     member_declaration( Team , } )
->      ctor_definition( Team , } )
->       dtor_ctor_decl_spec( Team , ; )
->       ctor_declarator( Team , ) )
->        qualified_id( Team , Team )
->        parameter_list( char , c )
->         parameter_declaration_list( char , c )
->          parameter_declaration( char , c )
->           declaration_specifiers( char , char )
->            builtin_type_specifier( char , char )
->           declarator( c , c )
->            direct_declarator( c , c )
->             qualified_id( c , c )
->       compound_statement( { , } )
->     member_declaration( ; , ; )
->     member_declaration( ~ , } )
->      dtor_definition( ~ , } )
->       dtor_ctor_decl_spec( ~ , ; )
->       dtor_declarator( ~ , ) )
->        simple_dtor_declarator( ~ , ) )
->       compound_statement( { , } )
->     member_declaration( ; , ; )
->     member_declaration( ~ , } )
->      dtor_definition( ~ , } )
->       dtor_ctor_decl_spec( ~ , ; )
->       dtor_declarator( ~ , ) )
->        simple_dtor_declarator( ~ , ) )
->         parameter_list( int , c )
->          parameter_declaration_list( int , c )
->           parameter_declaration( int , c )
->            declaration_specifiers( int , int )
->             builtin_type_specifier( int , int )
->            declarator( c , c )
->             direct_declarator( c , c )
->              qualified_id( c , c )
->       compound_statement( { , } )
->     member_declaration( ; , ; )
->     member_declaration( void , } )
->      function_definition( void , } )
->       declaration_specifiers( void , void )
->        builtin_type_specifier( void , void )
->       function_declarator( hello , ) )
->        function_direct_declarator( hello , ) )
->         qualified_id( hello , hello )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->     member_declaration( char , } )
->      function_definition( char , } )
->       declaration_specifiers( char , char )
->        builtin_type_specifier( char , char )
->       function_declarator( * , ) )
->        ptr_operator( * , * )
->         cv_qualifier_seq( getcountry , * )
->        function_declarator( getcountry , ) )
->         function_direct_declarator( getcountry , ) )
->          qualified_id( getcountry , getcountry )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->         statement_list( return , ; )
->          statement( return , ; )
->           jump_statement( return , ; )
->            expression( country , country )
->             assignment_expression( country , country )
->              conditional_expression( country , country )
->               logical_or_expression( country , country )
->                logical_and_expression( country , country )
->                 inclusive_or_expression( country , country )
->                  exclusive_or_expression( country , country )
->                   and_expression( country , country )
->                    equality_expression( country , country )
->                     relational_expression( country , country )
->                      shift_expression( country , country )
->                       additive_expression( country , country )
->                        multiplicative_expression( country , country )
->                         pm_expression( country , country )
->                          cast_expression( country , country )
->                           unary_expression( country , country )
->                            postfix_expression( country , country )
->                             primary_expression( country , country )
->                              id_expression( country , country )
->     member_declaration( continent , } )
->      function_definition( continent , } )
->       declaration_specifiers( continent , continent )
->        qualified_type( continent , continent )
->         qualified_id( continent , continent )
->       function_declarator( getcontinent , ) )
->        function_direct_declarator( getcontinent , ) )
->         qualified_id( getcontinent , getcontinent )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->         statement_list( return , ; )
->          statement( return , ; )
->           jump_statement( return , ; )
->            expression( from , from )
->             assignment_expression( from , from )
->              conditional_expression( from , from )
->               logical_or_expression( from , from )
->                logical_and_expression( from , from )
->                 inclusive_or_expression( from , from )
->                  exclusive_or_expression( from , from )
->                   and_expression( from , from )
->                    equality_expression( from , from )
->                     relational_expression( from , from )
->                      shift_expression( from , from )
->                       additive_expression( from , from )
->                        multiplicative_expression( from , from )
->                         pm_expression( from , from )
->                          cast_expression( from , from )
->                           unary_expression( from , from )
->                            postfix_expression( from , from )
->                             primary_expression( from , from )
->                              id_expression( from , from )
->     member_declaration( int , } )
->      function_definition( int , } )
->       declaration_specifiers( int , int )
->        builtin_type_specifier( int , int )
->       function_declarator( getwins , ) )
->        function_direct_declarator( getwins , ) )
->         qualified_id( getwins , getwins )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->         statement_list( return , ; )
->          statement( return , ; )
->           jump_statement( return , ; )
->            expression( wins , wins )
->             assignment_expression( wins , wins )
->              conditional_expression( wins , wins )
->               logical_or_expression( wins , wins )
->                logical_and_expression( wins , wins )
->                 inclusive_or_expression( wins , wins )
->                  exclusive_or_expression( wins , wins )
->                   and_expression( wins , wins )
->                    equality_expression( wins , wins )
->                     relational_expression( wins , wins )
->                      shift_expression( wins , wins )
->                       additive_expression( wins , wins )
->                        multiplicative_expression( wins , wins )
->                         pm_expression( wins , wins )
->                          cast_expression( wins , wins )
->                           unary_expression( wins , wins )
->                            postfix_expression( wins , wins )
->                             primary_expression( wins , wins )
->                              id_expression( wins , wins )
->     member_declaration( int , } )
->      function_definition( int , } )
->       declaration_specifiers( int , int )
->        builtin_type_specifier( int , int )
->       function_declarator( getlosses , ) )
->        function_direct_declarator( getlosses , ) )
->         qualified_id( getlosses , getlosses )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->         statement_list( return , ; )
->          statement( return , ; )
->           jump_statement( return , ; )
->            expression( losses , losses )
->             assignment_expression( losses , losses )
->              conditional_expression( losses , losses )
->               logical_or_expression( losses , losses )
->                logical_and_expression( losses , losses )
->                 inclusive_or_expression( losses , losses )
->                  exclusive_or_expression( losses , losses )
->                   and_expression( losses , losses )
->                    equality_expression( losses , losses )
->                     relational_expression( losses , losses )
->                      shift_expression( losses , losses )
->                       additive_expression( losses , losses )
->                        multiplicative_expression( losses , losses )
->                         pm_expression( losses , losses )
->                          cast_expression( losses , losses )
->                           unary_expression( losses , losses )
->                            postfix_expression( losses , losses )
->                             primary_expression( losses , losses )
->                              id_expression( losses , losses )
->     member_declaration( int , } )
->      function_definition( int , } )
->       declaration_specifiers( int , int )
->        builtin_type_specifier( int , int )
->       function_declarator( getdraws , ) )
->        function_direct_declarator( getdraws , ) )
->         qualified_id( getdraws , getdraws )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->         statement_list( return , ; )
->          statement( return , ; )
->           jump_statement( return , ; )
->            expression( draws , draws )
->             assignment_expression( draws , draws )
->              conditional_expression( draws , draws )
->               logical_or_expression( draws , draws )
->                logical_and_expression( draws , draws )
->                 inclusive_or_expression( draws , draws )
->                  exclusive_or_expression( draws , draws )
->                   and_expression( draws , draws )
->                    equality_expression( draws , draws )
->                     relational_expression( draws , draws )
->                      shift_expression( draws , draws )
->                       additive_expression( draws , draws )
->                        multiplicative_expression( draws , draws )
->                         pm_expression( draws , draws )
->                          cast_expression( draws , draws )
->                           unary_expression( draws , draws )
->                            postfix_expression( draws , draws )
->                             primary_expression( draws , draws )
->                              id_expression( draws , draws )
->     member_declaration( void , ; )
->      function_definition( void , ; )
->       declaration_specifiers( void , void )
->        builtin_type_specifier( void , void )
->       function_declarator( updateResults , ) )
->        function_direct_declarator( updateResults , ) )
->         qualified_id( updateResults , updateResults )
->         parameter_list( int , WLD )
->          parameter_declaration_list( int , WLD )
->           parameter_declaration( int , WLD )
->            declaration_specifiers( int , int )
->             builtin_type_specifier( int , int )
->            declarator( WLD , WLD )
->             direct_declarator( WLD , WLD )
->              qualified_id( WLD , WLD )
->       func_decl_def( ; , ; )
->     member_declaration( protected , : )
->      access_specifier( protected , protected )
->     member_declaration( char , ; )
->      declaration_specifiers( char , char )
->       builtin_type_specifier( char , char )
->      member_declarator_list( country , ] )
->       member_declarator( country , ] )
->        declarator( country , ] )
->         direct_declarator( country , ] )
->          qualified_id( country , country )
->          declarator_suffixes( [ , ] )
->           constant_expression( TEST , 1 )
->            conditional_expression( TEST , 1 )
->             logical_or_expression( TEST , 1 )
->              logical_and_expression( TEST , 1 )
->               inclusive_or_expression( TEST , 1 )
->                exclusive_or_expression( TEST , 1 )
->                 and_expression( TEST , 1 )
->                  equality_expression( TEST , 1 )
->                   relational_expression( TEST , 1 )
->                    shift_expression( TEST , 1 )
->                     additive_expression( TEST , 1 )
->                      multiplicative_expression( TEST , 4 )
->                       pm_expression( TEST , TEST )
->                        cast_expression( TEST , TEST )
->                         unary_expression( TEST , TEST )
->                          postfix_expression( TEST , TEST )
->                           primary_expression( TEST , TEST )
->                            id_expression( TEST , TEST )
->                       pm_expression( 4 , 4 )
->                        cast_expression( 4 , 4 )
->                         unary_expression( 4 , 4 )
->                          postfix_expression( 4 , 4 )
->                           primary_expression( 4 , 4 )
->                            constant( 4 , 4 )
->                      multiplicative_expression( 1 , 1 )
->                       pm_expression( 1 , 1 )
->                        cast_expression( 1 , 1 )
->                         unary_expression( 1 , 1 )
->                          postfix_expression( 1 , 1 )
->                           primary_expression( 1 , 1 )
->                            constant( 1 , 1 )
->     member_declaration( continent , ; )
->      declaration_specifiers( continent , continent )
->       qualified_type( continent , continent )
->        qualified_id( continent , continent )
->      member_declarator_list( from , from )
->       member_declarator( from , from )
->        declarator( from , from )
->         direct_declarator( from , from )
->          qualified_id( from , from )
->     member_declaration( int , ; )
->      declaration_specifiers( int , int )
->       builtin_type_specifier( int , int )
->      member_declarator_list( wins , wins )
->       member_declarator( wins , wins )
->        declarator( wins , wins )
->         direct_declarator( wins , wins )
->          qualified_id( wins , wins )
->     member_declaration( int , ; )
->      declaration_specifiers( int , int )
->       builtin_type_specifier( int , int )
->      member_declarator_list( losses , losses )
->       member_declarator( losses , losses )
->        declarator( losses , losses )
->         direct_declarator( losses , losses )
->          qualified_id( losses , losses )
->     member_declaration( int , ; )
->      declaration_specifiers( int , int )
->       builtin_type_specifier( int , int )
->      member_declarator_list( draws , draws )
->       member_declarator( draws , draws )
->        declarator( draws , draws )
->         direct_declarator( draws , draws )
->          qualified_id( draws , draws )
->     member_declaration( int , ; )
->      declaration_specifiers( int , int )
->       builtin_type_specifier( int , int )
->      member_declarator_list( * , test )
->       member_declarator( * , test )
->        declarator( * , test )
->         ptr_operator( * , * )
->          cv_qualifier_seq( test , * )
->         declarator( test , test )
->          direct_declarator( test , test )
->           qualified_id( test , test )
-> external_declaration( Team , } )
->  ctor_definition( Team , } )
->   dtor_ctor_decl_spec( Team , ; )
->   ctor_declarator( Team , ) )
->    qualified_id( Team , Team )
->     scope_override( Team , :: )
->    parameter_list( char , f )
->     parameter_declaration_list( char , f )
->      parameter_declaration( char , c )
->       declaration_specifiers( char , char )
->        builtin_type_specifier( char , char )
->       declarator( * , c )
->        ptr_operator( * , * )
->         cv_qualifier_seq( c , * )
->        declarator( c , c )
->         direct_declarator( c , c )
->          qualified_id( c , c )
->      parameter_declaration( continent , f )
->       declaration_specifiers( continent , continent )
->        qualified_type( continent , continent )
->         qualified_id( continent , continent )
->       declarator( f , f )
->        direct_declarator( f , f )
->         qualified_id( f , f )
->   compound_statement( { , } )
->    statement_list( strcpy , ; )
->     statement( strcpy , ; )
->      expression( strcpy , ) )
->       assignment_expression( strcpy , ) )
->        conditional_expression( strcpy , ) )
->         logical_or_expression( strcpy , ) )
->          logical_and_expression( strcpy , ) )
->           inclusive_or_expression( strcpy , ) )
->            exclusive_or_expression( strcpy , ) )
->             and_expression( strcpy , ) )
->              equality_expression( strcpy , ) )
->               relational_expression( strcpy , ) )
->                shift_expression( strcpy , ) )
->                 additive_expression( strcpy , ) )
->                  multiplicative_expression( strcpy , ) )
->                   pm_expression( strcpy , ) )
->                    cast_expression( strcpy , ) )
->                     unary_expression( strcpy , ) )
->                      postfix_expression( strcpy , ) )
->                       primary_expression( strcpy , strcpy )
->                        id_expression( strcpy , strcpy )
->                       expression_list( country , c )
->                        assignment_expression( country , country )
->                         conditional_expression( country , country )
->                          logical_or_expression( country , country )
->                           logical_and_expression( country , country )
->                            inclusive_or_expression( country , country )
->                             exclusive_or_expression( country , country )
->                              and_expression( country , country )
->                               equality_expression( country , country )
->                                relational_expression( country , country )
->                                 shift_expression( country , country )
->                                  additive_expression( country , country )
->                                   multiplicative_expression( country , country )
->                                    pm_expression( country , country )
->                                     cast_expression( country , country )
->                                      unary_expression( country , country )
->                                       postfix_expression( country , country )
->                                        primary_expression( country , country )
->                                         id_expression( country , country )
->                        assignment_expression( c , c )
->                         conditional_expression( c , c )
->                          logical_or_expression( c , c )
->                           logical_and_expression( c , c )
->                            inclusive_or_expression( c , c )
->                             exclusive_or_expression( c , c )
->                              and_expression( c , c )
->                               equality_expression( c , c )
->                                relational_expression( c , c )
->                                 shift_expression( c , c )
->                                  additive_expression( c , c )
->                                   multiplicative_expression( c , c )
->                                    pm_expression( c , c )
->                                     cast_expression( c , c )
->                                      unary_expression( c , c )
->                                       postfix_expression( c , c )
->                                        primary_expression( c , c )
->                                         id_expression( c , c )
->     statement( from , ; )
->      expression( from , f )
->       assignment_expression( from , f )
->        conditional_expression( from , from )
->         logical_or_expression( from , from )
->          logical_and_expression( from , from )
->           inclusive_or_expression( from , from )
->            exclusive_or_expression( from , from )
->             and_expression( from , from )
->              equality_expression( from , from )
->               relational_expression( from , from )
->                shift_expression( from , from )
->                 additive_expression( from , from )
->                  multiplicative_expression( from , from )
->                   pm_expression( from , from )
->                    cast_expression( from , from )
->                     unary_expression( from , from )
->                      postfix_expression( from , from )
->                       primary_expression( from , from )
->                        id_expression( from , from )
->        assignment_expression( f , f )
->         conditional_expression( f , f )
->          logical_or_expression( f , f )
->           logical_and_expression( f , f )
->            inclusive_or_expression( f , f )
->             exclusive_or_expression( f , f )
->              and_expression( f , f )
->               equality_expression( f , f )
->                relational_expression( f , f )
->                 shift_expression( f , f )
->                  additive_expression( f , f )
->                   multiplicative_expression( f , f )
->                    pm_expression( f , f )
->                     cast_expression( f , f )
->                      unary_expression( f , f )
->                       postfix_expression( f , f )
->                        primary_expression( f , f )
->                         id_expression( f , f )
->     statement( wins , ; )
->      expression( wins , 0 )
->       assignment_expression( wins , 0 )
->        conditional_expression( wins , wins )
->         logical_or_expression( wins , wins )
->          logical_and_expression( wins , wins )
->           inclusive_or_expression( wins , wins )
->            exclusive_or_expression( wins , wins )
->             and_expression( wins , wins )
->              equality_expression( wins , wins )
->               relational_expression( wins , wins )
->                shift_expression( wins , wins )
->                 additive_expression( wins , wins )
->                  multiplicative_expression( wins , wins )
->                   pm_expression( wins , wins )
->                    cast_expression( wins , wins )
->                     unary_expression( wins , wins )
->                      postfix_expression( wins , wins )
->                       primary_expression( wins , wins )
->                        id_expression( wins , wins )
->        assignment_expression( 0 , 0 )
->         conditional_expression( 0 , 0 )
->          logical_or_expression( 0 , 0 )
->           logical_and_expression( 0 , 0 )
->            inclusive_or_expression( 0 , 0 )
->             exclusive_or_expression( 0 , 0 )
->              and_expression( 0 , 0 )
->               equality_expression( 0 , 0 )
->                relational_expression( 0 , 0 )
->                 shift_expression( 0 , 0 )
->                  additive_expression( 0 , 0 )
->                   multiplicative_expression( 0 , 0 )
->                    pm_expression( 0 , 0 )
->                     cast_expression( 0 , 0 )
->                      unary_expression( 0 , 0 )
->                       postfix_expression( 0 , 0 )
->                        primary_expression( 0 , 0 )
->                         constant( 0 , 0 )
->     statement( losses , ; )
->      expression( losses , 0 )
->       assignment_expression( losses , 0 )
->        conditional_expression( losses , losses )
->         logical_or_expression( losses , losses )
->          logical_and_expression( losses , losses )
->           inclusive_or_expression( losses , losses )
->            exclusive_or_expression( losses , losses )
->             and_expression( losses , losses )
->              equality_expression( losses , losses )
->               relational_expression( losses , losses )
->                shift_expression( losses , losses )
->                 additive_expression( losses , losses )
->                  multiplicative_expression( losses , losses )
->                   pm_expression( losses , losses )
->                    cast_expression( losses , losses )
->                     unary_expression( losses , losses )
->                      postfix_expression( losses , losses )
->                       primary_expression( losses , losses )
->                        id_expression( losses , losses )
->        assignment_expression( 0 , 0 )
->         conditional_expression( 0 , 0 )
->          logical_or_expression( 0 , 0 )
->           logical_and_expression( 0 , 0 )
->            inclusive_or_expression( 0 , 0 )
->             exclusive_or_expression( 0 , 0 )
->              and_expression( 0 , 0 )
->               equality_expression( 0 , 0 )
->                relational_expression( 0 , 0 )
->                 shift_expression( 0 , 0 )
->                  additive_expression( 0 , 0 )
->                   multiplicative_expression( 0 , 0 )
->                    pm_expression( 0 , 0 )
->                     cast_expression( 0 , 0 )
->                      unary_expression( 0 , 0 )
->                       postfix_expression( 0 , 0 )
->                        primary_expression( 0 , 0 )
->                         constant( 0 , 0 )
->     statement( draws , ; )
->      expression( draws , 0 )
->       assignment_expression( draws , 0 )
->        conditional_expression( draws , draws )
->         logical_or_expression( draws , draws )
->          logical_and_expression( draws , draws )
->           inclusive_or_expression( draws , draws )
->            exclusive_or_expression( draws , draws )
->             and_expression( draws , draws )
->              equality_expression( draws , draws )
->               relational_expression( draws , draws )
->                shift_expression( draws , draws )
->                 additive_expression( draws , draws )
->                  multiplicative_expression( draws , draws )
->                   pm_expression( draws , draws )
->                    cast_expression( draws , draws )
->                     unary_expression( draws , draws )
->                      postfix_expression( draws , draws )
->                       primary_expression( draws , draws )
->                        id_expression( draws , draws )
->        assignment_expression( 0 , 0 )
->         conditional_expression( 0 , 0 )
->          logical_or_expression( 0 , 0 )
->           logical_and_expression( 0 , 0 )
->            inclusive_or_expression( 0 , 0 )
->             exclusive_or_expression( 0 , 0 )
->              and_expression( 0 , 0 )
->               equality_expression( 0 , 0 )
->                relational_expression( 0 , 0 )
->                 shift_expression( 0 , 0 )
->                  additive_expression( 0 , 0 )
->                   multiplicative_expression( 0 , 0 )
->                    pm_expression( 0 , 0 )
->                     cast_expression( 0 , 0 )
->                      unary_expression( 0 , 0 )
->                       postfix_expression( 0 , 0 )
->                        primary_expression( 0 , 0 )
->                         constant( 0 , 0 )
-> external_declaration( void , } )
->  function_definition( void , } )
->   declaration_specifiers( void , void )
->    builtin_type_specifier( void , void )
->   function_declarator( Team , ) )
->    function_direct_declarator( Team , ) )
->     qualified_id( Team , updateResults )
->      scope_override( Team , :: )
->     parameter_list( int , WLD )
->      parameter_declaration_list( int , WLD )
->       parameter_declaration( int , WLD )
->        declaration_specifiers( int , int )
->         builtin_type_specifier( int , int )
->        declarator( WLD , WLD )
->         direct_declarator( WLD , WLD )
->          qualified_id( WLD , WLD )
->   func_decl_def( { , } )
->    compound_statement( { , } )
->     statement_list( if , } )
->      statement( if , } )
->       selection_statement( if , } )
->        expression( WLD , WLD )
->         assignment_expression( WLD , WLD )
->          conditional_expression( WLD , WLD )
->           logical_or_expression( WLD , WLD )
->            logical_and_expression( WLD , WLD )
->             inclusive_or_expression( WLD , WLD )
->              exclusive_or_expression( WLD , WLD )
->               and_expression( WLD , WLD )
->                equality_expression( WLD , WLD )
->                 relational_expression( WLD , WLD )
->                  shift_expression( WLD , WLD )
->                   additive_expression( WLD , WLD )
->                    multiplicative_expression( WLD , WLD )
->                     pm_expression( WLD , WLD )
->                      cast_expression( WLD , WLD )
->                       unary_expression( WLD , WLD )
->                        postfix_expression( WLD , WLD )
->                         primary_expression( WLD , WLD )
->                          id_expression( WLD , WLD )
->        statement( wins , ; )
->         expression( wins , ++ )
->          assignment_expression( wins , ++ )
->           conditional_expression( wins , ++ )
->            logical_or_expression( wins , ++ )
->             logical_and_expression( wins , ++ )
->              inclusive_or_expression( wins , ++ )
->               exclusive_or_expression( wins , ++ )
->                and_expression( wins , ++ )
->                 equality_expression( wins , ++ )
->                  relational_expression( wins , ++ )
->                   shift_expression( wins , ++ )
->                    additive_expression( wins , ++ )
->                     multiplicative_expression( wins , ++ )
->                      pm_expression( wins , ++ )
->                       cast_expression( wins , ++ )
->                        unary_expression( wins , ++ )
->                         postfix_expression( wins , ++ )
->                          primary_expression( wins , wins )
->                           id_expression( wins , wins )
->        statement( { , } )
->         compound_statement( { , } )
->          statement_list( losses , ; )
->           statement( losses , ; )
->            expression( losses , WLD )
->             assignment_expression( losses , WLD )
->              conditional_expression( losses , losses )
->               logical_or_expression( losses , losses )
->                logical_and_expression( losses , losses )
->                 inclusive_or_expression( losses , losses )
->                  exclusive_or_expression( losses , losses )
->                   and_expression( losses , losses )
->                    equality_expression( losses , losses )
->                     relational_expression( losses , losses )
->                      shift_expression( losses , losses )
->                       additive_expression( losses , losses )
->                        multiplicative_expression( losses , losses )
->                         pm_expression( losses , losses )
->                          cast_expression( losses , losses )
->                           unary_expression( losses , losses )
->                            postfix_expression( losses , losses )
->                             primary_expression( losses , losses )
->                              id_expression( losses , losses )
->              assignment_expression( - , WLD )
->               conditional_expression( - , WLD )
->                logical_or_expression( - , WLD )
->                 logical_and_expression( - , WLD )
->                  inclusive_or_expression( - , WLD )
->                   exclusive_or_expression( - , WLD )
->                    and_expression( - , WLD )
->                     equality_expression( - , WLD )
->                      relational_expression( - , WLD )
->                       shift_expression( - , WLD )
->                        additive_expression( - , WLD )
->                         multiplicative_expression( - , WLD )
->                          pm_expression( - , WLD )
->                           cast_expression( - , WLD )
->                            unary_expression( - , WLD )
->                             unary_operator( - , - )
->                             cast_expression( WLD , WLD )
->                              unary_expression( WLD , WLD )
->                               postfix_expression( WLD , WLD )
->                                primary_expression( WLD , WLD )
->                                 id_expression( WLD , WLD )
->           statement( draws , ; )
->            expression( draws , ) )
->             assignment_expression( draws , ) )
->              conditional_expression( draws , draws )
->               logical_or_expression( draws , draws )
->                logical_and_expression( draws , draws )
->                 inclusive_or_expression( draws , draws )
->                  exclusive_or_expression( draws , draws )
->                   and_expression( draws , draws )
->                    equality_expression( draws , draws )
->                     relational_expression( draws , draws )
->                      shift_expression( draws , draws )
->                       additive_expression( draws , draws )
->                        multiplicative_expression( draws , draws )
->                         pm_expression( draws , draws )
->                          cast_expression( draws , draws )
->                           unary_expression( draws , draws )
->                            postfix_expression( draws , draws )
->                             primary_expression( draws , draws )
->                              id_expression( draws , draws )
->              assignment_expression( ( , ) )
->               conditional_expression( ( , ) )
->                logical_or_expression( ( , ) )
->                 logical_and_expression( ( , ) )
->                  inclusive_or_expression( ( , ) )
->                   exclusive_or_expression( ( , ) )
->                    and_expression( ( , ) )
->                     equality_expression( ( , ) )
->                      relational_expression( ( , ) )
->                       shift_expression( ( , ) )
->                        additive_expression( ( , ) )
->                         multiplicative_expression( ( , ) )
->                          pm_expression( ( , ) )
->                           cast_expression( ( , ) )
->                            unary_expression( ( , ) )
->                             postfix_expression( ( , ) )
->                              primary_expression( ( , ) )
->                               expression( 1 , WLD )
->                                assignment_expression( 1 , WLD )
->                                 conditional_expression( 1 , WLD )
->                                  logical_or_expression( 1 , WLD )
->                                   logical_and_expression( 1 , WLD )
->                                    inclusive_or_expression( 1 , WLD )
->                                     exclusive_or_expression( 1 , WLD )
->                                      and_expression( 1 , WLD )
->                                       equality_expression( 1 , WLD )
->                                        relational_expression( 1 , WLD )
->                                         shift_expression( 1 , WLD )
->                                          additive_expression( 1 , WLD )
->                                           multiplicative_expression( 1 , 1 )
->                                            pm_expression( 1 , 1 )
->                                             cast_expression( 1 , 1 )
->                                              unary_expression( 1 , 1 )
->                                               postfix_expression( 1 , 1 )
->                                                primary_expression( 1 , 1 )
->                                                 constant( 1 , 1 )
->                                           multiplicative_expression( WLD , WLD )
->                                            pm_expression( WLD , WLD )
->                                             cast_expression( WLD , WLD )
->                                              unary_expression( WLD , WLD )
->                                               postfix_expression( WLD , WLD )
->                                                primary_expression( WLD , WLD )
->                                                 id_expression( WLD , WLD )
-> external_declaration( class , ; )
->  declaration( class , ; )
->   declaration_specifiers( class , } )
->    class_specifier( class , } )
->     member_declaration( public , : )
->      access_specifier( public , public )
->     member_declaration( Game , } )
->      ctor_definition( Game , } )
->       dtor_ctor_decl_spec( Game , : )
->       ctor_declarator( Game , ) )
->        qualified_id( Game , Game )
->       compound_statement( { , } )
->     member_declaration( ; , ; )
->     member_declaration( Game , ; )
->      ctor_definition( Game , ; )
->       dtor_ctor_decl_spec( Game , ; )
->       ctor_declarator( Game , ) )
->        qualified_id( Game , Game )
->        parameter_list( Team , STGC )
->         parameter_declaration_list( Team , STGC )
->          parameter_declaration( Team , FT )
->           declaration_specifiers( Team , Team )
->            qualified_type( Team , Team )
->             qualified_id( Team , Team )
->           declarator( * , FT )
->            ptr_operator( * , * )
->             cv_qualifier_seq( FT , * )
->            declarator( FT , FT )
->             direct_declarator( FT , FT )
->              qualified_id( FT , FT )
->          parameter_declaration( Team , ST )
->           declaration_specifiers( Team , Team )
->            qualified_type( Team , Team )
->             qualified_id( Team , Team )
->           declarator( * , ST )
->            ptr_operator( * , * )
->             cv_qualifier_seq( ST , * )
->            declarator( ST , ST )
->             direct_declarator( ST , ST )
->              qualified_id( ST , ST )
->          parameter_declaration( int , FTGC )
->           declaration_specifiers( int , int )
->            builtin_type_specifier( int , int )
->           declarator( FTGC , FTGC )
->            direct_declarator( FTGC , FTGC )
->             qualified_id( FTGC , FTGC )
->          parameter_declaration( int , STGC )
->           declaration_specifiers( int , int )
->            builtin_type_specifier( int , int )
->           declarator( STGC , STGC )
->            direct_declarator( STGC , STGC )
->             qualified_id( STGC , STGC )
->     member_declaration( Team , } )
->      function_definition( Team , } )
->       declaration_specifiers( Team , Team )
->        qualified_type( Team , Team )
->         qualified_id( Team , Team )
->       function_declarator( * , ) )
->        ptr_operator( * , * )
->         cv_qualifier_seq( getFirstTeam , * )
->        function_declarator( getFirstTeam , ) )
->         function_direct_declarator( getFirstTeam , ) )
->          qualified_id( getFirstTeam , getFirstTeam )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->         statement_list( return , ; )
->          statement( return , ; )
->           jump_statement( return , ; )
->            expression( FirstTeam , FirstTeam )
->             assignment_expression( FirstTeam , FirstTeam )
->              conditional_expression( FirstTeam , FirstTeam )
->               logical_or_expression( FirstTeam , FirstTeam )
->                logical_and_expression( FirstTeam , FirstTeam )
->                 inclusive_or_expression( FirstTeam , FirstTeam )
->                  exclusive_or_expression( FirstTeam , FirstTeam )
->                   and_expression( FirstTeam , FirstTeam )
->                    equality_expression( FirstTeam , FirstTeam )
->                     relational_expression( FirstTeam , FirstTeam )
->                      shift_expression( FirstTeam , FirstTeam )
->                       additive_expression( FirstTeam , FirstTeam )
->                        multiplicative_expression( FirstTeam , FirstTeam )
->                         pm_expression( FirstTeam , FirstTeam )
->                          cast_expression( FirstTeam , FirstTeam )
->                           unary_expression( FirstTeam , FirstTeam )
->                            postfix_expression( FirstTeam , FirstTeam )
->                             primary_expression( FirstTeam , FirstTeam )
->                              id_expression( FirstTeam , FirstTeam )
->     member_declaration( Team , } )
->      function_definition( Team , } )
->       declaration_specifiers( Team , Team )
->        qualified_type( Team , Team )
->         qualified_id( Team , Team )
->       function_declarator( * , ) )
->        ptr_operator( * , * )
->         cv_qualifier_seq( getSecondTeam , * )
->        function_declarator( getSecondTeam , ) )
->         function_direct_declarator( getSecondTeam , ) )
->          qualified_id( getSecondTeam , getSecondTeam )
->       func_decl_def( { , } )
->        compound_statement( { , } )
->         statement_list( return , ; )
->          statement( return , ; )
->           jump_statement( return , ; )
->            expression( SecondTeam , SecondTeam )
->             assignment_expression( SecondTeam , SecondTeam )
->              conditional_expression( SecondTeam , SecondTeam )
->               logical_or_expression( SecondTeam , SecondTeam )
->                logical_and_expression( SecondTeam , SecondTeam )
->                 inclusive_or_expression( SecondTeam , SecondTeam )
->                  exclusive_or_expression( SecondTeam , SecondTeam )
->                   and_expression( SecondTeam , SecondTeam )
->                    equality_expression( SecondTeam , SecondTeam )
->                     relational_expression( SecondTeam , SecondTeam )
->                      shift_expression( SecondTeam , SecondTeam )
->                       additive_expression( SecondTeam , SecondTeam )
->                        multiplicative_expression( SecondTeam , SecondTeam )
->                         pm_expression( SecondTeam , SecondTeam )
->                          cast_expression( SecondTeam , SecondTeam )
->                           unary_expression( SecondTeam , SecondTeam )
->                            postfix_expression( SecondTeam , SecondTeam )
->                             primary_expression( SecondTeam , SecondTeam )
->                              id_expression( SecondTeam , SecondTeam )
->     member_declaration( Team , ; )
->      function_definition( Team , ; )
->       declaration_specifiers( Team , Team )
->        qualified_type( Team , Team )
->         qualified_id( Team , Team )
->       function_declarator( * , ) )
->        ptr_operator( * , * )
->         cv_qualifier_seq( WhoWon , * )
->        function_declarator( WhoWon , ) )
->         function_direct_declarator( WhoWon , ) )
->          qualified_id( WhoWon , WhoWon )
->       func_decl_def( ; , ; )
->     member_declaration( void , ; )
->      function_definition( void , ; )
->       declaration_specifiers( void , void )
->        builtin_type_specifier( void , void )
->       function_declarator( print , ) )
->        function_direct_declarator( print , ) )
->         qualified_id( print , print )
->       func_decl_def( ; , ; )
->     member_declaration( void , ; )
->      function_definition( void , ; )
->       declaration_specifiers( void , void )
->        builtin_type_specifier( void , void )
->       function_declarator( printFCont , ) )
->        function_direct_declarator( printFCont , ) )
->         qualified_id( printFCont , printFCont )
->       func_decl_def( ; , ; )
->     member_declaration( void , ; )
->      function_definition( void , ; )
->       declaration_specifiers( void , void )
->        builtin_type_specifier( void , void )
->       function_declarator( printSCont , ) )
->        function_direct_declarator( printSCont , ) )
->         qualified_id( printSCont , printSCont )
->       func_decl_def( ; , ; )
->     member_declaration( protected , : )
->      access_specifier( protected , protected )
->     member_declaration( Team , ; )
->      declaration_specifiers( Team , Team )
->       qualified_type( Team , Team )
->        qualified_id( Team , Team )
->      member_declarator_list( * , FirstTeam )
->       member_declarator( * , FirstTeam )
->        declarator( * , FirstTeam )
->         ptr_operator( * , * )
->          cv_qualifier_seq( FirstTeam , * )
->         declarator( FirstTeam , FirstTeam )
->          direct_declarator( FirstTeam , FirstTeam )
->           qualified_id( FirstTeam , FirstTeam )
->     member_declaration( Team , ; )
->      declaration_specifiers( Team , Team )
->       qualified_type( Team , Team )
->        qualified_id( Team , Team )
->      member_declarator_list( * , SecondTeam )
->       member_declarator( * , SecondTeam )
->        declarator( * , SecondTeam )
->         ptr_operator( * , * )
->          cv_qualifier_seq( SecondTeam , * )
->         declarator( SecondTeam , SecondTeam )
->          direct_declarator( SecondTeam , SecondTeam )
->           qualified_id( SecondTeam , SecondTeam )
->     member_declaration( int , ; )
->      declaration_specifiers( int , int )
->       builtin_type_specifier( int , int )
->      member_declarator_list( FirstTeamGoalCount , FirstTeamGoalCount )
->       member_declarator( FirstTeamGoalCount , FirstTeamGoalCount )
->        declarator( FirstTeamGoalCount , FirstTeamGoalCount )
->         direct_declarator( FirstTeamGoalCount , FirstTeamGoalCount )
->          qualified_id( FirstTeamGoalCount , FirstTeamGoalCount )
->     member_declaration( int , ; )
->      declaration_specifiers( int , int )
->       builtin_type_specifier( int , int )
->      member_declarator_list( SecondTeamGoalCount , SecondTeamGoalCount )
->       member_declarator( SecondTeamGoalCount , SecondTeamGoalCount )
->        declarator( SecondTeamGoalCount , SecondTeamGoalCount )
->         direct_declarator( SecondTeamGoalCount , SecondTeamGoalCount )
->          qualified_id( SecondTeamGoalCount , SecondTeamGoalCount )
-> external_declaration( Game , } )
->  ctor_definition( Game , } )
->   dtor_ctor_decl_spec( Game , ; )
->   ctor_declarator( Game , ) )
->    qualified_id( Game , Game )
->     scope_override( Game , :: )
->    parameter_list( Team , STGC )
->     parameter_declaration_list( Team , STGC )
->      parameter_declaration( Team , FT )
->       declaration_specifiers( Team , Team )
->        qualified_type( Team , Team )
->         qualified_id( Team , Team )
->       declarator( * , FT )
->        ptr_operator( * , * )
->         cv_qualifier_seq( FT , * )
->        declarator( FT , FT )
->         direct_declarator( FT , FT )
->          qualified_id( FT , FT )
->      parameter_declaration( Team , ST )
->       declaration_specifiers( Team , Team )
->        qualified_type( Team , Team )
->         qualified_id( Team , Team )
->       declarator( * , ST )
->        ptr_operator( * , * )
->         cv_qualifier_seq( ST , * )
->        declarator( ST , ST )
->         direct_declarator( ST , ST )
->          qualified_id( ST , ST )
->      parameter_declaration( int , FTGC )
->       declaration_specifiers( int , int )
->        builtin_type_specifier( int , int )
->       declarator( FTGC , FTGC )
->        direct_declarator( FTGC , FTGC )
->         qualified_id( FTGC , FTGC )
->      parameter_declaration( int , STGC )
->       declaration_specifiers( int , int )
->        builtin_type_specifier( int , int )
->       declarator( STGC , STGC )
->        direct_declarator( STGC , STGC )
->         qualified_id( STGC , STGC )
->   compound_statement( { , } )
->    statement_list( FirstTeam , ; )
->     statement( FirstTeam , ; )
->      expression( FirstTeam , FT )
->       assignment_expression( FirstTeam , FT )
->        conditional_expression( FirstTeam , FirstTeam )
->         logical_or_expression( FirstTeam , FirstTeam )
->          logical_and_expression( FirstTeam , FirstTeam )
->           inclusive_or_expression( FirstTeam , FirstTeam )
->            exclusive_or_expression( FirstTeam , FirstTeam )
->             and_expression( FirstTeam , FirstTeam )
->              equality_expression( FirstTeam , FirstTeam )
->               relational_expression( FirstTeam , FirstTeam )
->                shift_expression( FirstTeam , FirstTeam )
->                 additive_expression( FirstTeam , FirstTeam )
->                  multiplicative_expression( FirstTeam , FirstTeam )
->                   pm_expression( FirstTeam , FirstTeam )
->                    cast_expression( FirstTeam , FirstTeam )
->                     unary_expression( FirstTeam , FirstTeam )
->                      postfix_expression( FirstTeam , FirstTeam )
->                       primary_expression( FirstTeam , FirstTeam )
->                        id_expression( FirstTeam , FirstTeam )
->        assignment_expression( FT , FT )
->         conditional_expression( FT , FT )
->          logical_or_expression( FT , FT )
->           logical_and_expression( FT , FT )
->            inclusive_or_expression( FT , FT )
->             exclusive_or_expression( FT , FT )
->              and_expression( FT , FT )
->               equality_expression( FT , FT )
->                relational_expression( FT , FT )
->                 shift_expression( FT , FT )
->                  additive_expression( FT , FT )
->                   multiplicative_expression( FT , FT )
->                    pm_expression( FT , FT )
->                     cast_expression( FT , FT )
->                      unary_expression( FT , FT )
->                       postfix_expression( FT , FT )
->                        primary_expression( FT , FT )
->                         id_expression( FT , FT )
->     statement( SecondTeam , ; )
->      expression( SecondTeam , ST )
->       assignment_expression( SecondTeam , ST )
->        conditional_expression( SecondTeam , SecondTeam )
->         logical_or_expression( SecondTeam , SecondTeam )
->          logical_and_expression( SecondTeam , SecondTeam )
->           inclusive_or_expression( SecondTeam , SecondTeam )
->            exclusive_or_expression( SecondTeam , SecondTeam )
->             and_expression( SecondTeam , SecondTeam )
->              equality_expression( SecondTeam , SecondTeam )
->               relational_expression( SecondTeam , SecondTeam )
->                shift_expression( SecondTeam , SecondTeam )
->                 additive_expression( SecondTeam , SecondTeam )
->                  multiplicative_expression( SecondTeam , SecondTeam )
->                   pm_expression( SecondTeam , SecondTeam )
->                    cast_expression( SecondTeam , SecondTeam )
->                     unary_expression( SecondTeam , SecondTeam )
->                      postfix_expression( SecondTeam , SecondTeam )
->                       primary_expression( SecondTeam , SecondTeam )
->                        id_expression( SecondTeam , SecondTeam )
->        assignment_expression( ST , ST )
->         conditional_expression( ST , ST )
->          logical_or_expression( ST , ST )
->           logical_and_expression( ST , ST )
->            inclusive_or_expression( ST , ST )
->             exclusive_or_expression( ST , ST )
->              and_expression( ST , ST )
->               equality_expression( ST , ST )
->                relational_expression( ST , ST )
->                 shift_expression( ST , ST )
->                  additive_expression( ST , ST )
->                   multiplicative_expression( ST , ST )
->                    pm_expression( ST , ST )
->                     cast_expression( ST , ST )
->                      unary_expression( ST , ST )
->                       postfix_expression( ST , ST )
->                        primary_expression( ST , ST )
->                         id_expression( ST , ST )
->     statement( FirstTeamGoalCount , ; )
->      expression( FirstTeamGoalCount , FTGC )
->       assignment_expression( FirstTeamGoalCount , FTGC )
->        conditional_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->         logical_or_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->          logical_and_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->           inclusive_or_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->            exclusive_or_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->             and_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->              equality_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->               relational_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                shift_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                 additive_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                  multiplicative_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                   pm_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                    cast_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                     unary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                      postfix_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                       primary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                        id_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->        assignment_expression( FTGC , FTGC )
->         conditional_expression( FTGC , FTGC )
->          logical_or_expression( FTGC , FTGC )
->           logical_and_expression( FTGC , FTGC )
->            inclusive_or_expression( FTGC , FTGC )
->             exclusive_or_expression( FTGC , FTGC )
->              and_expression( FTGC , FTGC )
->               equality_expression( FTGC , FTGC )
->                relational_expression( FTGC , FTGC )
->                 shift_expression( FTGC , FTGC )
->                  additive_expression( FTGC , FTGC )
->                   multiplicative_expression( FTGC , FTGC )
->                    pm_expression( FTGC , FTGC )
->                     cast_expression( FTGC , FTGC )
->                      unary_expression( FTGC , FTGC )
->                       postfix_expression( FTGC , FTGC )
->                        primary_expression( FTGC , FTGC )
->                         id_expression( FTGC , FTGC )
->     statement( SecondTeamGoalCount , ; )
->      expression( SecondTeamGoalCount , STGC )
->       assignment_expression( SecondTeamGoalCount , STGC )
->        conditional_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->         logical_or_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->          logical_and_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->           inclusive_or_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->            exclusive_or_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->             and_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->              equality_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->               relational_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                shift_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                 additive_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                  multiplicative_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                   pm_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                    cast_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                     unary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                      postfix_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                       primary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                        id_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->        assignment_expression( STGC , STGC )
->         conditional_expression( STGC , STGC )
->          logical_or_expression( STGC , STGC )
->           logical_and_expression( STGC , STGC )
->            inclusive_or_expression( STGC , STGC )
->             exclusive_or_expression( STGC , STGC )
->              and_expression( STGC , STGC )
->               equality_expression( STGC , STGC )
->                relational_expression( STGC , STGC )
->                 shift_expression( STGC , STGC )
->                  additive_expression( STGC , STGC )
->                   multiplicative_expression( STGC , STGC )
->                    pm_expression( STGC , STGC )
->                     cast_expression( STGC , STGC )
->                      unary_expression( STGC , STGC )
->                       postfix_expression( STGC , STGC )
->                        primary_expression( STGC , STGC )
->                         id_expression( STGC , STGC )
-> external_declaration( Team , } )
->  function_definition( Team , } )
->   declaration_specifiers( Team , Team )
->    qualified_type( Team , Team )
->     qualified_id( Team , Team )
->   function_declarator( * , ) )
->    ptr_operator( * , * )
->     cv_qualifier_seq( Game , * )
->    function_declarator( Game , ) )
->     function_direct_declarator( Game , ) )
->      qualified_id( Game , WhoWon )
->       scope_override( Game , :: )
->   func_decl_def( { , } )
->    compound_statement( { , } )
->     statement_list( if , ; )
->      statement( if , ; )
->       selection_statement( if , ; )
->        expression( FirstTeamGoalCount , SecondTeamGoalCount )
->         assignment_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->          conditional_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->           logical_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->            logical_and_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->             inclusive_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->              exclusive_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->               and_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                equality_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                 relational_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                  shift_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                   additive_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                    multiplicative_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                     pm_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                      cast_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                       unary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                        postfix_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                         primary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                          id_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                  shift_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                   additive_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                    multiplicative_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                     pm_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                      cast_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                       unary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                        postfix_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                         primary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                          id_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->        statement( return , ; )
->         jump_statement( return , ; )
->          expression( FirstTeam , FirstTeam )
->           assignment_expression( FirstTeam , FirstTeam )
->            conditional_expression( FirstTeam , FirstTeam )
->             logical_or_expression( FirstTeam , FirstTeam )
->              logical_and_expression( FirstTeam , FirstTeam )
->               inclusive_or_expression( FirstTeam , FirstTeam )
->                exclusive_or_expression( FirstTeam , FirstTeam )
->                 and_expression( FirstTeam , FirstTeam )
->                  equality_expression( FirstTeam , FirstTeam )
->                   relational_expression( FirstTeam , FirstTeam )
->                    shift_expression( FirstTeam , FirstTeam )
->                     additive_expression( FirstTeam , FirstTeam )
->                      multiplicative_expression( FirstTeam , FirstTeam )
->                       pm_expression( FirstTeam , FirstTeam )
->                        cast_expression( FirstTeam , FirstTeam )
->                         unary_expression( FirstTeam , FirstTeam )
->                          postfix_expression( FirstTeam , FirstTeam )
->                           primary_expression( FirstTeam , FirstTeam )
->                            id_expression( FirstTeam , FirstTeam )
->      statement( if , ; )
->       selection_statement( if , ; )
->        expression( FirstTeamGoalCount , SecondTeamGoalCount )
->         assignment_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->          conditional_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->           logical_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->            logical_and_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->             inclusive_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->              exclusive_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->               and_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                equality_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                 relational_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                  shift_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                   additive_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                    multiplicative_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                     pm_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                      cast_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                       unary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                        postfix_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                         primary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                          id_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                  shift_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                   additive_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                    multiplicative_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                     pm_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                      cast_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                       unary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                        postfix_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                         primary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                          id_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->        statement( return , ; )
->         jump_statement( return , ; )
->          expression( SecondTeam , SecondTeam )
->           assignment_expression( SecondTeam , SecondTeam )
->            conditional_expression( SecondTeam , SecondTeam )
->             logical_or_expression( SecondTeam , SecondTeam )
->              logical_and_expression( SecondTeam , SecondTeam )
->               inclusive_or_expression( SecondTeam , SecondTeam )
->                exclusive_or_expression( SecondTeam , SecondTeam )
->                 and_expression( SecondTeam , SecondTeam )
->                  equality_expression( SecondTeam , SecondTeam )
->                   relational_expression( SecondTeam , SecondTeam )
->                    shift_expression( SecondTeam , SecondTeam )
->                     additive_expression( SecondTeam , SecondTeam )
->                      multiplicative_expression( SecondTeam , SecondTeam )
->                       pm_expression( SecondTeam , SecondTeam )
->                        cast_expression( SecondTeam , SecondTeam )
->                         unary_expression( SecondTeam , SecondTeam )
->                          postfix_expression( SecondTeam , SecondTeam )
->                           primary_expression( SecondTeam , SecondTeam )
->                            id_expression( SecondTeam , SecondTeam )
->      statement( if , ; )
->       selection_statement( if , ; )
->        expression( FirstTeamGoalCount , SecondTeamGoalCount )
->         assignment_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->          conditional_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->           logical_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->            logical_and_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->             inclusive_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->              exclusive_or_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->               and_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                equality_expression( FirstTeamGoalCount , SecondTeamGoalCount )
->                 relational_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                  shift_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                   additive_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                    multiplicative_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                     pm_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                      cast_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                       unary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                        postfix_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                         primary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                          id_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                 relational_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                  shift_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                   additive_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                    multiplicative_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                     pm_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                      cast_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                       unary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                        postfix_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                         primary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                          id_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->        statement( return , ; )
->         jump_statement( return , ; )
->          expression( NULL , NULL )
->           assignment_expression( NULL , NULL )
->            conditional_expression( NULL , NULL )
->             logical_or_expression( NULL , NULL )
->              logical_and_expression( NULL , NULL )
->               inclusive_or_expression( NULL , NULL )
->                exclusive_or_expression( NULL , NULL )
->                 and_expression( NULL , NULL )
->                  equality_expression( NULL , NULL )
->                   relational_expression( NULL , NULL )
->                    shift_expression( NULL , NULL )
->                     additive_expression( NULL , NULL )
->                      multiplicative_expression( NULL , NULL )
->                       pm_expression( NULL , NULL )
->                        cast_expression( NULL , NULL )
->                         unary_expression( NULL , NULL )
->                          postfix_expression( NULL , NULL )
->                           primary_expression( NULL , NULL )
->                            id_expression( NULL , NULL )
-> external_declaration( void , } )
->  function_definition( void , } )
->   declaration_specifiers( void , void )
->    builtin_type_specifier( void , void )
->   function_declarator( Game , ) )
->    function_direct_declarator( Game , ) )
->     qualified_id( Game , print )
->      scope_override( Game , :: )
->   func_decl_def( { , } )
->    compound_statement( { , } )
->     statement_list( cout , ; )
->      statement( cout , ; )
->       expression( cout , " From: " )
->        assignment_expression( cout , " From: " )
->         conditional_expression( cout , " From: " )
->          logical_or_expression( cout , " From: " )
->           logical_and_expression( cout , " From: " )
->            inclusive_or_expression( cout , " From: " )
->             exclusive_or_expression( cout , " From: " )
->              and_expression( cout , " From: " )
->               equality_expression( cout , " From: " )
->                relational_expression( cout , " From: " )
->                 shift_expression( cout , " From: " )
->                  additive_expression( cout , cout )
->                   multiplicative_expression( cout , cout )
->                    pm_expression( cout , cout )
->                     cast_expression( cout , cout )
->                      unary_expression( cout , cout )
->                       postfix_expression( cout , cout )
->                        primary_expression( cout , cout )
->                         id_expression( cout , cout )
->                  additive_expression( "Team 1: " , "Team 1: " )
->                   multiplicative_expression( "Team 1: " , "Team 1: " )
->                    pm_expression( "Team 1: " , "Team 1: " )
->                     cast_expression( "Team 1: " , "Team 1: " )
->                      unary_expression( "Team 1: " , "Team 1: " )
->                       postfix_expression( "Team 1: " , "Team 1: " )
->                        primary_expression( "Team 1: " , "Team 1: " )
->                  additive_expression( FirstTeam , ) )
->                   multiplicative_expression( FirstTeam , ) )
->                    pm_expression( FirstTeam , ) )
->                     cast_expression( FirstTeam , ) )
->                      unary_expression( FirstTeam , ) )
->                       postfix_expression( FirstTeam , ) )
->                        primary_expression( FirstTeam , FirstTeam )
->                         id_expression( FirstTeam , FirstTeam )
->                        id_expression( getcountry , getcountry )
->                  additive_expression( " From: " , " From: " )
->                   multiplicative_expression( " From: " , " From: " )
->                    pm_expression( " From: " , " From: " )
->                     cast_expression( " From: " , " From: " )
->                      unary_expression( " From: " , " From: " )
->                       postfix_expression( " From: " , " From: " )
->                        primary_expression( " From: " , " From: " )
->      statement( printFCont , ; )
->       expression( printFCont , ) )
->        assignment_expression( printFCont , ) )
->         conditional_expression( printFCont , ) )
->          logical_or_expression( printFCont , ) )
->           logical_and_expression( printFCont , ) )
->            inclusive_or_expression( printFCont , ) )
->             exclusive_or_expression( printFCont , ) )
->              and_expression( printFCont , ) )
->               equality_expression( printFCont , ) )
->                relational_expression( printFCont , ) )
->                 shift_expression( printFCont , ) )
->                  additive_expression( printFCont , ) )
->                   multiplicative_expression( printFCont , ) )
->                    pm_expression( printFCont , ) )
->                     cast_expression( printFCont , ) )
->                      unary_expression( printFCont , ) )
->                       postfix_expression( printFCont , ) )
->                        primary_expression( printFCont , printFCont )
->                         id_expression( printFCont , printFCont )
->      statement( cout , ; )
->       expression( cout , endl )
->        assignment_expression( cout , endl )
->         conditional_expression( cout , endl )
->          logical_or_expression( cout , endl )
->           logical_and_expression( cout , endl )
->            inclusive_or_expression( cout , endl )
->             exclusive_or_expression( cout , endl )
->              and_expression( cout , endl )
->               equality_expression( cout , endl )
->                relational_expression( cout , endl )
->                 shift_expression( cout , endl )
->                  additive_expression( cout , cout )
->                   multiplicative_expression( cout , cout )
->                    pm_expression( cout , cout )
->                     cast_expression( cout , cout )
->                      unary_expression( cout , cout )
->                       postfix_expression( cout , cout )
->                        primary_expression( cout , cout )
->                         id_expression( cout , cout )
->                  additive_expression( " score: " , " score: " )
->                   multiplicative_expression( " score: " , " score: " )
->                    pm_expression( " score: " , " score: " )
->                     cast_expression( " score: " , " score: " )
->                      unary_expression( " score: " , " score: " )
->                       postfix_expression( " score: " , " score: " )
->                        primary_expression( " score: " , " score: " )
->                  additive_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                   multiplicative_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                    pm_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                     cast_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                      unary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                       postfix_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                        primary_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                         id_expression( FirstTeamGoalCount , FirstTeamGoalCount )
->                  additive_expression( endl , endl )
->                   multiplicative_expression( endl , endl )
->                    pm_expression( endl , endl )
->                     cast_expression( endl , endl )
->                      unary_expression( endl , endl )
->                       postfix_expression( endl , endl )
->                        primary_expression( endl , endl )
->                         id_expression( endl , endl )
->      statement( cout , ; )
->       expression( cout , " From: " )
->        assignment_expression( cout , " From: " )
->         conditional_expression( cout , " From: " )
->          logical_or_expression( cout , " From: " )
->           logical_and_expression( cout , " From: " )
->            inclusive_or_expression( cout , " From: " )
->             exclusive_or_expression( cout , " From: " )
->              and_expression( cout , " From: " )
->               equality_expression( cout , " From: " )
->                relational_expression( cout , " From: " )
->                 shift_expression( cout , " From: " )
->                  additive_expression( cout , cout )
->                   multiplicative_expression( cout , cout )
->                    pm_expression( cout , cout )
->                     cast_expression( cout , cout )
->                      unary_expression( cout , cout )
->                       postfix_expression( cout , cout )
->                        primary_expression( cout , cout )
->                         id_expression( cout , cout )
->                  additive_expression( "Team 2: " , "Team 2: " )
->                   multiplicative_expression( "Team 2: " , "Team 2: " )
->                    pm_expression( "Team 2: " , "Team 2: " )
->                     cast_expression( "Team 2: " , "Team 2: " )
->                      unary_expression( "Team 2: " , "Team 2: " )
->                       postfix_expression( "Team 2: " , "Team 2: " )
->                        primary_expression( "Team 2: " , "Team 2: " )
->                  additive_expression( SecondTeam , ) )
->                   multiplicative_expression( SecondTeam , ) )
->                    pm_expression( SecondTeam , ) )
->                     cast_expression( SecondTeam , ) )
->                      unary_expression( SecondTeam , ) )
->                       postfix_expression( SecondTeam , ) )
->                        primary_expression( SecondTeam , SecondTeam )
->                         id_expression( SecondTeam , SecondTeam )
->                        id_expression( getcountry , getcountry )
->                  additive_expression( " From: " , " From: " )
->                   multiplicative_expression( " From: " , " From: " )
->                    pm_expression( " From: " , " From: " )
->                     cast_expression( " From: " , " From: " )
->                      unary_expression( " From: " , " From: " )
->                       postfix_expression( " From: " , " From: " )
->                        primary_expression( " From: " , " From: " )
->      statement( printSCont , ; )
->       expression( printSCont , ) )
->        assignment_expression( printSCont , ) )
->         conditional_expression( printSCont , ) )
->          logical_or_expression( printSCont , ) )
->           logical_and_expression( printSCont , ) )
->            inclusive_or_expression( printSCont , ) )
->             exclusive_or_expression( printSCont , ) )
->              and_expression( printSCont , ) )
->               equality_expression( printSCont , ) )
->                relational_expression( printSCont , ) )
->                 shift_expression( printSCont , ) )
->                  additive_expression( printSCont , ) )
->                   multiplicative_expression( printSCont , ) )
->                    pm_expression( printSCont , ) )
->                     cast_expression( printSCont , ) )
->                      unary_expression( printSCont , ) )
->                       postfix_expression( printSCont , ) )
->                        primary_expression( printSCont , printSCont )
->                         id_expression( printSCont , printSCont )
->      statement( cout , ; )
->       expression( cout , endl )
->        assignment_expression( cout , endl )
->         conditional_expression( cout , endl )
->          logical_or_expression( cout , endl )
->           logical_and_expression( cout , endl )
->            inclusive_or_expression( cout , endl )
->             exclusive_or_expression( cout , endl )
->              and_expression( cout , endl )
->               equality_expression( cout , endl )
->                relational_expression( cout , endl )
->                 shift_expression( cout , endl )
->                  additive_expression( cout , cout )
->                   multiplicative_expression( cout , cout )
->                    pm_expression( cout , cout )
->                     cast_expression( cout , cout )
->                      unary_expression( cout , cout )
->                       postfix_expression( cout , cout )
->                        primary_expression( cout , cout )
->                         id_expression( cout , cout )
->                  additive_expression( " score: " , " score: " )
->                   multiplicative_expression( " score: " , " score: " )
->                    pm_expression( " score: " , " score: " )
->                     cast_expression( " score: " , " score: " )
->                      unary_expression( " score: " , " score: " )
->                       postfix_expression( " score: " , " score: " )
->                        primary_expression( " score: " , " score: " )
->                  additive_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                   multiplicative_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                    pm_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                     cast_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                      unary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                       postfix_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                        primary_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                         id_expression( SecondTeamGoalCount , SecondTeamGoalCount )
->                  additive_expression( endl , endl )
->                   multiplicative_expression( endl , endl )
->                    pm_expression( endl , endl )
->                     cast_expression( endl , endl )
->                      unary_expression( endl , endl )
->                       postfix_expression( endl , endl )
->                        primary_expression( endl , endl )
->                         id_expression( endl , endl )
-> external_declaration( void , } )
->  function_definition( void , } )
->   declaration_specifiers( void , void )
->    builtin_type_specifier( void , void )
->   function_declarator( Game , ) )
->    function_direct_declarator( Game , ) )
->     qualified_id( Game , printFCont )
->      scope_override( Game , :: )
->   func_decl_def( { , } )
->    compound_statement( { , } )
->     statement_list( continent , } )
->      statement( continent , ; )
->       declaration( continent , ; )
->        declaration_specifiers( continent , continent )
->         qualified_type( continent , continent )
->          qualified_id( continent , continent )
->        init_declarator_list( y , y )
->         init_declarator( y , y )
->          declarator( y , y )
->           direct_declarator( y , y )
->            qualified_id( y , y )
->      statement( y , ; )
->       expression( y , ) )
->        assignment_expression( y , ) )
->         conditional_expression( y , y )
->          logical_or_expression( y , y )
->           logical_and_expression( y , y )
->            inclusive_or_expression( y , y )
->             exclusive_or_expression( y , y )
->              and_expression( y , y )
->               equality_expression( y , y )
->                relational_expression( y , y )
->                 shift_expression( y , y )
->                  additive_expression( y , y )
->                   multiplicative_expression( y , y )
->                    pm_expression( y , y )
->                     cast_expression( y , y )
->                      unary_expression( y , y )
->                       postfix_expression( y , y )
->                        primary_expression( y , y )
->                         id_expression( y , y )
->         assignment_expression( FirstTeam , ) )
->          conditional_expression( FirstTeam , ) )
->           logical_or_expression( FirstTeam , ) )
->            logical_and_expression( FirstTeam , ) )
->             inclusive_or_expression( FirstTeam , ) )
->              exclusive_or_expression( FirstTeam , ) )
->               and_expression( FirstTeam , ) )
->                equality_expression( FirstTeam , ) )
->                 relational_expression( FirstTeam , ) )
->                  shift_expression( FirstTeam , ) )
->                   additive_expression( FirstTeam , ) )
->                    multiplicative_expression( FirstTeam , ) )
->                     pm_expression( FirstTeam , ) )
->                      cast_expression( FirstTeam , ) )
->                       unary_expression( FirstTeam , ) )
->                        postfix_expression( FirstTeam , ) )
->                         primary_expression( FirstTeam , FirstTeam )
->                          id_expression( FirstTeam , FirstTeam )
->                         id_expression( getcontinent , getcontinent )
->      statement( switch , } )
->       selection_statement( switch , } )
->        expression( y , y )
->         assignment_expression( y , y )
->          conditional_expression( y , y )
->           logical_or_expression( y , y )
->            logical_and_expression( y , y )
->             inclusive_or_expression( y , y )
->              exclusive_or_expression( y , y )
->               and_expression( y , y )
->                equality_expression( y , y )
->                 relational_expression( y , y )
->                  shift_expression( y , y )
->                   additive_expression( y , y )
->                    multiplicative_expression( y , y )
->                     pm_expression( y , y )
->                      cast_expression( y , y )
->                       unary_expression( y , y )
->                        postfix_expression( y , y )
->                         primary_expression( y , y )
->                          id_expression( y , y )
->        statement( { , } )
->         compound_statement( { , } )
->          statement_list( case , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 0 , 0 )
->              conditional_expression( 0 , 0 )
->               logical_or_expression( 0 , 0 )
->                logical_and_expression( 0 , 0 )
->                 inclusive_or_expression( 0 , 0 )
->                  exclusive_or_expression( 0 , 0 )
->                   and_expression( 0 , 0 )
->                    equality_expression( 0 , 0 )
->                     relational_expression( 0 , 0 )
->                      shift_expression( 0 , 0 )
->                       additive_expression( 0 , 0 )
->                        multiplicative_expression( 0 , 0 )
->                         pm_expression( 0 , 0 )
->                          cast_expression( 0 , 0 )
->                           unary_expression( 0 , 0 )
->                            postfix_expression( 0 , 0 )
->                             primary_expression( 0 , 0 )
->                              constant( 0 , 0 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Africa" , "Africa" )
->                          multiplicative_expression( "Africa" , "Africa" )
->                           pm_expression( "Africa" , "Africa" )
->                            cast_expression( "Africa" , "Africa" )
->                             unary_expression( "Africa" , "Africa" )
->                              postfix_expression( "Africa" , "Africa" )
->                               primary_expression( "Africa" , "Africa" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 1 , 1 )
->              conditional_expression( 1 , 1 )
->               logical_or_expression( 1 , 1 )
->                logical_and_expression( 1 , 1 )
->                 inclusive_or_expression( 1 , 1 )
->                  exclusive_or_expression( 1 , 1 )
->                   and_expression( 1 , 1 )
->                    equality_expression( 1 , 1 )
->                     relational_expression( 1 , 1 )
->                      shift_expression( 1 , 1 )
->                       additive_expression( 1 , 1 )
->                        multiplicative_expression( 1 , 1 )
->                         pm_expression( 1 , 1 )
->                          cast_expression( 1 , 1 )
->                           unary_expression( 1 , 1 )
->                            postfix_expression( 1 , 1 )
->                             primary_expression( 1 , 1 )
->                              constant( 1 , 1 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Asia" , "Asia" )
->                          multiplicative_expression( "Asia" , "Asia" )
->                           pm_expression( "Asia" , "Asia" )
->                            cast_expression( "Asia" , "Asia" )
->                             unary_expression( "Asia" , "Asia" )
->                              postfix_expression( "Asia" , "Asia" )
->                               primary_expression( "Asia" , "Asia" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 2 , 2 )
->              conditional_expression( 2 , 2 )
->               logical_or_expression( 2 , 2 )
->                logical_and_expression( 2 , 2 )
->                 inclusive_or_expression( 2 , 2 )
->                  exclusive_or_expression( 2 , 2 )
->                   and_expression( 2 , 2 )
->                    equality_expression( 2 , 2 )
->                     relational_expression( 2 , 2 )
->                      shift_expression( 2 , 2 )
->                       additive_expression( 2 , 2 )
->                        multiplicative_expression( 2 , 2 )
->                         pm_expression( 2 , 2 )
->                          cast_expression( 2 , 2 )
->                           unary_expression( 2 , 2 )
->                            postfix_expression( 2 , 2 )
->                             primary_expression( 2 , 2 )
->                              constant( 2 , 2 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Australia" , "Australia" )
->                          multiplicative_expression( "Australia" , "Australia" )
->                           pm_expression( "Australia" , "Australia" )
->                            cast_expression( "Australia" , "Australia" )
->                             unary_expression( "Australia" , "Australia" )
->                              postfix_expression( "Australia" , "Australia" )
->                               primary_expression( "Australia" , "Australia" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 3 , 3 )
->              conditional_expression( 3 , 3 )
->               logical_or_expression( 3 , 3 )
->                logical_and_expression( 3 , 3 )
->                 inclusive_or_expression( 3 , 3 )
->                  exclusive_or_expression( 3 , 3 )
->                   and_expression( 3 , 3 )
->                    equality_expression( 3 , 3 )
->                     relational_expression( 3 , 3 )
->                      shift_expression( 3 , 3 )
->                       additive_expression( 3 , 3 )
->                        multiplicative_expression( 3 , 3 )
->                         pm_expression( 3 , 3 )
->                          cast_expression( 3 , 3 )
->                           unary_expression( 3 , 3 )
->                            postfix_expression( 3 , 3 )
->                             primary_expression( 3 , 3 )
->                              constant( 3 , 3 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Europe" , "Europe" )
->                          multiplicative_expression( "Europe" , "Europe" )
->                           pm_expression( "Europe" , "Europe" )
->                            cast_expression( "Europe" , "Europe" )
->                             unary_expression( "Europe" , "Europe" )
->                              postfix_expression( "Europe" , "Europe" )
->                               primary_expression( "Europe" , "Europe" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 4 , 4 )
->              conditional_expression( 4 , 4 )
->               logical_or_expression( 4 , 4 )
->                logical_and_expression( 4 , 4 )
->                 inclusive_or_expression( 4 , 4 )
->                  exclusive_or_expression( 4 , 4 )
->                   and_expression( 4 , 4 )
->                    equality_expression( 4 , 4 )
->                     relational_expression( 4 , 4 )
->                      shift_expression( 4 , 4 )
->                       additive_expression( 4 , 4 )
->                        multiplicative_expression( 4 , 4 )
->                         pm_expression( 4 , 4 )
->                          cast_expression( 4 , 4 )
->                           unary_expression( 4 , 4 )
->                            postfix_expression( 4 , 4 )
->                             primary_expression( 4 , 4 )
->                              constant( 4 , 4 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Americas" , "Americas" )
->                          multiplicative_expression( "Americas" , "Americas" )
->                           pm_expression( "Americas" , "Americas" )
->                            cast_expression( "Americas" , "Americas" )
->                             unary_expression( "Americas" , "Americas" )
->                              postfix_expression( "Americas" , "Americas" )
->                               primary_expression( "Americas" , "Americas" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( default , ; )
->            labeled_statement( default , ; )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "other" , "other" )
->                          multiplicative_expression( "other" , "other" )
->                           pm_expression( "other" , "other" )
->                            cast_expression( "other" , "other" )
->                             unary_expression( "other" , "other" )
->                              postfix_expression( "other" , "other" )
->                               primary_expression( "other" , "other" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
-> external_declaration( void , } )
->  function_definition( void , } )
->   declaration_specifiers( void , void )
->    builtin_type_specifier( void , void )
->   function_declarator( Game , ) )
->    function_direct_declarator( Game , ) )
->     qualified_id( Game , printSCont )
->      scope_override( Game , :: )
->   func_decl_def( { , } )
->    compound_statement( { , } )
->     statement_list( continent , } )
->      statement( continent , ; )
->       declaration( continent , ; )
->        declaration_specifiers( continent , continent )
->         qualified_type( continent , continent )
->          qualified_id( continent , continent )
->        init_declarator_list( y , y )
->         init_declarator( y , y )
->          declarator( y , y )
->           direct_declarator( y , y )
->            qualified_id( y , y )
->      statement( y , ; )
->       expression( y , ) )
->        assignment_expression( y , ) )
->         conditional_expression( y , y )
->          logical_or_expression( y , y )
->           logical_and_expression( y , y )
->            inclusive_or_expression( y , y )
->             exclusive_or_expression( y , y )
->              and_expression( y , y )
->               equality_expression( y , y )
->                relational_expression( y , y )
->                 shift_expression( y , y )
->                  additive_expression( y , y )
->                   multiplicative_expression( y , y )
->                    pm_expression( y , y )
->                     cast_expression( y , y )
->                      unary_expression( y , y )
->                       postfix_expression( y , y )
->                        primary_expression( y , y )
->                         id_expression( y , y )
->         assignment_expression( SecondTeam , ) )
->          conditional_expression( SecondTeam , ) )
->           logical_or_expression( SecondTeam , ) )
->            logical_and_expression( SecondTeam , ) )
->             inclusive_or_expression( SecondTeam , ) )
->              exclusive_or_expression( SecondTeam , ) )
->               and_expression( SecondTeam , ) )
->                equality_expression( SecondTeam , ) )
->                 relational_expression( SecondTeam , ) )
->                  shift_expression( SecondTeam , ) )
->                   additive_expression( SecondTeam , ) )
->                    multiplicative_expression( SecondTeam , ) )
->                     pm_expression( SecondTeam , ) )
->                      cast_expression( SecondTeam , ) )
->                       unary_expression( SecondTeam , ) )
->                        postfix_expression( SecondTeam , ) )
->                         primary_expression( SecondTeam , SecondTeam )
->                          id_expression( SecondTeam , SecondTeam )
->                         id_expression( getcontinent , getcontinent )
->      statement( switch , } )
->       selection_statement( switch , } )
->        expression( y , y )
->         assignment_expression( y , y )
->          conditional_expression( y , y )
->           logical_or_expression( y , y )
->            logical_and_expression( y , y )
->             inclusive_or_expression( y , y )
->              exclusive_or_expression( y , y )
->               and_expression( y , y )
->                equality_expression( y , y )
->                 relational_expression( y , y )
->                  shift_expression( y , y )
->                   additive_expression( y , y )
->                    multiplicative_expression( y , y )
->                     pm_expression( y , y )
->                      cast_expression( y , y )
->                       unary_expression( y , y )
->                        postfix_expression( y , y )
->                         primary_expression( y , y )
->                          id_expression( y , y )
->        statement( { , } )
->         compound_statement( { , } )
->          statement_list( case , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 0 , 0 )
->              conditional_expression( 0 , 0 )
->               logical_or_expression( 0 , 0 )
->                logical_and_expression( 0 , 0 )
->                 inclusive_or_expression( 0 , 0 )
->                  exclusive_or_expression( 0 , 0 )
->                   and_expression( 0 , 0 )
->                    equality_expression( 0 , 0 )
->                     relational_expression( 0 , 0 )
->                      shift_expression( 0 , 0 )
->                       additive_expression( 0 , 0 )
->                        multiplicative_expression( 0 , 0 )
->                         pm_expression( 0 , 0 )
->                          cast_expression( 0 , 0 )
->                           unary_expression( 0 , 0 )
->                            postfix_expression( 0 , 0 )
->                             primary_expression( 0 , 0 )
->                              constant( 0 , 0 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Africa" , "Africa" )
->                          multiplicative_expression( "Africa" , "Africa" )
->                           pm_expression( "Africa" , "Africa" )
->                            cast_expression( "Africa" , "Africa" )
->                             unary_expression( "Africa" , "Africa" )
->                              postfix_expression( "Africa" , "Africa" )
->                               primary_expression( "Africa" , "Africa" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 1 , 1 )
->              conditional_expression( 1 , 1 )
->               logical_or_expression( 1 , 1 )
->                logical_and_expression( 1 , 1 )
->                 inclusive_or_expression( 1 , 1 )
->                  exclusive_or_expression( 1 , 1 )
->                   and_expression( 1 , 1 )
->                    equality_expression( 1 , 1 )
->                     relational_expression( 1 , 1 )
->                      shift_expression( 1 , 1 )
->                       additive_expression( 1 , 1 )
->                        multiplicative_expression( 1 , 1 )
->                         pm_expression( 1 , 1 )
->                          cast_expression( 1 , 1 )
->                           unary_expression( 1 , 1 )
->                            postfix_expression( 1 , 1 )
->                             primary_expression( 1 , 1 )
->                              constant( 1 , 1 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Asia" , "Asia" )
->                          multiplicative_expression( "Asia" , "Asia" )
->                           pm_expression( "Asia" , "Asia" )
->                            cast_expression( "Asia" , "Asia" )
->                             unary_expression( "Asia" , "Asia" )
->                              postfix_expression( "Asia" , "Asia" )
->                               primary_expression( "Asia" , "Asia" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 2 , 2 )
->              conditional_expression( 2 , 2 )
->               logical_or_expression( 2 , 2 )
->                logical_and_expression( 2 , 2 )
->                 inclusive_or_expression( 2 , 2 )
->                  exclusive_or_expression( 2 , 2 )
->                   and_expression( 2 , 2 )
->                    equality_expression( 2 , 2 )
->                     relational_expression( 2 , 2 )
->                      shift_expression( 2 , 2 )
->                       additive_expression( 2 , 2 )
->                        multiplicative_expression( 2 , 2 )
->                         pm_expression( 2 , 2 )
->                          cast_expression( 2 , 2 )
->                           unary_expression( 2 , 2 )
->                            postfix_expression( 2 , 2 )
->                             primary_expression( 2 , 2 )
->                              constant( 2 , 2 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Australia" , "Australia" )
->                          multiplicative_expression( "Australia" , "Australia" )
->                           pm_expression( "Australia" , "Australia" )
->                            cast_expression( "Australia" , "Australia" )
->                             unary_expression( "Australia" , "Australia" )
->                              postfix_expression( "Australia" , "Australia" )
->                               primary_expression( "Australia" , "Australia" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 3 , 3 )
->              conditional_expression( 3 , 3 )
->               logical_or_expression( 3 , 3 )
->                logical_and_expression( 3 , 3 )
->                 inclusive_or_expression( 3 , 3 )
->                  exclusive_or_expression( 3 , 3 )
->                   and_expression( 3 , 3 )
->                    equality_expression( 3 , 3 )
->                     relational_expression( 3 , 3 )
->                      shift_expression( 3 , 3 )
->                       additive_expression( 3 , 3 )
->                        multiplicative_expression( 3 , 3 )
->                         pm_expression( 3 , 3 )
->                          cast_expression( 3 , 3 )
->                           unary_expression( 3 , 3 )
->                            postfix_expression( 3 , 3 )
->                             primary_expression( 3 , 3 )
->                              constant( 3 , 3 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Europe" , "Europe" )
->                          multiplicative_expression( "Europe" , "Europe" )
->                           pm_expression( "Europe" , "Europe" )
->                            cast_expression( "Europe" , "Europe" )
->                             unary_expression( "Europe" , "Europe" )
->                              postfix_expression( "Europe" , "Europe" )
->                               primary_expression( "Europe" , "Europe" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( case , ; )
->            labeled_statement( case , ; )
->             constant_expression( 4 , 4 )
->              conditional_expression( 4 , 4 )
->               logical_or_expression( 4 , 4 )
->                logical_and_expression( 4 , 4 )
->                 inclusive_or_expression( 4 , 4 )
->                  exclusive_or_expression( 4 , 4 )
->                   and_expression( 4 , 4 )
->                    equality_expression( 4 , 4 )
->                     relational_expression( 4 , 4 )
->                      shift_expression( 4 , 4 )
->                       additive_expression( 4 , 4 )
->                        multiplicative_expression( 4 , 4 )
->                         pm_expression( 4 , 4 )
->                          cast_expression( 4 , 4 )
->                           unary_expression( 4 , 4 )
->                            postfix_expression( 4 , 4 )
->                             primary_expression( 4 , 4 )
->                              constant( 4 , 4 )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "Americas" , "Americas" )
->                          multiplicative_expression( "Americas" , "Americas" )
->                           pm_expression( "Americas" , "Americas" )
->                            cast_expression( "Americas" , "Americas" )
->                             unary_expression( "Americas" , "Americas" )
->                              postfix_expression( "Americas" , "Americas" )
->                               primary_expression( "Americas" , "Americas" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
->           statement( default , ; )
->            labeled_statement( default , ; )
->             statement( cout , ; )
->              expression( cout , endl )
->               assignment_expression( cout , endl )
->                conditional_expression( cout , endl )
->                 logical_or_expression( cout , endl )
->                  logical_and_expression( cout , endl )
->                   inclusive_or_expression( cout , endl )
->                    exclusive_or_expression( cout , endl )
->                     and_expression( cout , endl )
->                      equality_expression( cout , endl )
->                       relational_expression( cout , endl )
->                        shift_expression( cout , endl )
->                         additive_expression( cout , cout )
->                          multiplicative_expression( cout , cout )
->                           pm_expression( cout , cout )
->                            cast_expression( cout , cout )
->                             unary_expression( cout , cout )
->                              postfix_expression( cout , cout )
->                               primary_expression( cout , cout )
->                                id_expression( cout , cout )
->                         additive_expression( "other" , "other" )
->                          multiplicative_expression( "other" , "other" )
->                           pm_expression( "other" , "other" )
->                            cast_expression( "other" , "other" )
->                             unary_expression( "other" , "other" )
->                              postfix_expression( "other" , "other" )
->                               primary_expression( "other" , "other" )
->                         additive_expression( endl , endl )
->                          multiplicative_expression( endl , endl )
->                           pm_expression( endl , endl )
->                            cast_expression( endl , endl )
->                             unary_expression( endl , endl )
->                              postfix_expression( endl , endl )
->                               primary_expression( endl , endl )
->                                id_expression( endl , endl )
->           statement( break , ; )
->            jump_statement( break , ; )
-> external_declaration( main , } )
->  function_definition( main , } )
->   function_declarator( main , ) )
->    function_direct_declarator( main , ) )
->     qualified_id( main , main )
->   func_decl_def( { , } )
->    compound_statement( { , } )
->     statement_list( char , } )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( name , ] )
->         init_declarator( name , ] )
->          declarator( name , ] )
->           direct_declarator( name , ] )
->            qualified_id( name , name )
->            declarator_suffixes( [ , ] )
->             constant_expression( 20 , 20 )
->              conditional_expression( 20 , 20 )
->               logical_or_expression( 20 , 20 )
->                logical_and_expression( 20 , 20 )
->                 inclusive_or_expression( 20 , 20 )
->                  exclusive_or_expression( 20 , 20 )
->                   and_expression( 20 , 20 )
->                    equality_expression( 20 , 20 )
->                     relational_expression( 20 , 20 )
->                      shift_expression( 20 , 20 )
->                       additive_expression( 20 , 20 )
->                        multiplicative_expression( 20 , 20 )
->                         pm_expression( 20 , 20 )
->                          cast_expression( 20 , 20 )
->                           unary_expression( 20 , 20 )
->                            postfix_expression( 20 , 20 )
->                             primary_expression( 20 , 20 )
->                              constant( 20 , 20 )
->      statement( Team , ; )
->       declaration( Team , ; )
->        declaration_specifiers( Team , Team )
->         qualified_type( Team , Team )
->          qualified_id( Team , Team )
->        init_declarator_list( Teamc , ] )
->         init_declarator( Teamc , ] )
->          declarator( Teamc , ] )
->           direct_declarator( Teamc , ] )
->            qualified_id( Teamc , Teamc )
->            declarator_suffixes( [ , ] )
->             constant_expression( 4 , 4 )
->              conditional_expression( 4 , 4 )
->               logical_or_expression( 4 , 4 )
->                logical_and_expression( 4 , 4 )
->                 inclusive_or_expression( 4 , 4 )
->                  exclusive_or_expression( 4 , 4 )
->                   and_expression( 4 , 4 )
->                    equality_expression( 4 , 4 )
->                     relational_expression( 4 , 4 )
->                      shift_expression( 4 , 4 )
->                       additive_expression( 4 , 4 )
->                        multiplicative_expression( 4 , 4 )
->                         pm_expression( 4 , 4 )
->                          cast_expression( 4 , 4 )
->                           unary_expression( 4 , 4 )
->                            postfix_expression( 4 , 4 )
->                             primary_expression( 4 , 4 )
->                              constant( 4 , 4 )
->      statement( Game , ; )
->       declaration( Game , ; )
->        declaration_specifiers( Game , Game )
->         qualified_type( Game , Game )
->          qualified_id( Game , Game )
->        init_declarator_list( Gamec , ] )
->         init_declarator( Gamec , ] )
->          declarator( Gamec , ] )
->           direct_declarator( Gamec , ] )
->            qualified_id( Gamec , Gamec )
->            declarator_suffixes( [ , ] )
->             constant_expression( 6 , 6 )
->              conditional_expression( 6 , 6 )
->               logical_or_expression( 6 , 6 )
->                logical_and_expression( 6 , 6 )
->                 inclusive_or_expression( 6 , 6 )
->                  exclusive_or_expression( 6 , 6 )
->                   and_expression( 6 , 6 )
->                    equality_expression( 6 , 6 )
->                     relational_expression( 6 , 6 )
->                      shift_expression( 6 , 6 )
->                       additive_expression( 6 , 6 )
->                        multiplicative_expression( 6 , 6 )
->                         pm_expression( 6 , 6 )
->                          cast_expression( 6 , 6 )
->                           unary_expression( 6 , 6 )
->                            postfix_expression( 6 , 6 )
->                             primary_expression( 6 , 6 )
->                              constant( 6 , 6 )
->      statement( int , ; )
->       declaration( int , ; )
->        declaration_specifiers( int , int )
->         builtin_type_specifier( int , int )
->        init_declarator_list( fgoal , sgoal )
->         init_declarator( fgoal , fgoal )
->          declarator( fgoal , fgoal )
->           direct_declarator( fgoal , fgoal )
->            qualified_id( fgoal , fgoal )
->         init_declarator( sgoal , sgoal )
->          declarator( sgoal , sgoal )
->           direct_declarator( sgoal , sgoal )
->            qualified_id( sgoal , sgoal )
->      statement( continent , ; )
->       declaration( continent , ; )
->        declaration_specifiers( continent , continent )
->         qualified_type( continent , continent )
->          qualified_id( continent , continent )
->        init_declarator_list( con , con )
->         init_declarator( con , con )
->          declarator( con , con )
->           direct_declarator( con , con )
->            qualified_id( con , con )
->      statement( int , ; )
->       declaration( int , ; )
->        declaration_specifiers( int , int )
->         builtin_type_specifier( int , int )
->        init_declarator_list( conInt , conInt )
->         init_declarator( conInt , conInt )
->          declarator( conInt , conInt )
->           direct_declarator( conInt , conInt )
->            qualified_id( conInt , conInt )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( cntry , ] )
->         init_declarator( cntry , ] )
->          declarator( cntry , ] )
->           direct_declarator( cntry , ] )
->            qualified_id( cntry , cntry )
->            declarator_suffixes( [ , ] )
->             constant_expression( 20 , 20 )
->              conditional_expression( 20 , 20 )
->               logical_or_expression( 20 , 20 )
->                logical_and_expression( 20 , 20 )
->                 inclusive_or_expression( 20 , 20 )
->                  exclusive_or_expression( 20 , 20 )
->                   and_expression( 20 , 20 )
->                    equality_expression( 20 , 20 )
->                     relational_expression( 20 , 20 )
->                      shift_expression( 20 , 20 )
->                       additive_expression( 20 , 20 )
->                        multiplicative_expression( 20 , 20 )
->                         pm_expression( 20 , 20 )
->                          cast_expression( 20 , 20 )
->                           unary_expression( 20 , 20 )
->                            postfix_expression( 20 , 20 )
->                             primary_expression( 20 , 20 )
->                              constant( 20 , 20 )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( fteam , ] )
->         init_declarator( fteam , ] )
->          declarator( fteam , ] )
->           direct_declarator( fteam , ] )
->            qualified_id( fteam , fteam )
->            declarator_suffixes( [ , ] )
->             constant_expression( 20 , 20 )
->              conditional_expression( 20 , 20 )
->               logical_or_expression( 20 , 20 )
->                logical_and_expression( 20 , 20 )
->                 inclusive_or_expression( 20 , 20 )
->                  exclusive_or_expression( 20 , 20 )
->                   and_expression( 20 , 20 )
->                    equality_expression( 20 , 20 )
->                     relational_expression( 20 , 20 )
->                      shift_expression( 20 , 20 )
->                       additive_expression( 20 , 20 )
->                        multiplicative_expression( 20 , 20 )
->                         pm_expression( 20 , 20 )
->                          cast_expression( 20 , 20 )
->                           unary_expression( 20 , 20 )
->                            postfix_expression( 20 , 20 )
->                             primary_expression( 20 , 20 )
->                              constant( 20 , 20 )
->         init_declarator( steam , ] )
->          declarator( steam , ] )
->           direct_declarator( steam , ] )
->            qualified_id( steam , steam )
->            declarator_suffixes( [ , ] )
->             constant_expression( 20 , 20 )
->              conditional_expression( 20 , 20 )
->               logical_or_expression( 20 , 20 )
->                logical_and_expression( 20 , 20 )
->                 inclusive_or_expression( 20 , 20 )
->                  exclusive_or_expression( 20 , 20 )
->                   and_expression( 20 , 20 )
->                    equality_expression( 20 , 20 )
->                     relational_expression( 20 , 20 )
->                      shift_expression( 20 , 20 )
->                       additive_expression( 20 , 20 )
->                        multiplicative_expression( 20 , 20 )
->                         pm_expression( 20 , 20 )
->                          cast_expression( 20 , 20 )
->                           unary_expression( 20 , 20 )
->                            postfix_expression( 20 , 20 )
->                             primary_expression( 20 , 20 )
->                              constant( 20 , 20 )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( match1 , ] )
->         init_declarator( match1 , ] )
->          declarator( match1 , ] )
->           direct_declarator( match1 , ] )
->            qualified_id( match1 , match1 )
->            declarator_suffixes( [ , ] )
->             constant_expression( 20 , 20 )
->              conditional_expression( 20 , 20 )
->               logical_or_expression( 20 , 20 )
->                logical_and_expression( 20 , 20 )
->                 inclusive_or_expression( 20 , 20 )
->                  exclusive_or_expression( 20 , 20 )
->                   and_expression( 20 , 20 )
->                    equality_expression( 20 , 20 )
->                     relational_expression( 20 , 20 )
->                      shift_expression( 20 , 20 )
->                       additive_expression( 20 , 20 )
->                        multiplicative_expression( 20 , 20 )
->                         pm_expression( 20 , 20 )
->                          cast_expression( 20 , 20 )
->                           unary_expression( 20 , 20 )
->                            postfix_expression( 20 , 20 )
->                             primary_expression( 20 , 20 )
->                              constant( 20 , 20 )
->         init_declarator( match2 , ] )
->          declarator( match2 , ] )
->           direct_declarator( match2 , ] )
->            qualified_id( match2 , match2 )
->            declarator_suffixes( [ , ] )
->             constant_expression( 20 , 20 )
->              conditional_expression( 20 , 20 )
->               logical_or_expression( 20 , 20 )
->                logical_and_expression( 20 , 20 )
->                 inclusive_or_expression( 20 , 20 )
->                  exclusive_or_expression( 20 , 20 )
->                   and_expression( 20 , 20 )
->                    equality_expression( 20 , 20 )
->                     relational_expression( 20 , 20 )
->                      shift_expression( 20 , 20 )
->                       additive_expression( 20 , 20 )
->                        multiplicative_expression( 20 , 20 )
->                         pm_expression( 20 , 20 )
->                          cast_expression( 20 , 20 )
->                           unary_expression( 20 , 20 )
->                            postfix_expression( 20 , 20 )
->                             primary_expression( 20 , 20 )
->                              constant( 20 , 20 )
->      statement( int , ; )
->       declaration( int , ; )
->        declaration_specifiers( int , int )
->         builtin_type_specifier( int , int )
->        init_declarator_list( choice , choice )
->         init_declarator( choice , choice )
->          declarator( choice , choice )
->           direct_declarator( choice , choice )
->            qualified_id( choice , choice )
->      statement( Team , ; )
->       declaration( Team , ; )
->        declaration_specifiers( Team , Team )
->         qualified_type( Team , Team )
->          qualified_id( Team , Team )
->        init_declarator_list( * , hiti2 )
->         init_declarator( * , hiti2 )
->          declarator( * , hiti2 )
->           ptr_operator( * , * )
->            cv_qualifier_seq( hiti2 , * )
->           declarator( hiti2 , hiti2 )
->            direct_declarator( hiti2 , hiti2 )
->             qualified_id( hiti2 , hiti2 )
->      statement( Team , ; )
->       declaration( Team , ; )
->        declaration_specifiers( Team , Team )
->         qualified_type( Team , Team )
->          qualified_id( Team , Team )
->        init_declarator_list( * , hiti1 )
->         init_declarator( * , hiti1 )
->          declarator( * , hiti1 )
->           ptr_operator( * , * )
->            cv_qualifier_seq( hiti1 , * )
->           declarator( hiti1 , hiti1 )
->            direct_declarator( hiti1 , hiti1 )
->             qualified_id( hiti1 , hiti1 )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( teem , ] )
->         init_declarator( teem , ] )
->          declarator( teem , ] )
->           direct_declarator( teem , ] )
->            qualified_id( teem , teem )
->            declarator_suffixes( [ , ] )
->             constant_expression( 20 , 20 )
->              conditional_expression( 20 , 20 )
->               logical_or_expression( 20 , 20 )
->                logical_and_expression( 20 , 20 )
->                 inclusive_or_expression( 20 , 20 )
->                  exclusive_or_expression( 20 , 20 )
->                   and_expression( 20 , 20 )
->                    equality_expression( 20 , 20 )
->                     relational_expression( 20 , 20 )
->                      shift_expression( 20 , 20 )
->                       additive_expression( 20 , 20 )
->                        multiplicative_expression( 20 , 20 )
->                         pm_expression( 20 , 20 )
->                          cast_expression( 20 , 20 )
->                           unary_expression( 20 , 20 )
->                            postfix_expression( 20 , 20 )
->                             primary_expression( 20 , 20 )
->                              constant( 20 , 20 )
->      statement( Team , ; )
->       declaration( Team , ; )
->        declaration_specifiers( Team , Team )
->         qualified_type( Team , Team )
->          qualified_id( Team , Team )
->        init_declarator_list( * , inst )
->         init_declarator( * , inst )
->          declarator( * , inst )
->           ptr_operator( * , * )
->            cv_qualifier_seq( inst , * )
->           declarator( inst , inst )
->            direct_declarator( inst , inst )
->             qualified_id( inst , inst )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( * , p1 )
->         init_declarator( * , p1 )
->          declarator( * , p1 )
->           ptr_operator( * , * )
->            cv_qualifier_seq( p1 , * )
->           declarator( p1 , p1 )
->            direct_declarator( p1 , p1 )
->             qualified_id( p1 , p1 )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( * , p2 )
->         init_declarator( * , p2 )
->          declarator( * , p2 )
->           ptr_operator( * , * )
->            cv_qualifier_seq( p2 , * )
->           declarator( p2 , p2 )
->            direct_declarator( p2 , p2 )
->             qualified_id( p2 , p2 )
->      statement( Team , ; )
->       declaration( Team , ; )
->        declaration_specifiers( Team , Team )
->         qualified_type( Team , Team )
->          qualified_id( Team , Team )
->        init_declarator_list( * , chck1 )
->         init_declarator( * , chck1 )
->          declarator( * , chck1 )
->           ptr_operator( * , * )
->            cv_qualifier_seq( chck1 , * )
->           declarator( chck1 , chck1 )
->            direct_declarator( chck1 , chck1 )
->             qualified_id( chck1 , chck1 )
->      statement( Team , ; )
->       declaration( Team , ; )
->        declaration_specifiers( Team , Team )
->         qualified_type( Team , Team )
->          qualified_id( Team , Team )
->        init_declarator_list( * , chck2 )
->         init_declarator( * , chck2 )
->          declarator( * , chck2 )
->           ptr_operator( * , * )
->            cv_qualifier_seq( chck2 , * )
->           declarator( chck2 , chck2 )
->            direct_declarator( chck2 , chck2 )
->             qualified_id( chck2 , chck2 )
->      statement( char , ; )
->       declaration( char , ; )
->        declaration_specifiers( char , char )
->         builtin_type_specifier( char , char )
->        init_declarator_list( comp1 , comp2 )
->         init_declarator( comp1 , comp1 )
->          declarator( comp1 , comp1 )
->           direct_declarator( comp1 , comp1 )
->            qualified_id( comp1 , comp1 )
->         init_declarator( comp2 , comp2 )
->          declarator( comp2 , comp2 )
->           direct_declarator( comp2 , comp2 )
->            qualified_id( comp2 , comp2 )
->      statement( cout , ; )
->       expression( cout , endl )
->        assignment_expression( cout , endl )
->         conditional_expression( cout , endl )
->          logical_or_expression( cout , endl )
->           logical_and_expression( cout , endl )
->            inclusive_or_expression( cout , endl )
->             exclusive_or_expression( cout , endl )
->              and_expression( cout , endl )
->               equality_expression( cout , endl )
->                relational_expression( cout , endl )
->                 shift_expression( cout , endl )
->                  additive_expression( cout , cout )
->                   multiplicative_expression( cout , cout )
->                    pm_expression( cout , cout )
->                     cast_expression( cout , cout )
->                      unary_expression( cout , cout )
->                       postfix_expression( cout , cout )
->                        primary_expression( cout , cout )
->                         id_expression( cout , cout )
->                  additive_expression( "List the teams that are playing" , "List the teams that are playing" )
->                   multiplicative_expression( "List the teams that are playing" , "List the teams that are playing" )
->                    pm_expression( "List the teams that are playing" , "List the teams that are playing" )
->                     cast_expression( "List the teams that are playing" , "List the teams that are playing" )
->                      unary_expression( "List the teams that are playing" , "List the teams that are playing" )
->                       postfix_expression( "List the teams that are playing" , "List the teams that are playing" )
->                        primary_expression( "List the teams that are playing" , "List the teams that are playing" )
->                  additive_expression( endl , endl )
->                   multiplicative_expression( endl , endl )
->                    pm_expression( endl , endl )
->                     cast_expression( endl , endl )
->                      unary_expression( endl , endl )
->                       postfix_expression( endl , endl )
->                        primary_expression( endl , endl )
->                         id_expression( endl , endl )
->                  additive_expression( endl , endl )
->                   multiplicative_expression( endl , endl )
->                    pm_expression( endl , endl )
->                     cast_expression( endl , endl )
->                      unary_expression( endl , endl )
->                       postfix_expression( endl , endl )
->                        primary_expression( endl , endl )
->                         id_expression( endl , endl )
->      statement( for , } )
->       iteration_statement( for , } )
->        declaration( int , ; )
->         declaration_specifiers( int , int )
->          builtin_type_specifier( int , int )
->         init_declarator_list( x , 0 )
->          init_declarator( x , 0 )
->           declarator( x , x )
->            direct_declarator( x , x )
->             qualified_id( x , x )
->           initializer( 0 , 0 )
->            assignment_expression( 0 , 0 )
->             conditional_expression( 0 , 0 )
->              logical_or_expression( 0 , 0 )
->               logical_and_expression( 0 , 0 )
->                inclusive_or_expression( 0 , 0 )
->                 exclusive_or_expression( 0 , 0 )
->                  and_expression( 0 , 0 )
->                   equality_expression( 0 , 0 )
->                    relational_expression( 0 , 0 )
->                     shift_expression( 0 , 0 )
->                      additive_expression( 0 , 0 )
->                       multiplicative_expression( 0 , 0 )
->                        pm_expression( 0 , 0 )
->                         cast_expression( 0 , 0 )
->                          unary_expression( 0 , 0 )
->                           postfix_expression( 0 , 0 )
->                            primary_expression( 0 , 0 )
->                             constant( 0 , 0 )
->        expression( x , 4 )
->         assignment_expression( x , 4 )
->          conditional_expression( x , 4 )
->           logical_or_expression( x , 4 )
->            logical_and_expression( x , 4 )
->             inclusive_or_expression( x , 4 )
->              exclusive_or_expression( x , 4 )
->               and_expression( x , 4 )
->                equality_expression( x , 4 )
->                 relational_expression( x , 4 )
->                  shift_expression( x , x )
->                   additive_expression( x , x )
->                    multiplicative_expression( x , x )
->                     pm_expression( x , x )
->                      cast_expression( x , x )
->                       unary_expression( x , x )
->                        postfix_expression( x , x )
->                         primary_expression( x , x )
->                          id_expression( x , x )
->                  shift_expression( 4 , 4 )
->                   additive_expression( 4 , 4 )
->                    multiplicative_expression( 4 , 4 )
->                     pm_expression( 4 , 4 )
->                      cast_expression( 4 , 4 )
->                       unary_expression( 4 , 4 )
->                        postfix_expression( 4 , 4 )
->                         primary_expression( 4 , 4 )
->                          constant( 4 , 4 )
->        expression( x , ++ )
->         assignment_expression( x , ++ )
->          conditional_expression( x , ++ )
->           logical_or_expression( x , ++ )
->            logical_and_expression( x , ++ )
->             inclusive_or_expression( x , ++ )
->              exclusive_or_expression( x , ++ )
->               and_expression( x , ++ )
->                equality_expression( x , ++ )
->                 relational_expression( x , ++ )
->                  shift_expression( x , ++ )
->                   additive_expression( x , ++ )
->                    multiplicative_expression( x , ++ )
->                     pm_expression( x , ++ )
->                      cast_expression( x , ++ )
->                       unary_expression( x , ++ )
->                        postfix_expression( x , ++ )
->                         primary_expression( x , x )
->                          id_expression( x , x )
->        statement( { , } )
->         compound_statement( { , } )
->          statement_list( cout , ; )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "What is the team name?" , "What is the team name?" )
->                        multiplicative_expression( "What is the team name?" , "What is the team name?" )
->                         pm_expression( "What is the team name?" , "What is the team name?" )
->                          cast_expression( "What is the team name?" , "What is the team name?" )
->                           unary_expression( "What is the team name?" , "What is the team name?" )
->                            postfix_expression( "What is the team name?" , "What is the team name?" )
->                             primary_expression( "What is the team name?" , "What is the team name?" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cin , ; )
->            expression( cin , name )
->             assignment_expression( cin , name )
->              conditional_expression( cin , name )
->               logical_or_expression( cin , name )
->                logical_and_expression( cin , name )
->                 inclusive_or_expression( cin , name )
->                  exclusive_or_expression( cin , name )
->                   and_expression( cin , name )
->                    equality_expression( cin , name )
->                     relational_expression( cin , name )
->                      shift_expression( cin , name )
->                       additive_expression( cin , cin )
->                        multiplicative_expression( cin , cin )
->                         pm_expression( cin , cin )
->                          cast_expression( cin , cin )
->                           unary_expression( cin , cin )
->                            postfix_expression( cin , cin )
->                             primary_expression( cin , cin )
->                              id_expression( cin , cin )
->                       additive_expression( name , name )
->                        multiplicative_expression( name , name )
->                         pm_expression( name , name )
->                          cast_expression( name , name )
->                           unary_expression( name , name )
->                            postfix_expression( name , name )
->                             primary_expression( name , name )
->                              id_expression( name , name )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "What continent?" , "What continent?" )
->                        multiplicative_expression( "What continent?" , "What continent?" )
->                         pm_expression( "What continent?" , "What continent?" )
->                          cast_expression( "What continent?" , "What continent?" )
->                           unary_expression( "What continent?" , "What continent?" )
->                            postfix_expression( "What continent?" , "What continent?" )
->                             primary_expression( "What continent?" , "What continent?" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->                       additive_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                        multiplicative_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                         pm_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                          cast_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                           unary_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                            postfix_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                             primary_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cin , ; )
->            expression( cin , conInt )
->             assignment_expression( cin , conInt )
->              conditional_expression( cin , conInt )
->               logical_or_expression( cin , conInt )
->                logical_and_expression( cin , conInt )
->                 inclusive_or_expression( cin , conInt )
->                  exclusive_or_expression( cin , conInt )
->                   and_expression( cin , conInt )
->                    equality_expression( cin , conInt )
->                     relational_expression( cin , conInt )
->                      shift_expression( cin , conInt )
->                       additive_expression( cin , cin )
->                        multiplicative_expression( cin , cin )
->                         pm_expression( cin , cin )
->                          cast_expression( cin , cin )
->                           unary_expression( cin , cin )
->                            postfix_expression( cin , cin )
->                             primary_expression( cin , cin )
->                              id_expression( cin , cin )
->                       additive_expression( conInt , conInt )
->                        multiplicative_expression( conInt , conInt )
->                         pm_expression( conInt , conInt )
->                          cast_expression( conInt , conInt )
->                           unary_expression( conInt , conInt )
->                            postfix_expression( conInt , conInt )
->                             primary_expression( conInt , conInt )
->                              id_expression( conInt , conInt )
->           statement( switch , } )
->            selection_statement( switch , } )
->             expression( conInt , conInt )
->              assignment_expression( conInt , conInt )
->               conditional_expression( conInt , conInt )
->                logical_or_expression( conInt , conInt )
->                 logical_and_expression( conInt , conInt )
->                  inclusive_or_expression( conInt , conInt )
->                   exclusive_or_expression( conInt , conInt )
->                    and_expression( conInt , conInt )
->                     equality_expression( conInt , conInt )
->                      relational_expression( conInt , conInt )
->                       shift_expression( conInt , conInt )
->                        additive_expression( conInt , conInt )
->                         multiplicative_expression( conInt , conInt )
->                          pm_expression( conInt , conInt )
->                           cast_expression( conInt , conInt )
->                            unary_expression( conInt , conInt )
->                             postfix_expression( conInt , conInt )
->                              primary_expression( conInt , conInt )
->                               id_expression( conInt , conInt )
->             statement( { , } )
->              compound_statement( { , } )
->               statement_list( case , ; )
->                statement( case , ; )
->                 labeled_statement( case , ; )
->                  constant_expression( 1 , 1 )
->                   conditional_expression( 1 , 1 )
->                    logical_or_expression( 1 , 1 )
->                     logical_and_expression( 1 , 1 )
->                      inclusive_or_expression( 1 , 1 )
->                       exclusive_or_expression( 1 , 1 )
->                        and_expression( 1 , 1 )
->                         equality_expression( 1 , 1 )
->                          relational_expression( 1 , 1 )
->                           shift_expression( 1 , 1 )
->                            additive_expression( 1 , 1 )
->                             multiplicative_expression( 1 , 1 )
->                              pm_expression( 1 , 1 )
->                               cast_expression( 1 , 1 )
->                                unary_expression( 1 , 1 )
->                                 postfix_expression( 1 , 1 )
->                                  primary_expression( 1 , 1 )
->                                   constant( 1 , 1 )
->                  statement( con , ; )
->                   expression( con , Africa )
->                    assignment_expression( con , Africa )
->                     conditional_expression( con , con )
->                      logical_or_expression( con , con )
->                       logical_and_expression( con , con )
->                        inclusive_or_expression( con , con )
->                         exclusive_or_expression( con , con )
->                          and_expression( con , con )
->                           equality_expression( con , con )
->                            relational_expression( con , con )
->                             shift_expression( con , con )
->                              additive_expression( con , con )
->                               multiplicative_expression( con , con )
->                                pm_expression( con , con )
->                                 cast_expression( con , con )
->                                  unary_expression( con , con )
->                                   postfix_expression( con , con )
->                                    primary_expression( con , con )
->                                     id_expression( con , con )
->                     assignment_expression( Africa , Africa )
->                      conditional_expression( Africa , Africa )
->                       logical_or_expression( Africa , Africa )
->                        logical_and_expression( Africa , Africa )
->                         inclusive_or_expression( Africa , Africa )
->                          exclusive_or_expression( Africa , Africa )
->                           and_expression( Africa , Africa )
->                            equality_expression( Africa , Africa )
->                             relational_expression( Africa , Africa )
->                              shift_expression( Africa , Africa )
->                               additive_expression( Africa , Africa )
->                                multiplicative_expression( Africa , Africa )
->                                 pm_expression( Africa , Africa )
->                                  cast_expression( Africa , Africa )
->                                   unary_expression( Africa , Africa )
->                                    postfix_expression( Africa , Africa )
->                                     primary_expression( Africa , Africa )
->                                      id_expression( Africa , Africa )
->                statement( break , ; )
->                 jump_statement( break , ; )
->                statement( case , ; )
->                 labeled_statement( case , ; )
->                  constant_expression( 2 , 2 )
->                   conditional_expression( 2 , 2 )
->                    logical_or_expression( 2 , 2 )
->                     logical_and_expression( 2 , 2 )
->                      inclusive_or_expression( 2 , 2 )
->                       exclusive_or_expression( 2 , 2 )
->                        and_expression( 2 , 2 )
->                         equality_expression( 2 , 2 )
->                          relational_expression( 2 , 2 )
->                           shift_expression( 2 , 2 )
->                            additive_expression( 2 , 2 )
->                             multiplicative_expression( 2 , 2 )
->                              pm_expression( 2 , 2 )
->                               cast_expression( 2 , 2 )
->                                unary_expression( 2 , 2 )
->                                 postfix_expression( 2 , 2 )
->                                  primary_expression( 2 , 2 )
->                                   constant( 2 , 2 )
->                  statement( con , ; )
->                   expression( con , Asia )
->                    assignment_expression( con , Asia )
->                     conditional_expression( con , con )
->                      logical_or_expression( con , con )
->                       logical_and_expression( con , con )
->                        inclusive_or_expression( con , con )
->                         exclusive_or_expression( con , con )
->                          and_expression( con , con )
->                           equality_expression( con , con )
->                            relational_expression( con , con )
->                             shift_expression( con , con )
->                              additive_expression( con , con )
->                               multiplicative_expression( con , con )
->                                pm_expression( con , con )
->                                 cast_expression( con , con )
->                                  unary_expression( con , con )
->                                   postfix_expression( con , con )
->                                    primary_expression( con , con )
->                                     id_expression( con , con )
->                     assignment_expression( Asia , Asia )
->                      conditional_expression( Asia , Asia )
->                       logical_or_expression( Asia , Asia )
->                        logical_and_expression( Asia , Asia )
->                         inclusive_or_expression( Asia , Asia )
->                          exclusive_or_expression( Asia , Asia )
->                           and_expression( Asia , Asia )
->                            equality_expression( Asia , Asia )
->                             relational_expression( Asia , Asia )
->                              shift_expression( Asia , Asia )
->                               additive_expression( Asia , Asia )
->                                multiplicative_expression( Asia , Asia )
->                                 pm_expression( Asia , Asia )
->                                  cast_expression( Asia , Asia )
->                                   unary_expression( Asia , Asia )
->                                    postfix_expression( Asia , Asia )
->                                     primary_expression( Asia , Asia )
->                                      id_expression( Asia , Asia )
->                statement( break , ; )
->                 jump_statement( break , ; )
->                statement( case , ; )
->                 labeled_statement( case , ; )
->                  constant_expression( 3 , 3 )
->                   conditional_expression( 3 , 3 )
->                    logical_or_expression( 3 , 3 )
->                     logical_and_expression( 3 , 3 )
->                      inclusive_or_expression( 3 , 3 )
->                       exclusive_or_expression( 3 , 3 )
->                        and_expression( 3 , 3 )
->                         equality_expression( 3 , 3 )
->                          relational_expression( 3 , 3 )
->                           shift_expression( 3 , 3 )
->                            additive_expression( 3 , 3 )
->                             multiplicative_expression( 3 , 3 )
->                              pm_expression( 3 , 3 )
->                               cast_expression( 3 , 3 )
->                                unary_expression( 3 , 3 )
->                                 postfix_expression( 3 , 3 )
->                                  primary_expression( 3 , 3 )
->                                   constant( 3 , 3 )
->                  statement( con , ; )
->                   expression( con , Australia )
->                    assignment_expression( con , Australia )
->                     conditional_expression( con , con )
->                      logical_or_expression( con , con )
->                       logical_and_expression( con , con )
->                        inclusive_or_expression( con , con )
->                         exclusive_or_expression( con , con )
->                          and_expression( con , con )
->                           equality_expression( con , con )
->                            relational_expression( con , con )
->                             shift_expression( con , con )
->                              additive_expression( con , con )
->                               multiplicative_expression( con , con )
->                                pm_expression( con , con )
->                                 cast_expression( con , con )
->                                  unary_expression( con , con )
->                                   postfix_expression( con , con )
->                                    primary_expression( con , con )
->                                     id_expression( con , con )
->                     assignment_expression( Australia , Australia )
->                      conditional_expression( Australia , Australia )
->                       logical_or_expression( Australia , Australia )
->                        logical_and_expression( Australia , Australia )
->                         inclusive_or_expression( Australia , Australia )
->                          exclusive_or_expression( Australia , Australia )
->                           and_expression( Australia , Australia )
->                            equality_expression( Australia , Australia )
->                             relational_expression( Australia , Australia )
->                              shift_expression( Australia , Australia )
->                               additive_expression( Australia , Australia )
->                                multiplicative_expression( Australia , Australia )
->                                 pm_expression( Australia , Australia )
->                                  cast_expression( Australia , Australia )
->                                   unary_expression( Australia , Australia )
->                                    postfix_expression( Australia , Australia )
->                                     primary_expression( Australia , Australia )
->                                      id_expression( Australia , Australia )
->                statement( break , ; )
->                 jump_statement( break , ; )
->                statement( case , ; )
->                 labeled_statement( case , ; )
->                  constant_expression( 4 , 4 )
->                   conditional_expression( 4 , 4 )
->                    logical_or_expression( 4 , 4 )
->                     logical_and_expression( 4 , 4 )
->                      inclusive_or_expression( 4 , 4 )
->                       exclusive_or_expression( 4 , 4 )
->                        and_expression( 4 , 4 )
->                         equality_expression( 4 , 4 )
->                          relational_expression( 4 , 4 )
->                           shift_expression( 4 , 4 )
->                            additive_expression( 4 , 4 )
->                             multiplicative_expression( 4 , 4 )
->                              pm_expression( 4 , 4 )
->                               cast_expression( 4 , 4 )
->                                unary_expression( 4 , 4 )
->                                 postfix_expression( 4 , 4 )
->                                  primary_expression( 4 , 4 )
->                                   constant( 4 , 4 )
->                  statement( con , ; )
->                   expression( con , Europe )
->                    assignment_expression( con , Europe )
->                     conditional_expression( con , con )
->                      logical_or_expression( con , con )
->                       logical_and_expression( con , con )
->                        inclusive_or_expression( con , con )
->                         exclusive_or_expression( con , con )
->                          and_expression( con , con )
->                           equality_expression( con , con )
->                            relational_expression( con , con )
->                             shift_expression( con , con )
->                              additive_expression( con , con )
->                               multiplicative_expression( con , con )
->                                pm_expression( con , con )
->                                 cast_expression( con , con )
->                                  unary_expression( con , con )
->                                   postfix_expression( con , con )
->                                    primary_expression( con , con )
->                                     id_expression( con , con )
->                     assignment_expression( Europe , Europe )
->                      conditional_expression( Europe , Europe )
->                       logical_or_expression( Europe , Europe )
->                        logical_and_expression( Europe , Europe )
->                         inclusive_or_expression( Europe , Europe )
->                          exclusive_or_expression( Europe , Europe )
->                           and_expression( Europe , Europe )
->                            equality_expression( Europe , Europe )
->                             relational_expression( Europe , Europe )
->                              shift_expression( Europe , Europe )
->                               additive_expression( Europe , Europe )
->                                multiplicative_expression( Europe , Europe )
->                                 pm_expression( Europe , Europe )
->                                  cast_expression( Europe , Europe )
->                                   unary_expression( Europe , Europe )
->                                    postfix_expression( Europe , Europe )
->                                     primary_expression( Europe , Europe )
->                                      id_expression( Europe , Europe )
->                statement( break , ; )
->                 jump_statement( break , ; )
->                statement( case , ; )
->                 labeled_statement( case , ; )
->                  constant_expression( 5 , 5 )
->                   conditional_expression( 5 , 5 )
->                    logical_or_expression( 5 , 5 )
->                     logical_and_expression( 5 , 5 )
->                      inclusive_or_expression( 5 , 5 )
->                       exclusive_or_expression( 5 , 5 )
->                        and_expression( 5 , 5 )
->                         equality_expression( 5 , 5 )
->                          relational_expression( 5 , 5 )
->                           shift_expression( 5 , 5 )
->                            additive_expression( 5 , 5 )
->                             multiplicative_expression( 5 , 5 )
->                              pm_expression( 5 , 5 )
->                               cast_expression( 5 , 5 )
->                                unary_expression( 5 , 5 )
->                                 postfix_expression( 5 , 5 )
->                                  primary_expression( 5 , 5 )
->                                   constant( 5 , 5 )
->                  statement( con , ; )
->                   expression( con , Americas )
->                    assignment_expression( con , Americas )
->                     conditional_expression( con , con )
->                      logical_or_expression( con , con )
->                       logical_and_expression( con , con )
->                        inclusive_or_expression( con , con )
->                         exclusive_or_expression( con , con )
->                          and_expression( con , con )
->                           equality_expression( con , con )
->                            relational_expression( con , con )
->                             shift_expression( con , con )
->                              additive_expression( con , con )
->                               multiplicative_expression( con , con )
->                                pm_expression( con , con )
->                                 cast_expression( con , con )
->                                  unary_expression( con , con )
->                                   postfix_expression( con , con )
->                                    primary_expression( con , con )
->                                     id_expression( con , con )
->                     assignment_expression( Americas , Americas )
->                      conditional_expression( Americas , Americas )
->                       logical_or_expression( Americas , Americas )
->                        logical_and_expression( Americas , Americas )
->                         inclusive_or_expression( Americas , Americas )
->                          exclusive_or_expression( Americas , Americas )
->                           and_expression( Americas , Americas )
->                            equality_expression( Americas , Americas )
->                             relational_expression( Americas , Americas )
->                              shift_expression( Americas , Americas )
->                               additive_expression( Americas , Americas )
->                                multiplicative_expression( Americas , Americas )
->                                 pm_expression( Americas , Americas )
->                                  cast_expression( Americas , Americas )
->                                   unary_expression( Americas , Americas )
->                                    postfix_expression( Americas , Americas )
->                                     primary_expression( Americas , Americas )
->                                      id_expression( Americas , Americas )
->                statement( break , ; )
->                 jump_statement( break , ; )
->                statement( default , ; )
->                 labeled_statement( default , ; )
->                  statement( break , ; )
->                   jump_statement( break , ; )
->           statement( Team , ; )
->            declaration( Team , ; )
->             declaration_specifiers( Team , Team )
->              qualified_type( Team , Team )
->               qualified_id( Team , Team )
->             init_declarator_list( * , ) )
->              init_declarator( * , ) )
->               declarator( * , T )
->                ptr_operator( * , * )
->                 cv_qualifier_seq( T , * )
->                declarator( T , T )
->                 direct_declarator( T , T )
->                  qualified_id( T , T )
->               initializer( new , ) )
->                assignment_expression( new , ) )
->                 conditional_expression( new , ) )
->                  logical_or_expression( new , ) )
->                   logical_and_expression( new , ) )
->                    inclusive_or_expression( new , ) )
->                     exclusive_or_expression( new , ) )
->                      and_expression( new , ) )
->                       equality_expression( new , ) )
->                        relational_expression( new , ) )
->                         shift_expression( new , ) )
->                          additive_expression( new , ) )
->                           multiplicative_expression( new , ) )
->                            pm_expression( new , ) )
->                             cast_expression( new , ) )
->                              unary_expression( new , ) )
->                               postfix_expression( new , ) )
->                                primary_expression( new , ) )
->                                 new_expression( new , ) )
->                                  new_type_id( Team , Team )
->                                   declaration_specifiers( Team , Team )
->                                    qualified_type( Team , Team )
->                                     qualified_id( Team , Team )
->                                  new_initializer( ( , ) )
->                                   expression_list( name , con )
->                                    assignment_expression( name , name )
->                                     conditional_expression( name , name )
->                                      logical_or_expression( name , name )
->                                       logical_and_expression( name , name )
->                                        inclusive_or_expression( name , name )
->                                         exclusive_or_expression( name , name )
->                                          and_expression( name , name )
->                                           equality_expression( name , name )
->                                            relational_expression( name , name )
->                                             shift_expression( name , name )
->                                              additive_expression( name , name )
->                                               multiplicative_expression( name , name )
->                                                pm_expression( name , name )
->                                                 cast_expression( name , name )
->                                                  unary_expression( name , name )
->                                                   postfix_expression( name , name )
->                                                    primary_expression( name , name )
->                                                     id_expression( name , name )
->                                    assignment_expression( con , con )
->                                     conditional_expression( con , con )
->                                      logical_or_expression( con , con )
->                                       logical_and_expression( con , con )
->                                        inclusive_or_expression( con , con )
->                                         exclusive_or_expression( con , con )
->                                          and_expression( con , con )
->                                           equality_expression( con , con )
->                                            relational_expression( con , con )
->                                             shift_expression( con , con )
->                                              additive_expression( con , con )
->                                               multiplicative_expression( con , con )
->                                                pm_expression( con , con )
->                                                 cast_expression( con , con )
->                                                  unary_expression( con , con )
->                                                   postfix_expression( con , con )
->                                                    primary_expression( con , con )
->                                                     id_expression( con , con )
->           statement( Teamc , ; )
->            expression( Teamc , T )
->             assignment_expression( Teamc , T )
->              conditional_expression( Teamc , ] )
->               logical_or_expression( Teamc , ] )
->                logical_and_expression( Teamc , ] )
->                 inclusive_or_expression( Teamc , ] )
->                  exclusive_or_expression( Teamc , ] )
->                   and_expression( Teamc , ] )
->                    equality_expression( Teamc , ] )
->                     relational_expression( Teamc , ] )
->                      shift_expression( Teamc , ] )
->                       additive_expression( Teamc , ] )
->                        multiplicative_expression( Teamc , ] )
->                         pm_expression( Teamc , ] )
->                          cast_expression( Teamc , ] )
->                           unary_expression( Teamc , ] )
->                            postfix_expression( Teamc , ] )
->                             primary_expression( Teamc , Teamc )
->                              id_expression( Teamc , Teamc )
->                             expression( x , x )
->                              assignment_expression( x , x )
->                               conditional_expression( x , x )
->                                logical_or_expression( x , x )
->                                 logical_and_expression( x , x )
->                                  inclusive_or_expression( x , x )
->                                   exclusive_or_expression( x , x )
->                                    and_expression( x , x )
->                                     equality_expression( x , x )
->                                      relational_expression( x , x )
->                                       shift_expression( x , x )
->                                        additive_expression( x , x )
->                                         multiplicative_expression( x , x )
->                                          pm_expression( x , x )
->                                           cast_expression( x , x )
->                                            unary_expression( x , x )
->                                             postfix_expression( x , x )
->                                              primary_expression( x , x )
->                                               id_expression( x , x )
->              assignment_expression( * , T )
->               conditional_expression( * , T )
->                logical_or_expression( * , T )
->                 logical_and_expression( * , T )
->                  inclusive_or_expression( * , T )
->                   exclusive_or_expression( * , T )
->                    and_expression( * , T )
->                     equality_expression( * , T )
->                      relational_expression( * , T )
->                       shift_expression( * , T )
->                        additive_expression( * , T )
->                         multiplicative_expression( * , T )
->                          pm_expression( * , T )
->                           cast_expression( * , T )
->                            unary_expression( * , T )
->                             unary_operator( * , * )
->                             cast_expression( T , T )
->                              unary_expression( T , T )
->                               postfix_expression( T , T )
->                                primary_expression( T , T )
->                                 id_expression( T , T )
->      statement( for , } )
->       iteration_statement( for , } )
->        declaration( int , ; )
->         declaration_specifiers( int , int )
->          builtin_type_specifier( int , int )
->         init_declarator_list( y , 0 )
->          init_declarator( y , 0 )
->           declarator( y , y )
->            direct_declarator( y , y )
->             qualified_id( y , y )
->           initializer( 0 , 0 )
->            assignment_expression( 0 , 0 )
->             conditional_expression( 0 , 0 )
->              logical_or_expression( 0 , 0 )
->               logical_and_expression( 0 , 0 )
->                inclusive_or_expression( 0 , 0 )
->                 exclusive_or_expression( 0 , 0 )
->                  and_expression( 0 , 0 )
->                   equality_expression( 0 , 0 )
->                    relational_expression( 0 , 0 )
->                     shift_expression( 0 , 0 )
->                      additive_expression( 0 , 0 )
->                       multiplicative_expression( 0 , 0 )
->                        pm_expression( 0 , 0 )
->                         cast_expression( 0 , 0 )
->                          unary_expression( 0 , 0 )
->                           postfix_expression( 0 , 0 )
->                            primary_expression( 0 , 0 )
->                             constant( 0 , 0 )
->        expression( y , 6 )
->         assignment_expression( y , 6 )
->          conditional_expression( y , 6 )
->           logical_or_expression( y , 6 )
->            logical_and_expression( y , 6 )
->             inclusive_or_expression( y , 6 )
->              exclusive_or_expression( y , 6 )
->               and_expression( y , 6 )
->                equality_expression( y , 6 )
->                 relational_expression( y , 6 )
->                  shift_expression( y , y )
->                   additive_expression( y , y )
->                    multiplicative_expression( y , y )
->                     pm_expression( y , y )
->                      cast_expression( y , y )
->                       unary_expression( y , y )
->                        postfix_expression( y , y )
->                         primary_expression( y , y )
->                          id_expression( y , y )
->                  shift_expression( 6 , 6 )
->                   additive_expression( 6 , 6 )
->                    multiplicative_expression( 6 , 6 )
->                     pm_expression( 6 , 6 )
->                      cast_expression( 6 , 6 )
->                       unary_expression( 6 , 6 )
->                        postfix_expression( 6 , 6 )
->                         primary_expression( 6 , 6 )
->                          constant( 6 , 6 )
->        expression( y , ++ )
->         assignment_expression( y , ++ )
->          conditional_expression( y , ++ )
->           logical_or_expression( y , ++ )
->            logical_and_expression( y , ++ )
->             inclusive_or_expression( y , ++ )
->              exclusive_or_expression( y , ++ )
->               and_expression( y , ++ )
->                equality_expression( y , ++ )
->                 relational_expression( y , ++ )
->                  shift_expression( y , ++ )
->                   additive_expression( y , ++ )
->                    multiplicative_expression( y , ++ )
->                     pm_expression( y , ++ )
->                      cast_expression( y , ++ )
->                       unary_expression( y , ++ )
->                        postfix_expression( y , ++ )
->                         primary_expression( y , y )
->                          id_expression( y , y )
->        statement( { , } )
->         compound_statement( { , } )
->          statement_list( cout , ; )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "Who is the first team of game " , "Who is the first team of game " )
->                        multiplicative_expression( "Who is the first team of game " , "Who is the first team of game " )
->                         pm_expression( "Who is the first team of game " , "Who is the first team of game " )
->                          cast_expression( "Who is the first team of game " , "Who is the first team of game " )
->                           unary_expression( "Who is the first team of game " , "Who is the first team of game " )
->                            postfix_expression( "Who is the first team of game " , "Who is the first team of game " )
->                             primary_expression( "Who is the first team of game " , "Who is the first team of game " )
->                       additive_expression( y , 1 )
->                        multiplicative_expression( y , y )
->                         pm_expression( y , y )
->                          cast_expression( y , y )
->                           unary_expression( y , y )
->                            postfix_expression( y , y )
->                             primary_expression( y , y )
->                              id_expression( y , y )
->                        multiplicative_expression( 1 , 1 )
->                         pm_expression( 1 , 1 )
->                          cast_expression( 1 , 1 )
->                           unary_expression( 1 , 1 )
->                            postfix_expression( 1 , 1 )
->                             primary_expression( 1 , 1 )
->                              constant( 1 , 1 )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cin , ; )
->            expression( cin , fteam )
->             assignment_expression( cin , fteam )
->              conditional_expression( cin , fteam )
->               logical_or_expression( cin , fteam )
->                logical_and_expression( cin , fteam )
->                 inclusive_or_expression( cin , fteam )
->                  exclusive_or_expression( cin , fteam )
->                   and_expression( cin , fteam )
->                    equality_expression( cin , fteam )
->                     relational_expression( cin , fteam )
->                      shift_expression( cin , fteam )
->                       additive_expression( cin , cin )
->                        multiplicative_expression( cin , cin )
->                         pm_expression( cin , cin )
->                          cast_expression( cin , cin )
->                           unary_expression( cin , cin )
->                            postfix_expression( cin , cin )
->                             primary_expression( cin , cin )
->                              id_expression( cin , cin )
->                       additive_expression( fteam , fteam )
->                        multiplicative_expression( fteam , fteam )
->                         pm_expression( fteam , fteam )
->                          cast_expression( fteam , fteam )
->                           unary_expression( fteam , fteam )
->                            postfix_expression( fteam , fteam )
->                             primary_expression( fteam , fteam )
->                              id_expression( fteam , fteam )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "Who is the second team of the game" , "Who is the second team of the game" )
->                        multiplicative_expression( "Who is the second team of the game" , "Who is the second team of the game" )
->                         pm_expression( "Who is the second team of the game" , "Who is the second team of the game" )
->                          cast_expression( "Who is the second team of the game" , "Who is the second team of the game" )
->                           unary_expression( "Who is the second team of the game" , "Who is the second team of the game" )
->                            postfix_expression( "Who is the second team of the game" , "Who is the second team of the game" )
->                             primary_expression( "Who is the second team of the game" , "Who is the second team of the game" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cin , ; )
->            expression( cin , steam )
->             assignment_expression( cin , steam )
->              conditional_expression( cin , steam )
->               logical_or_expression( cin , steam )
->                logical_and_expression( cin , steam )
->                 inclusive_or_expression( cin , steam )
->                  exclusive_or_expression( cin , steam )
->                   and_expression( cin , steam )
->                    equality_expression( cin , steam )
->                     relational_expression( cin , steam )
->                      shift_expression( cin , steam )
->                       additive_expression( cin , cin )
->                        multiplicative_expression( cin , cin )
->                         pm_expression( cin , cin )
->                          cast_expression( cin , cin )
->                           unary_expression( cin , cin )
->                            postfix_expression( cin , cin )
->                             primary_expression( cin , cin )
->                              id_expression( cin , cin )
->                       additive_expression( steam , steam )
->                        multiplicative_expression( steam , steam )
->                         pm_expression( steam , steam )
->                          cast_expression( steam , steam )
->                           unary_expression( steam , steam )
->                            postfix_expression( steam , steam )
->                             primary_expression( steam , steam )
->                              id_expression( steam , steam )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "What was the goal count for the first team?" , "What was the goal count for the first team?" )
->                        multiplicative_expression( "What was the goal count for the first team?" , "What was the goal count for the first team?" )
->                         pm_expression( "What was the goal count for the first team?" , "What was the goal count for the first team?" )
->                          cast_expression( "What was the goal count for the first team?" , "What was the goal count for the first team?" )
->                           unary_expression( "What was the goal count for the first team?" , "What was the goal count for the first team?" )
->                            postfix_expression( "What was the goal count for the first team?" , "What was the goal count for the first team?" )
->                             primary_expression( "What was the goal count for the first team?" , "What was the goal count for the first team?" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cin , ; )
->            expression( cin , fgoal )
->             assignment_expression( cin , fgoal )
->              conditional_expression( cin , fgoal )
->               logical_or_expression( cin , fgoal )
->                logical_and_expression( cin , fgoal )
->                 inclusive_or_expression( cin , fgoal )
->                  exclusive_or_expression( cin , fgoal )
->                   and_expression( cin , fgoal )
->                    equality_expression( cin , fgoal )
->                     relational_expression( cin , fgoal )
->                      shift_expression( cin , fgoal )
->                       additive_expression( cin , cin )
->                        multiplicative_expression( cin , cin )
->                         pm_expression( cin , cin )
->                          cast_expression( cin , cin )
->                           unary_expression( cin , cin )
->                            postfix_expression( cin , cin )
->                             primary_expression( cin , cin )
->                              id_expression( cin , cin )
->                       additive_expression( fgoal , fgoal )
->                        multiplicative_expression( fgoal , fgoal )
->                         pm_expression( fgoal , fgoal )
->                          cast_expression( fgoal , fgoal )
->                           unary_expression( fgoal , fgoal )
->                            postfix_expression( fgoal , fgoal )
->                             primary_expression( fgoal , fgoal )
->                              id_expression( fgoal , fgoal )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "What was the goal count for the second team?" , "What was the goal count for the second team?" )
->                        multiplicative_expression( "What was the goal count for the second team?" , "What was the goal count for the second team?" )
->                         pm_expression( "What was the goal count for the second team?" , "What was the goal count for the second team?" )
->                          cast_expression( "What was the goal count for the second team?" , "What was the goal count for the second team?" )
->                           unary_expression( "What was the goal count for the second team?" , "What was the goal count for the second team?" )
->                            postfix_expression( "What was the goal count for the second team?" , "What was the goal count for the second team?" )
->                             primary_expression( "What was the goal count for the second team?" , "What was the goal count for the second team?" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cin , ; )
->            expression( cin , sgoal )
->             assignment_expression( cin , sgoal )
->              conditional_expression( cin , sgoal )
->               logical_or_expression( cin , sgoal )
->                logical_and_expression( cin , sgoal )
->                 inclusive_or_expression( cin , sgoal )
->                  exclusive_or_expression( cin , sgoal )
->                   and_expression( cin , sgoal )
->                    equality_expression( cin , sgoal )
->                     relational_expression( cin , sgoal )
->                      shift_expression( cin , sgoal )
->                       additive_expression( cin , cin )
->                        multiplicative_expression( cin , cin )
->                         pm_expression( cin , cin )
->                          cast_expression( cin , cin )
->                           unary_expression( cin , cin )
->                            postfix_expression( cin , cin )
->                             primary_expression( cin , cin )
->                              id_expression( cin , cin )
->                       additive_expression( sgoal , sgoal )
->                        multiplicative_expression( sgoal , sgoal )
->                         pm_expression( sgoal , sgoal )
->                          cast_expression( sgoal , sgoal )
->                           unary_expression( sgoal , sgoal )
->                            postfix_expression( sgoal , sgoal )
->                             primary_expression( sgoal , sgoal )
->                              id_expression( sgoal , sgoal )
->           statement( for , } )
->            iteration_statement( for , } )
->             declaration( int , ; )
->              declaration_specifiers( int , int )
->               builtin_type_specifier( int , int )
->              init_declarator_list( u , 0 )
->               init_declarator( u , 0 )
->                declarator( u , u )
->                 direct_declarator( u , u )
->                  qualified_id( u , u )
->                initializer( 0 , 0 )
->                 assignment_expression( 0 , 0 )
->                  conditional_expression( 0 , 0 )
->                   logical_or_expression( 0 , 0 )
->                    logical_and_expression( 0 , 0 )
->                     inclusive_or_expression( 0 , 0 )
->                      exclusive_or_expression( 0 , 0 )
->                       and_expression( 0 , 0 )
->                        equality_expression( 0 , 0 )
->                         relational_expression( 0 , 0 )
->                          shift_expression( 0 , 0 )
->                           additive_expression( 0 , 0 )
->                            multiplicative_expression( 0 , 0 )
->                             pm_expression( 0 , 0 )
->                              cast_expression( 0 , 0 )
->                               unary_expression( 0 , 0 )
->                                postfix_expression( 0 , 0 )
->                                 primary_expression( 0 , 0 )
->                                  constant( 0 , 0 )
->             expression( u , 4 )
->              assignment_expression( u , 4 )
->               conditional_expression( u , 4 )
->                logical_or_expression( u , 4 )
->                 logical_and_expression( u , 4 )
->                  inclusive_or_expression( u , 4 )
->                   exclusive_or_expression( u , 4 )
->                    and_expression( u , 4 )
->                     equality_expression( u , 4 )
->                      relational_expression( u , 4 )
->                       shift_expression( u , u )
->                        additive_expression( u , u )
->                         multiplicative_expression( u , u )
->                          pm_expression( u , u )
->                           cast_expression( u , u )
->                            unary_expression( u , u )
->                             postfix_expression( u , u )
->                              primary_expression( u , u )
->                               id_expression( u , u )
->                       shift_expression( 4 , 4 )
->                        additive_expression( 4 , 4 )
->                         multiplicative_expression( 4 , 4 )
->                          pm_expression( 4 , 4 )
->                           cast_expression( 4 , 4 )
->                            unary_expression( 4 , 4 )
->                             postfix_expression( 4 , 4 )
->                              primary_expression( 4 , 4 )
->                               constant( 4 , 4 )
->             expression( u , ++ )
->              assignment_expression( u , ++ )
->               conditional_expression( u , ++ )
->                logical_or_expression( u , ++ )
->                 logical_and_expression( u , ++ )
->                  inclusive_or_expression( u , ++ )
->                   exclusive_or_expression( u , ++ )
->                    and_expression( u , ++ )
->                     equality_expression( u , ++ )
->                      relational_expression( u , ++ )
->                       shift_expression( u , ++ )
->                        additive_expression( u , ++ )
->                         multiplicative_expression( u , ++ )
->                          pm_expression( u , ++ )
->                           cast_expression( u , ++ )
->                            unary_expression( u , ++ )
->                             postfix_expression( u , ++ )
->                              primary_expression( u , u )
->                               id_expression( u , u )
->             statement( { , } )
->              compound_statement( { , } )
->               statement_list( strcpy , } )
->                statement( strcpy , ; )
->                 expression( strcpy , ) )
->                  assignment_expression( strcpy , ) )
->                   conditional_expression( strcpy , ) )
->                    logical_or_expression( strcpy , ) )
->                     logical_and_expression( strcpy , ) )
->                      inclusive_or_expression( strcpy , ) )
->                       exclusive_or_expression( strcpy , ) )
->                        and_expression( strcpy , ) )
->                         equality_expression( strcpy , ) )
->                          relational_expression( strcpy , ) )
->                           shift_expression( strcpy , ) )
->                            additive_expression( strcpy , ) )
->                             multiplicative_expression( strcpy , ) )
->                              pm_expression( strcpy , ) )
->                               cast_expression( strcpy , ) )
->                                unary_expression( strcpy , ) )
->                                 postfix_expression( strcpy , ) )
->                                  primary_expression( strcpy , strcpy )
->                                   id_expression( strcpy , strcpy )
->                                  expression_list( match1 , ) )
->                                   assignment_expression( match1 , match1 )
->                                    conditional_expression( match1 , match1 )
->                                     logical_or_expression( match1 , match1 )
->                                      logical_and_expression( match1 , match1 )
->                                       inclusive_or_expression( match1 , match1 )
->                                        exclusive_or_expression( match1 , match1 )
->                                         and_expression( match1 , match1 )
->                                          equality_expression( match1 , match1 )
->                                           relational_expression( match1 , match1 )
->                                            shift_expression( match1 , match1 )
->                                             additive_expression( match1 , match1 )
->                                              multiplicative_expression( match1 , match1 )
->                                               pm_expression( match1 , match1 )
->                                                cast_expression( match1 , match1 )
->                                                 unary_expression( match1 , match1 )
->                                                  postfix_expression( match1 , match1 )
->                                                   primary_expression( match1 , match1 )
->                                                    id_expression( match1 , match1 )
->                                   assignment_expression( Teamc , ) )
->                                    conditional_expression( Teamc , ) )
->                                     logical_or_expression( Teamc , ) )
->                                      logical_and_expression( Teamc , ) )
->                                       inclusive_or_expression( Teamc , ) )
->                                        exclusive_or_expression( Teamc , ) )
->                                         and_expression( Teamc , ) )
->                                          equality_expression( Teamc , ) )
->                                           relational_expression( Teamc , ) )
->                                            shift_expression( Teamc , ) )
->                                             additive_expression( Teamc , ) )
->                                              multiplicative_expression( Teamc , ) )
->                                               pm_expression( Teamc , ) )
->                                                cast_expression( Teamc , ) )
->                                                 unary_expression( Teamc , ) )
->                                                  postfix_expression( Teamc , ) )
->                                                   primary_expression( Teamc , Teamc )
->                                                    id_expression( Teamc , Teamc )
->                                                   expression( u , u )
->                                                    assignment_expression( u , u )
->                                                     conditional_expression( u , u )
->                                                      logical_or_expression( u , u )
->                                                       logical_and_expression( u , u )
->                                                        inclusive_or_expression( u , u )
->                                                         exclusive_or_expression( u , u )
->                                                          and_expression( u , u )
->                                                           equality_expression( u , u )
->                                                            relational_expression( u , u )
->                                                             shift_expression( u , u )
->                                                              additive_expression( u , u )
->                                                               multiplicative_expression( u , u )
->                                                                pm_expression( u , u )
->                                                                 cast_expression( u , u )
->                                                                  unary_expression( u , u )
->                                                                   postfix_expression( u , u )
->                                                                    primary_expression( u , u )
->                                                                     id_expression( u , u )
->                                                   id_expression( getcountry , getcountry )
->                statement( strcpy , ; )
->                 expression( strcpy , ) )
->                  assignment_expression( strcpy , ) )
->                   conditional_expression( strcpy , ) )
->                    logical_or_expression( strcpy , ) )
->                     logical_and_expression( strcpy , ) )
->                      inclusive_or_expression( strcpy , ) )
->                       exclusive_or_expression( strcpy , ) )
->                        and_expression( strcpy , ) )
->                         equality_expression( strcpy , ) )
->                          relational_expression( strcpy , ) )
->                           shift_expression( strcpy , ) )
->                            additive_expression( strcpy , ) )
->                             multiplicative_expression( strcpy , ) )
->                              pm_expression( strcpy , ) )
->                               cast_expression( strcpy , ) )
->                                unary_expression( strcpy , ) )
->                                 postfix_expression( strcpy , ) )
->                                  primary_expression( strcpy , strcpy )
->                                   id_expression( strcpy , strcpy )
->                                  expression_list( match2 , fteam )
->                                   assignment_expression( match2 , match2 )
->                                    conditional_expression( match2 , match2 )
->                                     logical_or_expression( match2 , match2 )
->                                      logical_and_expression( match2 , match2 )
->                                       inclusive_or_expression( match2 , match2 )
->                                        exclusive_or_expression( match2 , match2 )
->                                         and_expression( match2 , match2 )
->                                          equality_expression( match2 , match2 )
->                                           relational_expression( match2 , match2 )
->                                            shift_expression( match2 , match2 )
->                                             additive_expression( match2 , match2 )
->                                              multiplicative_expression( match2 , match2 )
->                                               pm_expression( match2 , match2 )
->                                                cast_expression( match2 , match2 )
->                                                 unary_expression( match2 , match2 )
->                                                  postfix_expression( match2 , match2 )
->                                                   primary_expression( match2 , match2 )
->                                                    id_expression( match2 , match2 )
->                                   assignment_expression( fteam , fteam )
->                                    conditional_expression( fteam , fteam )
->                                     logical_or_expression( fteam , fteam )
->                                      logical_and_expression( fteam , fteam )
->                                       inclusive_or_expression( fteam , fteam )
->                                        exclusive_or_expression( fteam , fteam )
->                                         and_expression( fteam , fteam )
->                                          equality_expression( fteam , fteam )
->                                           relational_expression( fteam , fteam )
->                                            shift_expression( fteam , fteam )
->                                             additive_expression( fteam , fteam )
->                                              multiplicative_expression( fteam , fteam )
->                                               pm_expression( fteam , fteam )
->                                                cast_expression( fteam , fteam )
->                                                 unary_expression( fteam , fteam )
->                                                  postfix_expression( fteam , fteam )
->                                                   primary_expression( fteam , fteam )
->                                                    id_expression( fteam , fteam )
->                statement( if , } )
->                 selection_statement( if , } )
->                  expression( * , match2 )
->                   assignment_expression( * , match2 )
->                    conditional_expression( * , match2 )
->                     logical_or_expression( * , match2 )
->                      logical_and_expression( * , match2 )
->                       inclusive_or_expression( * , match2 )
->                        exclusive_or_expression( * , match2 )
->                         and_expression( * , match2 )
->                          equality_expression( * , match2 )
->                           relational_expression( * , match1 )
->                            shift_expression( * , match1 )
->                             additive_expression( * , match1 )
->                              multiplicative_expression( * , match1 )
->                               pm_expression( * , match1 )
->                                cast_expression( * , match1 )
->                                 unary_expression( * , match1 )
->                                  unary_operator( * , * )
->                                  cast_expression( match1 , match1 )
->                                   unary_expression( match1 , match1 )
->                                    postfix_expression( match1 , match1 )
->                                     primary_expression( match1 , match1 )
->                                      id_expression( match1 , match1 )
->                           relational_expression( * , match2 )
->                            shift_expression( * , match2 )
->                             additive_expression( * , match2 )
->                              multiplicative_expression( * , match2 )
->                               pm_expression( * , match2 )
->                                cast_expression( * , match2 )
->                                 unary_expression( * , match2 )
->                                  unary_operator( * , * )
->                                  cast_expression( match2 , match2 )
->                                   unary_expression( match2 , match2 )
->                                    postfix_expression( match2 , match2 )
->                                     primary_expression( match2 , match2 )
->                                      id_expression( match2 , match2 )
->                  statement( { , } )
->                   compound_statement( { , } )
->                    statement_list( hiti1 , ; )
->                     statement( hiti1 , ; )
->                      expression( hiti1 , ) )
->                       assignment_expression( hiti1 , ) )
->                        conditional_expression( hiti1 , hiti1 )
->                         logical_or_expression( hiti1 , hiti1 )
->                          logical_and_expression( hiti1 , hiti1 )
->                           inclusive_or_expression( hiti1 , hiti1 )
->                            exclusive_or_expression( hiti1 , hiti1 )
->                             and_expression( hiti1 , hiti1 )
->                              equality_expression( hiti1 , hiti1 )
->                               relational_expression( hiti1 , hiti1 )
->                                shift_expression( hiti1 , hiti1 )
->                                 additive_expression( hiti1 , hiti1 )
->                                  multiplicative_expression( hiti1 , hiti1 )
->                                   pm_expression( hiti1 , hiti1 )
->                                    cast_expression( hiti1 , hiti1 )
->                                     unary_expression( hiti1 , hiti1 )
->                                      postfix_expression( hiti1 , hiti1 )
->                                       primary_expression( hiti1 , hiti1 )
->                                        id_expression( hiti1 , hiti1 )
->                        assignment_expression( new , ) )
->                         conditional_expression( new , ) )
->                          logical_or_expression( new , ) )
->                           logical_and_expression( new , ) )
->                            inclusive_or_expression( new , ) )
->                             exclusive_or_expression( new , ) )
->                              and_expression( new , ) )
->                               equality_expression( new , ) )
->                                relational_expression( new , ) )
->                                 shift_expression( new , ) )
->                                  additive_expression( new , ) )
->                                   multiplicative_expression( new , ) )
->                                    pm_expression( new , ) )
->                                     cast_expression( new , ) )
->                                      unary_expression( new , ) )
->                                       postfix_expression( new , ) )
->                                        primary_expression( new , ) )
->                                         new_expression( new , ) )
->                                          new_type_id( Team , Team )
->                                           declaration_specifiers( Team , Team )
->                                            qualified_type( Team , Team )
->                                             qualified_id( Team , Team )
->                                          new_initializer( ( , ) )
->                     statement( * , ; )
->                      expression( * , ] )
->                       assignment_expression( * , ] )
->                        conditional_expression( * , hiti1 )
->                         logical_or_expression( * , hiti1 )
->                          logical_and_expression( * , hiti1 )
->                           inclusive_or_expression( * , hiti1 )
->                            exclusive_or_expression( * , hiti1 )
->                             and_expression( * , hiti1 )
->                              equality_expression( * , hiti1 )
->                               relational_expression( * , hiti1 )
->                                shift_expression( * , hiti1 )
->                                 additive_expression( * , hiti1 )
->                                  multiplicative_expression( * , hiti1 )
->                                   pm_expression( * , hiti1 )
->                                    cast_expression( * , hiti1 )
->                                     unary_expression( * , hiti1 )
->                                      unary_operator( * , * )
->                                      cast_expression( hiti1 , hiti1 )
->                                       unary_expression( hiti1 , hiti1 )
->                                        postfix_expression( hiti1 , hiti1 )
->                                         primary_expression( hiti1 , hiti1 )
->                                          id_expression( hiti1 , hiti1 )
->                        assignment_expression( Teamc , ] )
->                         conditional_expression( Teamc , ] )
->                          logical_or_expression( Teamc , ] )
->                           logical_and_expression( Teamc , ] )
->                            inclusive_or_expression( Teamc , ] )
->                             exclusive_or_expression( Teamc , ] )
->                              and_expression( Teamc , ] )
->                               equality_expression( Teamc , ] )
->                                relational_expression( Teamc , ] )
->                                 shift_expression( Teamc , ] )
->                                  additive_expression( Teamc , ] )
->                                   multiplicative_expression( Teamc , ] )
->                                    pm_expression( Teamc , ] )
->                                     cast_expression( Teamc , ] )
->                                      unary_expression( Teamc , ] )
->                                       postfix_expression( Teamc , ] )
->                                        primary_expression( Teamc , Teamc )
->                                         id_expression( Teamc , Teamc )
->                                        expression( u , u )
->                                         assignment_expression( u , u )
->                                          conditional_expression( u , u )
->                                           logical_or_expression( u , u )
->                                            logical_and_expression( u , u )
->                                             inclusive_or_expression( u , u )
->                                              exclusive_or_expression( u , u )
->                                               and_expression( u , u )
->                                                equality_expression( u , u )
->                                                 relational_expression( u , u )
->                                                  shift_expression( u , u )
->                                                   additive_expression( u , u )
->                                                    multiplicative_expression( u , u )
->                                                     pm_expression( u , u )
->                                                      cast_expression( u , u )
->                                                       unary_expression( u , u )
->                                                        postfix_expression( u , u )
->                                                         primary_expression( u , u )
->                                                          id_expression( u , u )
->           statement( for , } )
->            iteration_statement( for , } )
->             declaration( int , ; )
->              declaration_specifiers( int , int )
->               builtin_type_specifier( int , int )
->              init_declarator_list( u , 0 )
->               init_declarator( u , 0 )
->                declarator( u , u )
->                 direct_declarator( u , u )
->                  qualified_id( u , u )
->                initializer( 0 , 0 )
->                 assignment_expression( 0 , 0 )
->                  conditional_expression( 0 , 0 )
->                   logical_or_expression( 0 , 0 )
->                    logical_and_expression( 0 , 0 )
->                     inclusive_or_expression( 0 , 0 )
->                      exclusive_or_expression( 0 , 0 )
->                       and_expression( 0 , 0 )
->                        equality_expression( 0 , 0 )
->                         relational_expression( 0 , 0 )
->                          shift_expression( 0 , 0 )
->                           additive_expression( 0 , 0 )
->                            multiplicative_expression( 0 , 0 )
->                             pm_expression( 0 , 0 )
->                              cast_expression( 0 , 0 )
->                               unary_expression( 0 , 0 )
->                                postfix_expression( 0 , 0 )
->                                 primary_expression( 0 , 0 )
->                                  constant( 0 , 0 )
->             expression( u , 4 )
->              assignment_expression( u , 4 )
->               conditional_expression( u , 4 )
->                logical_or_expression( u , 4 )
->                 logical_and_expression( u , 4 )
->                  inclusive_or_expression( u , 4 )
->                   exclusive_or_expression( u , 4 )
->                    and_expression( u , 4 )
->                     equality_expression( u , 4 )
->                      relational_expression( u , 4 )
->                       shift_expression( u , u )
->                        additive_expression( u , u )
->                         multiplicative_expression( u , u )
->                          pm_expression( u , u )
->                           cast_expression( u , u )
->                            unary_expression( u , u )
->                             postfix_expression( u , u )
->                              primary_expression( u , u )
->                               id_expression( u , u )
->                       shift_expression( 4 , 4 )
->                        additive_expression( 4 , 4 )
->                         multiplicative_expression( 4 , 4 )
->                          pm_expression( 4 , 4 )
->                           cast_expression( 4 , 4 )
->                            unary_expression( 4 , 4 )
->                             postfix_expression( 4 , 4 )
->                              primary_expression( 4 , 4 )
->                               constant( 4 , 4 )
->             expression( u , ++ )
->              assignment_expression( u , ++ )
->               conditional_expression( u , ++ )
->                logical_or_expression( u , ++ )
->                 logical_and_expression( u , ++ )
->                  inclusive_or_expression( u , ++ )
->                   exclusive_or_expression( u , ++ )
->                    and_expression( u , ++ )
->                     equality_expression( u , ++ )
->                      relational_expression( u , ++ )
->                       shift_expression( u , ++ )
->                        additive_expression( u , ++ )
->                         multiplicative_expression( u , ++ )
->                          pm_expression( u , ++ )
->                           cast_expression( u , ++ )
->                            unary_expression( u , ++ )
->                             postfix_expression( u , ++ )
->                              primary_expression( u , u )
->                               id_expression( u , u )
->             statement( { , } )
->              compound_statement( { , } )
->               statement_list( strcpy , } )
->                statement( strcpy , ; )
->                 expression( strcpy , ) )
->                  assignment_expression( strcpy , ) )
->                   conditional_expression( strcpy , ) )
->                    logical_or_expression( strcpy , ) )
->                     logical_and_expression( strcpy , ) )
->                      inclusive_or_expression( strcpy , ) )
->                       exclusive_or_expression( strcpy , ) )
->                        and_expression( strcpy , ) )
->                         equality_expression( strcpy , ) )
->                          relational_expression( strcpy , ) )
->                           shift_expression( strcpy , ) )
->                            additive_expression( strcpy , ) )
->                             multiplicative_expression( strcpy , ) )
->                              pm_expression( strcpy , ) )
->                               cast_expression( strcpy , ) )
->                                unary_expression( strcpy , ) )
->                                 postfix_expression( strcpy , ) )
->                                  primary_expression( strcpy , strcpy )
->                                   id_expression( strcpy , strcpy )
->                                  expression_list( match1 , ) )
->                                   assignment_expression( match1 , match1 )
->                                    conditional_expression( match1 , match1 )
->                                     logical_or_expression( match1 , match1 )
->                                      logical_and_expression( match1 , match1 )
->                                       inclusive_or_expression( match1 , match1 )
->                                        exclusive_or_expression( match1 , match1 )
->                                         and_expression( match1 , match1 )
->                                          equality_expression( match1 , match1 )
->                                           relational_expression( match1 , match1 )
->                                            shift_expression( match1 , match1 )
->                                             additive_expression( match1 , match1 )
->                                              multiplicative_expression( match1 , match1 )
->                                               pm_expression( match1 , match1 )
->                                                cast_expression( match1 , match1 )
->                                                 unary_expression( match1 , match1 )
->                                                  postfix_expression( match1 , match1 )
->                                                   primary_expression( match1 , match1 )
->                                                    id_expression( match1 , match1 )
->                                   assignment_expression( Teamc , ) )
->                                    conditional_expression( Teamc , ) )
->                                     logical_or_expression( Teamc , ) )
->                                      logical_and_expression( Teamc , ) )
->                                       inclusive_or_expression( Teamc , ) )
->                                        exclusive_or_expression( Teamc , ) )
->                                         and_expression( Teamc , ) )
->                                          equality_expression( Teamc , ) )
->                                           relational_expression( Teamc , ) )
->                                            shift_expression( Teamc , ) )
->                                             additive_expression( Teamc , ) )
->                                              multiplicative_expression( Teamc , ) )
->                                               pm_expression( Teamc , ) )
->                                                cast_expression( Teamc , ) )
->                                                 unary_expression( Teamc , ) )
->                                                  postfix_expression( Teamc , ) )
->                                                   primary_expression( Teamc , Teamc )
->                                                    id_expression( Teamc , Teamc )
->                                                   expression( u , u )
->                                                    assignment_expression( u , u )
->                                                     conditional_expression( u , u )
->                                                      logical_or_expression( u , u )
->                                                       logical_and_expression( u , u )
->                                                        inclusive_or_expression( u , u )
->                                                         exclusive_or_expression( u , u )
->                                                          and_expression( u , u )
->                                                           equality_expression( u , u )
->                                                            relational_expression( u , u )
->                                                             shift_expression( u , u )
->                                                              additive_expression( u , u )
->                                                               multiplicative_expression( u , u )
->                                                                pm_expression( u , u )
->                                                                 cast_expression( u , u )
->                                                                  unary_expression( u , u )
->                                                                   postfix_expression( u , u )
->                                                                    primary_expression( u , u )
->                                                                     id_expression( u , u )
->                                                   id_expression( getcountry , getcountry )
->                statement( strcpy , ; )
->                 expression( strcpy , ) )
->                  assignment_expression( strcpy , ) )
->                   conditional_expression( strcpy , ) )
->                    logical_or_expression( strcpy , ) )
->                     logical_and_expression( strcpy , ) )
->                      inclusive_or_expression( strcpy , ) )
->                       exclusive_or_expression( strcpy , ) )
->                        and_expression( strcpy , ) )
->                         equality_expression( strcpy , ) )
->                          relational_expression( strcpy , ) )
->                           shift_expression( strcpy , ) )
->                            additive_expression( strcpy , ) )
->                             multiplicative_expression( strcpy , ) )
->                              pm_expression( strcpy , ) )
->                               cast_expression( strcpy , ) )
->                                unary_expression( strcpy , ) )
->                                 postfix_expression( strcpy , ) )
->                                  primary_expression( strcpy , strcpy )
->                                   id_expression( strcpy , strcpy )
->                                  expression_list( match2 , steam )
->                                   assignment_expression( match2 , match2 )
->                                    conditional_expression( match2 , match2 )
->                                     logical_or_expression( match2 , match2 )
->                                      logical_and_expression( match2 , match2 )
->                                       inclusive_or_expression( match2 , match2 )
->                                        exclusive_or_expression( match2 , match2 )
->                                         and_expression( match2 , match2 )
->                                          equality_expression( match2 , match2 )
->                                           relational_expression( match2 , match2 )
->                                            shift_expression( match2 , match2 )
->                                             additive_expression( match2 , match2 )
->                                              multiplicative_expression( match2 , match2 )
->                                               pm_expression( match2 , match2 )
->                                                cast_expression( match2 , match2 )
->                                                 unary_expression( match2 , match2 )
->                                                  postfix_expression( match2 , match2 )
->                                                   primary_expression( match2 , match2 )
->                                                    id_expression( match2 , match2 )
->                                   assignment_expression( steam , steam )
->                                    conditional_expression( steam , steam )
->                                     logical_or_expression( steam , steam )
->                                      logical_and_expression( steam , steam )
->                                       inclusive_or_expression( steam , steam )
->                                        exclusive_or_expression( steam , steam )
->                                         and_expression( steam , steam )
->                                          equality_expression( steam , steam )
->                                           relational_expression( steam , steam )
->                                            shift_expression( steam , steam )
->                                             additive_expression( steam , steam )
->                                              multiplicative_expression( steam , steam )
->                                               pm_expression( steam , steam )
->                                                cast_expression( steam , steam )
->                                                 unary_expression( steam , steam )
->                                                  postfix_expression( steam , steam )
->                                                   primary_expression( steam , steam )
->                                                    id_expression( steam , steam )
->                statement( if , } )
->                 selection_statement( if , } )
->                  expression( * , match2 )
->                   assignment_expression( * , match2 )
->                    conditional_expression( * , match2 )
->                     logical_or_expression( * , match2 )
->                      logical_and_expression( * , match2 )
->                       inclusive_or_expression( * , match2 )
->                        exclusive_or_expression( * , match2 )
->                         and_expression( * , match2 )
->                          equality_expression( * , match2 )
->                           relational_expression( * , match1 )
->                            shift_expression( * , match1 )
->                             additive_expression( * , match1 )
->                              multiplicative_expression( * , match1 )
->                               pm_expression( * , match1 )
->                                cast_expression( * , match1 )
->                                 unary_expression( * , match1 )
->                                  unary_operator( * , * )
->                                  cast_expression( match1 , match1 )
->                                   unary_expression( match1 , match1 )
->                                    postfix_expression( match1 , match1 )
->                                     primary_expression( match1 , match1 )
->                                      id_expression( match1 , match1 )
->                           relational_expression( * , match2 )
->                            shift_expression( * , match2 )
->                             additive_expression( * , match2 )
->                              multiplicative_expression( * , match2 )
->                               pm_expression( * , match2 )
->                                cast_expression( * , match2 )
->                                 unary_expression( * , match2 )
->                                  unary_operator( * , * )
->                                  cast_expression( match2 , match2 )
->                                   unary_expression( match2 , match2 )
->                                    postfix_expression( match2 , match2 )
->                                     primary_expression( match2 , match2 )
->                                      id_expression( match2 , match2 )
->                  statement( { , } )
->                   compound_statement( { , } )
->                    statement_list( hiti2 , ; )
->                     statement( hiti2 , ; )
->                      expression( hiti2 , ) )
->                       assignment_expression( hiti2 , ) )
->                        conditional_expression( hiti2 , hiti2 )
->                         logical_or_expression( hiti2 , hiti2 )
->                          logical_and_expression( hiti2 , hiti2 )
->                           inclusive_or_expression( hiti2 , hiti2 )
->                            exclusive_or_expression( hiti2 , hiti2 )
->                             and_expression( hiti2 , hiti2 )
->                              equality_expression( hiti2 , hiti2 )
->                               relational_expression( hiti2 , hiti2 )
->                                shift_expression( hiti2 , hiti2 )
->                                 additive_expression( hiti2 , hiti2 )
->                                  multiplicative_expression( hiti2 , hiti2 )
->                                   pm_expression( hiti2 , hiti2 )
->                                    cast_expression( hiti2 , hiti2 )
->                                     unary_expression( hiti2 , hiti2 )
->                                      postfix_expression( hiti2 , hiti2 )
->                                       primary_expression( hiti2 , hiti2 )
->                                        id_expression( hiti2 , hiti2 )
->                        assignment_expression( new , ) )
->                         conditional_expression( new , ) )
->                          logical_or_expression( new , ) )
->                           logical_and_expression( new , ) )
->                            inclusive_or_expression( new , ) )
->                             exclusive_or_expression( new , ) )
->                              and_expression( new , ) )
->                               equality_expression( new , ) )
->                                relational_expression( new , ) )
->                                 shift_expression( new , ) )
->                                  additive_expression( new , ) )
->                                   multiplicative_expression( new , ) )
->                                    pm_expression( new , ) )
->                                     cast_expression( new , ) )
->                                      unary_expression( new , ) )
->                                       postfix_expression( new , ) )
->                                        primary_expression( new , ) )
->                                         new_expression( new , ) )
->                                          new_type_id( Team , Team )
->                                           declaration_specifiers( Team , Team )
->                                            qualified_type( Team , Team )
->                                             qualified_id( Team , Team )
->                                          new_initializer( ( , ) )
->                     statement( * , ; )
->                      expression( * , ] )
->                       assignment_expression( * , ] )
->                        conditional_expression( * , hiti2 )
->                         logical_or_expression( * , hiti2 )
->                          logical_and_expression( * , hiti2 )
->                           inclusive_or_expression( * , hiti2 )
->                            exclusive_or_expression( * , hiti2 )
->                             and_expression( * , hiti2 )
->                              equality_expression( * , hiti2 )
->                               relational_expression( * , hiti2 )
->                                shift_expression( * , hiti2 )
->                                 additive_expression( * , hiti2 )
->                                  multiplicative_expression( * , hiti2 )
->                                   pm_expression( * , hiti2 )
->                                    cast_expression( * , hiti2 )
->                                     unary_expression( * , hiti2 )
->                                      unary_operator( * , * )
->                                      cast_expression( hiti2 , hiti2 )
->                                       unary_expression( hiti2 , hiti2 )
->                                        postfix_expression( hiti2 , hiti2 )
->                                         primary_expression( hiti2 , hiti2 )
->                                          id_expression( hiti2 , hiti2 )
->                        assignment_expression( Teamc , ] )
->                         conditional_expression( Teamc , ] )
->                          logical_or_expression( Teamc , ] )
->                           logical_and_expression( Teamc , ] )
->                            inclusive_or_expression( Teamc , ] )
->                             exclusive_or_expression( Teamc , ] )
->                              and_expression( Teamc , ] )
->                               equality_expression( Teamc , ] )
->                                relational_expression( Teamc , ] )
->                                 shift_expression( Teamc , ] )
->                                  additive_expression( Teamc , ] )
->                                   multiplicative_expression( Teamc , ] )
->                                    pm_expression( Teamc , ] )
->                                     cast_expression( Teamc , ] )
->                                      unary_expression( Teamc , ] )
->                                       postfix_expression( Teamc , ] )
->                                        primary_expression( Teamc , Teamc )
->                                         id_expression( Teamc , Teamc )
->                                        expression( u , u )
->                                         assignment_expression( u , u )
->                                          conditional_expression( u , u )
->                                           logical_or_expression( u , u )
->                                            logical_and_expression( u , u )
->                                             inclusive_or_expression( u , u )
->                                              exclusive_or_expression( u , u )
->                                               and_expression( u , u )
->                                                equality_expression( u , u )
->                                                 relational_expression( u , u )
->                                                  shift_expression( u , u )
->                                                   additive_expression( u , u )
->                                                    multiplicative_expression( u , u )
->                                                     pm_expression( u , u )
->                                                      cast_expression( u , u )
->                                                       unary_expression( u , u )
->                                                        postfix_expression( u , u )
->                                                         primary_expression( u , u )
->                                                          id_expression( u , u )
->           statement( Game , ; )
->            declaration( Game , ; )
->             declaration_specifiers( Game , Game )
->              qualified_type( Game , Game )
->               qualified_id( Game , Game )
->             init_declarator_list( * , ) )
->              init_declarator( * , ) )
->               declarator( * , G )
->                ptr_operator( * , * )
->                 cv_qualifier_seq( G , * )
->                declarator( G , G )
->                 direct_declarator( G , G )
->                  qualified_id( G , G )
->               initializer( new , ) )
->                assignment_expression( new , ) )
->                 conditional_expression( new , ) )
->                  logical_or_expression( new , ) )
->                   logical_and_expression( new , ) )
->                    inclusive_or_expression( new , ) )
->                     exclusive_or_expression( new , ) )
->                      and_expression( new , ) )
->                       equality_expression( new , ) )
->                        relational_expression( new , ) )
->                         shift_expression( new , ) )
->                          additive_expression( new , ) )
->                           multiplicative_expression( new , ) )
->                            pm_expression( new , ) )
->                             cast_expression( new , ) )
->                              unary_expression( new , ) )
->                               postfix_expression( new , ) )
->                                primary_expression( new , ) )
->                                 new_expression( new , ) )
->                                  new_type_id( Game , Game )
->                                   declaration_specifiers( Game , Game )
->                                    qualified_type( Game , Game )
->                                     qualified_id( Game , Game )
->                                  new_initializer( ( , ) )
->                                   expression_list( hiti1 , sgoal )
->                                    assignment_expression( hiti1 , hiti1 )
->                                     conditional_expression( hiti1 , hiti1 )
->                                      logical_or_expression( hiti1 , hiti1 )
->                                       logical_and_expression( hiti1 , hiti1 )
->                                        inclusive_or_expression( hiti1 , hiti1 )
->                                         exclusive_or_expression( hiti1 , hiti1 )
->                                          and_expression( hiti1 , hiti1 )
->                                           equality_expression( hiti1 , hiti1 )
->                                            relational_expression( hiti1 , hiti1 )
->                                             shift_expression( hiti1 , hiti1 )
->                                              additive_expression( hiti1 , hiti1 )
->                                               multiplicative_expression( hiti1 , hiti1 )
->                                                pm_expression( hiti1 , hiti1 )
->                                                 cast_expression( hiti1 , hiti1 )
->                                                  unary_expression( hiti1 , hiti1 )
->                                                   postfix_expression( hiti1 , hiti1 )
->                                                    primary_expression( hiti1 , hiti1 )
->                                                     id_expression( hiti1 , hiti1 )
->                                    assignment_expression( hiti2 , hiti2 )
->                                     conditional_expression( hiti2 , hiti2 )
->                                      logical_or_expression( hiti2 , hiti2 )
->                                       logical_and_expression( hiti2 , hiti2 )
->                                        inclusive_or_expression( hiti2 , hiti2 )
->                                         exclusive_or_expression( hiti2 , hiti2 )
->                                          and_expression( hiti2 , hiti2 )
->                                           equality_expression( hiti2 , hiti2 )
->                                            relational_expression( hiti2 , hiti2 )
->                                             shift_expression( hiti2 , hiti2 )
->                                              additive_expression( hiti2 , hiti2 )
->                                               multiplicative_expression( hiti2 , hiti2 )
->                                                pm_expression( hiti2 , hiti2 )
->                                                 cast_expression( hiti2 , hiti2 )
->                                                  unary_expression( hiti2 , hiti2 )
->                                                   postfix_expression( hiti2 , hiti2 )
->                                                    primary_expression( hiti2 , hiti2 )
->                                                     id_expression( hiti2 , hiti2 )
->                                    assignment_expression( fgoal , fgoal )
->                                     conditional_expression( fgoal , fgoal )
->                                      logical_or_expression( fgoal , fgoal )
->                                       logical_and_expression( fgoal , fgoal )
->                                        inclusive_or_expression( fgoal , fgoal )
->                                         exclusive_or_expression( fgoal , fgoal )
->                                          and_expression( fgoal , fgoal )
->                                           equality_expression( fgoal , fgoal )
->                                            relational_expression( fgoal , fgoal )
->                                             shift_expression( fgoal , fgoal )
->                                              additive_expression( fgoal , fgoal )
->                                               multiplicative_expression( fgoal , fgoal )
->                                                pm_expression( fgoal , fgoal )
->                                                 cast_expression( fgoal , fgoal )
->                                                  unary_expression( fgoal , fgoal )
->                                                   postfix_expression( fgoal , fgoal )
->                                                    primary_expression( fgoal , fgoal )
->                                                     id_expression( fgoal , fgoal )
->                                    assignment_expression( sgoal , sgoal )
->                                     conditional_expression( sgoal , sgoal )
->                                      logical_or_expression( sgoal , sgoal )
->                                       logical_and_expression( sgoal , sgoal )
->                                        inclusive_or_expression( sgoal , sgoal )
->                                         exclusive_or_expression( sgoal , sgoal )
->                                          and_expression( sgoal , sgoal )
->                                           equality_expression( sgoal , sgoal )
->                                            relational_expression( sgoal , sgoal )
->                                             shift_expression( sgoal , sgoal )
->                                              additive_expression( sgoal , sgoal )
->                                               multiplicative_expression( sgoal , sgoal )
->                                                pm_expression( sgoal , sgoal )
->                                                 cast_expression( sgoal , sgoal )
->                                                  unary_expression( sgoal , sgoal )
->                                                   postfix_expression( sgoal , sgoal )
->                                                    primary_expression( sgoal , sgoal )
->                                                     id_expression( sgoal , sgoal )
->           statement( Gamec , ; )
->            expression( Gamec , G )
->             assignment_expression( Gamec , G )
->              conditional_expression( Gamec , ] )
->               logical_or_expression( Gamec , ] )
->                logical_and_expression( Gamec , ] )
->                 inclusive_or_expression( Gamec , ] )
->                  exclusive_or_expression( Gamec , ] )
->                   and_expression( Gamec , ] )
->                    equality_expression( Gamec , ] )
->                     relational_expression( Gamec , ] )
->                      shift_expression( Gamec , ] )
->                       additive_expression( Gamec , ] )
->                        multiplicative_expression( Gamec , ] )
->                         pm_expression( Gamec , ] )
->                          cast_expression( Gamec , ] )
->                           unary_expression( Gamec , ] )
->                            postfix_expression( Gamec , ] )
->                             primary_expression( Gamec , Gamec )
->                              id_expression( Gamec , Gamec )
->                             expression( y , y )
->                              assignment_expression( y , y )
->                               conditional_expression( y , y )
->                                logical_or_expression( y , y )
->                                 logical_and_expression( y , y )
->                                  inclusive_or_expression( y , y )
->                                   exclusive_or_expression( y , y )
->                                    and_expression( y , y )
->                                     equality_expression( y , y )
->                                      relational_expression( y , y )
->                                       shift_expression( y , y )
->                                        additive_expression( y , y )
->                                         multiplicative_expression( y , y )
->                                          pm_expression( y , y )
->                                           cast_expression( y , y )
->                                            unary_expression( y , y )
->                                             postfix_expression( y , y )
->                                              primary_expression( y , y )
->                                               id_expression( y , y )
->              assignment_expression( * , G )
->               conditional_expression( * , G )
->                logical_or_expression( * , G )
->                 logical_and_expression( * , G )
->                  inclusive_or_expression( * , G )
->                   exclusive_or_expression( * , G )
->                    and_expression( * , G )
->                     equality_expression( * , G )
->                      relational_expression( * , G )
->                       shift_expression( * , G )
->                        additive_expression( * , G )
->                         multiplicative_expression( * , G )
->                          pm_expression( * , G )
->                           cast_expression( * , G )
->                            unary_expression( * , G )
->                             unary_operator( * , * )
->                             cast_expression( G , G )
->                              unary_expression( G , G )
->                               postfix_expression( G , G )
->                                primary_expression( G , G )
->                                 id_expression( G , G )
->           statement( Team , ; )
->            declaration( Team , ; )
->             declaration_specifiers( Team , Team )
->              qualified_type( Team , Team )
->               qualified_id( Team , Team )
->             init_declarator_list( * , inst )
->              init_declarator( * , inst )
->               declarator( * , inst )
->                ptr_operator( * , * )
->                 cv_qualifier_seq( inst , * )
->                declarator( inst , inst )
->                 direct_declarator( inst , inst )
->                  qualified_id( inst , inst )
->           statement( inst , ; )
->            expression( inst , ) )
->             assignment_expression( inst , ) )
->              conditional_expression( inst , inst )
->               logical_or_expression( inst , inst )
->                logical_and_expression( inst , inst )
->                 inclusive_or_expression( inst , inst )
->                  exclusive_or_expression( inst , inst )
->                   and_expression( inst , inst )
->                    equality_expression( inst , inst )
->                     relational_expression( inst , inst )
->                      shift_expression( inst , inst )
->                       additive_expression( inst , inst )
->                        multiplicative_expression( inst , inst )
->                         pm_expression( inst , inst )
->                          cast_expression( inst , inst )
->                           unary_expression( inst , inst )
->                            postfix_expression( inst , inst )
->                             primary_expression( inst , inst )
->                              id_expression( inst , inst )
->              assignment_expression( Gamec , ) )
->               conditional_expression( Gamec , ) )
->                logical_or_expression( Gamec , ) )
->                 logical_and_expression( Gamec , ) )
->                  inclusive_or_expression( Gamec , ) )
->                   exclusive_or_expression( Gamec , ) )
->                    and_expression( Gamec , ) )
->                     equality_expression( Gamec , ) )
->                      relational_expression( Gamec , ) )
->                       shift_expression( Gamec , ) )
->                        additive_expression( Gamec , ) )
->                         multiplicative_expression( Gamec , ) )
->                          pm_expression( Gamec , ) )
->                           cast_expression( Gamec , ) )
->                            unary_expression( Gamec , ) )
->                             postfix_expression( Gamec , ) )
->                              primary_expression( Gamec , Gamec )
->                               id_expression( Gamec , Gamec )
->                              expression( y , y )
->                               assignment_expression( y , y )
->                                conditional_expression( y , y )
->                                 logical_or_expression( y , y )
->                                  logical_and_expression( y , y )
->                                   inclusive_or_expression( y , y )
->                                    exclusive_or_expression( y , y )
->                                     and_expression( y , y )
->                                      equality_expression( y , y )
->                                       relational_expression( y , y )
->                                        shift_expression( y , y )
->                                         additive_expression( y , y )
->                                          multiplicative_expression( y , y )
->                                           pm_expression( y , y )
->                                            cast_expression( y , y )
->                                             unary_expression( y , y )
->                                              postfix_expression( y , y )
->                                               primary_expression( y , y )
->                                                id_expression( y , y )
->                              id_expression( getFirstTeam , getFirstTeam )
->      statement( choice , ; )
->       expression( choice , 4 )
->        assignment_expression( choice , 4 )
->         conditional_expression( choice , choice )
->          logical_or_expression( choice , choice )
->           logical_and_expression( choice , choice )
->            inclusive_or_expression( choice , choice )
->             exclusive_or_expression( choice , choice )
->              and_expression( choice , choice )
->               equality_expression( choice , choice )
->                relational_expression( choice , choice )
->                 shift_expression( choice , choice )
->                  additive_expression( choice , choice )
->                   multiplicative_expression( choice , choice )
->                    pm_expression( choice , choice )
->                     cast_expression( choice , choice )
->                      unary_expression( choice , choice )
->                       postfix_expression( choice , choice )
->                        primary_expression( choice , choice )
->                         id_expression( choice , choice )
->         assignment_expression( 4 , 4 )
->          conditional_expression( 4 , 4 )
->           logical_or_expression( 4 , 4 )
->            logical_and_expression( 4 , 4 )
->             inclusive_or_expression( 4 , 4 )
->              exclusive_or_expression( 4 , 4 )
->               and_expression( 4 , 4 )
->                equality_expression( 4 , 4 )
->                 relational_expression( 4 , 4 )
->                  shift_expression( 4 , 4 )
->                   additive_expression( 4 , 4 )
->                    multiplicative_expression( 4 , 4 )
->                     pm_expression( 4 , 4 )
->                      cast_expression( 4 , 4 )
->                       unary_expression( 4 , 4 )
->                        postfix_expression( 4 , 4 )
->                         primary_expression( 4 , 4 )
->                          constant( 4 , 4 )
->      statement( while , } )
->       iteration_statement( while , } )
->        expression( choice , 3 )
->         assignment_expression( choice , 3 )
->          conditional_expression( choice , 3 )
->           logical_or_expression( choice , 3 )
->            logical_and_expression( choice , 3 )
->             inclusive_or_expression( choice , 3 )
->              exclusive_or_expression( choice , 3 )
->               and_expression( choice , 3 )
->                equality_expression( choice , 3 )
->                 relational_expression( choice , choice )
->                  shift_expression( choice , choice )
->                   additive_expression( choice , choice )
->                    multiplicative_expression( choice , choice )
->                     pm_expression( choice , choice )
->                      cast_expression( choice , choice )
->                       unary_expression( choice , choice )
->                        postfix_expression( choice , choice )
->                         primary_expression( choice , choice )
->                          id_expression( choice , choice )
->                 relational_expression( 3 , 3 )
->                  shift_expression( 3 , 3 )
->                   additive_expression( 3 , 3 )
->                    multiplicative_expression( 3 , 3 )
->                     pm_expression( 3 , 3 )
->                      cast_expression( 3 , 3 )
->                       unary_expression( 3 , 3 )
->                        postfix_expression( 3 , 3 )
->                         primary_expression( 3 , 3 )
->                          constant( 3 , 3 )
->        statement( { , } )
->         compound_statement( { , } )
->          statement_list( cout , } )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "Pick a choice from the menu" , "Pick a choice from the menu" )
->                        multiplicative_expression( "Pick a choice from the menu" , "Pick a choice from the menu" )
->                         pm_expression( "Pick a choice from the menu" , "Pick a choice from the menu" )
->                          cast_expression( "Pick a choice from the menu" , "Pick a choice from the menu" )
->                           unary_expression( "Pick a choice from the menu" , "Pick a choice from the menu" )
->                            postfix_expression( "Pick a choice from the menu" , "Pick a choice from the menu" )
->                             primary_expression( "Pick a choice from the menu" , "Pick a choice from the menu" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "1.) Display all of one team's games" , "1.) Display all of one team's games" )
->                        multiplicative_expression( "1.) Display all of one team's games" , "1.) Display all of one team's games" )
->                         pm_expression( "1.) Display all of one team's games" , "1.) Display all of one team's games" )
->                          cast_expression( "1.) Display all of one team's games" , "1.) Display all of one team's games" )
->                           unary_expression( "1.) Display all of one team's games" , "1.) Display all of one team's games" )
->                            postfix_expression( "1.) Display all of one team's games" , "1.) Display all of one team's games" )
->                             primary_expression( "1.) Display all of one team's games" , "1.) Display all of one team's games" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "2.) Display all of one continent's games" , "2.) Display all of one continent's games" )
->                        multiplicative_expression( "2.) Display all of one continent's games" , "2.) Display all of one continent's games" )
->                         pm_expression( "2.) Display all of one continent's games" , "2.) Display all of one continent's games" )
->                          cast_expression( "2.) Display all of one continent's games" , "2.) Display all of one continent's games" )
->                           unary_expression( "2.) Display all of one continent's games" , "2.) Display all of one continent's games" )
->                            postfix_expression( "2.) Display all of one continent's games" , "2.) Display all of one continent's games" )
->                             primary_expression( "2.) Display all of one continent's games" , "2.) Display all of one continent's games" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cout , ; )
->            expression( cout , endl )
->             assignment_expression( cout , endl )
->              conditional_expression( cout , endl )
->               logical_or_expression( cout , endl )
->                logical_and_expression( cout , endl )
->                 inclusive_or_expression( cout , endl )
->                  exclusive_or_expression( cout , endl )
->                   and_expression( cout , endl )
->                    equality_expression( cout , endl )
->                     relational_expression( cout , endl )
->                      shift_expression( cout , endl )
->                       additive_expression( cout , cout )
->                        multiplicative_expression( cout , cout )
->                         pm_expression( cout , cout )
->                          cast_expression( cout , cout )
->                           unary_expression( cout , cout )
->                            postfix_expression( cout , cout )
->                             primary_expression( cout , cout )
->                              id_expression( cout , cout )
->                       additive_expression( "3.) Exit" , "3.) Exit" )
->                        multiplicative_expression( "3.) Exit" , "3.) Exit" )
->                         pm_expression( "3.) Exit" , "3.) Exit" )
->                          cast_expression( "3.) Exit" , "3.) Exit" )
->                           unary_expression( "3.) Exit" , "3.) Exit" )
->                            postfix_expression( "3.) Exit" , "3.) Exit" )
->                             primary_expression( "3.) Exit" , "3.) Exit" )
->                       additive_expression( endl , endl )
->                        multiplicative_expression( endl , endl )
->                         pm_expression( endl , endl )
->                          cast_expression( endl , endl )
->                           unary_expression( endl , endl )
->                            postfix_expression( endl , endl )
->                             primary_expression( endl , endl )
->                              id_expression( endl , endl )
->           statement( cin , ; )
->            expression( cin , choice )
->             assignment_expression( cin , choice )
->              conditional_expression( cin , choice )
->               logical_or_expression( cin , choice )
->                logical_and_expression( cin , choice )
->                 inclusive_or_expression( cin , choice )
->                  exclusive_or_expression( cin , choice )
->                   and_expression( cin , choice )
->                    equality_expression( cin , choice )
->                     relational_expression( cin , choice )
->                      shift_expression( cin , choice )
->                       additive_expression( cin , cin )
->                        multiplicative_expression( cin , cin )
->                         pm_expression( cin , cin )
->                          cast_expression( cin , cin )
->                           unary_expression( cin , cin )
->                            postfix_expression( cin , cin )
->                             primary_expression( cin , cin )
->                              id_expression( cin , cin )
->                       additive_expression( choice , choice )
->                        multiplicative_expression( choice , choice )
->                         pm_expression( choice , choice )
->                          cast_expression( choice , choice )
->                           unary_expression( choice , choice )
->                            postfix_expression( choice , choice )
->                             primary_expression( choice , choice )
->                              id_expression( choice , choice )
->           statement( if , } )
->            selection_statement( if , } )
->             expression( choice , 1 )
->              assignment_expression( choice , 1 )
->               conditional_expression( choice , 1 )
->                logical_or_expression( choice , 1 )
->                 logical_and_expression( choice , 1 )
->                  inclusive_or_expression( choice , 1 )
->                   exclusive_or_expression( choice , 1 )
->                    and_expression( choice , 1 )
->                     equality_expression( choice , 1 )
->                      relational_expression( choice , choice )
->                       shift_expression( choice , choice )
->                        additive_expression( choice , choice )
->                         multiplicative_expression( choice , choice )
->                          pm_expression( choice , choice )
->                           cast_expression( choice , choice )
->                            unary_expression( choice , choice )
->                             postfix_expression( choice , choice )
->                              primary_expression( choice , choice )
->                               id_expression( choice , choice )
->                      relational_expression( 1 , 1 )
->                       shift_expression( 1 , 1 )
->                        additive_expression( 1 , 1 )
->                         multiplicative_expression( 1 , 1 )
->                          pm_expression( 1 , 1 )
->                           cast_expression( 1 , 1 )
->                            unary_expression( 1 , 1 )
->                             postfix_expression( 1 , 1 )
->                              primary_expression( 1 , 1 )
->                               constant( 1 , 1 )
->             statement( { , } )
->              compound_statement( { , } )
->               statement_list( cout , } )
->                statement( cout , ; )
->                 expression( cout , endl )
->                  assignment_expression( cout , endl )
->                   conditional_expression( cout , endl )
->                    logical_or_expression( cout , endl )
->                     logical_and_expression( cout , endl )
->                      inclusive_or_expression( cout , endl )
->                       exclusive_or_expression( cout , endl )
->                        and_expression( cout , endl )
->                         equality_expression( cout , endl )
->                          relational_expression( cout , endl )
->                           shift_expression( cout , endl )
->                            additive_expression( cout , cout )
->                             multiplicative_expression( cout , cout )
->                              pm_expression( cout , cout )
->                               cast_expression( cout , cout )
->                                unary_expression( cout , cout )
->                                 postfix_expression( cout , cout )
->                                  primary_expression( cout , cout )
->                                   id_expression( cout , cout )
->                            additive_expression( "What team schedule would you like to see" , "What team schedule would you like to see" )
->                             multiplicative_expression( "What team schedule would you like to see" , "What team schedule would you like to see" )
->                              pm_expression( "What team schedule would you like to see" , "What team schedule would you like to see" )
->                               cast_expression( "What team schedule would you like to see" , "What team schedule would you like to see" )
->                                unary_expression( "What team schedule would you like to see" , "What team schedule would you like to see" )
->                                 postfix_expression( "What team schedule would you like to see" , "What team schedule would you like to see" )
->                                  primary_expression( "What team schedule would you like to see" , "What team schedule would you like to see" )
->                            additive_expression( endl , endl )
->                             multiplicative_expression( endl , endl )
->                              pm_expression( endl , endl )
->                               cast_expression( endl , endl )
->                                unary_expression( endl , endl )
->                                 postfix_expression( endl , endl )
->                                  primary_expression( endl , endl )
->                                   id_expression( endl , endl )
->                statement( cin , ; )
->                 expression( cin , teem )
->                  assignment_expression( cin , teem )
->                   conditional_expression( cin , teem )
->                    logical_or_expression( cin , teem )
->                     logical_and_expression( cin , teem )
->                      inclusive_or_expression( cin , teem )
->                       exclusive_or_expression( cin , teem )
->                        and_expression( cin , teem )
->                         equality_expression( cin , teem )
->                          relational_expression( cin , teem )
->                           shift_expression( cin , teem )
->                            additive_expression( cin , cin )
->                             multiplicative_expression( cin , cin )
->                              pm_expression( cin , cin )
->                               cast_expression( cin , cin )
->                                unary_expression( cin , cin )
->                                 postfix_expression( cin , cin )
->                                  primary_expression( cin , cin )
->                                   id_expression( cin , cin )
->                            additive_expression( teem , teem )
->                             multiplicative_expression( teem , teem )
->                              pm_expression( teem , teem )
->                               cast_expression( teem , teem )
->                                unary_expression( teem , teem )
->                                 postfix_expression( teem , teem )
->                                  primary_expression( teem , teem )
->                                   id_expression( teem , teem )
->                statement( int , ; )
->                 declaration( int , ; )
->                  declaration_specifiers( int , int )
->                   builtin_type_specifier( int , int )
->                  init_declarator_list( tt , tt )
->                   init_declarator( tt , tt )
->                    declarator( tt , tt )
->                     direct_declarator( tt , tt )
->                      qualified_id( tt , tt )
->                statement( for , } )
->                 iteration_statement( for , } )
->                  declaration( int , ; )
->                   declaration_specifiers( int , int )
->                    builtin_type_specifier( int , int )
->                   init_declarator_list( t , 0 )
->                    init_declarator( t , 0 )
->                     declarator( t , t )
->                      direct_declarator( t , t )
->                       qualified_id( t , t )
->                     initializer( 0 , 0 )
->                      assignment_expression( 0 , 0 )
->                       conditional_expression( 0 , 0 )
->                        logical_or_expression( 0 , 0 )
->                         logical_and_expression( 0 , 0 )
->                          inclusive_or_expression( 0 , 0 )
->                           exclusive_or_expression( 0 , 0 )
->                            and_expression( 0 , 0 )
->                             equality_expression( 0 , 0 )
->                              relational_expression( 0 , 0 )
->                               shift_expression( 0 , 0 )
->                                additive_expression( 0 , 0 )
->                                 multiplicative_expression( 0 , 0 )
->                                  pm_expression( 0 , 0 )
->                                   cast_expression( 0 , 0 )
->                                    unary_expression( 0 , 0 )
->                                     postfix_expression( 0 , 0 )
->                                      primary_expression( 0 , 0 )
->                                       constant( 0 , 0 )
->                  expression( t , 6 )
->                   assignment_expression( t , 6 )
->                    conditional_expression( t , 6 )
->                     logical_or_expression( t , 6 )
->                      logical_and_expression( t , 6 )
->                       inclusive_or_expression( t , 6 )
->                        exclusive_or_expression( t , 6 )
->                         and_expression( t , 6 )
->                          equality_expression( t , 6 )
->                           relational_expression( t , 6 )
->                            shift_expression( t , t )
->                             additive_expression( t , t )
->                              multiplicative_expression( t , t )
->                               pm_expression( t , t )
->                                cast_expression( t , t )
->                                 unary_expression( t , t )
->                                  postfix_expression( t , t )
->                                   primary_expression( t , t )
->                                    id_expression( t , t )
->                            shift_expression( 6 , 6 )
->                             additive_expression( 6 , 6 )
->                              multiplicative_expression( 6 , 6 )
->                               pm_expression( 6 , 6 )
->                                cast_expression( 6 , 6 )
->                                 unary_expression( 6 , 6 )
->                                  postfix_expression( 6 , 6 )
->                                   primary_expression( 6 , 6 )
->                                    constant( 6 , 6 )
->                  expression( t , ++ )
->                   assignment_expression( t , ++ )
->                    conditional_expression( t , ++ )
->                     logical_or_expression( t , ++ )
->                      logical_and_expression( t , ++ )
->                       inclusive_or_expression( t , ++ )
->                        exclusive_or_expression( t , ++ )
->                         and_expression( t , ++ )
->                          equality_expression( t , ++ )
->                           relational_expression( t , ++ )
->                            shift_expression( t , ++ )
->                             additive_expression( t , ++ )
->                              multiplicative_expression( t , ++ )
->                               pm_expression( t , ++ )
->                                cast_expression( t , ++ )
->                                 unary_expression( t , ++ )
->                                  postfix_expression( t , ++ )
->                                   primary_expression( t , t )
->                                    id_expression( t , t )
->                  statement( { , } )
->                   compound_statement( { , } )
->                    statement_list( tt , } )
->                     statement( tt , ; )
->                      expression( tt , 1 )
->                       assignment_expression( tt , 1 )
->                        conditional_expression( tt , tt )
->                         logical_or_expression( tt , tt )
->                          logical_and_expression( tt , tt )
->                           inclusive_or_expression( tt , tt )
->                            exclusive_or_expression( tt , tt )
->                             and_expression( tt , tt )
->                              equality_expression( tt , tt )
->                               relational_expression( tt , tt )
->                                shift_expression( tt , tt )
->                                 additive_expression( tt , tt )
->                                  multiplicative_expression( tt , tt )
->                                   pm_expression( tt , tt )
->                                    cast_expression( tt , tt )
->                                     unary_expression( tt , tt )
->                                      postfix_expression( tt , tt )
->                                       primary_expression( tt , tt )
->                                        id_expression( tt , tt )
->                        assignment_expression( t , 1 )
->                         conditional_expression( t , 1 )
->                          logical_or_expression( t , 1 )
->                           logical_and_expression( t , 1 )
->                            inclusive_or_expression( t , 1 )
->                             exclusive_or_expression( t , 1 )
->                              and_expression( t , 1 )
->                               equality_expression( t , 1 )
->                                relational_expression( t , 1 )
->                                 shift_expression( t , 1 )
->                                  additive_expression( t , 1 )
->                                   multiplicative_expression( t , t )
->                                    pm_expression( t , t )
->                                     cast_expression( t , t )
->                                      unary_expression( t , t )
->                                       postfix_expression( t , t )
->                                        primary_expression( t , t )
->                                         id_expression( t , t )
->                                   multiplicative_expression( 1 , 1 )
->                                    pm_expression( 1 , 1 )
->                                     cast_expression( 1 , 1 )
->                                      unary_expression( 1 , 1 )
->                                       postfix_expression( 1 , 1 )
->                                        primary_expression( 1 , 1 )
->                                         constant( 1 , 1 )
->                     statement( chck1 , ; )
->                      expression( chck1 , ) )
->                       assignment_expression( chck1 , ) )
->                        conditional_expression( chck1 , chck1 )
->                         logical_or_expression( chck1 , chck1 )
->                          logical_and_expression( chck1 , chck1 )
->                           inclusive_or_expression( chck1 , chck1 )
->                            exclusive_or_expression( chck1 , chck1 )
->                             and_expression( chck1 , chck1 )
->                              equality_expression( chck1 , chck1 )
->                               relational_expression( chck1 , chck1 )
->                                shift_expression( chck1 , chck1 )
->                                 additive_expression( chck1 , chck1 )
->                                  multiplicative_expression( chck1 , chck1 )
->                                   pm_expression( chck1 , chck1 )
->                                    cast_expression( chck1 , chck1 )
->                                     unary_expression( chck1 , chck1 )
->                                      postfix_expression( chck1 , chck1 )
->                                       primary_expression( chck1 , chck1 )
->                                        id_expression( chck1 , chck1 )
->                        assignment_expression( Gamec , ) )
->                         conditional_expression( Gamec , ) )
->                          logical_or_expression( Gamec , ) )
->                           logical_and_expression( Gamec , ) )
->                            inclusive_or_expression( Gamec , ) )
->                             exclusive_or_expression( Gamec , ) )
->                              and_expression( Gamec , ) )
->                               equality_expression( Gamec , ) )
->                                relational_expression( Gamec , ) )
->                                 shift_expression( Gamec , ) )
->                                  additive_expression( Gamec , ) )
->                                   multiplicative_expression( Gamec , ) )
->                                    pm_expression( Gamec , ) )
->                                     cast_expression( Gamec , ) )
->                                      unary_expression( Gamec , ) )
->                                       postfix_expression( Gamec , ) )
->                                        primary_expression( Gamec , Gamec )
->                                         id_expression( Gamec , Gamec )
->                                        expression( t , t )
->                                         assignment_expression( t , t )
->                                          conditional_expression( t , t )
->                                           logical_or_expression( t , t )
->                                            logical_and_expression( t , t )
->                                             inclusive_or_expression( t , t )
->                                              exclusive_or_expression( t , t )
->                                               and_expression( t , t )
->                                                equality_expression( t , t )
->                                                 relational_expression( t , t )
->                                                  shift_expression( t , t )
->                                                   additive_expression( t , t )
->                                                    multiplicative_expression( t , t )
->                                                     pm_expression( t , t )
->                                                      cast_expression( t , t )
->                                                       unary_expression( t , t )
->                                                        postfix_expression( t , t )
->                                                         primary_expression( t , t )
->                                                          id_expression( t , t )
->                                        id_expression( getFirstTeam , getFirstTeam )
->                     statement( chck2 , ; )
->                      expression( chck2 , ) )
->                       assignment_expression( chck2 , ) )
->                        conditional_expression( chck2 , chck2 )
->                         logical_or_expression( chck2 , chck2 )
->                          logical_and_expression( chck2 , chck2 )
->                           inclusive_or_expression( chck2 , chck2 )
->                            exclusive_or_expression( chck2 , chck2 )
->                             and_expression( chck2 , chck2 )
->                              equality_expression( chck2 , chck2 )
->                               relational_expression( chck2 , chck2 )
->                                shift_expression( chck2 , chck2 )
->                                 additive_expression( chck2 , chck2 )
->                                  multiplicative_expression( chck2 , chck2 )
->                                   pm_expression( chck2 , chck2 )
->                                    cast_expression( chck2 , chck2 )
->                                     unary_expression( chck2 , chck2 )
->                                      postfix_expression( chck2 , chck2 )
->                                       primary_expression( chck2 , chck2 )
->                                        id_expression( chck2 , chck2 )
->                        assignment_expression( Gamec , ) )
->                         conditional_expression( Gamec , ) )
->                          logical_or_expression( Gamec , ) )
->                           logical_and_expression( Gamec , ) )
->                            inclusive_or_expression( Gamec , ) )
->                             exclusive_or_expression( Gamec , ) )
->                              and_expression( Gamec , ) )
->                               equality_expression( Gamec , ) )
->                                relational_expression( Gamec , ) )
->                                 shift_expression( Gamec , ) )
->                                  additive_expression( Gamec , ) )
->                                   multiplicative_expression( Gamec , ) )
->                                    pm_expression( Gamec , ) )
->                                     cast_expression( Gamec , ) )
->                                      unary_expression( Gamec , ) )
->                                       postfix_expression( Gamec , ) )
->                                        primary_expression( Gamec , Gamec )
->                                         id_expression( Gamec , Gamec )
->                                        expression( t , t )
->                                         assignment_expression( t , t )
->                                          conditional_expression( t , t )
->                                           logical_or_expression( t , t )
->                                            logical_and_expression( t , t )
->                                             inclusive_or_expression( t , t )
->                                              exclusive_or_expression( t , t )
->                                               and_expression( t , t )
->                                                equality_expression( t , t )
->                                                 relational_expression( t , t )
->                                                  shift_expression( t , t )
->                                                   additive_expression( t , t )
->                                                    multiplicative_expression( t , t )
->                                                     pm_expression( t , t )
->                                                      cast_expression( t , t )
->                                                       unary_expression( t , t )
->                                                        postfix_expression( t , t )
->                                                         primary_expression( t , t )
->                                                          id_expression( t , t )
->                                        id_expression( getSecondTeam , getSecondTeam )
->                     statement( p1 , ; )
->                      expression( p1 , ) )
->                       assignment_expression( p1 , ) )
->                        conditional_expression( p1 , p1 )
->                         logical_or_expression( p1 , p1 )
->                          logical_and_expression( p1 , p1 )
->                           inclusive_or_expression( p1 , p1 )
->                            exclusive_or_expression( p1 , p1 )
->                             and_expression( p1 , p1 )
->                              equality_expression( p1 , p1 )
->                               relational_expression( p1 , p1 )
->                                shift_expression( p1 , p1 )
->                                 additive_expression( p1 , p1 )
->                                  multiplicative_expression( p1 , p1 )
->                                   pm_expression( p1 , p1 )
->                                    cast_expression( p1 , p1 )
->                                     unary_expression( p1 , p1 )
->                                      postfix_expression( p1 , p1 )
->                                       primary_expression( p1 , p1 )
->                                        id_expression( p1 , p1 )
->                        assignment_expression( chck1 , ) )
->                         conditional_expression( chck1 , ) )
->                          logical_or_expression( chck1 , ) )
->                           logical_and_expression( chck1 , ) )
->                            inclusive_or_expression( chck1 , ) )
->                             exclusive_or_expression( chck1 , ) )
->                              and_expression( chck1 , ) )
->                               equality_expression( chck1 , ) )
->                                relational_expression( chck1 , ) )
->                                 shift_expression( chck1 , ) )
->                                  additive_expression( chck1 , ) )
->                                   multiplicative_expression( chck1 , ) )
->                                    pm_expression( chck1 , ) )
->                                     cast_expression( chck1 , ) )
->                                      unary_expression( chck1 , ) )
->                                       postfix_expression( chck1 , ) )
->                                        primary_expression( chck1 , chck1 )
->                                         id_expression( chck1 , chck1 )
->                                        id_expression( getcountry , getcountry )
->                     statement( p2 , ; )
->                      expression( p2 , ) )
->                       assignment_expression( p2 , ) )
->                        conditional_expression( p2 , p2 )
->                         logical_or_expression( p2 , p2 )
->                          logical_and_expression( p2 , p2 )
->                           inclusive_or_expression( p2 , p2 )
->                            exclusive_or_expression( p2 , p2 )
->                             and_expression( p2 , p2 )
->                              equality_expression( p2 , p2 )
->                               relational_expression( p2 , p2 )
->                                shift_expression( p2 , p2 )
->                                 additive_expression( p2 , p2 )
->                                  multiplicative_expression( p2 , p2 )
->                                   pm_expression( p2 , p2 )
->                                    cast_expression( p2 , p2 )
->                                     unary_expression( p2 , p2 )
->                                      postfix_expression( p2 , p2 )
->                                       primary_expression( p2 , p2 )
->                                        id_expression( p2 , p2 )
->                        assignment_expression( chck2 , ) )
->                         conditional_expression( chck2 , ) )
->                          logical_or_expression( chck2 , ) )
->                           logical_and_expression( chck2 , ) )
->                            inclusive_or_expression( chck2 , ) )
->                             exclusive_or_expression( chck2 , ) )
->                              and_expression( chck2 , ) )
->                               equality_expression( chck2 , ) )
->                                relational_expression( chck2 , ) )
->                                 shift_expression( chck2 , ) )
->                                  additive_expression( chck2 , ) )
->                                   multiplicative_expression( chck2 , ) )
->                                    pm_expression( chck2 , ) )
->                                     cast_expression( chck2 , ) )
->                                      unary_expression( chck2 , ) )
->                                       postfix_expression( chck2 , ) )
->                                        primary_expression( chck2 , chck2 )
->                                         id_expression( chck2 , chck2 )
->                                        id_expression( getcountry , getcountry )
->                     statement( if , } )
->                      selection_statement( if , } )
->                       expression( ( , ) )
->                        assignment_expression( ( , ) )
->                         conditional_expression( ( , ) )
->                          logical_or_expression( ( , ) )
->                           logical_and_expression( ( , ) )
->                            inclusive_or_expression( ( , ) )
->                             exclusive_or_expression( ( , ) )
->                              and_expression( ( , ) )
->                               equality_expression( ( , ) )
->                                relational_expression( ( , ) )
->                                 shift_expression( ( , ) )
->                                  additive_expression( ( , ) )
->                                   multiplicative_expression( ( , ) )
->                                    pm_expression( ( , ) )
->                                     cast_expression( ( , ) )
->                                      unary_expression( ( , ) )
->                                       postfix_expression( ( , ) )
->                                        primary_expression( ( , ) )
->                                         expression( strcmp , 0 )
->                                          assignment_expression( strcmp , 0 )
->                                           conditional_expression( strcmp , 0 )
->                                            logical_or_expression( strcmp , 0 )
->                                             logical_and_expression( strcmp , 0 )
->                                              inclusive_or_expression( strcmp , 0 )
->                                               exclusive_or_expression( strcmp , 0 )
->                                                and_expression( strcmp , 0 )
->                                                 equality_expression( strcmp , 0 )
->                                                  relational_expression( strcmp , ) )
->                                                   shift_expression( strcmp , ) )
->                                                    additive_expression( strcmp , ) )
->                                                     multiplicative_expression( strcmp , ) )
->                                                      pm_expression( strcmp , ) )
->                                                       cast_expression( strcmp , ) )
->                                                        unary_expression( strcmp , ) )
->                                                         postfix_expression( strcmp , ) )
->                                                          primary_expression( strcmp , strcmp )
->                                                           id_expression( strcmp , strcmp )
->                                                          expression_list( teem , p1 )
->                                                           assignment_expression( teem , teem )
->                                                            conditional_expression( teem , teem )
->                                                             logical_or_expression( teem , teem )
->                                                              logical_and_expression( teem , teem )
->                                                               inclusive_or_expression( teem , teem )
->                                                                exclusive_or_expression( teem , teem )
->                                                                 and_expression( teem , teem )
->                                                                  equality_expression( teem , teem )
->                                                                   relational_expression( teem , teem )
->                                                                    shift_expression( teem , teem )
->                                                                     additive_expression( teem , teem )
->                                                                      multiplicative_expression( teem , teem )
->                                                                       pm_expression( teem , teem )
->                                                                        cast_expression( teem , teem )
->                                                                         unary_expression( teem , teem )
->                                                                          postfix_expression( teem , teem )
->                                                                           primary_expression( teem , teem )
->                                                                            id_expression( teem , teem )
->                                                           assignment_expression( p1 , p1 )
->                                                            conditional_expression( p1 , p1 )
->                                                             logical_or_expression( p1 , p1 )
->                                                              logical_and_expression( p1 , p1 )
->                                                               inclusive_or_expression( p1 , p1 )
->                                                                exclusive_or_expression( p1 , p1 )
->                                                                 and_expression( p1 , p1 )
->                                                                  equality_expression( p1 , p1 )
->                                                                   relational_expression( p1 , p1 )
->                                                                    shift_expression( p1 , p1 )
->                                                                     additive_expression( p1 , p1 )
->                                                                      multiplicative_expression( p1 , p1 )
->                                                                       pm_expression( p1 , p1 )
->                                                                        cast_expression( p1 , p1 )
->                                                                         unary_expression( p1 , p1 )
->                                                                          postfix_expression( p1 , p1 )
->                                                                           primary_expression( p1 , p1 )
->                                                                            id_expression( p1 , p1 )
->                                                  relational_expression( 0 , 0 )
->                                                   shift_expression( 0 , 0 )
->                                                    additive_expression( 0 , 0 )
->                                                     multiplicative_expression( 0 , 0 )
->                                                      pm_expression( 0 , 0 )
->                                                       cast_expression( 0 , 0 )
->                                                        unary_expression( 0 , 0 )
->                                                         postfix_expression( 0 , 0 )
->                                                          primary_expression( 0 , 0 )
->                                                           constant( 0 , 0 )
->                           logical_and_expression( ( , ) )
->                            inclusive_or_expression( ( , ) )
->                             exclusive_or_expression( ( , ) )
->                              and_expression( ( , ) )
->                               equality_expression( ( , ) )
->                                relational_expression( ( , ) )
->                                 shift_expression( ( , ) )
->                                  additive_expression( ( , ) )
->                                   multiplicative_expression( ( , ) )
->                                    pm_expression( ( , ) )
->                                     cast_expression( ( , ) )
->                                      unary_expression( ( , ) )
->                                       postfix_expression( ( , ) )
->                                        primary_expression( ( , ) )
->                                         expression( strcmp , 0 )
->                                          assignment_expression( strcmp , 0 )
->                                           conditional_expression( strcmp , 0 )
->                                            logical_or_expression( strcmp , 0 )
->                                             logical_and_expression( strcmp , 0 )
->                                              inclusive_or_expression( strcmp , 0 )
->                                               exclusive_or_expression( strcmp , 0 )
->                                                and_expression( strcmp , 0 )
->                                                 equality_expression( strcmp , 0 )
->                                                  relational_expression( strcmp , ) )
->                                                   shift_expression( strcmp , ) )
->                                                    additive_expression( strcmp , ) )
->                                                     multiplicative_expression( strcmp , ) )
->                                                      pm_expression( strcmp , ) )
->                                                       cast_expression( strcmp , ) )
->                                                        unary_expression( strcmp , ) )
->                                                         postfix_expression( strcmp , ) )
->                                                          primary_expression( strcmp , strcmp )
->                                                           id_expression( strcmp , strcmp )
->                                                          expression_list( teem , p2 )
->                                                           assignment_expression( teem , teem )
->                                                            conditional_expression( teem , teem )
->                                                             logical_or_expression( teem , teem )
->                                                              logical_and_expression( teem , teem )
->                                                               inclusive_or_expression( teem , teem )
->                                                                exclusive_or_expression( teem , teem )
->                                                                 and_expression( teem , teem )
->                                                                  equality_expression( teem , teem )
->                                                                   relational_expression( teem , teem )
->                                                                    shift_expression( teem , teem )
->                                                                     additive_expression( teem , teem )
->                                                                      multiplicative_expression( teem , teem )
->                                                                       pm_expression( teem , teem )
->                                                                        cast_expression( teem , teem )
->                                                                         unary_expression( teem , teem )
->                                                                          postfix_expression( teem , teem )
->                                                                           primary_expression( teem , teem )
->                                                                            id_expression( teem , teem )
->                                                           assignment_expression( p2 , p2 )
->                                                            conditional_expression( p2 , p2 )
->                                                             logical_or_expression( p2 , p2 )
->                                                              logical_and_expression( p2 , p2 )
->                                                               inclusive_or_expression( p2 , p2 )
->                                                                exclusive_or_expression( p2 , p2 )
->                                                                 and_expression( p2 , p2 )
->                                                                  equality_expression( p2 , p2 )
->                                                                   relational_expression( p2 , p2 )
->                                                                    shift_expression( p2 , p2 )
->                                                                     additive_expression( p2 , p2 )
->                                                                      multiplicative_expression( p2 , p2 )
->                                                                       pm_expression( p2 , p2 )
->                                                                        cast_expression( p2 , p2 )
->                                                                         unary_expression( p2 , p2 )
->                                                                          postfix_expression( p2 , p2 )
->                                                                           primary_expression( p2 , p2 )
->                                                                            id_expression( p2 , p2 )
->                                                  relational_expression( 0 , 0 )
->                                                   shift_expression( 0 , 0 )
->                                                    additive_expression( 0 , 0 )
->                                                     multiplicative_expression( 0 , 0 )
->                                                      pm_expression( 0 , 0 )
->                                                       cast_expression( 0 , 0 )
->                                                        unary_expression( 0 , 0 )
->                                                         postfix_expression( 0 , 0 )
->                                                          primary_expression( 0 , 0 )
->                                                           constant( 0 , 0 )
->                       statement( { , } )
->                        compound_statement( { , } )
->                         statement_list( cout , ; )
->                          statement( cout , ; )
->                           expression( cout , endl )
->                            assignment_expression( cout , endl )
->                             conditional_expression( cout , endl )
->                              logical_or_expression( cout , endl )
->                               logical_and_expression( cout , endl )
->                                inclusive_or_expression( cout , endl )
->                                 exclusive_or_expression( cout , endl )
->                                  and_expression( cout , endl )
->                                   equality_expression( cout , endl )
->                                    relational_expression( cout , endl )
->                                     shift_expression( cout , endl )
->                                      additive_expression( cout , cout )
->                                       multiplicative_expression( cout , cout )
->                                        pm_expression( cout , cout )
->                                         cast_expression( cout , cout )
->                                          unary_expression( cout , cout )
->                                           postfix_expression( cout , cout )
->                                            primary_expression( cout , cout )
->                                             id_expression( cout , cout )
->                                      additive_expression( "Game " , "Game " )
->                                       multiplicative_expression( "Game " , "Game " )
->                                        pm_expression( "Game " , "Game " )
->                                         cast_expression( "Game " , "Game " )
->                                          unary_expression( "Game " , "Game " )
->                                           postfix_expression( "Game " , "Game " )
->                                            primary_expression( "Game " , "Game " )
->                                      additive_expression( tt , tt )
->                                       multiplicative_expression( tt , tt )
->                                        pm_expression( tt , tt )
->                                         cast_expression( tt , tt )
->                                          unary_expression( tt , tt )
->                                           postfix_expression( tt , tt )
->                                            primary_expression( tt , tt )
->                                             id_expression( tt , tt )
->                                      additive_expression( endl , endl )
->                                       multiplicative_expression( endl , endl )
->                                        pm_expression( endl , endl )
->                                         cast_expression( endl , endl )
->                                          unary_expression( endl , endl )
->                                           postfix_expression( endl , endl )
->                                            primary_expression( endl , endl )
->                                             id_expression( endl , endl )
->                          statement( Gamec , ; )
->                           expression( Gamec , ) )
->                            assignment_expression( Gamec , ) )
->                             conditional_expression( Gamec , ) )
->                              logical_or_expression( Gamec , ) )
->                               logical_and_expression( Gamec , ) )
->                                inclusive_or_expression( Gamec , ) )
->                                 exclusive_or_expression( Gamec , ) )
->                                  and_expression( Gamec , ) )
->                                   equality_expression( Gamec , ) )
->                                    relational_expression( Gamec , ) )
->                                     shift_expression( Gamec , ) )
->                                      additive_expression( Gamec , ) )
->                                       multiplicative_expression( Gamec , ) )
->                                        pm_expression( Gamec , ) )
->                                         cast_expression( Gamec , ) )
->                                          unary_expression( Gamec , ) )
->                                           postfix_expression( Gamec , ) )
->                                            primary_expression( Gamec , Gamec )
->                                             id_expression( Gamec , Gamec )
->                                            expression( t , t )
->                                             assignment_expression( t , t )
->                                              conditional_expression( t , t )
->                                               logical_or_expression( t , t )
->                                                logical_and_expression( t , t )
->                                                 inclusive_or_expression( t , t )
->                                                  exclusive_or_expression( t , t )
->                                                   and_expression( t , t )
->                                                    equality_expression( t , t )
->                                                     relational_expression( t , t )
->                                                      shift_expression( t , t )
->                                                       additive_expression( t , t )
->                                                        multiplicative_expression( t , t )
->                                                         pm_expression( t , t )
->                                                          cast_expression( t , t )
->                                                           unary_expression( t , t )
->                                                            postfix_expression( t , t )
->                                                             primary_expression( t , t )
->                                                              id_expression( t , t )
->                                            id_expression( print , print )
->                          statement( cout , ; )
->                           expression( cout , endl )
->                            assignment_expression( cout , endl )
->                             conditional_expression( cout , endl )
->                              logical_or_expression( cout , endl )
->                               logical_and_expression( cout , endl )
->                                inclusive_or_expression( cout , endl )
->                                 exclusive_or_expression( cout , endl )
->                                  and_expression( cout , endl )
->                                   equality_expression( cout , endl )
->                                    relational_expression( cout , endl )
->                                     shift_expression( cout , endl )
->                                      additive_expression( cout , cout )
->                                       multiplicative_expression( cout , cout )
->                                        pm_expression( cout , cout )
->                                         cast_expression( cout , cout )
->                                          unary_expression( cout , cout )
->                                           postfix_expression( cout , cout )
->                                            primary_expression( cout , cout )
->                                             id_expression( cout , cout )
->                                      additive_expression( endl , endl )
->                                       multiplicative_expression( endl , endl )
->                                        pm_expression( endl , endl )
->                                         cast_expression( endl , endl )
->                                          unary_expression( endl , endl )
->                                           postfix_expression( endl , endl )
->                                            primary_expression( endl , endl )
->                                             id_expression( endl , endl )
->           statement( if , } )
->            selection_statement( if , } )
->             expression( choice , 2 )
->              assignment_expression( choice , 2 )
->               conditional_expression( choice , 2 )
->                logical_or_expression( choice , 2 )
->                 logical_and_expression( choice , 2 )
->                  inclusive_or_expression( choice , 2 )
->                   exclusive_or_expression( choice , 2 )
->                    and_expression( choice , 2 )
->                     equality_expression( choice , 2 )
->                      relational_expression( choice , choice )
->                       shift_expression( choice , choice )
->                        additive_expression( choice , choice )
->                         multiplicative_expression( choice , choice )
->                          pm_expression( choice , choice )
->                           cast_expression( choice , choice )
->                            unary_expression( choice , choice )
->                             postfix_expression( choice , choice )
->                              primary_expression( choice , choice )
->                               id_expression( choice , choice )
->                      relational_expression( 2 , 2 )
->                       shift_expression( 2 , 2 )
->                        additive_expression( 2 , 2 )
->                         multiplicative_expression( 2 , 2 )
->                          pm_expression( 2 , 2 )
->                           cast_expression( 2 , 2 )
->                            unary_expression( 2 , 2 )
->                             postfix_expression( 2 , 2 )
->                              primary_expression( 2 , 2 )
->                               constant( 2 , 2 )
->             statement( { , } )
->              compound_statement( { , } )
->               statement_list( int , } )
->                statement( int , ; )
->                 declaration( int , ; )
->                  declaration_specifiers( int , int )
->                   builtin_type_specifier( int , int )
->                  init_declarator_list( in , t2 )
->                   init_declarator( in , in )
->                    declarator( in , in )
->                     direct_declarator( in , in )
->                      qualified_id( in , in )
->                   init_declarator( t2 , t2 )
->                    declarator( t2 , t2 )
->                     direct_declarator( t2 , t2 )
->                      qualified_id( t2 , t2 )
->                statement( cout , ; )
->                 expression( cout , endl )
->                  assignment_expression( cout , endl )
->                   conditional_expression( cout , endl )
->                    logical_or_expression( cout , endl )
->                     logical_and_expression( cout , endl )
->                      inclusive_or_expression( cout , endl )
->                       exclusive_or_expression( cout , endl )
->                        and_expression( cout , endl )
->                         equality_expression( cout , endl )
->                          relational_expression( cout , endl )
->                           shift_expression( cout , endl )
->                            additive_expression( cout , cout )
->                             multiplicative_expression( cout , cout )
->                              pm_expression( cout , cout )
->                               cast_expression( cout , cout )
->                                unary_expression( cout , cout )
->                                 postfix_expression( cout , cout )
->                                  primary_expression( cout , cout )
->                                   id_expression( cout , cout )
->                            additive_expression( "What continent would you like to see?" , "What continent would you like to see?" )
->                             multiplicative_expression( "What continent would you like to see?" , "What continent would you like to see?" )
->                              pm_expression( "What continent would you like to see?" , "What continent would you like to see?" )
->                               cast_expression( "What continent would you like to see?" , "What continent would you like to see?" )
->                                unary_expression( "What continent would you like to see?" , "What continent would you like to see?" )
->                                 postfix_expression( "What continent would you like to see?" , "What continent would you like to see?" )
->                                  primary_expression( "What continent would you like to see?" , "What continent would you like to see?" )
->                            additive_expression( endl , endl )
->                             multiplicative_expression( endl , endl )
->                              pm_expression( endl , endl )
->                               cast_expression( endl , endl )
->                                unary_expression( endl , endl )
->                                 postfix_expression( endl , endl )
->                                  primary_expression( endl , endl )
->                                   id_expression( endl , endl )
->                statement( cout , ; )
->                 expression( cout , endl )
->                  assignment_expression( cout , endl )
->                   conditional_expression( cout , endl )
->                    logical_or_expression( cout , endl )
->                     logical_and_expression( cout , endl )
->                      inclusive_or_expression( cout , endl )
->                       exclusive_or_expression( cout , endl )
->                        and_expression( cout , endl )
->                         equality_expression( cout , endl )
->                          relational_expression( cout , endl )
->                           shift_expression( cout , endl )
->                            additive_expression( cout , cout )
->                             multiplicative_expression( cout , cout )
->                              pm_expression( cout , cout )
->                               cast_expression( cout , cout )
->                                unary_expression( cout , cout )
->                                 postfix_expression( cout , cout )
->                                  primary_expression( cout , cout )
->                                   id_expression( cout , cout )
->                            additive_expression( "What continent?" , "What continent?" )
->                             multiplicative_expression( "What continent?" , "What continent?" )
->                              pm_expression( "What continent?" , "What continent?" )
->                               cast_expression( "What continent?" , "What continent?" )
->                                unary_expression( "What continent?" , "What continent?" )
->                                 postfix_expression( "What continent?" , "What continent?" )
->                                  primary_expression( "What continent?" , "What continent?" )
->                            additive_expression( endl , endl )
->                             multiplicative_expression( endl , endl )
->                              pm_expression( endl , endl )
->                               cast_expression( endl , endl )
->                                unary_expression( endl , endl )
->                                 postfix_expression( endl , endl )
->                                  primary_expression( endl , endl )
->                                   id_expression( endl , endl )
->                            additive_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                             multiplicative_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                              pm_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                               cast_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                                unary_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                                 postfix_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                                  primary_expression( "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" , "1.) Africa \t 2.)Asia \t 3.) Australia \t 4.) Europe \t 5.) Americas" )
->                            additive_expression( endl , endl )
->                             multiplicative_expression( endl , endl )
->                              pm_expression( endl , endl )
->                               cast_expression( endl , endl )
->                                unary_expression( endl , endl )
->                                 postfix_expression( endl , endl )
->                                  primary_expression( endl , endl )
->                                   id_expression( endl , endl )
->                statement( cin , ; )
->                 expression( cin , in )
->                  assignment_expression( cin , in )
->                   conditional_expression( cin , in )
->                    logical_or_expression( cin , in )
->                     logical_and_expression( cin , in )
->                      inclusive_or_expression( cin , in )
->                       exclusive_or_expression( cin , in )
->                        and_expression( cin , in )
->                         equality_expression( cin , in )
->                          relational_expression( cin , in )
->                           shift_expression( cin , in )
->                            additive_expression( cin , cin )
->                             multiplicative_expression( cin , cin )
->                              pm_expression( cin , cin )
->                               cast_expression( cin , cin )
->                                unary_expression( cin , cin )
->                                 postfix_expression( cin , cin )
->                                  primary_expression( cin , cin )
->                                   id_expression( cin , cin )
->                            additive_expression( in , in )
->                             multiplicative_expression( in , in )
->                              pm_expression( in , in )
->                               cast_expression( in , in )
->                                unary_expression( in , in )
->                                 postfix_expression( in , in )
->                                  primary_expression( in , in )
->                                   id_expression( in , in )
->                statement( for , } )
->                 iteration_statement( for , } )
->                  declaration( int , ; )
->                   declaration_specifiers( int , int )
->                    builtin_type_specifier( int , int )
->                   init_declarator_list( t , 0 )
->                    init_declarator( t , 0 )
->                     declarator( t , t )
->                      direct_declarator( t , t )
->                       qualified_id( t , t )
->                     initializer( 0 , 0 )
->                      assignment_expression( 0 , 0 )
->                       conditional_expression( 0 , 0 )
->                        logical_or_expression( 0 , 0 )
->                         logical_and_expression( 0 , 0 )
->                          inclusive_or_expression( 0 , 0 )
->                           exclusive_or_expression( 0 , 0 )
->                            and_expression( 0 , 0 )
->                             equality_expression( 0 , 0 )
->                              relational_expression( 0 , 0 )
->                               shift_expression( 0 , 0 )
->                                additive_expression( 0 , 0 )
->                                 multiplicative_expression( 0 , 0 )
->                                  pm_expression( 0 , 0 )
->                                   cast_expression( 0 , 0 )
->                                    unary_expression( 0 , 0 )
->                                     postfix_expression( 0 , 0 )
->                                      primary_expression( 0 , 0 )
->                                       constant( 0 , 0 )
->                  expression( t , 6 )
->                   assignment_expression( t , 6 )
->                    conditional_expression( t , 6 )
->                     logical_or_expression( t , 6 )
->                      logical_and_expression( t , 6 )
->                       inclusive_or_expression( t , 6 )
->                        exclusive_or_expression( t , 6 )
->                         and_expression( t , 6 )
->                          equality_expression( t , 6 )
->                           relational_expression( t , 6 )
->                            shift_expression( t , t )
->                             additive_expression( t , t )
->                              multiplicative_expression( t , t )
->                               pm_expression( t , t )
->                                cast_expression( t , t )
->                                 unary_expression( t , t )
->                                  postfix_expression( t , t )
->                                   primary_expression( t , t )
->                                    id_expression( t , t )
->                            shift_expression( 6 , 6 )
->                             additive_expression( 6 , 6 )
->                              multiplicative_expression( 6 , 6 )
->                               pm_expression( 6 , 6 )
->                                cast_expression( 6 , 6 )
->                                 unary_expression( 6 , 6 )
->                                  postfix_expression( 6 , 6 )
->                                   primary_expression( 6 , 6 )
->                                    constant( 6 , 6 )
->                  expression( t , ++ )
->                   assignment_expression( t , ++ )
->                    conditional_expression( t , ++ )
->                     logical_or_expression( t , ++ )
->                      logical_and_expression( t , ++ )
->                       inclusive_or_expression( t , ++ )
->                        exclusive_or_expression( t , ++ )
->                         and_expression( t , ++ )
->                          equality_expression( t , ++ )
->                           relational_expression( t , ++ )
->                            shift_expression( t , ++ )
->                             additive_expression( t , ++ )
->                              multiplicative_expression( t , ++ )
->                               pm_expression( t , ++ )
->                                cast_expression( t , ++ )
->                                 unary_expression( t , ++ )
->                                  postfix_expression( t , ++ )
->                                   primary_expression( t , t )
->                                    id_expression( t , t )
->                  statement( { , } )
->                   compound_statement( { , } )
->                    statement_list( t2 , } )
->                     statement( t2 , ; )
->                      expression( t2 , 1 )
->                       assignment_expression( t2 , 1 )
->                        conditional_expression( t2 , t2 )
->                         logical_or_expression( t2 , t2 )
->                          logical_and_expression( t2 , t2 )
->                           inclusive_or_expression( t2 , t2 )
->                            exclusive_or_expression( t2 , t2 )
->                             and_expression( t2 , t2 )
->                              equality_expression( t2 , t2 )
->                               relational_expression( t2 , t2 )
->                                shift_expression( t2 , t2 )
->                                 additive_expression( t2 , t2 )
->                                  multiplicative_expression( t2 , t2 )
->                                   pm_expression( t2 , t2 )
->                                    cast_expression( t2 , t2 )
->                                     unary_expression( t2 , t2 )
->                                      postfix_expression( t2 , t2 )
->                                       primary_expression( t2 , t2 )
->                                        id_expression( t2 , t2 )
->                        assignment_expression( t , 1 )
->                         conditional_expression( t , 1 )
->                          logical_or_expression( t , 1 )
->                           logical_and_expression( t , 1 )
->                            inclusive_or_expression( t , 1 )
->                             exclusive_or_expression( t , 1 )
->                              and_expression( t , 1 )
->                               equality_expression( t , 1 )
->                                relational_expression( t , 1 )
->                                 shift_expression( t , 1 )
->                                  additive_expression( t , 1 )
->                                   multiplicative_expression( t , t )
->                                    pm_expression( t , t )
->                                     cast_expression( t , t )
->                                      unary_expression( t , t )
->                                       postfix_expression( t , t )
->                                        primary_expression( t , t )
->                                         id_expression( t , t )
->                                   multiplicative_expression( 1 , 1 )
->                                    pm_expression( 1 , 1 )
->                                     cast_expression( 1 , 1 )
->                                      unary_expression( 1 , 1 )
->                                       postfix_expression( 1 , 1 )
->                                        primary_expression( 1 , 1 )
->                                         constant( 1 , 1 )
->                     statement( chck1 , ; )
->                      expression( chck1 , ) )
->                       assignment_expression( chck1 , ) )
->                        conditional_expression( chck1 , chck1 )
->                         logical_or_expression( chck1 , chck1 )
->                          logical_and_expression( chck1 , chck1 )
->                           inclusive_or_expression( chck1 , chck1 )
->                            exclusive_or_expression( chck1 , chck1 )
->                             and_expression( chck1 , chck1 )
->                              equality_expression( chck1 , chck1 )
->                               relational_expression( chck1 , chck1 )
->                                shift_expression( chck1 , chck1 )
->                                 additive_expression( chck1 , chck1 )
->                                  multiplicative_expression( chck1 , chck1 )
->                                   pm_expression( chck1 , chck1 )
->                                    cast_expression( chck1 , chck1 )
->                                     unary_expression( chck1 , chck1 )
->                                      postfix_expression( chck1 , chck1 )
->                                       primary_expression( chck1 , chck1 )
->                                        id_expression( chck1 , chck1 )
->                        assignment_expression( Gamec , ) )
->                         conditional_expression( Gamec , ) )
->                          logical_or_expression( Gamec , ) )
->                           logical_and_expression( Gamec , ) )
->                            inclusive_or_expression( Gamec , ) )
->                             exclusive_or_expression( Gamec , ) )
->                              and_expression( Gamec , ) )
->                               equality_expression( Gamec , ) )
->                                relational_expression( Gamec , ) )
->                                 shift_expression( Gamec , ) )
->                                  additive_expression( Gamec , ) )
->                                   multiplicative_expression( Gamec , ) )
->                                    pm_expression( Gamec , ) )
->                                     cast_expression( Gamec , ) )
->                                      unary_expression( Gamec , ) )
->                                       postfix_expression( Gamec , ) )
->                                        primary_expression( Gamec , Gamec )
->                                         id_expression( Gamec , Gamec )
->                                        expression( t , t )
->                                         assignment_expression( t , t )
->                                          conditional_expression( t , t )
->                                           logical_or_expression( t , t )
->                                            logical_and_expression( t , t )
->                                             inclusive_or_expression( t , t )
->                                              exclusive_or_expression( t , t )
->                                               and_expression( t , t )
->                                                equality_expression( t , t )
->                                                 relational_expression( t , t )
->                                                  shift_expression( t , t )
->                                                   additive_expression( t , t )
->                                                    multiplicative_expression( t , t )
->                                                     pm_expression( t , t )
->                                                      cast_expression( t , t )
->                                                       unary_expression( t , t )
->                                                        postfix_expression( t , t )
->                                                         primary_expression( t , t )
->                                                          id_expression( t , t )
->                                        id_expression( getFirstTeam , getFirstTeam )
->                     statement( chck2 , ; )
->                      expression( chck2 , ) )
->                       assignment_expression( chck2 , ) )
->                        conditional_expression( chck2 , chck2 )
->                         logical_or_expression( chck2 , chck2 )
->                          logical_and_expression( chck2 , chck2 )
->                           inclusive_or_expression( chck2 , chck2 )
->                            exclusive_or_expression( chck2 , chck2 )
->                             and_expression( chck2 , chck2 )
->                              equality_expression( chck2 , chck2 )
->                               relational_expression( chck2 , chck2 )
->                                shift_expression( chck2 , chck2 )
->                                 additive_expression( chck2 , chck2 )
->                                  multiplicative_expression( chck2 , chck2 )
->                                   pm_expression( chck2 , chck2 )
->                                    cast_expression( chck2 , chck2 )
->                                     unary_expression( chck2 , chck2 )
->                                      postfix_expression( chck2 , chck2 )
->                                       primary_expression( chck2 , chck2 )
->                                        id_expression( chck2 , chck2 )
->                        assignment_expression( Gamec , ) )
->                         conditional_expression( Gamec , ) )
->                          logical_or_expression( Gamec , ) )
->                           logical_and_expression( Gamec , ) )
->                            inclusive_or_expression( Gamec , ) )
->                             exclusive_or_expression( Gamec , ) )
->                              and_expression( Gamec , ) )
->                               equality_expression( Gamec , ) )
->                                relational_expression( Gamec , ) )
->                                 shift_expression( Gamec , ) )
->                                  additive_expression( Gamec , ) )
->                                   multiplicative_expression( Gamec , ) )
->                                    pm_expression( Gamec , ) )
->                                     cast_expression( Gamec , ) )
->                                      unary_expression( Gamec , ) )
->                                       postfix_expression( Gamec , ) )
->                                        primary_expression( Gamec , Gamec )
->                                         id_expression( Gamec , Gamec )
->                                        expression( t , t )
->                                         assignment_expression( t , t )
->                                          conditional_expression( t , t )
->                                           logical_or_expression( t , t )
->                                            logical_and_expression( t , t )
->                                             inclusive_or_expression( t , t )
->                                              exclusive_or_expression( t , t )
->                                               and_expression( t , t )
->                                                equality_expression( t , t )
->                                                 relational_expression( t , t )
->                                                  shift_expression( t , t )
->                                                   additive_expression( t , t )
->                                                    multiplicative_expression( t , t )
->                                                     pm_expression( t , t )
->                                                      cast_expression( t , t )
->                                                       unary_expression( t , t )
->                                                        postfix_expression( t , t )
->                                                         primary_expression( t , t )
->                                                          id_expression( t , t )
->                                        id_expression( getSecondTeam , getSecondTeam )
->                     statement( if , } )
->                      selection_statement( if , } )
->                       expression( chck1 , ) )
->                        assignment_expression( chck1 , ) )
->                         conditional_expression( chck1 , ) )
->                          logical_or_expression( chck1 , ) )
->                           logical_and_expression( chck1 , ) )
->                            inclusive_or_expression( chck1 , ) )
->                             exclusive_or_expression( chck1 , ) )
->                              and_expression( chck1 , ) )
->                               equality_expression( chck1 , ) )
->                                relational_expression( chck1 , ) )
->                                 shift_expression( chck1 , ) )
->                                  additive_expression( chck1 , ) )
->                                   multiplicative_expression( chck1 , ) )
->                                    pm_expression( chck1 , ) )
->                                     cast_expression( chck1 , ) )
->                                      unary_expression( chck1 , ) )
->                                       postfix_expression( chck1 , ) )
->                                        primary_expression( chck1 , chck1 )
->                                         id_expression( chck1 , chck1 )
->                                        id_expression( getcontinent , getcontinent )
->                                relational_expression( ( , ) )
->                                 shift_expression( ( , ) )
->                                  additive_expression( ( , ) )
->                                   multiplicative_expression( ( , ) )
->                                    pm_expression( ( , ) )
->                                     cast_expression( ( , ) )
->                                      unary_expression( ( , ) )
->                                       postfix_expression( ( , ) )
->                                        primary_expression( ( , ) )
->                                         expression( in , 1 )
->                                          assignment_expression( in , 1 )
->                                           conditional_expression( in , 1 )
->                                            logical_or_expression( in , 1 )
->                                             logical_and_expression( in , 1 )
->                                              inclusive_or_expression( in , 1 )
->                                               exclusive_or_expression( in , 1 )
->                                                and_expression( in , 1 )
->                                                 equality_expression( in , 1 )
->                                                  relational_expression( in , 1 )
->                                                   shift_expression( in , 1 )
->                                                    additive_expression( in , 1 )
->                                                     multiplicative_expression( in , in )
->                                                      pm_expression( in , in )
->                                                       cast_expression( in , in )
->                                                        unary_expression( in , in )
->                                                         postfix_expression( in , in )
->                                                          primary_expression( in , in )
->                                                           id_expression( in , in )
->                                                     multiplicative_expression( 1 , 1 )
->                                                      pm_expression( 1 , 1 )
->                                                       cast_expression( 1 , 1 )
->                                                        unary_expression( 1 , 1 )
->                                                         postfix_expression( 1 , 1 )
->                                                          primary_expression( 1 , 1 )
->                                                           constant( 1 , 1 )
->                       statement( { , } )
->                        compound_statement( { , } )
->                         statement_list( cout , ; )
->                          statement( cout , ; )
->                           expression( cout , endl )
->                            assignment_expression( cout , endl )
->                             conditional_expression( cout , endl )
->                              logical_or_expression( cout , endl )
->                               logical_and_expression( cout , endl )
->                                inclusive_or_expression( cout , endl )
->                                 exclusive_or_expression( cout , endl )
->                                  and_expression( cout , endl )
->                                   equality_expression( cout , endl )
->                                    relational_expression( cout , endl )
->                                     shift_expression( cout , endl )
->                                      additive_expression( cout , cout )
->                                       multiplicative_expression( cout , cout )
->                                        pm_expression( cout , cout )
->                                         cast_expression( cout , cout )
->                                          unary_expression( cout , cout )
->                                           postfix_expression( cout , cout )
->                                            primary_expression( cout , cout )
->                                             id_expression( cout , cout )
->                                      additive_expression( "Game " , "Game " )
->                                       multiplicative_expression( "Game " , "Game " )
->                                        pm_expression( "Game " , "Game " )
->                                         cast_expression( "Game " , "Game " )
->                                          unary_expression( "Game " , "Game " )
->                                           postfix_expression( "Game " , "Game " )
->                                            primary_expression( "Game " , "Game " )
->                                      additive_expression( t2 , t2 )
->                                       multiplicative_expression( t2 , t2 )
->                                        pm_expression( t2 , t2 )
->                                         cast_expression( t2 , t2 )
->                                          unary_expression( t2 , t2 )
->                                           postfix_expression( t2 , t2 )
->                                            primary_expression( t2 , t2 )
->                                             id_expression( t2 , t2 )
->                                      additive_expression( endl , endl )
->                                       multiplicative_expression( endl , endl )
->                                        pm_expression( endl , endl )
->                                         cast_expression( endl , endl )
->                                          unary_expression( endl , endl )
->                                           postfix_expression( endl , endl )
->                                            primary_expression( endl , endl )
->                                             id_expression( endl , endl )
->                          statement( Gamec , ; )
->                           expression( Gamec , ) )
->                            assignment_expression( Gamec , ) )
->                             conditional_expression( Gamec , ) )
->                              logical_or_expression( Gamec , ) )
->                               logical_and_expression( Gamec , ) )
->                                inclusive_or_expression( Gamec , ) )
->                                 exclusive_or_expression( Gamec , ) )
->                                  and_expression( Gamec , ) )
->                                   equality_expression( Gamec , ) )
->                                    relational_expression( Gamec , ) )
->                                     shift_expression( Gamec , ) )
->                                      additive_expression( Gamec , ) )
->                                       multiplicative_expression( Gamec , ) )
->                                        pm_expression( Gamec , ) )
->                                         cast_expression( Gamec , ) )
->                                          unary_expression( Gamec , ) )
->                                           postfix_expression( Gamec , ) )
->                                            primary_expression( Gamec , Gamec )
->                                             id_expression( Gamec , Gamec )
->                                            expression( t , t )
->                                             assignment_expression( t , t )
->                                              conditional_expression( t , t )
->                                               logical_or_expression( t , t )
->                                                logical_and_expression( t , t )
->                                                 inclusive_or_expression( t , t )
->                                                  exclusive_or_expression( t , t )
->                                                   and_expression( t , t )
->                                                    equality_expression( t , t )
->                                                     relational_expression( t , t )
->                                                      shift_expression( t , t )
->                                                       additive_expression( t , t )
->                                                        multiplicative_expression( t , t )
->                                                         pm_expression( t , t )
->                                                          cast_expression( t , t )
->                                                           unary_expression( t , t )
->                                                            postfix_expression( t , t )
->                                                             primary_expression( t , t )
->                                                              id_expression( t , t )
->                                            id_expression( print , print )
->                          statement( cout , ; )
->                           expression( cout , endl )
->                            assignment_expression( cout , endl )
->                             conditional_expression( cout , endl )
->                              logical_or_expression( cout , endl )
->                               logical_and_expression( cout , endl )
->                                inclusive_or_expression( cout , endl )
->                                 exclusive_or_expression( cout , endl )
->                                  and_expression( cout , endl )
->                                   equality_expression( cout , endl )
->                                    relational_expression( cout , endl )
->                                     shift_expression( cout , endl )
->                                      additive_expression( cout , cout )
->                                       multiplicative_expression( cout , cout )
->                                        pm_expression( cout , cout )
->                                         cast_expression( cout , cout )
->                                          unary_expression( cout , cout )
->                                           postfix_expression( cout , cout )
->                                            primary_expression( cout , cout )
->                                             id_expression( cout , cout )
->                                      additive_expression( endl , endl )
->                                       multiplicative_expression( endl , endl )
->                                        pm_expression( endl , endl )
->                                         cast_expression( endl , endl )
->                                          unary_expression( endl , endl )
->                                           postfix_expression( endl , endl )
->                                            primary_expression( endl , endl )
->                                             id_expression( endl , endl )
C++ Parser Version 0.1: Program parsed successfully.
