C++ Parser Version 0.1: Reading from file R:\dift3051\IMPORTANT\src\padl\creator\parser\her.cpp . . .
->translation_unit( class ,  ) 0
->.external_declaration( class , ; ) 1
->..declaration( class , ; ) 5
->...declaration_specifiers( class , } ) 7
->....class_specifier( class Forme , } ) 20
->.....member_declaration( public , : ) 24
->......access_specifier( public , public ) 23
->.....member_declaration( Forme , } ) 24
->......ctor_definition( Forme , } ) 41
->.......dtor_ctor_decl_spec( Forme , : ) 39
->.......ctor_declarator( Forme , ) ) 43
->........qualified_id( Forme , Forme ) 11
->.......compound_statement( { , } ) 64
->........statement_list( a , ; ) 61
->.........statement( a , ; ) 62
->..........expression( a , 1 ) 72
->...........assignment_expression( a , 1 ) 73
->............conditional_expression( a , a ) 74
->.............logical_or_expression( a , a ) 76
->..............logical_and_expression( a , a ) 77
->...............inclusive_or_expression( a , a ) 78
->................exclusive_or_expression( a , a ) 79
->.................and_expression( a , a ) 80
->..................equality_expression( a , a ) 81
->...................relational_expression( a , a ) 82
->....................shift_expression( a , a ) 83
->.....................additive_expression( a , a ) 84
->......................multiplicative_expression( a , a ) 85
->.......................pm_expression( a , a ) 86
->........................cast_expression( a , a ) 87
->.........................unary_expression( a , a ) 88
->..........................postfix_expression( a , a ) 96
->...........................primary_expression( a , a ) 98
->............................id_expression( a , a ) 97
->............assignment_expression( 1 , 1 ) 73
->.............conditional_expression( 1 , 1 ) 74
->..............logical_or_expression( 1 , 1 ) 76
->...............logical_and_expression( 1 , 1 ) 77
->................inclusive_or_expression( 1 , 1 ) 78
->.................exclusive_or_expression( 1 , 1 ) 79
->..................and_expression( 1 , 1 ) 80
->...................equality_expression( 1 , 1 ) 81
->....................relational_expression( 1 , 1 ) 82
->.....................shift_expression( 1 , 1 ) 83
->......................additive_expression( 1 , 1 ) 84
->.......................multiplicative_expression( 1 , 1 ) 85
->........................pm_expression( 1 , 1 ) 86
->.........................cast_expression( 1 , 1 ) 87
->..........................unary_expression( 1 , 1 ) 88
->...........................postfix_expression( 1 , 1 ) 96
->............................primary_expression( 1 , 1 ) 98
->.............................constant( 1 , 1 ) 100
->.....member_declaration( int , ; ) 24
->......declaration_specifiers( int , int ) 7
->.......builtin_type_specifier( int , int ) 16
->......member_declarator_list( a , a ) 25
->.......member_declarator( a , a ) 26
->........declarator( a , a ) 33
->.........direct_declarator( a , a ) 34
->..........qualified_id( a , a ) 11
->.....member_declaration( void , } ) 24
->......function_definition( void , } ) 2
->.......declaration_specifiers( void , void ) 7
->........builtin_type_specifier( void , void ) 16
->.......function_declarator( presentation , const ) 37
->........function_direct_declarator( presentation , const ) 38
->.........qualified_id( presentation , presentation ) 11
->.........type_qualifier( const , const ) 14
->.......func_decl_def( { , } ) 3
->........compound_statement( { , } ) 64
->.........statement_list( cout , ; ) 61
->..........statement( cout , ; ) 62
->...........expression( cout , "je suis une forme" ) 72
->............assignment_expression( cout , "je suis une forme" ) 73
->.............conditional_expression( cout , "je suis une forme" ) 74
->..............logical_or_expression( cout , "je suis une forme" ) 76
->...............logical_and_expression( cout , "je suis une forme" ) 77
->................inclusive_or_expression( cout , "je suis une forme" ) 78
->.................exclusive_or_expression( cout , "je suis une forme" ) 79
->..................and_expression( cout , "je suis une forme" ) 80
->...................equality_expression( cout , "je suis une forme" ) 81
->....................relational_expression( cout , "je suis une forme" ) 82
->.....................shift_expression( cout , "je suis une forme" ) 83
->......................additive_expression( cout , cout ) 84
->.......................multiplicative_expression( cout , cout ) 85
->........................pm_expression( cout , cout ) 86
->.........................cast_expression( cout , cout ) 87
->..........................unary_expression( cout , cout ) 88
->...........................postfix_expression( cout , cout ) 96
->............................primary_expression( cout , cout ) 98
->.............................id_expression( cout , cout ) 97
->......................additive_expression( "je suis une forme" , "je suis une forme" ) 84
->.......................multiplicative_expression( "je suis une forme" , "je suis une forme" ) 85
->........................pm_expression( "je suis une forme" , "je suis une forme" ) 86
->.........................cast_expression( "je suis une forme" , "je suis une forme" ) 87
->..........................unary_expression( "je suis une forme" , "je suis une forme" ) 88
->...........................postfix_expression( "je suis une forme" , "je suis une forme" ) 96
->............................primary_expression( "je suis une forme" , "je suis une forme" ) 98
->.external_declaration( class , ; ) 1
->..declaration( class , ; ) 5
->...declaration_specifiers( class , } ) 7
->....class_specifier( class Forme1 , } ) 20
->.....member_declaration( public , : ) 24
->......access_specifier( public , public ) 23
->.....member_declaration( Forme1 , } ) 24
->......ctor_definition( Forme1 , } ) 41
->.......dtor_ctor_decl_spec( Forme1 , : ) 39
->.......ctor_declarator( Forme1 , ) ) 43
->........qualified_id( Forme1 , Forme1 ) 11
->........parameter_list( int , i ) 48
->.........parameter_declaration_list( int , i ) 49
->..........parameter_declaration( int , i ) 50
->...........declaration_specifiers( int , int ) 7
->............builtin_type_specifier( int , int ) 16
->...........declarator( i , i ) 33
->............direct_declarator( i , i ) 34
->.............qualified_id( i , i ) 11
->.......compound_statement( { , } ) 64
->........statement_list( z , ; ) 61
->.........statement( z , ; ) 62
->..........expression( z , i ) 72
->...........assignment_expression( z , i ) 73
->............conditional_expression( z , z ) 74
->.............logical_or_expression( z , z ) 76
->..............logical_and_expression( z , z ) 77
->...............inclusive_or_expression( z , z ) 78
->................exclusive_or_expression( z , z ) 79
->.................and_expression( z , z ) 80
->..................equality_expression( z , z ) 81
->...................relational_expression( z , z ) 82
->....................shift_expression( z , z ) 83
->.....................additive_expression( z , z ) 84
->......................multiplicative_expression( z , z ) 85
->.......................pm_expression( z , z ) 86
->........................cast_expression( z , z ) 87
->.........................unary_expression( z , z ) 88
->..........................postfix_expression( z , z ) 96
->...........................primary_expression( z , z ) 98
->............................id_expression( z , z ) 97
->............assignment_expression( i , i ) 73
->.............conditional_expression( i , i ) 74
->..............logical_or_expression( i , i ) 76
->...............logical_and_expression( i , i ) 77
->................inclusive_or_expression( i , i ) 78
->.................exclusive_or_expression( i , i ) 79
->..................and_expression( i , i ) 80
->...................equality_expression( i , i ) 81
->....................relational_expression( i , i ) 82
->.....................shift_expression( i , i ) 83
->......................additive_expression( i , i ) 84
->.......................multiplicative_expression( i , i ) 85
->........................pm_expression( i , i ) 86
->.........................cast_expression( i , i ) 87
->..........................unary_expression( i , i ) 88
->...........................postfix_expression( i , i ) 96
->............................primary_expression( i , i ) 98
->.............................id_expression( i , i ) 97
->.....member_declaration( int , ; ) 24
->......declaration_specifiers( int , int ) 7
->.......builtin_type_specifier( int , int ) 16
->......member_declarator_list( z , 0 ) 25
->.......member_declarator( z , z ) 26
->........declarator( z , z ) 33
->.........direct_declarator( z , z ) 34
->..........qualified_id( z , z ) 11
->.external_declaration( class , ; ) 1
->..declaration( class , ; ) 5
->...declaration_specifiers( class , } ) 7
->....class_specifier( class Rectangle , } ) 20
->.....base_clause( : , Forme1 ) 21
->......base_specifier( public , Forme ) 22
->.......access_specifier( public , public ) 23
->......base_specifier( public , Forme1 ) 22
->.......access_specifier( public , public ) 23
->.....member_declaration( public , : ) 24
->......access_specifier( public , public ) 23
->.....member_declaration( int , ; ) 24
->......declaration_specifiers( int , int ) 7
->.......builtin_type_specifier( int , int ) 16
->......member_declarator_list( r , 0 ) 25
->.......member_declarator( r , r ) 26
->........declarator( r , r ) 33
->.........direct_declarator( r , r ) 34
->..........qualified_id( r , r ) 11
->.....member_declaration( void , } ) 24
->......function_definition( void , } ) 2
->.......declaration_specifiers( void , void ) 7
->........builtin_type_specifier( void , void ) 16
->.......function_declarator( presentation , const ) 37
->........function_direct_declarator( presentation , const ) 38
->.........qualified_id( presentation , presentation ) 11
->.........type_qualifier( const , const ) 14
->.......func_decl_def( { , } ) 3
->........compound_statement( { , } ) 64
->.........statement_list( Forme , ; ) 61
->..........statement( Forme , ; ) 62
->...........expression( Forme , ) ) 72
->............assignment_expression( Forme , ) ) 73
->.............conditional_expression( Forme , ) ) 74
->..............logical_or_expression( Forme , ) ) 76
->...............logical_and_expression( Forme , ) ) 77
->................inclusive_or_expression( Forme , ) ) 78
->.................exclusive_or_expression( Forme , ) ) 79
->..................and_expression( Forme , ) ) 80
->...................equality_expression( Forme , ) ) 81
->....................relational_expression( Forme , ) ) 82
->.....................shift_expression( Forme , ) ) 83
->......................additive_expression( Forme , ) ) 84
->.......................multiplicative_expression( Forme , ) ) 85
->........................pm_expression( Forme , ) ) 86
->.........................cast_expression( Forme , ) ) 87
->..........................unary_expression( Forme , ) ) 88
->...........................postfix_expression( Forme , ) ) 96
->............................primary_expression( Forme , presentation ) 98
->.............................id_expression( Forme , presentation ) 97
->..............................scope_override( Forme , :: ) 10
->..........statement( cout , ; ) 62
->...........expression( cout , " et un rectangle" ) 72
->............assignment_expression( cout , " et un rectangle" ) 73
->.............conditional_expression( cout , " et un rectangle" ) 74
->..............logical_or_expression( cout , " et un rectangle" ) 76
->...............logical_and_expression( cout , " et un rectangle" ) 77
->................inclusive_or_expression( cout , " et un rectangle" ) 78
->.................exclusive_or_expression( cout , " et un rectangle" ) 79
->..................and_expression( cout , " et un rectangle" ) 80
->...................equality_expression( cout , " et un rectangle" ) 81
->....................relational_expression( cout , " et un rectangle" ) 82
->.....................shift_expression( cout , " et un rectangle" ) 83
->......................additive_expression( cout , cout ) 84
->.......................multiplicative_expression( cout , cout ) 85
->........................pm_expression( cout , cout ) 86
->.........................cast_expression( cout , cout ) 87
->..........................unary_expression( cout , cout ) 88
->...........................postfix_expression( cout , cout ) 96
->............................primary_expression( cout , cout ) 98
->.............................id_expression( cout , cout ) 97
->......................additive_expression( " et un rectangle" , " et un rectangle" ) 84
->.......................multiplicative_expression( " et un rectangle" , " et un rectangle" ) 85
->........................pm_expression( " et un rectangle" , " et un rectangle" ) 86
->.........................cast_expression( " et un rectangle" , " et un rectangle" ) 87
->..........................unary_expression( " et un rectangle" , " et un rectangle" ) 88
->...........................postfix_expression( " et un rectangle" , " et un rectangle" ) 96
->............................primary_expression( " et un rectangle" , " et un rectangle" ) 98
C++ Parser Version 0.1: Program parsed successfully.
