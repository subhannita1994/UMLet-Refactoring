// $ANTLR 3.2 Sep 23, 2009 14:05:07 mypackage/cs.g 2010-11-23 21:39:46

package mypackage;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class csParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "MEMBER_DECL", "CLASS", "USING", "METHOD", "INTERFACE", "INTERFACEMETHOD", "CLASSMEMBER", "CLASSMETHOD", "NAME", "CONSTRUCTOR", "IDENTIFIER", "Real_literal", "NUMBER", "Hex_number", "Character_literal", "StringLITERAL", "Verbatim_String_literal", "TRUE", "FALSE", "NULL", "DOT", "PTR", "MINUS", "GT", "ENUM", "IF", "ELIF", "ENDIF", "DEFINE", "UNDEF", "SEMI", "RPAREN", "WS", "TS", "DOC_LINE_COMMENT", "LINE_COMMENT", "COMMENT", "EscapeSequence", "Verbatim_String_literal_character", "Decimal_digits", "INTEGER_TYPE_SUFFIX", "Decimal_integer_literal", "GooBallIdentifier", "GooBall", "IdentifierStart", "IdentifierPart", "Exponent_part", "Real_type_suffix", "Pragma", "PP_CONDITIONAL", "PREPROCESSOR_DIRECTIVE", "IF_TOKEN", "DEFINE_TOKEN", "ELSE_TOKEN", "ENDIF_TOKEN", "UNDEF_TOKEN", "PP_EXPRESSION", "PP_OR_EXPRESSION", "PP_AND_EXPRESSION", "PP_EQUALITY_EXPRESSION", "PP_UNARY_EXPRESSION", "PP_PRIMARY_EXPRESSION", "HEX_DIGIT", "HEX_DIGITS", "DECIMAL_DIGIT", "Sign", "'namespace'", "'{'", "'}'", "'extern'", "'alias'", "'='", "'partial'", "'new'", "'public'", "'protected'", "'private'", "'internal'", "'unsafe'", "'abstract'", "'sealed'", "'static'", "'readonly'", "'volatile'", "'virtual'", "'override'", "'const'", "'void'", "'this'", "'::'", "'base'", "'['", "']'", "'('", "','", "':'", "'out'", "'ref'", "'sizeof'", "'checked'", "'unchecked'", "'default'", "'delegate'", "'typeof'", "'<'", "'*'", "'?'", "'++'", "'--'", "'+'", "'!'", "'~'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>='", "'&'", "'/'", "'%'", "'<<'", "'<='", "'is'", "'as'", "'=='", "'!='", "'^'", "'|'", "'&&'", "'||'", "'??'", "'=>'", "'into'", "'from'", "'in'", "'join'", "'on'", "'equals'", "'let'", "'orderby'", "'ascending'", "'descending'", "'select'", "'group'", "'by'", "'where'", "'assembly'", "'module'", "'field'", "'event'", "'method'", "'param'", "'property'", "'return'", "'type'", "'class'", "'get'", "'set'", "'add'", "'remove'", "'sbyte'", "'byte'", "'short'", "'ushort'", "'int'", "'uint'", "'long'", "'ulong'", "'char'", "'struct'", "'__arglist'", "'params'", "'interface'", "'operator'", "'implicit'", "'explicit'", "'fixed'", "'var'", "'dynamic'", "'stackalloc'", "'else'", "'switch'", "'case'", "'while'", "'do'", "'for'", "'foreach'", "'break'", "'continue'", "'goto'", "'throw'", "'try'", "'catch'", "'finally'", "'lock'", "'yield'", "'boolean'", "'decimal'", "'double'", "'float'", "'object'", "'string'", "'pragma'", "'String'"
    };
    public static final int DECIMAL_DIGIT=68;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int Character_literal=18;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int ELSE_TOKEN=57;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int RPAREN=35;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int USING=6;
    public static final int PP_AND_EXPRESSION=62;
    public static final int Sign=69;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int NUMBER=16;
    public static final int Decimal_integer_literal=45;
    public static final int DEFINE_TOKEN=56;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int UNDEF_TOKEN=59;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int ENDIF_TOKEN=58;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int T__71=71;
    public static final int StringLITERAL=19;
    public static final int WS=36;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int PP_PRIMARY_EXPRESSION=65;
    public static final int T__70=70;
    public static final int GT=27;
    public static final int Verbatim_String_literal=20;
    public static final int PP_EQUALITY_EXPRESSION=63;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int CONSTRUCTOR=13;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int PREPROCESSOR_DIRECTIVE=54;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int CLASSMETHOD=11;
    public static final int T__210=210;
    public static final int T__212=212;
    public static final int T__211=211;
    public static final int TS=37;
    public static final int HEX_DIGIT=66;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int MINUS=26;
    public static final int SEMI=34;
    public static final int Hex_number=17;
    public static final int ENUM=28;
    public static final int INTERFACE=8;
    public static final int PP_UNARY_EXPRESSION=64;
    public static final int PP_OR_EXPRESSION=61;
    public static final int NAME=12;
    public static final int ENDIF=31;
    public static final int COMMENT=40;
    public static final int LINE_COMMENT=39;
    public static final int NULL=23;
    public static final int IdentifierStart=48;
    public static final int IF_TOKEN=55;
    public static final int ELIF=30;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int PP_CONDITIONAL=53;
    public static final int FALSE=22;
    public static final int EscapeSequence=41;
    public static final int INTEGER_TYPE_SUFFIX=44;
    public static final int CLASS=5;
    public static final int Real_literal=15;
    public static final int PP_EXPRESSION=60;
    public static final int Verbatim_String_literal_character=42;
    public static final int GooBall=47;
    public static final int DEFINE=32;
    public static final int CLASSMEMBER=10;
    public static final int IF=29;
    public static final int Exponent_part=50;
    public static final int T__199=199;
    public static final int T__198=198;
    public static final int T__197=197;
    public static final int T__196=196;
    public static final int T__195=195;
    public static final int T__194=194;
    public static final int INTERFACEMETHOD=9;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int IDENTIFIER=14;
    public static final int UNDEF=33;
    public static final int DOT=24;
    public static final int IdentifierPart=49;
    public static final int T__184=184;
    public static final int T__183=183;
    public static final int T__186=186;
    public static final int T__185=185;
    public static final int T__188=188;
    public static final int T__187=187;
    public static final int DOC_LINE_COMMENT=38;
    public static final int T__189=189;
    public static final int GooBallIdentifier=46;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int Pragma=52;
    public static final int T__181=181;
    public static final int MEMBER_DECL=4;
    public static final int TRUE=21;
    public static final int PTR=25;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int Decimal_digits=43;
    public static final int T__176=176;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Real_type_suffix=51;
    public static final int HEX_DIGITS=67;
    public static final int T__169=169;
    public static final int METHOD=7;

    // delegates
    // delegators


        public csParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public csParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[965+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return csParser.tokenNames; }
    public String getGrammarFileName() { return "mypackage/cs.g"; }


    	protected boolean is_class_modifier()
    	{
    		return false;
    	}


    public static class compilation_unit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilation_unit"
    // mypackage/cs.g:56:1: compilation_unit : namespace_body[true] ;
    public final csParser.compilation_unit_return compilation_unit() throws RecognitionException {
        csParser.compilation_unit_return retval = new csParser.compilation_unit_return();
        retval.start = input.LT(1);
        int compilation_unit_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.namespace_body_return namespace_body1 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // mypackage/cs.g:56:17: ( namespace_body[true] )
            // mypackage/cs.g:57:2: namespace_body[true]
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_namespace_body_in_compilation_unit146);
            namespace_body1=namespace_body(true);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_body1.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilation_unit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public static class namespace_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespace_declaration"
    // mypackage/cs.g:59:1: namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
    public final csParser.namespace_declaration_return namespace_declaration() throws RecognitionException {
        csParser.namespace_declaration_return retval = new csParser.namespace_declaration_return();
        retval.start = input.LT(1);
        int namespace_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal2=null;
        Token char_literal5=null;
        csParser.qualified_identifier_return qualified_identifier3 = null;

        csParser.namespace_block_return namespace_block4 = null;


        CommonTree string_literal2_tree=null;
        CommonTree char_literal5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // mypackage/cs.g:59:22: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
            // mypackage/cs.g:60:2: 'namespace' qualified_identifier namespace_block ( ';' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal2=(Token)match(input,70,FOLLOW_70_in_namespace_declaration155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal2_tree = (CommonTree)adaptor.create(string_literal2);
            adaptor.addChild(root_0, string_literal2_tree);
            }
            pushFollow(FOLLOW_qualified_identifier_in_namespace_declaration159);
            qualified_identifier3=qualified_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_identifier3.getTree());
            pushFollow(FOLLOW_namespace_block_in_namespace_declaration163);
            namespace_block4=namespace_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_block4.getTree());
            // mypackage/cs.g:60:57: ( ';' )?
            int alt1=2;
            switch ( input.LA(1) ) {
                case SEMI:
                    {
                    alt1=1;
                    }
                    break;
            }

            switch (alt1) {
                case 1 :
                    // mypackage/cs.g:0:0: ';'
                    {
                    char_literal5=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespace_declaration167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal5_tree = (CommonTree)adaptor.create(char_literal5);
                    adaptor.addChild(root_0, char_literal5_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, namespace_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespace_declaration"

    public static class namespace_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespace_block"
    // mypackage/cs.g:61:1: namespace_block : '{' namespace_body[false] '}' ;
    public final csParser.namespace_block_return namespace_block() throws RecognitionException {
        csParser.namespace_block_return retval = new csParser.namespace_block_return();
        retval.start = input.LT(1);
        int namespace_block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal6=null;
        Token char_literal8=null;
        csParser.namespace_body_return namespace_body7 = null;


        CommonTree char_literal6_tree=null;
        CommonTree char_literal8_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // mypackage/cs.g:61:16: ( '{' namespace_body[false] '}' )
            // mypackage/cs.g:62:2: '{' namespace_body[false] '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal6=(Token)match(input,71,FOLLOW_71_in_namespace_block176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
            adaptor.addChild(root_0, char_literal6_tree);
            }
            pushFollow(FOLLOW_namespace_body_in_namespace_block180);
            namespace_body7=namespace_body(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_body7.getTree());
            char_literal8=(Token)match(input,72,FOLLOW_72_in_namespace_block185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal8_tree = (CommonTree)adaptor.create(char_literal8);
            adaptor.addChild(root_0, char_literal8_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, namespace_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespace_block"

    public static class namespace_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespace_body"
    // mypackage/cs.g:63:1: namespace_body[boolean bGlobal] : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
    public final csParser.namespace_body_return namespace_body(boolean bGlobal) throws RecognitionException {
        csParser.namespace_body_return retval = new csParser.namespace_body_return();
        retval.start = input.LT(1);
        int namespace_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.extern_alias_directives_return extern_alias_directives9 = null;

        csParser.using_directives_return using_directives10 = null;

        csParser.global_attributes_return global_attributes11 = null;

        csParser.namespace_member_declarations_return namespace_member_declarations12 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // mypackage/cs.g:63:32: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
            // mypackage/cs.g:64:2: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:64:2: ( extern_alias_directives )?
            int alt2=2;
            switch ( input.LA(1) ) {
                case 73:
                    {
                    switch ( input.LA(2) ) {
                        case 74:
                            {
                            alt2=1;
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt2) {
                case 1 :
                    // mypackage/cs.g:0:0: extern_alias_directives
                    {
                    pushFollow(FOLLOW_extern_alias_directives_in_namespace_body194);
                    extern_alias_directives9=extern_alias_directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_alias_directives9.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:64:29: ( using_directives )?
            int alt3=2;
            switch ( input.LA(1) ) {
                case USING:
                    {
                    alt3=1;
                    }
                    break;
            }

            switch (alt3) {
                case 1 :
                    // mypackage/cs.g:0:0: using_directives
                    {
                    pushFollow(FOLLOW_using_directives_in_namespace_body199);
                    using_directives10=using_directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_directives10.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:64:49: ( global_attributes )?
            int alt4=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    switch ( input.LA(2) ) {
                        case 155:
                        case 156:
                            {
                            switch ( input.LA(3) ) {
                                case 99:
                                    {
                                    alt4=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt4) {
                case 1 :
                    // mypackage/cs.g:0:0: global_attributes
                    {
                    pushFollow(FOLLOW_global_attributes_in_namespace_body204);
                    global_attributes11=global_attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attributes11.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:64:70: ( namespace_member_declarations )?
            int alt5=2;
            switch ( input.LA(1) ) {
                case ENUM:
                case 70:
                case 73:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 95:
                case 106:
                case 164:
                case 178:
                case 181:
                    {
                    alt5=1;
                    }
                    break;
            }

            switch (alt5) {
                case 1 :
                    // mypackage/cs.g:0:0: namespace_member_declarations
                    {
                    pushFollow(FOLLOW_namespace_member_declarations_in_namespace_body209);
                    namespace_member_declarations12=namespace_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_member_declarations12.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, namespace_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespace_body"

    public static class extern_alias_directives_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extern_alias_directives"
    // mypackage/cs.g:65:1: extern_alias_directives : ( extern_alias_directive )+ ;
    public final csParser.extern_alias_directives_return extern_alias_directives() throws RecognitionException {
        csParser.extern_alias_directives_return retval = new csParser.extern_alias_directives_return();
        retval.start = input.LT(1);
        int extern_alias_directives_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.extern_alias_directive_return extern_alias_directive13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // mypackage/cs.g:65:24: ( ( extern_alias_directive )+ )
            // mypackage/cs.g:66:2: ( extern_alias_directive )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:66:2: ( extern_alias_directive )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                switch ( input.LA(1) ) {
                case 73:
                    {
                    switch ( input.LA(2) ) {
                    case 74:
                        {
                        alt6=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // mypackage/cs.g:0:0: extern_alias_directive
            	    {
            	    pushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives218);
            	    extern_alias_directive13=extern_alias_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_alias_directive13.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, extern_alias_directives_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directives"

    public static class extern_alias_directive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extern_alias_directive"
    // mypackage/cs.g:67:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
    public final csParser.extern_alias_directive_return extern_alias_directive() throws RecognitionException {
        csParser.extern_alias_directive_return retval = new csParser.extern_alias_directive_return();
        retval.start = input.LT(1);
        int extern_alias_directive_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal14=null;
        Token string_literal15=null;
        Token char_literal17=null;
        csParser.identifier_return identifier16 = null;


        CommonTree string_literal14_tree=null;
        CommonTree string_literal15_tree=null;
        CommonTree char_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // mypackage/cs.g:67:23: ( 'extern' 'alias' identifier ';' )
            // mypackage/cs.g:68:2: 'extern' 'alias' identifier ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal14=(Token)match(input,73,FOLLOW_73_in_extern_alias_directive227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal14_tree = (CommonTree)adaptor.create(string_literal14);
            adaptor.addChild(root_0, string_literal14_tree);
            }
            string_literal15=(Token)match(input,74,FOLLOW_74_in_extern_alias_directive231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal15_tree = (CommonTree)adaptor.create(string_literal15);
            adaptor.addChild(root_0, string_literal15_tree);
            }
            pushFollow(FOLLOW_identifier_in_extern_alias_directive235);
            identifier16=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier16.getTree());
            char_literal17=(Token)match(input,SEMI,FOLLOW_SEMI_in_extern_alias_directive238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal17_tree = (CommonTree)adaptor.create(char_literal17);
            adaptor.addChild(root_0, char_literal17_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, extern_alias_directive_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directive"

    public static class using_directives_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_directives"
    // mypackage/cs.g:69:1: using_directives : ( using_directive )+ ;
    public final csParser.using_directives_return using_directives() throws RecognitionException {
        csParser.using_directives_return retval = new csParser.using_directives_return();
        retval.start = input.LT(1);
        int using_directives_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.using_directive_return using_directive18 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // mypackage/cs.g:69:17: ( ( using_directive )+ )
            // mypackage/cs.g:70:2: ( using_directive )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:70:2: ( using_directive )+
            int cnt7=0;
            loop7:
            do {
                int alt7=2;
                switch ( input.LA(1) ) {
                case USING:
                    {
                    alt7=1;
                    }
                    break;

                }

                switch (alt7) {
            	case 1 :
            	    // mypackage/cs.g:0:0: using_directive
            	    {
            	    pushFollow(FOLLOW_using_directive_in_using_directives246);
            	    using_directive18=using_directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_directive18.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt7 >= 1 ) break loop7;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(7, input);
                        throw eee;
                }
                cnt7++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, using_directives_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_directives"

    public static class using_directive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_directive"
    // mypackage/cs.g:71:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
    public final csParser.using_directive_return using_directive() throws RecognitionException {
        csParser.using_directive_return retval = new csParser.using_directive_return();
        retval.start = input.LT(1);
        int using_directive_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.using_alias_directive_return using_alias_directive19 = null;

        csParser.using_namespace_directive_return using_namespace_directive20 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // mypackage/cs.g:71:16: ( ( using_alias_directive | using_namespace_directive ) )
            // mypackage/cs.g:72:2: ( using_alias_directive | using_namespace_directive )
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:72:2: ( using_alias_directive | using_namespace_directive )
            int alt8=2;
            switch ( input.LA(1) ) {
            case USING:
                {
                switch ( input.LA(2) ) {
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    switch ( input.LA(3) ) {
                    case DOT:
                    case SEMI:
                    case 93:
                    case 108:
                        {
                        alt8=2;
                        }
                        break;
                    case 75:
                        {
                        alt8=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 8, 2, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // mypackage/cs.g:72:3: using_alias_directive
                    {
                    pushFollow(FOLLOW_using_alias_directive_in_using_directive255);
                    using_alias_directive19=using_alias_directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_alias_directive19.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:73:4: using_namespace_directive
                    {
                    pushFollow(FOLLOW_using_namespace_directive_in_using_directive260);
                    using_namespace_directive20=using_namespace_directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_namespace_directive20.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, using_directive_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_directive"

    public static class using_alias_directive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_alias_directive"
    // mypackage/cs.g:74:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
    public final csParser.using_alias_directive_return using_alias_directive() throws RecognitionException {
        csParser.using_alias_directive_return retval = new csParser.using_alias_directive_return();
        retval.start = input.LT(1);
        int using_alias_directive_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal21=null;
        Token char_literal23=null;
        Token char_literal25=null;
        csParser.identifier_return identifier22 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name24 = null;


        CommonTree string_literal21_tree=null;
        CommonTree char_literal23_tree=null;
        CommonTree char_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // mypackage/cs.g:74:22: ( 'using' identifier '=' namespace_or_type_name ';' )
            // mypackage/cs.g:75:2: 'using' identifier '=' namespace_or_type_name ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal21=(Token)match(input,USING,FOLLOW_USING_in_using_alias_directive269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal21_tree = (CommonTree)adaptor.create(string_literal21);
            adaptor.addChild(root_0, string_literal21_tree);
            }
            pushFollow(FOLLOW_identifier_in_using_alias_directive273);
            identifier22=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier22.getTree());
            char_literal23=(Token)match(input,75,FOLLOW_75_in_using_alias_directive277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal23_tree = (CommonTree)adaptor.create(char_literal23);
            adaptor.addChild(root_0, char_literal23_tree);
            }
            pushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive281);
            namespace_or_type_name24=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name24.getTree());
            char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_using_alias_directive285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (CommonTree)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, using_alias_directive_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_alias_directive"

    public static class using_namespace_directive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_namespace_directive"
    // mypackage/cs.g:76:1: using_namespace_directive : 'using' namespace_name ';' -> ^( USING namespace_name ) ;
    public final csParser.using_namespace_directive_return using_namespace_directive() throws RecognitionException {
        csParser.using_namespace_directive_return retval = new csParser.using_namespace_directive_return();
        retval.start = input.LT(1);
        int using_namespace_directive_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal26=null;
        Token char_literal28=null;
        csParser.namespace_name_return namespace_name27 = null;


        CommonTree string_literal26_tree=null;
        CommonTree char_literal28_tree=null;
        RewriteRuleTokenStream stream_USING=new RewriteRuleTokenStream(adaptor,"token USING");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_namespace_name=new RewriteRuleSubtreeStream(adaptor,"rule namespace_name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // mypackage/cs.g:76:26: ( 'using' namespace_name ';' -> ^( USING namespace_name ) )
            // mypackage/cs.g:77:2: 'using' namespace_name ';'
            {
            string_literal26=(Token)match(input,USING,FOLLOW_USING_in_using_namespace_directive293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_USING.add(string_literal26);

            pushFollow(FOLLOW_namespace_name_in_using_namespace_directive297);
            namespace_name27=namespace_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_namespace_name.add(namespace_name27.getTree());
            char_literal28=(Token)match(input,SEMI,FOLLOW_SEMI_in_using_namespace_directive301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal28);



            // AST REWRITE
            // elements: namespace_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 77:33: -> ^( USING namespace_name )
            {
                // mypackage/cs.g:77:36: ^( USING namespace_name )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(USING, "USING"), root_1);

                adaptor.addChild(root_1, stream_namespace_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, using_namespace_directive_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_namespace_directive"

    public static class namespace_member_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespace_member_declarations"
    // mypackage/cs.g:78:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
    public final csParser.namespace_member_declarations_return namespace_member_declarations() throws RecognitionException {
        csParser.namespace_member_declarations_return retval = new csParser.namespace_member_declarations_return();
        retval.start = input.LT(1);
        int namespace_member_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.namespace_member_declaration_return namespace_member_declaration29 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // mypackage/cs.g:78:30: ( ( namespace_member_declaration )+ )
            // mypackage/cs.g:79:2: ( namespace_member_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:79:2: ( namespace_member_declaration )+
            int cnt9=0;
            loop9:
            do {
                int alt9=2;
                switch ( input.LA(1) ) {
                case ENUM:
                case 70:
                case 73:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 95:
                case 106:
                case 164:
                case 178:
                case 181:
                    {
                    alt9=1;
                    }
                    break;

                }

                switch (alt9) {
            	case 1 :
            	    // mypackage/cs.g:0:0: namespace_member_declaration
            	    {
            	    pushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations316);
            	    namespace_member_declaration29=namespace_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_member_declaration29.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt9 >= 1 ) break loop9;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(9, input);
                        throw eee;
                }
                cnt9++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, namespace_member_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declarations"

    public static class namespace_member_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespace_member_declaration"
    // mypackage/cs.g:80:1: namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration -> ^( MEMBER_DECL ( attributes )? ( modifiers )? type_declaration ) );
    public final csParser.namespace_member_declaration_return namespace_member_declaration() throws RecognitionException {
        csParser.namespace_member_declaration_return retval = new csParser.namespace_member_declaration_return();
        retval.start = input.LT(1);
        int namespace_member_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.namespace_declaration_return namespace_declaration30 = null;

        csParser.attributes_return attributes31 = null;

        csParser.modifiers_return modifiers32 = null;

        csParser.type_declaration_return type_declaration33 = null;


        RewriteRuleSubtreeStream stream_attributes=new RewriteRuleSubtreeStream(adaptor,"rule attributes");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // mypackage/cs.g:80:29: ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration -> ^( MEMBER_DECL ( attributes )? ( modifiers )? type_declaration ) )
            int alt12=2;
            switch ( input.LA(1) ) {
            case 70:
                {
                alt12=1;
                }
                break;
            case ENUM:
            case 73:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 95:
            case 106:
            case 164:
            case 178:
            case 181:
                {
                alt12=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // mypackage/cs.g:81:2: namespace_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration325);
                    namespace_declaration30=namespace_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_declaration30.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:82:4: ( attributes )? ( modifiers )? type_declaration
                    {
                    // mypackage/cs.g:82:4: ( attributes )?
                    int alt10=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt10=1;
                            }
                            break;
                    }

                    switch (alt10) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_namespace_member_declaration330);
                            attributes31=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_attributes.add(attributes31.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:82:18: ( modifiers )?
                    int alt11=2;
                    switch ( input.LA(1) ) {
                        case 73:
                        case 77:
                        case 78:
                        case 79:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 85:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                            {
                            alt11=1;
                            }
                            break;
                    }

                    switch (alt11) {
                        case 1 :
                            // mypackage/cs.g:0:0: modifiers
                            {
                            pushFollow(FOLLOW_modifiers_in_namespace_member_declaration335);
                            modifiers32=modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_modifiers.add(modifiers32.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_type_declaration_in_namespace_member_declaration340);
                    type_declaration33=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration33.getTree());


                    // AST REWRITE
                    // elements: type_declaration, attributes, modifiers
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 83:3: -> ^( MEMBER_DECL ( attributes )? ( modifiers )? type_declaration )
                    {
                        // mypackage/cs.g:83:5: ^( MEMBER_DECL ( attributes )? ( modifiers )? type_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MEMBER_DECL, "MEMBER_DECL"), root_1);

                        // mypackage/cs.g:83:19: ( attributes )?
                        if ( stream_attributes.hasNext() ) {
                            adaptor.addChild(root_1, stream_attributes.nextTree());

                        }
                        stream_attributes.reset();
                        // mypackage/cs.g:83:33: ( modifiers )?
                        if ( stream_modifiers.hasNext() ) {
                            adaptor.addChild(root_1, stream_modifiers.nextTree());

                        }
                        stream_modifiers.reset();
                        adaptor.addChild(root_1, stream_type_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, namespace_member_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declaration"

    public static class type_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // mypackage/cs.g:85:1: type_declaration : ( ( 'partial' )=> 'partial' ( class_declaration -> ^( CLASS class_declaration ) | struct_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | enum_declaration | delegate_declaration );
    public final csParser.type_declaration_return type_declaration() throws RecognitionException {
        csParser.type_declaration_return retval = new csParser.type_declaration_return();
        retval.start = input.LT(1);
        int type_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal34=null;
        csParser.class_declaration_return class_declaration35 = null;

        csParser.struct_declaration_return struct_declaration36 = null;

        csParser.interface_declaration_return interface_declaration37 = null;

        csParser.class_declaration_return class_declaration38 = null;

        csParser.struct_declaration_return struct_declaration39 = null;

        csParser.interface_declaration_return interface_declaration40 = null;

        csParser.enum_declaration_return enum_declaration41 = null;

        csParser.delegate_declaration_return delegate_declaration42 = null;


        CommonTree string_literal34_tree=null;
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");
        RewriteRuleSubtreeStream stream_class_declaration=new RewriteRuleSubtreeStream(adaptor,"rule class_declaration");
        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        RewriteRuleSubtreeStream stream_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule struct_declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // mypackage/cs.g:85:17: ( ( 'partial' )=> 'partial' ( class_declaration -> ^( CLASS class_declaration ) | struct_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | enum_declaration | delegate_declaration )
            int alt14=6;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==76) && (synpred13_cs())) {
                alt14=1;
            }
            else if ( (LA14_0==164) ) {
                alt14=2;
            }
            else if ( (LA14_0==178) ) {
                alt14=3;
            }
            else if ( (LA14_0==181) ) {
                alt14=4;
            }
            else if ( (LA14_0==ENUM) ) {
                alt14=5;
            }
            else if ( (LA14_0==106) ) {
                alt14=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // mypackage/cs.g:86:2: ( 'partial' )=> 'partial' ( class_declaration -> ^( CLASS class_declaration ) | struct_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) )
                    {
                    string_literal34=(Token)match(input,76,FOLLOW_76_in_type_declaration374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_76.add(string_literal34);

                    // mypackage/cs.g:86:29: ( class_declaration -> ^( CLASS class_declaration ) | struct_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) )
                    int alt13=3;
                    switch ( input.LA(1) ) {
                    case 164:
                        {
                        alt13=1;
                        }
                        break;
                    case 178:
                        {
                        alt13=2;
                        }
                        break;
                    case 181:
                        {
                        alt13=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 0, input);

                        throw nvae;
                    }

                    switch (alt13) {
                        case 1 :
                            // mypackage/cs.g:86:30: class_declaration
                            {
                            pushFollow(FOLLOW_class_declaration_in_type_declaration379);
                            class_declaration35=class_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_class_declaration.add(class_declaration35.getTree());


                            // AST REWRITE
                            // elements: class_declaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 86:48: -> ^( CLASS class_declaration )
                            {
                                // mypackage/cs.g:86:50: ^( CLASS class_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS, "CLASS"), root_1);

                                adaptor.addChild(root_1, stream_class_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:87:9: struct_declaration
                            {
                            pushFollow(FOLLOW_struct_declaration_in_type_declaration396);
                            struct_declaration36=struct_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_struct_declaration.add(struct_declaration36.getTree());

                            }
                            break;
                        case 3 :
                            // mypackage/cs.g:88:9: interface_declaration
                            {
                            pushFollow(FOLLOW_interface_declaration_in_type_declaration406);
                            interface_declaration37=interface_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration37.getTree());


                            // AST REWRITE
                            // elements: interface_declaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 89:7: -> ^( INTERFACE interface_declaration )
                            {
                                // mypackage/cs.g:89:9: ^( INTERFACE interface_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:91:4: class_declaration
                    {
                    pushFollow(FOLLOW_class_declaration_in_type_declaration432);
                    class_declaration38=class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_declaration.add(class_declaration38.getTree());


                    // AST REWRITE
                    // elements: class_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 91:22: -> ^( CLASS class_declaration )
                    {
                        // mypackage/cs.g:91:25: ^( CLASS class_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS, "CLASS"), root_1);

                        adaptor.addChild(root_1, stream_class_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // mypackage/cs.g:92:4: struct_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_struct_declaration_in_type_declaration445);
                    struct_declaration39=struct_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_declaration39.getTree());

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:93:4: interface_declaration
                    {
                    pushFollow(FOLLOW_interface_declaration_in_type_declaration450);
                    interface_declaration40=interface_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration40.getTree());


                    // AST REWRITE
                    // elements: interface_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 93:26: -> ^( INTERFACE interface_declaration )
                    {
                        // mypackage/cs.g:93:28: ^( INTERFACE interface_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // mypackage/cs.g:94:4: enum_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enum_declaration_in_type_declaration462);
                    enum_declaration41=enum_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_declaration41.getTree());

                    }
                    break;
                case 6 :
                    // mypackage/cs.g:95:4: delegate_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_delegate_declaration_in_type_declaration467);
                    delegate_declaration42=delegate_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration42.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, type_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class qualified_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualified_identifier"
    // mypackage/cs.g:97:1: qualified_identifier : identifier ( '.' identifier )* ;
    public final csParser.qualified_identifier_return qualified_identifier() throws RecognitionException {
        csParser.qualified_identifier_return retval = new csParser.qualified_identifier_return();
        retval.start = input.LT(1);
        int qualified_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal44=null;
        csParser.identifier_return identifier43 = null;

        csParser.identifier_return identifier45 = null;


        CommonTree char_literal44_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // mypackage/cs.g:97:21: ( identifier ( '.' identifier )* )
            // mypackage/cs.g:98:2: identifier ( '.' identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_qualified_identifier476);
            identifier43=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier43.getTree());
            // mypackage/cs.g:98:13: ( '.' identifier )*
            loop15:
            do {
                int alt15=2;
                switch ( input.LA(1) ) {
                case DOT:
                    {
                    alt15=1;
                    }
                    break;

                }

                switch (alt15) {
            	case 1 :
            	    // mypackage/cs.g:98:14: '.' identifier
            	    {
            	    char_literal44=(Token)match(input,DOT,FOLLOW_DOT_in_qualified_identifier479); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal44_tree = (CommonTree)adaptor.create(char_literal44);
            	    adaptor.addChild(root_0, char_literal44_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_qualified_identifier481);
            	    identifier45=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier45.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, qualified_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualified_identifier"

    public static class namespace_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespace_name"
    // mypackage/cs.g:99:1: namespace_name : namespace_or_type_name ;
    public final csParser.namespace_name_return namespace_name() throws RecognitionException {
        csParser.namespace_name_return retval = new csParser.namespace_name_return();
        retval.start = input.LT(1);
        int namespace_name_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name46 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // mypackage/cs.g:100:2: ( namespace_or_type_name )
            // mypackage/cs.g:100:4: namespace_or_type_name
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_namespace_or_type_name_in_namespace_name492);
            namespace_or_type_name46=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name46.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, namespace_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespace_name"

    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // mypackage/cs.g:103:1: modifier : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
    public final csParser.modifier_return modifier() throws RecognitionException {
        csParser.modifier_return retval = new csParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set47=null;

        CommonTree set47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // mypackage/cs.g:103:9: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set47=(Token)input.LT(1);
            if ( input.LA(1)==73||(input.LA(1)>=77 && input.LA(1)<=89) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set47));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class modifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers"
    // mypackage/cs.g:119:1: modifiers : ( modifier )+ ;
    public final csParser.modifiers_return modifiers() throws RecognitionException {
        csParser.modifiers_return retval = new csParser.modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.modifier_return modifier48 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // mypackage/cs.g:119:10: ( ( modifier )+ )
            // mypackage/cs.g:120:2: ( modifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:120:2: ( modifier )+
            int cnt16=0;
            loop16:
            do {
                int alt16=2;
                switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt16=1;
                    }
                    break;

                }

                switch (alt16) {
            	case 1 :
            	    // mypackage/cs.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifiers592);
            	    modifier48=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier48.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt16 >= 1 ) break loop16;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(16, input);
                        throw eee;
                }
                cnt16++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifiers"

    public static class class_member_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_member_declaration"
    // mypackage/cs.g:122:1: class_member_declaration : ( attributes )? ( modifiers )? ( 'const' type constant_declarators ';' -> ^( CLASSMEMBER 'const' ( attributes )? ( modifiers )? type constant_declarators ) | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | 'void' method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? 'void' method_declaration ) | type ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration -> ^( CONSTRUCTOR constructor_declaration ) | destructor_declaration ) ;
    public final csParser.class_member_declaration_return class_member_declaration() throws RecognitionException {
        csParser.class_member_declaration_return retval = new csParser.class_member_declaration_return();
        retval.start = input.LT(1);
        int class_member_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal51=null;
        Token char_literal54=null;
        Token string_literal56=null;
        Token string_literal62=null;
        Token char_literal68=null;
        csParser.attributes_return attributes49 = null;

        csParser.modifiers_return modifiers50 = null;

        csParser.type_return type52 = null;

        csParser.constant_declarators_return constant_declarators53 = null;

        csParser.event_declaration_return event_declaration55 = null;

        csParser.method_declaration_return method_declaration57 = null;

        csParser.interface_declaration_return interface_declaration58 = null;

        csParser.class_declaration_return class_declaration59 = null;

        csParser.struct_declaration_return struct_declaration60 = null;

        csParser.interface_declaration_return interface_declaration61 = null;

        csParser.method_declaration_return method_declaration63 = null;

        csParser.type_return type64 = null;

        csParser.method_declaration_return method_declaration65 = null;

        csParser.property_declaration_return property_declaration66 = null;

        csParser.type_name_return type_name67 = null;

        csParser.indexer_declaration_return indexer_declaration69 = null;

        csParser.indexer_declaration_return indexer_declaration70 = null;

        csParser.field_declaration_return field_declaration71 = null;

        csParser.operator_declaration_return operator_declaration72 = null;

        csParser.class_declaration_return class_declaration73 = null;

        csParser.struct_declaration_return struct_declaration74 = null;

        csParser.enum_declaration_return enum_declaration75 = null;

        csParser.delegate_declaration_return delegate_declaration76 = null;

        csParser.conversion_operator_declaration_return conversion_operator_declaration77 = null;

        csParser.constructor_declaration_return constructor_declaration78 = null;

        csParser.destructor_declaration_return destructor_declaration79 = null;


        CommonTree string_literal51_tree=null;
        CommonTree char_literal54_tree=null;
        CommonTree string_literal56_tree=null;
        CommonTree string_literal62_tree=null;
        CommonTree char_literal68_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");
        RewriteRuleSubtreeStream stream_destructor_declaration=new RewriteRuleSubtreeStream(adaptor,"rule destructor_declaration");
        RewriteRuleSubtreeStream stream_class_declaration=new RewriteRuleSubtreeStream(adaptor,"rule class_declaration");
        RewriteRuleSubtreeStream stream_indexer_declaration=new RewriteRuleSubtreeStream(adaptor,"rule indexer_declaration");
        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        RewriteRuleSubtreeStream stream_constant_declarators=new RewriteRuleSubtreeStream(adaptor,"rule constant_declarators");
        RewriteRuleSubtreeStream stream_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule struct_declaration");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_enum_declaration=new RewriteRuleSubtreeStream(adaptor,"rule enum_declaration");
        RewriteRuleSubtreeStream stream_event_declaration=new RewriteRuleSubtreeStream(adaptor,"rule event_declaration");
        RewriteRuleSubtreeStream stream_constructor_declaration=new RewriteRuleSubtreeStream(adaptor,"rule constructor_declaration");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_property_declaration=new RewriteRuleSubtreeStream(adaptor,"rule property_declaration");
        RewriteRuleSubtreeStream stream_operator_declaration=new RewriteRuleSubtreeStream(adaptor,"rule operator_declaration");
        RewriteRuleSubtreeStream stream_attributes=new RewriteRuleSubtreeStream(adaptor,"rule attributes");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_delegate_declaration=new RewriteRuleSubtreeStream(adaptor,"rule delegate_declaration");
        RewriteRuleSubtreeStream stream_conversion_operator_declaration=new RewriteRuleSubtreeStream(adaptor,"rule conversion_operator_declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // mypackage/cs.g:122:25: ( ( attributes )? ( modifiers )? ( 'const' type constant_declarators ';' -> ^( CLASSMEMBER 'const' ( attributes )? ( modifiers )? type constant_declarators ) | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | 'void' method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? 'void' method_declaration ) | type ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration -> ^( CONSTRUCTOR constructor_declaration ) | destructor_declaration ) )
            // mypackage/cs.g:123:4: ( attributes )? ( modifiers )? ( 'const' type constant_declarators ';' -> ^( CLASSMEMBER 'const' ( attributes )? ( modifiers )? type constant_declarators ) | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | 'void' method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? 'void' method_declaration ) | type ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration -> ^( CONSTRUCTOR constructor_declaration ) | destructor_declaration )
            {
            // mypackage/cs.g:123:4: ( attributes )?
            int alt17=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt17=1;
                    }
                    break;
            }

            switch (alt17) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_class_member_declaration605);
                    attributes49=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attributes.add(attributes49.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:123:17: ( modifiers )?
            int alt18=2;
            switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt18=1;
                    }
                    break;
            }

            switch (alt18) {
                case 1 :
                    // mypackage/cs.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_class_member_declaration609);
                    modifiers50=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers50.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:124:2: ( 'const' type constant_declarators ';' -> ^( CLASSMEMBER 'const' ( attributes )? ( modifiers )? type constant_declarators ) | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | 'void' method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? 'void' method_declaration ) | type ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration -> ^( CONSTRUCTOR constructor_declaration ) | destructor_declaration )
            int alt21=13;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // mypackage/cs.g:124:4: 'const' type constant_declarators ';'
                    {
                    string_literal51=(Token)match(input,90,FOLLOW_90_in_class_member_declaration617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_90.add(string_literal51);

                    pushFollow(FOLLOW_type_in_class_member_declaration621);
                    type52=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type52.getTree());
                    pushFollow(FOLLOW_constant_declarators_in_class_member_declaration625);
                    constant_declarators53=constant_declarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_declarators.add(constant_declarators53.getTree());
                    char_literal54=(Token)match(input,SEMI,FOLLOW_SEMI_in_class_member_declaration629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal54);



                    // AST REWRITE
                    // elements: type, modifiers, constant_declarators, attributes, 90
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 124:48: -> ^( CLASSMEMBER 'const' ( attributes )? ( modifiers )? type constant_declarators )
                    {
                        // mypackage/cs.g:124:51: ^( CLASSMEMBER 'const' ( attributes )? ( modifiers )? type constant_declarators )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASSMEMBER, "CLASSMEMBER"), root_1);

                        adaptor.addChild(root_1, stream_90.nextNode());
                        // mypackage/cs.g:124:73: ( attributes )?
                        if ( stream_attributes.hasNext() ) {
                            adaptor.addChild(root_1, stream_attributes.nextTree());

                        }
                        stream_attributes.reset();
                        // mypackage/cs.g:124:85: ( modifiers )?
                        if ( stream_modifiers.hasNext() ) {
                            adaptor.addChild(root_1, stream_modifiers.nextTree());

                        }
                        stream_modifiers.reset();
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_constant_declarators.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // mypackage/cs.g:125:4: event_declaration
                    {
                    pushFollow(FOLLOW_event_declaration_in_class_member_declaration653);
                    event_declaration55=event_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_event_declaration.add(event_declaration55.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:126:4: 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration )
                    {
                    string_literal56=(Token)match(input,76,FOLLOW_76_in_class_member_declaration660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_76.add(string_literal56);

                    // mypackage/cs.g:126:14: ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration )
                    int alt19=4;
                    switch ( input.LA(1) ) {
                    case IDENTIFIER:
                    case Real_literal:
                    case NUMBER:
                    case Hex_number:
                    case Character_literal:
                    case StringLITERAL:
                    case Verbatim_String_literal:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                        {
                        alt19=1;
                        }
                        break;
                    case 181:
                        {
                        alt19=2;
                        }
                        break;
                    case 164:
                        {
                        alt19=3;
                        }
                        break;
                    case 178:
                        {
                        alt19=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 19, 0, input);

                        throw nvae;
                    }

                    switch (alt19) {
                        case 1 :
                            // mypackage/cs.g:126:15: method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_class_member_declaration663);
                            method_declaration57=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration57.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:127:9: interface_declaration
                            {
                            pushFollow(FOLLOW_interface_declaration_in_class_member_declaration674);
                            interface_declaration58=interface_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration58.getTree());


                            // AST REWRITE
                            // elements: interface_declaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 127:31: -> ^( INTERFACE interface_declaration )
                            {
                                // mypackage/cs.g:127:34: ^( INTERFACE interface_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // mypackage/cs.g:128:9: class_declaration
                            {
                            pushFollow(FOLLOW_class_declaration_in_class_member_declaration692);
                            class_declaration59=class_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_class_declaration.add(class_declaration59.getTree());


                            // AST REWRITE
                            // elements: class_declaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 128:29: -> ^( CLASS class_declaration )
                            {
                                // mypackage/cs.g:128:32: ^( CLASS class_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS, "CLASS"), root_1);

                                adaptor.addChild(root_1, stream_class_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // mypackage/cs.g:129:9: struct_declaration
                            {
                            pushFollow(FOLLOW_struct_declaration_in_class_member_declaration712);
                            struct_declaration60=struct_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_struct_declaration.add(struct_declaration60.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // mypackage/cs.g:130:4: interface_declaration
                    {
                    pushFollow(FOLLOW_interface_declaration_in_class_member_declaration718);
                    interface_declaration61=interface_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration61.getTree());


                    // AST REWRITE
                    // elements: interface_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 131:2: -> ^( INTERFACE interface_declaration )
                    {
                        // mypackage/cs.g:131:5: ^( INTERFACE interface_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // mypackage/cs.g:132:4: 'void' method_declaration
                    {
                    string_literal62=(Token)match(input,91,FOLLOW_91_in_class_member_declaration733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_91.add(string_literal62);

                    pushFollow(FOLLOW_method_declaration_in_class_member_declaration737);
                    method_declaration63=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration63.getTree());


                    // AST REWRITE
                    // elements: method_declaration, modifiers, 91, attributes
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 132:32: -> ^( CLASSMETHOD ( attributes )? ( modifiers )? 'void' method_declaration )
                    {
                        // mypackage/cs.g:132:35: ^( CLASSMETHOD ( attributes )? ( modifiers )? 'void' method_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASSMETHOD, "CLASSMETHOD"), root_1);

                        // mypackage/cs.g:132:49: ( attributes )?
                        if ( stream_attributes.hasNext() ) {
                            adaptor.addChild(root_1, stream_attributes.nextTree());

                        }
                        stream_attributes.reset();
                        // mypackage/cs.g:132:61: ( modifiers )?
                        if ( stream_modifiers.hasNext() ) {
                            adaptor.addChild(root_1, stream_modifiers.nextTree());

                        }
                        stream_modifiers.reset();
                        adaptor.addChild(root_1, stream_91.nextNode());
                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // mypackage/cs.g:133:4: type ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration )
                    {
                    pushFollow(FOLLOW_type_in_class_member_declaration758);
                    type64=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type64.getTree());
                    // mypackage/cs.g:133:9: ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration )
                    int alt20=6;
                    alt20 = dfa20.predict(input);
                    switch (alt20) {
                        case 1 :
                            // mypackage/cs.g:133:15: ( member_name '(' )=> method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_class_member_declaration776);
                            method_declaration65=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration65.getTree());


                            // AST REWRITE
                            // elements: attributes, method_declaration, modifiers, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 133:57: -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration )
                            {
                                // mypackage/cs.g:133:60: ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASSMETHOD, "CLASSMETHOD"), root_1);

                                // mypackage/cs.g:133:74: ( attributes )?
                                if ( stream_attributes.hasNext() ) {
                                    adaptor.addChild(root_1, stream_attributes.nextTree());

                                }
                                stream_attributes.reset();
                                // mypackage/cs.g:133:86: ( modifiers )?
                                if ( stream_modifiers.hasNext() ) {
                                    adaptor.addChild(root_1, stream_modifiers.nextTree());

                                }
                                stream_modifiers.reset();
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_method_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:134:8: ( member_name '{' )=> property_declaration
                            {
                            pushFollow(FOLLOW_property_declaration_in_class_member_declaration811);
                            property_declaration66=property_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_property_declaration.add(property_declaration66.getTree());


                            // AST REWRITE
                            // elements: property_declaration, type, attributes, modifiers
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 134:52: -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration )
                            {
                                // mypackage/cs.g:134:55: ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASSMETHOD, "CLASSMETHOD"), root_1);

                                // mypackage/cs.g:134:69: ( attributes )?
                                if ( stream_attributes.hasNext() ) {
                                    adaptor.addChild(root_1, stream_attributes.nextTree());

                                }
                                stream_attributes.reset();
                                // mypackage/cs.g:134:81: ( modifiers )?
                                if ( stream_modifiers.hasNext() ) {
                                    adaptor.addChild(root_1, stream_modifiers.nextTree());

                                }
                                stream_modifiers.reset();
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_property_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // mypackage/cs.g:135:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
                            {
                            pushFollow(FOLLOW_type_name_in_class_member_declaration850);
                            type_name67=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_name.add(type_name67.getTree());
                            char_literal68=(Token)match(input,DOT,FOLLOW_DOT_in_class_member_declaration852); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(char_literal68);

                            pushFollow(FOLLOW_indexer_declaration_in_class_member_declaration854);
                            indexer_declaration69=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_indexer_declaration.add(indexer_declaration69.getTree());

                            }
                            break;
                        case 4 :
                            // mypackage/cs.g:136:8: indexer_declaration
                            {
                            pushFollow(FOLLOW_indexer_declaration_in_class_member_declaration864);
                            indexer_declaration70=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_indexer_declaration.add(indexer_declaration70.getTree());

                            }
                            break;
                        case 5 :
                            // mypackage/cs.g:137:11: field_declaration
                            {
                            pushFollow(FOLLOW_field_declaration_in_class_member_declaration877);
                            field_declaration71=field_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration71.getTree());


                            // AST REWRITE
                            // elements: type, attributes, field_declaration, modifiers
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 137:34: -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration )
                            {
                                // mypackage/cs.g:137:37: ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASSMEMBER, "CLASSMEMBER"), root_1);

                                // mypackage/cs.g:137:51: ( attributes )?
                                if ( stream_attributes.hasNext() ) {
                                    adaptor.addChild(root_1, stream_attributes.nextTree());

                                }
                                stream_attributes.reset();
                                // mypackage/cs.g:137:63: ( modifiers )?
                                if ( stream_modifiers.hasNext() ) {
                                    adaptor.addChild(root_1, stream_modifiers.nextTree());

                                }
                                stream_modifiers.reset();
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // mypackage/cs.g:138:11: operator_declaration
                            {
                            pushFollow(FOLLOW_operator_declaration_in_class_member_declaration910);
                            operator_declaration72=operator_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_operator_declaration.add(operator_declaration72.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // mypackage/cs.g:140:4: class_declaration
                    {
                    pushFollow(FOLLOW_class_declaration_in_class_member_declaration926);
                    class_declaration73=class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_declaration.add(class_declaration73.getTree());


                    // AST REWRITE
                    // elements: class_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 141:3: -> ^( CLASS class_declaration )
                    {
                        // mypackage/cs.g:141:6: ^( CLASS class_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS, "CLASS"), root_1);

                        adaptor.addChild(root_1, stream_class_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // mypackage/cs.g:142:4: struct_declaration
                    {
                    pushFollow(FOLLOW_struct_declaration_in_class_member_declaration943);
                    struct_declaration74=struct_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_declaration.add(struct_declaration74.getTree());

                    }
                    break;
                case 9 :
                    // mypackage/cs.g:143:4: enum_declaration
                    {
                    pushFollow(FOLLOW_enum_declaration_in_class_member_declaration949);
                    enum_declaration75=enum_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enum_declaration.add(enum_declaration75.getTree());

                    }
                    break;
                case 10 :
                    // mypackage/cs.g:144:4: delegate_declaration
                    {
                    pushFollow(FOLLOW_delegate_declaration_in_class_member_declaration956);
                    delegate_declaration76=delegate_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delegate_declaration.add(delegate_declaration76.getTree());

                    }
                    break;
                case 11 :
                    // mypackage/cs.g:145:4: conversion_operator_declaration
                    {
                    pushFollow(FOLLOW_conversion_operator_declaration_in_class_member_declaration962);
                    conversion_operator_declaration77=conversion_operator_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conversion_operator_declaration.add(conversion_operator_declaration77.getTree());

                    }
                    break;
                case 12 :
                    // mypackage/cs.g:146:4: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_class_member_declaration967);
                    constructor_declaration78=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructor_declaration.add(constructor_declaration78.getTree());


                    // AST REWRITE
                    // elements: constructor_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 146:28: -> ^( CONSTRUCTOR constructor_declaration )
                    {
                        // mypackage/cs.g:146:31: ^( CONSTRUCTOR constructor_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR, "CONSTRUCTOR"), root_1);

                        adaptor.addChild(root_1, stream_constructor_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // mypackage/cs.g:147:4: destructor_declaration
                    {
                    pushFollow(FOLLOW_destructor_declaration_in_class_member_declaration983);
                    destructor_declaration79=destructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_destructor_declaration.add(destructor_declaration79.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, class_member_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "class_member_declaration"

    public static class primary_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary_expression"
    // mypackage/cs.g:151:1: primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
    public final csParser.primary_expression_return primary_expression() throws RecognitionException {
        csParser.primary_expression_return retval = new csParser.primary_expression_return();
        retval.start = input.LT(1);
        int primary_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal80=null;
        Token string_literal83=null;
        Token string_literal88=null;
        csParser.brackets_return brackets81 = null;

        csParser.primary_expression_part_return primary_expression_part82 = null;

        csParser.brackets_return brackets84 = null;

        csParser.primary_expression_part_return primary_expression_part85 = null;

        csParser.primary_expression_start_return primary_expression_start86 = null;

        csParser.primary_expression_part_return primary_expression_part87 = null;

        csParser.object_creation_expression_return object_creation_expression89 = null;

        csParser.primary_expression_part_return primary_expression_part90 = null;

        csParser.delegate_creation_expression_return delegate_creation_expression91 = null;

        csParser.object_creation_expression_return object_creation_expression92 = null;

        csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression93 = null;

        csParser.sizeof_expression_return sizeof_expression94 = null;

        csParser.checked_expression_return checked_expression95 = null;

        csParser.unchecked_expression_return unchecked_expression96 = null;

        csParser.default_value_expression_return default_value_expression97 = null;

        csParser.anonymous_method_expression_return anonymous_method_expression98 = null;


        CommonTree string_literal80_tree=null;
        CommonTree string_literal83_tree=null;
        CommonTree string_literal88_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // mypackage/cs.g:151:19: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
            int alt27=9;
            alt27 = dfa27.predict(input);
            switch (alt27) {
                case 1 :
                    // mypackage/cs.g:152:2: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal80=(Token)match(input,92,FOLLOW_92_in_primary_expression1008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal80_tree = (CommonTree)adaptor.create(string_literal80);
                    adaptor.addChild(root_0, string_literal80_tree);
                    }
                    pushFollow(FOLLOW_brackets_in_primary_expression1012);
                    brackets81=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets81.getTree());
                    // mypackage/cs.g:152:46: ( primary_expression_part )*
                    loop22:
                    do {
                        int alt22=2;
                        switch ( input.LA(1) ) {
                        case DOT:
                        case PTR:
                        case 95:
                        case 97:
                            {
                            alt22=1;
                            }
                            break;

                        }

                        switch (alt22) {
                    	case 1 :
                    	    // mypackage/cs.g:0:0: primary_expression_part
                    	    {
                    	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression1016);
                    	    primary_expression_part82=primary_expression_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part82.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:153:4: ( 'base' brackets )=> 'this' brackets ( primary_expression_part )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal83=(Token)match(input,92,FOLLOW_92_in_primary_expression1032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal83_tree = (CommonTree)adaptor.create(string_literal83);
                    adaptor.addChild(root_0, string_literal83_tree);
                    }
                    pushFollow(FOLLOW_brackets_in_primary_expression1036);
                    brackets84=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets84.getTree());
                    // mypackage/cs.g:153:47: ( primary_expression_part )*
                    loop23:
                    do {
                        int alt23=2;
                        switch ( input.LA(1) ) {
                        case DOT:
                        case PTR:
                        case 95:
                        case 97:
                            {
                            alt23=1;
                            }
                            break;

                        }

                        switch (alt23) {
                    	case 1 :
                    	    // mypackage/cs.g:0:0: primary_expression_part
                    	    {
                    	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression1040);
                    	    primary_expression_part85=primary_expression_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part85.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;
                case 3 :
                    // mypackage/cs.g:154:4: primary_expression_start ( primary_expression_part )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primary_expression_start_in_primary_expression1046);
                    primary_expression_start86=primary_expression_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_start86.getTree());
                    // mypackage/cs.g:154:31: ( primary_expression_part )*
                    loop24:
                    do {
                        int alt24=2;
                        switch ( input.LA(1) ) {
                        case DOT:
                        case PTR:
                        case 95:
                        case 97:
                            {
                            alt24=1;
                            }
                            break;

                        }

                        switch (alt24) {
                    	case 1 :
                    	    // mypackage/cs.g:0:0: primary_expression_part
                    	    {
                    	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression1050);
                    	    primary_expression_part87=primary_expression_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part87.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // mypackage/cs.g:155:4: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal88=(Token)match(input,77,FOLLOW_77_in_primary_expression1056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal88_tree = (CommonTree)adaptor.create(string_literal88);
                    adaptor.addChild(root_0, string_literal88_tree);
                    }
                    // mypackage/cs.g:155:10: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
                    int alt26=4;
                    switch ( input.LA(1) ) {
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        {
                        int LA26_1 = input.LA(2);

                        if ( (synpred65_cs()) ) {
                            alt26=1;
                        }
                        else if ( (synpred68_cs()) ) {
                            alt26=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        int LA26_2 = input.LA(2);

                        if ( (synpred65_cs()) ) {
                            alt26=1;
                        }
                        else if ( (synpred67_cs()) ) {
                            alt26=2;
                        }
                        else if ( (synpred68_cs()) ) {
                            alt26=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 91:
                        {
                        int LA26_3 = input.LA(2);

                        if ( (synpred65_cs()) ) {
                            alt26=1;
                        }
                        else if ( (synpred68_cs()) ) {
                            alt26=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 71:
                        {
                        alt26=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 0, input);

                        throw nvae;
                    }

                    switch (alt26) {
                        case 1 :
                            // mypackage/cs.g:155:14: ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+
                            {
                            pushFollow(FOLLOW_object_creation_expression_in_primary_expression1084);
                            object_creation_expression89=object_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_creation_expression89.getTree());
                            // mypackage/cs.g:156:35: ( primary_expression_part )+
                            int cnt25=0;
                            loop25:
                            do {
                                int alt25=2;
                                switch ( input.LA(1) ) {
                                case DOT:
                                case PTR:
                                case 95:
                                case 97:
                                    {
                                    alt25=1;
                                    }
                                    break;

                                }

                                switch (alt25) {
                            	case 1 :
                            	    // mypackage/cs.g:0:0: primary_expression_part
                            	    {
                            	    pushFollow(FOLLOW_primary_expression_part_in_primary_expression1088);
                            	    primary_expression_part90=primary_expression_part();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression_part90.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt25 >= 1 ) break loop25;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(25, input);
                                        throw eee;
                                }
                                cnt25++;
                            } while (true);


                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:159:7: ( delegate_creation_expression )=> delegate_creation_expression
                            {
                            pushFollow(FOLLOW_delegate_creation_expression_in_primary_expression1116);
                            delegate_creation_expression91=delegate_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_creation_expression91.getTree());

                            }
                            break;
                        case 3 :
                            // mypackage/cs.g:160:7: object_creation_expression
                            {
                            pushFollow(FOLLOW_object_creation_expression_in_primary_expression1124);
                            object_creation_expression92=object_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_creation_expression92.getTree());

                            }
                            break;
                        case 4 :
                            // mypackage/cs.g:161:7: anonymous_object_creation_expression
                            {
                            pushFollow(FOLLOW_anonymous_object_creation_expression_in_primary_expression1132);
                            anonymous_object_creation_expression93=anonymous_object_creation_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_object_creation_expression93.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // mypackage/cs.g:162:4: sizeof_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sizeof_expression_in_primary_expression1145);
                    sizeof_expression94=sizeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sizeof_expression94.getTree());

                    }
                    break;
                case 6 :
                    // mypackage/cs.g:163:4: checked_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_checked_expression_in_primary_expression1156);
                    checked_expression95=checked_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, checked_expression95.getTree());

                    }
                    break;
                case 7 :
                    // mypackage/cs.g:164:4: unchecked_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unchecked_expression_in_primary_expression1175);
                    unchecked_expression96=unchecked_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unchecked_expression96.getTree());

                    }
                    break;
                case 8 :
                    // mypackage/cs.g:165:4: default_value_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_default_value_expression_in_primary_expression1192);
                    default_value_expression97=default_value_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_value_expression97.getTree());

                    }
                    break;
                case 9 :
                    // mypackage/cs.g:166:4: anonymous_method_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anonymous_method_expression_in_primary_expression1205);
                    anonymous_method_expression98=anonymous_method_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_method_expression98.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, primary_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary_expression"

    public static class primary_expression_start_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary_expression_start"
    // mypackage/cs.g:169:1: primary_expression_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );
    public final csParser.primary_expression_start_return primary_expression_start() throws RecognitionException {
        csParser.primary_expression_start_return retval = new csParser.primary_expression_start_return();
        retval.start = input.LT(1);
        int primary_expression_start_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal103=null;
        Token string_literal105=null;
        Token string_literal106=null;
        csParser.predefined_type_return predefined_type99 = null;

        csParser.identifier_return identifier100 = null;

        csParser.generic_argument_list_return generic_argument_list101 = null;

        csParser.identifier_return identifier102 = null;

        csParser.identifier_return identifier104 = null;

        csParser.paren_expression_return paren_expression107 = null;

        csParser.typeof_expression_return typeof_expression108 = null;

        csParser.literal_return literal109 = null;


        CommonTree string_literal103_tree=null;
        CommonTree string_literal105_tree=null;
        CommonTree string_literal106_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // mypackage/cs.g:169:25: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal )
            int alt29=8;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // mypackage/cs.g:170:2: predefined_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_predefined_type_in_primary_expression_start1218);
                    predefined_type99=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type99.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:171:4: ( identifier '<' )=> identifier generic_argument_list
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_primary_expression_start1246);
                    identifier100=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier100.getTree());
                    pushFollow(FOLLOW_generic_argument_list_in_primary_expression_start1250);
                    generic_argument_list101=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list101.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:172:4: identifier ( '::' identifier )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_primary_expression_start1255);
                    identifier102=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier102.getTree());
                    // mypackage/cs.g:172:15: ( '::' identifier )?
                    int alt28=2;
                    switch ( input.LA(1) ) {
                        case 93:
                            {
                            alt28=1;
                            }
                            break;
                    }

                    switch (alt28) {
                        case 1 :
                            // mypackage/cs.g:172:16: '::' identifier
                            {
                            string_literal103=(Token)match(input,93,FOLLOW_93_in_primary_expression_start1258); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal103_tree = (CommonTree)adaptor.create(string_literal103);
                            adaptor.addChild(root_0, string_literal103_tree);
                            }
                            pushFollow(FOLLOW_identifier_in_primary_expression_start1262);
                            identifier104=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier104.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // mypackage/cs.g:173:4: 'this'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal105=(Token)match(input,92,FOLLOW_92_in_primary_expression_start1269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal105_tree = (CommonTree)adaptor.create(string_literal105);
                    adaptor.addChild(root_0, string_literal105_tree);
                    }

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:174:4: 'base'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal106=(Token)match(input,94,FOLLOW_94_in_primary_expression_start1275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal106_tree = (CommonTree)adaptor.create(string_literal106);
                    adaptor.addChild(root_0, string_literal106_tree);
                    }

                    }
                    break;
                case 6 :
                    // mypackage/cs.g:175:4: paren_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_paren_expression_in_primary_expression_start1280);
                    paren_expression107=paren_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, paren_expression107.getTree());

                    }
                    break;
                case 7 :
                    // mypackage/cs.g:176:4: typeof_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeof_expression_in_primary_expression_start1285);
                    typeof_expression108=typeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeof_expression108.getTree());

                    }
                    break;
                case 8 :
                    // mypackage/cs.g:177:4: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary_expression_start1303);
                    literal109=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal109.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, primary_expression_start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start"

    public static class primary_expression_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary_expression_part"
    // mypackage/cs.g:180:1: primary_expression_part : ( access_identifier | brackets_or_arguments );
    public final csParser.primary_expression_part_return primary_expression_part() throws RecognitionException {
        csParser.primary_expression_part_return retval = new csParser.primary_expression_part_return();
        retval.start = input.LT(1);
        int primary_expression_part_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.access_identifier_return access_identifier110 = null;

        csParser.brackets_or_arguments_return brackets_or_arguments111 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // mypackage/cs.g:180:24: ( access_identifier | brackets_or_arguments )
            int alt30=2;
            switch ( input.LA(1) ) {
            case DOT:
            case PTR:
                {
                alt30=1;
                }
                break;
            case 95:
            case 97:
                {
                alt30=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // mypackage/cs.g:181:3: access_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_access_identifier_in_primary_expression_part1314);
                    access_identifier110=access_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier110.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:182:4: brackets_or_arguments
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_part1319);
                    brackets_or_arguments111=brackets_or_arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets_or_arguments111.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, primary_expression_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_part"

    public static class access_identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "access_identifier"
    // mypackage/cs.g:183:1: access_identifier : access_operator type_or_generic ;
    public final csParser.access_identifier_return access_identifier() throws RecognitionException {
        csParser.access_identifier_return retval = new csParser.access_identifier_return();
        retval.start = input.LT(1);
        int access_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.access_operator_return access_operator112 = null;

        csParser.type_or_generic_return type_or_generic113 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // mypackage/cs.g:183:18: ( access_operator type_or_generic )
            // mypackage/cs.g:184:2: access_operator type_or_generic
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_access_operator_in_access_identifier1327);
            access_operator112=access_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, access_operator112.getTree());
            pushFollow(FOLLOW_type_or_generic_in_access_identifier1331);
            type_or_generic113=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic113.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, access_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "access_identifier"

    public static class access_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "access_operator"
    // mypackage/cs.g:185:1: access_operator : ( '.' | '->' );
    public final csParser.access_operator_return access_operator() throws RecognitionException {
        csParser.access_operator_return retval = new csParser.access_operator_return();
        retval.start = input.LT(1);
        int access_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set114=null;

        CommonTree set114_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // mypackage/cs.g:185:16: ( '.' | '->' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set114=(Token)input.LT(1);
            if ( (input.LA(1)>=DOT && input.LA(1)<=PTR) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set114));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, access_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "access_operator"

    public static class brackets_or_arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets_or_arguments"
    // mypackage/cs.g:187:1: brackets_or_arguments : ( brackets | arguments );
    public final csParser.brackets_or_arguments_return brackets_or_arguments() throws RecognitionException {
        csParser.brackets_or_arguments_return retval = new csParser.brackets_or_arguments_return();
        retval.start = input.LT(1);
        int brackets_or_arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.brackets_return brackets115 = null;

        csParser.arguments_return arguments116 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // mypackage/cs.g:187:22: ( brackets | arguments )
            int alt31=2;
            switch ( input.LA(1) ) {
            case 95:
                {
                alt31=1;
                }
                break;
            case 97:
                {
                alt31=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // mypackage/cs.g:188:2: brackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_brackets_in_brackets_or_arguments1353);
                    brackets115=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets115.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:188:13: arguments
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_brackets_or_arguments1357);
                    arguments116=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments116.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, brackets_or_arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "brackets_or_arguments"

    public static class brackets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // mypackage/cs.g:189:1: brackets : '[' ( expression_list )? ']' ;
    public final csParser.brackets_return brackets() throws RecognitionException {
        csParser.brackets_return retval = new csParser.brackets_return();
        retval.start = input.LT(1);
        int brackets_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal117=null;
        Token char_literal119=null;
        csParser.expression_list_return expression_list118 = null;


        CommonTree char_literal117_tree=null;
        CommonTree char_literal119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // mypackage/cs.g:189:9: ( '[' ( expression_list )? ']' )
            // mypackage/cs.g:190:2: '[' ( expression_list )? ']'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal117=(Token)match(input,95,FOLLOW_95_in_brackets1365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal117_tree = (CommonTree)adaptor.create(char_literal117);
            adaptor.addChild(root_0, char_literal117_tree);
            }
            // mypackage/cs.g:190:8: ( expression_list )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // mypackage/cs.g:0:0: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_brackets1369);
                    expression_list118=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list118.getTree());

                    }
                    break;

            }

            char_literal119=(Token)match(input,96,FOLLOW_96_in_brackets1374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal119_tree = (CommonTree)adaptor.create(char_literal119);
            adaptor.addChild(root_0, char_literal119_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, brackets_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class paren_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "paren_expression"
    // mypackage/cs.g:191:1: paren_expression : '(' expression ')' ;
    public final csParser.paren_expression_return paren_expression() throws RecognitionException {
        csParser.paren_expression_return retval = new csParser.paren_expression_return();
        retval.start = input.LT(1);
        int paren_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal120=null;
        Token char_literal122=null;
        csParser.expression_return expression121 = null;


        CommonTree char_literal120_tree=null;
        CommonTree char_literal122_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // mypackage/cs.g:191:17: ( '(' expression ')' )
            // mypackage/cs.g:192:2: '(' expression ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal120=(Token)match(input,97,FOLLOW_97_in_paren_expression1384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal120_tree = (CommonTree)adaptor.create(char_literal120);
            adaptor.addChild(root_0, char_literal120_tree);
            }
            pushFollow(FOLLOW_expression_in_paren_expression1388);
            expression121=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression121.getTree());
            char_literal122=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_paren_expression1392); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal122_tree = (CommonTree)adaptor.create(char_literal122);
            adaptor.addChild(root_0, char_literal122_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, paren_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "paren_expression"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // mypackage/cs.g:193:1: arguments : '(' ( argument_list )? ')' ;
    public final csParser.arguments_return arguments() throws RecognitionException {
        csParser.arguments_return retval = new csParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal123=null;
        Token char_literal125=null;
        csParser.argument_list_return argument_list124 = null;


        CommonTree char_literal123_tree=null;
        CommonTree char_literal125_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // mypackage/cs.g:193:10: ( '(' ( argument_list )? ')' )
            // mypackage/cs.g:194:2: '(' ( argument_list )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal123=(Token)match(input,97,FOLLOW_97_in_arguments1401); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal123_tree = (CommonTree)adaptor.create(char_literal123);
            adaptor.addChild(root_0, char_literal123_tree);
            }
            // mypackage/cs.g:194:8: ( argument_list )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt33=1;
                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // mypackage/cs.g:0:0: argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_arguments1405);
                    argument_list124=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_list124.getTree());

                    }
                    break;

            }

            char_literal125=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments1410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal125_tree = (CommonTree)adaptor.create(char_literal125);
            adaptor.addChild(root_0, char_literal125_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class argument_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_list"
    // mypackage/cs.g:195:1: argument_list : argument ( ',' argument )* ;
    public final csParser.argument_list_return argument_list() throws RecognitionException {
        csParser.argument_list_return retval = new csParser.argument_list_return();
        retval.start = input.LT(1);
        int argument_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal127=null;
        csParser.argument_return argument126 = null;

        csParser.argument_return argument128 = null;


        CommonTree char_literal127_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // mypackage/cs.g:195:14: ( argument ( ',' argument )* )
            // mypackage/cs.g:196:2: argument ( ',' argument )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_argument_in_argument_list1419);
            argument126=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument126.getTree());
            // mypackage/cs.g:196:11: ( ',' argument )*
            loop34:
            do {
                int alt34=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt34=1;
                    }
                    break;

                }

                switch (alt34) {
            	case 1 :
            	    // mypackage/cs.g:196:12: ',' argument
            	    {
            	    char_literal127=(Token)match(input,98,FOLLOW_98_in_argument_list1422); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal127_tree = (CommonTree)adaptor.create(char_literal127);
            	    adaptor.addChild(root_0, char_literal127_tree);
            	    }
            	    pushFollow(FOLLOW_argument_in_argument_list1424);
            	    argument128=argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument128.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, argument_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_list"

    public static class argument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // mypackage/cs.g:198:1: argument : ( argument_name argument_value | argument_value );
    public final csParser.argument_return argument() throws RecognitionException {
        csParser.argument_return retval = new csParser.argument_return();
        retval.start = input.LT(1);
        int argument_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.argument_name_return argument_name129 = null;

        csParser.argument_value_return argument_value130 = null;

        csParser.argument_value_return argument_value131 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // mypackage/cs.g:198:9: ( argument_name argument_value | argument_value )
            int alt35=2;
            switch ( input.LA(1) ) {
            case 142:
                {
                switch ( input.LA(2) ) {
                case 99:
                    {
                    alt35=1;
                    }
                    break;
                case EOF:
                case IDENTIFIER:
                case DOT:
                case PTR:
                case MINUS:
                case GT:
                case RPAREN:
                case 74:
                case 75:
                case 91:
                case 93:
                case 95:
                case 97:
                case 98:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt35=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;
                }

                }
                break;
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 77:
            case 92:
            case 94:
            case 97:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
                {
                alt35=2;
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                switch ( input.LA(2) ) {
                case 99:
                    {
                    alt35=1;
                    }
                    break;
                case EOF:
                case DOT:
                case PTR:
                case MINUS:
                case GT:
                case RPAREN:
                case 75:
                case 93:
                case 95:
                case 97:
                case 98:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                    {
                    alt35=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 3, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // mypackage/cs.g:199:2: argument_name argument_value
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_argument_name_in_argument1434);
                    argument_name129=argument_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_name129.getTree());
                    pushFollow(FOLLOW_argument_value_in_argument1438);
                    argument_value130=argument_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_value130.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:200:4: argument_value
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_argument_value_in_argument1443);
                    argument_value131=argument_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_value131.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, argument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class argument_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_name"
    // mypackage/cs.g:201:1: argument_name : identifier ':' ;
    public final csParser.argument_name_return argument_name() throws RecognitionException {
        csParser.argument_name_return retval = new csParser.argument_name_return();
        retval.start = input.LT(1);
        int argument_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal133=null;
        csParser.identifier_return identifier132 = null;


        CommonTree char_literal133_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // mypackage/cs.g:201:14: ( identifier ':' )
            // mypackage/cs.g:202:2: identifier ':'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_argument_name1450);
            identifier132=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier132.getTree());
            char_literal133=(Token)match(input,99,FOLLOW_99_in_argument_name1454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal133_tree = (CommonTree)adaptor.create(char_literal133);
            adaptor.addChild(root_0, char_literal133_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, argument_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_name"

    public static class argument_value_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_value"
    // mypackage/cs.g:203:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
    public final csParser.argument_value_return argument_value() throws RecognitionException {
        csParser.argument_value_return retval = new csParser.argument_value_return();
        retval.start = input.LT(1);
        int argument_value_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal136=null;
        csParser.expression_return expression134 = null;

        csParser.ref_variable_reference_return ref_variable_reference135 = null;

        csParser.variable_reference_return variable_reference137 = null;


        CommonTree string_literal136_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // mypackage/cs.g:203:15: ( expression | ref_variable_reference | 'out' variable_reference )
            int alt36=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 74:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt36=1;
                }
                break;
            case 101:
                {
                alt36=2;
                }
                break;
            case 100:
                {
                alt36=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // mypackage/cs.g:204:2: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_argument_value1462);
                    expression134=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression134.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:205:4: ref_variable_reference
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ref_variable_reference_in_argument_value1468);
                    ref_variable_reference135=ref_variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_variable_reference135.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:206:4: 'out' variable_reference
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal136=(Token)match(input,100,FOLLOW_100_in_argument_value1474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal136_tree = (CommonTree)adaptor.create(string_literal136);
                    adaptor.addChild(root_0, string_literal136_tree);
                    }
                    pushFollow(FOLLOW_variable_reference_in_argument_value1478);
                    variable_reference137=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference137.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, argument_value_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_value"

    public static class ref_variable_reference_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ref_variable_reference"
    // mypackage/cs.g:207:1: ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
    public final csParser.ref_variable_reference_return ref_variable_reference() throws RecognitionException {
        csParser.ref_variable_reference_return retval = new csParser.ref_variable_reference_return();
        retval.start = input.LT(1);
        int ref_variable_reference_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal138=null;
        Token char_literal139=null;
        Token char_literal141=null;
        csParser.type_return type140 = null;

        csParser.ref_variable_reference_return ref_variable_reference142 = null;

        csParser.variable_reference_return variable_reference143 = null;

        csParser.variable_reference_return variable_reference144 = null;


        CommonTree string_literal138_tree=null;
        CommonTree char_literal139_tree=null;
        CommonTree char_literal141_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // mypackage/cs.g:207:23: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
            // mypackage/cs.g:208:2: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal138=(Token)match(input,101,FOLLOW_101_in_ref_variable_reference1486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal138_tree = (CommonTree)adaptor.create(string_literal138);
            adaptor.addChild(root_0, string_literal138_tree);
            }
            // mypackage/cs.g:209:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
            int alt38=2;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // mypackage/cs.g:209:4: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
                    {
                    char_literal139=(Token)match(input,97,FOLLOW_97_in_ref_variable_reference1508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal139_tree = (CommonTree)adaptor.create(char_literal139);
                    adaptor.addChild(root_0, char_literal139_tree);
                    }
                    pushFollow(FOLLOW_type_in_ref_variable_reference1512);
                    type140=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type140.getTree());
                    char_literal141=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_ref_variable_reference1516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal141_tree = (CommonTree)adaptor.create(char_literal141);
                    adaptor.addChild(root_0, char_literal141_tree);
                    }
                    // mypackage/cs.g:209:47: ( ref_variable_reference | variable_reference )
                    int alt37=2;
                    switch ( input.LA(1) ) {
                    case 101:
                        {
                        alt37=1;
                        }
                        break;
                    case IDENTIFIER:
                    case Real_literal:
                    case NUMBER:
                    case Hex_number:
                    case Character_literal:
                    case StringLITERAL:
                    case Verbatim_String_literal:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case MINUS:
                    case 74:
                    case 77:
                    case 92:
                    case 94:
                    case 97:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 109:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 126:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                        {
                        alt37=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 37, 0, input);

                        throw nvae;
                    }

                    switch (alt37) {
                        case 1 :
                            // mypackage/cs.g:209:48: ref_variable_reference
                            {
                            pushFollow(FOLLOW_ref_variable_reference_in_ref_variable_reference1521);
                            ref_variable_reference142=ref_variable_reference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_variable_reference142.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:209:73: variable_reference
                            {
                            pushFollow(FOLLOW_variable_reference_in_ref_variable_reference1525);
                            variable_reference143=variable_reference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference143.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:211:5: variable_reference
                    {
                    pushFollow(FOLLOW_variable_reference_in_ref_variable_reference1561);
                    variable_reference144=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference144.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, ref_variable_reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ref_variable_reference"

    public static class variable_reference_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_reference"
    // mypackage/cs.g:213:1: variable_reference : expression ;
    public final csParser.variable_reference_return variable_reference() throws RecognitionException {
        csParser.variable_reference_return retval = new csParser.variable_reference_return();
        retval.start = input.LT(1);
        int variable_reference_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression145 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // mypackage/cs.g:213:19: ( expression )
            // mypackage/cs.g:214:2: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_variable_reference1571);
            expression145=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression145.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, variable_reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_reference"

    public static class rank_specifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rank_specifiers"
    // mypackage/cs.g:215:1: rank_specifiers : ( rank_specifier )+ ;
    public final csParser.rank_specifiers_return rank_specifiers() throws RecognitionException {
        csParser.rank_specifiers_return retval = new csParser.rank_specifiers_return();
        retval.start = input.LT(1);
        int rank_specifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.rank_specifier_return rank_specifier146 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // mypackage/cs.g:215:16: ( ( rank_specifier )+ )
            // mypackage/cs.g:216:2: ( rank_specifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:216:2: ( rank_specifier )+
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                switch ( input.LA(1) ) {
                case 95:
                    {
                    switch ( input.LA(2) ) {
                    case 96:
                    case 98:
                        {
                        alt39=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt39) {
            	case 1 :
            	    // mypackage/cs.g:0:0: rank_specifier
            	    {
            	    pushFollow(FOLLOW_rank_specifier_in_rank_specifiers1579);
            	    rank_specifier146=rank_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifier146.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, rank_specifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rank_specifiers"

    public static class rank_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rank_specifier"
    // mypackage/cs.g:217:1: rank_specifier : '[' ( dim_separators )? ']' ;
    public final csParser.rank_specifier_return rank_specifier() throws RecognitionException {
        csParser.rank_specifier_return retval = new csParser.rank_specifier_return();
        retval.start = input.LT(1);
        int rank_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal147=null;
        Token char_literal149=null;
        csParser.dim_separators_return dim_separators148 = null;


        CommonTree char_literal147_tree=null;
        CommonTree char_literal149_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // mypackage/cs.g:217:15: ( '[' ( dim_separators )? ']' )
            // mypackage/cs.g:218:2: '[' ( dim_separators )? ']'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal147=(Token)match(input,95,FOLLOW_95_in_rank_specifier1597); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal147_tree = (CommonTree)adaptor.create(char_literal147);
            adaptor.addChild(root_0, char_literal147_tree);
            }
            // mypackage/cs.g:218:8: ( dim_separators )?
            int alt40=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt40=1;
                    }
                    break;
            }

            switch (alt40) {
                case 1 :
                    // mypackage/cs.g:0:0: dim_separators
                    {
                    pushFollow(FOLLOW_dim_separators_in_rank_specifier1601);
                    dim_separators148=dim_separators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dim_separators148.getTree());

                    }
                    break;

            }

            char_literal149=(Token)match(input,96,FOLLOW_96_in_rank_specifier1606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal149_tree = (CommonTree)adaptor.create(char_literal149);
            adaptor.addChild(root_0, char_literal149_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, rank_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rank_specifier"

    public static class dim_separators_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dim_separators"
    // mypackage/cs.g:219:1: dim_separators : ( ',' )+ ;
    public final csParser.dim_separators_return dim_separators() throws RecognitionException {
        csParser.dim_separators_return retval = new csParser.dim_separators_return();
        retval.start = input.LT(1);
        int dim_separators_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal150=null;

        CommonTree char_literal150_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // mypackage/cs.g:219:15: ( ( ',' )+ )
            // mypackage/cs.g:220:2: ( ',' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:220:2: ( ',' )+
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt41=1;
                    }
                    break;

                }

                switch (alt41) {
            	case 1 :
            	    // mypackage/cs.g:0:0: ','
            	    {
            	    char_literal150=(Token)match(input,98,FOLLOW_98_in_dim_separators1615); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal150_tree = (CommonTree)adaptor.create(char_literal150);
            	    adaptor.addChild(root_0, char_literal150_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, dim_separators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dim_separators"

    public static class delegate_creation_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delegate_creation_expression"
    // mypackage/cs.g:222:1: delegate_creation_expression : type_name '(' type_name ')' ;
    public final csParser.delegate_creation_expression_return delegate_creation_expression() throws RecognitionException {
        csParser.delegate_creation_expression_return retval = new csParser.delegate_creation_expression_return();
        retval.start = input.LT(1);
        int delegate_creation_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal152=null;
        Token char_literal154=null;
        csParser.type_name_return type_name151 = null;

        csParser.type_name_return type_name153 = null;


        CommonTree char_literal152_tree=null;
        CommonTree char_literal154_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // mypackage/cs.g:222:29: ( type_name '(' type_name ')' )
            // mypackage/cs.g:224:2: type_name '(' type_name ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_name_in_delegate_creation_expression1628);
            type_name151=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name151.getTree());
            char_literal152=(Token)match(input,97,FOLLOW_97_in_delegate_creation_expression1632); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal152_tree = (CommonTree)adaptor.create(char_literal152);
            adaptor.addChild(root_0, char_literal152_tree);
            }
            pushFollow(FOLLOW_type_name_in_delegate_creation_expression1636);
            type_name153=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name153.getTree());
            char_literal154=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_delegate_creation_expression1640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal154_tree = (CommonTree)adaptor.create(char_literal154);
            adaptor.addChild(root_0, char_literal154_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, delegate_creation_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delegate_creation_expression"

    public static class anonymous_object_creation_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_object_creation_expression"
    // mypackage/cs.g:225:1: anonymous_object_creation_expression : anonymous_object_initializer ;
    public final csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression() throws RecognitionException {
        csParser.anonymous_object_creation_expression_return retval = new csParser.anonymous_object_creation_expression_return();
        retval.start = input.LT(1);
        int anonymous_object_creation_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.anonymous_object_initializer_return anonymous_object_initializer155 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // mypackage/cs.g:225:37: ( anonymous_object_initializer )
            // mypackage/cs.g:227:2: anonymous_object_initializer
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1651);
            anonymous_object_initializer155=anonymous_object_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_object_initializer155.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, anonymous_object_creation_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_creation_expression"

    public static class anonymous_object_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_object_initializer"
    // mypackage/cs.g:228:1: anonymous_object_initializer : '{' ( member_declarator_list )? ( ',' )? '}' ;
    public final csParser.anonymous_object_initializer_return anonymous_object_initializer() throws RecognitionException {
        csParser.anonymous_object_initializer_return retval = new csParser.anonymous_object_initializer_return();
        retval.start = input.LT(1);
        int anonymous_object_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal156=null;
        Token char_literal158=null;
        Token char_literal159=null;
        csParser.member_declarator_list_return member_declarator_list157 = null;


        CommonTree char_literal156_tree=null;
        CommonTree char_literal158_tree=null;
        CommonTree char_literal159_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // mypackage/cs.g:228:29: ( '{' ( member_declarator_list )? ( ',' )? '}' )
            // mypackage/cs.g:229:2: '{' ( member_declarator_list )? ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal156=(Token)match(input,71,FOLLOW_71_in_anonymous_object_initializer1660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal156_tree = (CommonTree)adaptor.create(char_literal156);
            adaptor.addChild(root_0, char_literal156_tree);
            }
            // mypackage/cs.g:229:8: ( member_declarator_list )?
            int alt42=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    alt42=1;
                    }
                    break;
            }

            switch (alt42) {
                case 1 :
                    // mypackage/cs.g:0:0: member_declarator_list
                    {
                    pushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer1664);
                    member_declarator_list157=member_declarator_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator_list157.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:229:34: ( ',' )?
            int alt43=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt43=1;
                    }
                    break;
            }

            switch (alt43) {
                case 1 :
                    // mypackage/cs.g:0:0: ','
                    {
                    char_literal158=(Token)match(input,98,FOLLOW_98_in_anonymous_object_initializer1669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal158_tree = (CommonTree)adaptor.create(char_literal158);
                    adaptor.addChild(root_0, char_literal158_tree);
                    }

                    }
                    break;

            }

            char_literal159=(Token)match(input,72,FOLLOW_72_in_anonymous_object_initializer1674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal159_tree = (CommonTree)adaptor.create(char_literal159);
            adaptor.addChild(root_0, char_literal159_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, anonymous_object_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_initializer"

    public static class member_declarator_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "member_declarator_list"
    // mypackage/cs.g:230:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
    public final csParser.member_declarator_list_return member_declarator_list() throws RecognitionException {
        csParser.member_declarator_list_return retval = new csParser.member_declarator_list_return();
        retval.start = input.LT(1);
        int member_declarator_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal161=null;
        csParser.member_declarator_return member_declarator160 = null;

        csParser.member_declarator_return member_declarator162 = null;


        CommonTree char_literal161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // mypackage/cs.g:230:23: ( member_declarator ( ',' member_declarator )* )
            // mypackage/cs.g:231:2: member_declarator ( ',' member_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_member_declarator_in_member_declarator_list1682);
            member_declarator160=member_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator160.getTree());
            // mypackage/cs.g:231:21: ( ',' member_declarator )*
            loop44:
            do {
                int alt44=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt44=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt44) {
            	case 1 :
            	    // mypackage/cs.g:231:22: ',' member_declarator
            	    {
            	    char_literal161=(Token)match(input,98,FOLLOW_98_in_member_declarator_list1686); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal161_tree = (CommonTree)adaptor.create(char_literal161);
            	    adaptor.addChild(root_0, char_literal161_tree);
            	    }
            	    pushFollow(FOLLOW_member_declarator_in_member_declarator_list1688);
            	    member_declarator162=member_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_declarator162.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, member_declarator_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "member_declarator_list"

    public static class member_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "member_declarator"
    // mypackage/cs.g:232:1: member_declarator : identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) ;
    public final csParser.member_declarator_return member_declarator() throws RecognitionException {
        csParser.member_declarator_return retval = new csParser.member_declarator_return();
        retval.start = input.LT(1);
        int member_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal165=null;
        Token char_literal167=null;
        csParser.identifier_return identifier163 = null;

        csParser.generic_argument_list_return generic_argument_list164 = null;

        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression166 = null;

        csParser.expression_return expression168 = null;


        CommonTree char_literal165_tree=null;
        CommonTree char_literal167_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // mypackage/cs.g:232:18: ( identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) )
            // mypackage/cs.g:233:2: identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_member_declarator1700);
            identifier163=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier163.getTree());
            // mypackage/cs.g:233:15: ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
            int alt45=3;
            switch ( input.LA(1) ) {
            case 108:
                {
                alt45=1;
                }
                break;
            case DOT:
                {
                alt45=2;
                }
                break;
            case 75:
                {
                alt45=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // mypackage/cs.g:233:16: generic_argument_list
                    {
                    pushFollow(FOLLOW_generic_argument_list_in_member_declarator1705);
                    generic_argument_list164=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list164.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:234:8: ( '.' primary_or_array_creation_expression )
                    {
                    // mypackage/cs.g:234:8: ( '.' primary_or_array_creation_expression )
                    // mypackage/cs.g:234:9: '.' primary_or_array_creation_expression
                    {
                    char_literal165=(Token)match(input,DOT,FOLLOW_DOT_in_member_declarator1715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal165_tree = (CommonTree)adaptor.create(char_literal165);
                    adaptor.addChild(root_0, char_literal165_tree);
                    }
                    pushFollow(FOLLOW_primary_or_array_creation_expression_in_member_declarator1719);
                    primary_or_array_creation_expression166=primary_or_array_creation_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_or_array_creation_expression166.getTree());

                    }


                    }
                    break;
                case 3 :
                    // mypackage/cs.g:235:8: '=' expression
                    {
                    char_literal167=(Token)match(input,75,FOLLOW_75_in_member_declarator1729); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal167_tree = (CommonTree)adaptor.create(char_literal167);
                    adaptor.addChild(root_0, char_literal167_tree);
                    }
                    pushFollow(FOLLOW_expression_in_member_declarator1733);
                    expression168=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression168.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, member_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "member_declarator"

    public static class primary_or_array_creation_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary_or_array_creation_expression"
    // mypackage/cs.g:236:1: primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
    public final csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression() throws RecognitionException {
        csParser.primary_or_array_creation_expression_return retval = new csParser.primary_or_array_creation_expression_return();
        retval.start = input.LT(1);
        int primary_or_array_creation_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.array_creation_expression_return array_creation_expression169 = null;

        csParser.primary_expression_return primary_expression170 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // mypackage/cs.g:236:37: ( ( array_creation_expression )=> array_creation_expression | primary_expression )
            int alt46=2;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // mypackage/cs.g:237:2: ( array_creation_expression )=> array_creation_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1748);
                    array_creation_expression169=array_creation_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_creation_expression169.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:238:4: primary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primary_expression_in_primary_or_array_creation_expression1753);
                    primary_expression170=primary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression170.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, primary_or_array_creation_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary_or_array_creation_expression"

    public static class array_creation_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_creation_expression"
    // mypackage/cs.g:241:1: array_creation_expression : 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) ;
    public final csParser.array_creation_expression_return array_creation_expression() throws RecognitionException {
        csParser.array_creation_expression_return retval = new csParser.array_creation_expression_return();
        retval.start = input.LT(1);
        int array_creation_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal171=null;
        Token char_literal173=null;
        Token char_literal175=null;
        csParser.type_return type172 = null;

        csParser.expression_list_return expression_list174 = null;

        csParser.rank_specifiers_return rank_specifiers176 = null;

        csParser.array_initializer_return array_initializer177 = null;

        csParser.arguments_return arguments178 = null;

        csParser.invocation_part_return invocation_part179 = null;

        csParser.invocation_part_return invocation_part180 = null;

        csParser.arguments_return arguments181 = null;

        csParser.array_initializer_return array_initializer182 = null;

        csParser.rank_specifier_return rank_specifier183 = null;

        csParser.array_initializer_return array_initializer184 = null;


        CommonTree string_literal171_tree=null;
        CommonTree char_literal173_tree=null;
        CommonTree char_literal175_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // mypackage/cs.g:241:26: ( 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) )
            // mypackage/cs.g:242:2: 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal171=(Token)match(input,77,FOLLOW_77_in_array_creation_expression1764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal171_tree = (CommonTree)adaptor.create(string_literal171);
            adaptor.addChild(root_0, string_literal171_tree);
            }
            // mypackage/cs.g:243:3: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
            int alt52=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 74:
            case 91:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt52=1;
                }
                break;
            case 95:
                {
                alt52=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // mypackage/cs.g:243:4: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
                    {
                    pushFollow(FOLLOW_type_in_array_creation_expression1772);
                    type172=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type172.getTree());
                    // mypackage/cs.g:243:11: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
                    int alt51=2;
                    switch ( input.LA(1) ) {
                    case 95:
                        {
                        alt51=1;
                        }
                        break;
                    case 71:
                        {
                        alt51=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 0, input);

                        throw nvae;
                    }

                    switch (alt51) {
                        case 1 :
                            // mypackage/cs.g:243:12: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
                            {
                            char_literal173=(Token)match(input,95,FOLLOW_95_in_array_creation_expression1777); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal173_tree = (CommonTree)adaptor.create(char_literal173);
                            adaptor.addChild(root_0, char_literal173_tree);
                            }
                            pushFollow(FOLLOW_expression_list_in_array_creation_expression1781);
                            expression_list174=expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list174.getTree());
                            char_literal175=(Token)match(input,96,FOLLOW_96_in_array_creation_expression1785); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal175_tree = (CommonTree)adaptor.create(char_literal175);
                            adaptor.addChild(root_0, char_literal175_tree);
                            }
                            // mypackage/cs.g:244:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
                            int alt50=2;
                            alt50 = dfa50.predict(input);
                            switch (alt50) {
                                case 1 :
                                    // mypackage/cs.g:244:8: ( rank_specifiers )? ( array_initializer )?
                                    {
                                    // mypackage/cs.g:244:8: ( rank_specifiers )?
                                    int alt47=2;
                                    switch ( input.LA(1) ) {
                                        case 95:
                                            {
                                            alt47=1;
                                            }
                                            break;
                                    }

                                    switch (alt47) {
                                        case 1 :
                                            // mypackage/cs.g:0:0: rank_specifiers
                                            {
                                            pushFollow(FOLLOW_rank_specifiers_in_array_creation_expression1797);
                                            rank_specifiers176=rank_specifiers();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers176.getTree());

                                            }
                                            break;

                                    }

                                    // mypackage/cs.g:244:27: ( array_initializer )?
                                    int alt48=2;
                                    switch ( input.LA(1) ) {
                                        case 71:
                                            {
                                            alt48=1;
                                            }
                                            break;
                                    }

                                    switch (alt48) {
                                        case 1 :
                                            // mypackage/cs.g:0:0: array_initializer
                                            {
                                            pushFollow(FOLLOW_array_initializer_in_array_creation_expression1802);
                                            array_initializer177=array_initializer();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer177.getTree());

                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // mypackage/cs.g:246:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
                                    {
                                    // mypackage/cs.g:246:8: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
                                    loop49:
                                    do {
                                        int alt49=3;
                                        switch ( input.LA(1) ) {
                                        case 97:
                                            {
                                            int LA49_1 = input.LA(2);

                                            if ( (synpred108_cs()) ) {
                                                alt49=1;
                                            }


                                            }
                                            break;
                                        case DOT:
                                        case PTR:
                                        case 95:
                                            {
                                            alt49=2;
                                            }
                                            break;

                                        }

                                        switch (alt49) {
                                    	case 1 :
                                    	    // mypackage/cs.g:246:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
                                    	    {
                                    	    // mypackage/cs.g:246:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
                                    	    // mypackage/cs.g:246:11: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
                                    	    {
                                    	    pushFollow(FOLLOW_arguments_in_array_creation_expression1838);
                                    	    arguments178=arguments();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments178.getTree());
                                    	    pushFollow(FOLLOW_invocation_part_in_array_creation_expression1842);
                                    	    invocation_part179=invocation_part();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part179.getTree());

                                    	    }


                                    	    }
                                    	    break;
                                    	case 2 :
                                    	    // mypackage/cs.g:247:10: invocation_part
                                    	    {
                                    	    pushFollow(FOLLOW_invocation_part_in_array_creation_expression1854);
                                    	    invocation_part180=invocation_part();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part180.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop49;
                                        }
                                    } while (true);

                                    pushFollow(FOLLOW_arguments_in_array_creation_expression1860);
                                    arguments181=arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments181.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:249:7: array_initializer
                            {
                            pushFollow(FOLLOW_array_initializer_in_array_creation_expression1882);
                            array_initializer182=array_initializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer182.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:251:5: rank_specifier ( array_initializer )
                    {
                    pushFollow(FOLLOW_rank_specifier_in_array_creation_expression1896);
                    rank_specifier183=rank_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifier183.getTree());
                    // mypackage/cs.g:252:4: ( array_initializer )
                    // mypackage/cs.g:252:5: array_initializer
                    {
                    pushFollow(FOLLOW_array_initializer_in_array_creation_expression1905);
                    array_initializer184=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer184.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, array_creation_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression"

    public static class array_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_initializer"
    // mypackage/cs.g:255:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
    public final csParser.array_initializer_return array_initializer() throws RecognitionException {
        csParser.array_initializer_return retval = new csParser.array_initializer_return();
        retval.start = input.LT(1);
        int array_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal185=null;
        Token char_literal187=null;
        Token char_literal188=null;
        csParser.variable_initializer_list_return variable_initializer_list186 = null;


        CommonTree char_literal185_tree=null;
        CommonTree char_literal187_tree=null;
        CommonTree char_literal188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // mypackage/cs.g:255:18: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
            // mypackage/cs.g:256:2: '{' ( variable_initializer_list )? ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal185=(Token)match(input,71,FOLLOW_71_in_array_initializer1926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal185_tree = (CommonTree)adaptor.create(char_literal185);
            adaptor.addChild(root_0, char_literal185_tree);
            }
            // mypackage/cs.g:256:8: ( variable_initializer_list )?
            int alt53=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 71:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt53=1;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // mypackage/cs.g:0:0: variable_initializer_list
                    {
                    pushFollow(FOLLOW_variable_initializer_list_in_array_initializer1930);
                    variable_initializer_list186=variable_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer_list186.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:256:37: ( ',' )?
            int alt54=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt54=1;
                    }
                    break;
            }

            switch (alt54) {
                case 1 :
                    // mypackage/cs.g:0:0: ','
                    {
                    char_literal187=(Token)match(input,98,FOLLOW_98_in_array_initializer1935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal187_tree = (CommonTree)adaptor.create(char_literal187);
                    adaptor.addChild(root_0, char_literal187_tree);
                    }

                    }
                    break;

            }

            char_literal188=(Token)match(input,72,FOLLOW_72_in_array_initializer1940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal188_tree = (CommonTree)adaptor.create(char_literal188);
            adaptor.addChild(root_0, char_literal188_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, array_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "array_initializer"

    public static class variable_initializer_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_initializer_list"
    // mypackage/cs.g:257:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
    public final csParser.variable_initializer_list_return variable_initializer_list() throws RecognitionException {
        csParser.variable_initializer_list_return retval = new csParser.variable_initializer_list_return();
        retval.start = input.LT(1);
        int variable_initializer_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal190=null;
        csParser.variable_initializer_return variable_initializer189 = null;

        csParser.variable_initializer_return variable_initializer191 = null;


        CommonTree char_literal190_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // mypackage/cs.g:257:26: ( variable_initializer ( ',' variable_initializer )* )
            // mypackage/cs.g:258:2: variable_initializer ( ',' variable_initializer )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list1948);
            variable_initializer189=variable_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer189.getTree());
            // mypackage/cs.g:258:23: ( ',' variable_initializer )*
            loop55:
            do {
                int alt55=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case IDENTIFIER:
                    case Real_literal:
                    case NUMBER:
                    case Hex_number:
                    case Character_literal:
                    case StringLITERAL:
                    case Verbatim_String_literal:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case MINUS:
                    case 71:
                    case 74:
                    case 77:
                    case 92:
                    case 94:
                    case 97:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 109:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 126:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                        {
                        alt55=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // mypackage/cs.g:258:24: ',' variable_initializer
            	    {
            	    char_literal190=(Token)match(input,98,FOLLOW_98_in_variable_initializer_list1951); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal190_tree = (CommonTree)adaptor.create(char_literal190);
            	    adaptor.addChild(root_0, char_literal190_tree);
            	    }
            	    pushFollow(FOLLOW_variable_initializer_in_variable_initializer_list1953);
            	    variable_initializer191=variable_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer191.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, variable_initializer_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list"

    public static class variable_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_initializer"
    // mypackage/cs.g:259:1: variable_initializer : ( expression | array_initializer );
    public final csParser.variable_initializer_return variable_initializer() throws RecognitionException {
        csParser.variable_initializer_return retval = new csParser.variable_initializer_return();
        retval.start = input.LT(1);
        int variable_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression192 = null;

        csParser.array_initializer_return array_initializer193 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // mypackage/cs.g:259:21: ( expression | array_initializer )
            int alt56=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 74:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt56=1;
                }
                break;
            case 71:
                {
                alt56=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // mypackage/cs.g:260:2: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variable_initializer1963);
                    expression192=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression192.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:260:15: array_initializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_array_initializer_in_variable_initializer1967);
                    array_initializer193=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer193.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, variable_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_initializer"

    public static class sizeof_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sizeof_expression"
    // mypackage/cs.g:261:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
    public final csParser.sizeof_expression_return sizeof_expression() throws RecognitionException {
        csParser.sizeof_expression_return retval = new csParser.sizeof_expression_return();
        retval.start = input.LT(1);
        int sizeof_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal194=null;
        Token char_literal195=null;
        Token char_literal197=null;
        csParser.unmanaged_type_return unmanaged_type196 = null;


        CommonTree string_literal194_tree=null;
        CommonTree char_literal195_tree=null;
        CommonTree char_literal197_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // mypackage/cs.g:261:18: ( 'sizeof' '(' unmanaged_type ')' )
            // mypackage/cs.g:262:2: 'sizeof' '(' unmanaged_type ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal194=(Token)match(input,102,FOLLOW_102_in_sizeof_expression1975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal194_tree = (CommonTree)adaptor.create(string_literal194);
            adaptor.addChild(root_0, string_literal194_tree);
            }
            char_literal195=(Token)match(input,97,FOLLOW_97_in_sizeof_expression1979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal195_tree = (CommonTree)adaptor.create(char_literal195);
            adaptor.addChild(root_0, char_literal195_tree);
            }
            pushFollow(FOLLOW_unmanaged_type_in_sizeof_expression1983);
            unmanaged_type196=unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unmanaged_type196.getTree());
            char_literal197=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sizeof_expression1987); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal197_tree = (CommonTree)adaptor.create(char_literal197);
            adaptor.addChild(root_0, char_literal197_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, sizeof_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sizeof_expression"

    public static class checked_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "checked_expression"
    // mypackage/cs.g:263:1: checked_expression : 'checked' '(' expression ')' ;
    public final csParser.checked_expression_return checked_expression() throws RecognitionException {
        csParser.checked_expression_return retval = new csParser.checked_expression_return();
        retval.start = input.LT(1);
        int checked_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal198=null;
        Token char_literal199=null;
        Token char_literal201=null;
        csParser.expression_return expression200 = null;


        CommonTree string_literal198_tree=null;
        CommonTree char_literal199_tree=null;
        CommonTree char_literal201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // mypackage/cs.g:263:19: ( 'checked' '(' expression ')' )
            // mypackage/cs.g:264:2: 'checked' '(' expression ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal198=(Token)match(input,103,FOLLOW_103_in_checked_expression1995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal198_tree = (CommonTree)adaptor.create(string_literal198);
            adaptor.addChild(root_0, string_literal198_tree);
            }
            char_literal199=(Token)match(input,97,FOLLOW_97_in_checked_expression1999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal199_tree = (CommonTree)adaptor.create(char_literal199);
            adaptor.addChild(root_0, char_literal199_tree);
            }
            pushFollow(FOLLOW_expression_in_checked_expression2003);
            expression200=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression200.getTree());
            char_literal201=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_checked_expression2007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal201_tree = (CommonTree)adaptor.create(char_literal201);
            adaptor.addChild(root_0, char_literal201_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, checked_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "checked_expression"

    public static class unchecked_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unchecked_expression"
    // mypackage/cs.g:265:1: unchecked_expression : 'unchecked' '(' expression ')' ;
    public final csParser.unchecked_expression_return unchecked_expression() throws RecognitionException {
        csParser.unchecked_expression_return retval = new csParser.unchecked_expression_return();
        retval.start = input.LT(1);
        int unchecked_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal202=null;
        Token char_literal203=null;
        Token char_literal205=null;
        csParser.expression_return expression204 = null;


        CommonTree string_literal202_tree=null;
        CommonTree char_literal203_tree=null;
        CommonTree char_literal205_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // mypackage/cs.g:265:21: ( 'unchecked' '(' expression ')' )
            // mypackage/cs.g:266:2: 'unchecked' '(' expression ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal202=(Token)match(input,104,FOLLOW_104_in_unchecked_expression2016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal202_tree = (CommonTree)adaptor.create(string_literal202);
            adaptor.addChild(root_0, string_literal202_tree);
            }
            char_literal203=(Token)match(input,97,FOLLOW_97_in_unchecked_expression2020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal203_tree = (CommonTree)adaptor.create(char_literal203);
            adaptor.addChild(root_0, char_literal203_tree);
            }
            pushFollow(FOLLOW_expression_in_unchecked_expression2024);
            expression204=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression204.getTree());
            char_literal205=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unchecked_expression2028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal205_tree = (CommonTree)adaptor.create(char_literal205);
            adaptor.addChild(root_0, char_literal205_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, unchecked_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unchecked_expression"

    public static class default_value_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_value_expression"
    // mypackage/cs.g:267:1: default_value_expression : 'default' '(' type ')' ;
    public final csParser.default_value_expression_return default_value_expression() throws RecognitionException {
        csParser.default_value_expression_return retval = new csParser.default_value_expression_return();
        retval.start = input.LT(1);
        int default_value_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal206=null;
        Token char_literal207=null;
        Token char_literal209=null;
        csParser.type_return type208 = null;


        CommonTree string_literal206_tree=null;
        CommonTree char_literal207_tree=null;
        CommonTree char_literal209_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // mypackage/cs.g:267:25: ( 'default' '(' type ')' )
            // mypackage/cs.g:268:2: 'default' '(' type ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal206=(Token)match(input,105,FOLLOW_105_in_default_value_expression2037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal206_tree = (CommonTree)adaptor.create(string_literal206);
            adaptor.addChild(root_0, string_literal206_tree);
            }
            char_literal207=(Token)match(input,97,FOLLOW_97_in_default_value_expression2041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal207_tree = (CommonTree)adaptor.create(char_literal207);
            adaptor.addChild(root_0, char_literal207_tree);
            }
            pushFollow(FOLLOW_type_in_default_value_expression2045);
            type208=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type208.getTree());
            char_literal209=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_default_value_expression2049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal209_tree = (CommonTree)adaptor.create(char_literal209);
            adaptor.addChild(root_0, char_literal209_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, default_value_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "default_value_expression"

    public static class anonymous_method_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_method_expression"
    // mypackage/cs.g:269:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
    public final csParser.anonymous_method_expression_return anonymous_method_expression() throws RecognitionException {
        csParser.anonymous_method_expression_return retval = new csParser.anonymous_method_expression_return();
        retval.start = input.LT(1);
        int anonymous_method_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal210=null;
        csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature211 = null;

        csParser.block_return block212 = null;


        CommonTree string_literal210_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // mypackage/cs.g:269:28: ( 'delegate' ( explicit_anonymous_function_signature )? block )
            // mypackage/cs.g:270:2: 'delegate' ( explicit_anonymous_function_signature )? block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal210=(Token)match(input,106,FOLLOW_106_in_anonymous_method_expression2057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal210_tree = (CommonTree)adaptor.create(string_literal210);
            adaptor.addChild(root_0, string_literal210_tree);
            }
            // mypackage/cs.g:270:15: ( explicit_anonymous_function_signature )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 97:
                    {
                    alt57=1;
                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // mypackage/cs.g:0:0: explicit_anonymous_function_signature
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2061);
                    explicit_anonymous_function_signature211=explicit_anonymous_function_signature();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_signature211.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_anonymous_method_expression2066);
            block212=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block212.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, anonymous_method_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_method_expression"

    public static class explicit_anonymous_function_signature_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_anonymous_function_signature"
    // mypackage/cs.g:271:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
    public final csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() throws RecognitionException {
        csParser.explicit_anonymous_function_signature_return retval = new csParser.explicit_anonymous_function_signature_return();
        retval.start = input.LT(1);
        int explicit_anonymous_function_signature_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal213=null;
        Token char_literal215=null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list214 = null;


        CommonTree char_literal213_tree=null;
        CommonTree char_literal215_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // mypackage/cs.g:271:38: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
            // mypackage/cs.g:272:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal213=(Token)match(input,97,FOLLOW_97_in_explicit_anonymous_function_signature2073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal213_tree = (CommonTree)adaptor.create(char_literal213);
            adaptor.addChild(root_0, char_literal213_tree);
            }
            // mypackage/cs.g:272:8: ( explicit_anonymous_function_parameter_list )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 91:
                case 100:
                case 101:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // mypackage/cs.g:0:0: explicit_anonymous_function_parameter_list
                    {
                    pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2077);
                    explicit_anonymous_function_parameter_list214=explicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter_list214.getTree());

                    }
                    break;

            }

            char_literal215=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_explicit_anonymous_function_signature2082); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal215_tree = (CommonTree)adaptor.create(char_literal215);
            adaptor.addChild(root_0, char_literal215_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, explicit_anonymous_function_signature_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_signature"

    public static class explicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // mypackage/cs.g:273:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
    public final csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() throws RecognitionException {
        csParser.explicit_anonymous_function_parameter_list_return retval = new csParser.explicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);
        int explicit_anonymous_function_parameter_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal217=null;
        csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter216 = null;

        csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter218 = null;


        CommonTree char_literal217_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // mypackage/cs.g:273:43: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
            // mypackage/cs.g:274:2: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2090);
            explicit_anonymous_function_parameter216=explicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter216.getTree());
            // mypackage/cs.g:274:42: ( ',' explicit_anonymous_function_parameter )*
            loop59:
            do {
                int alt59=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt59=1;
                    }
                    break;

                }

                switch (alt59) {
            	case 1 :
            	    // mypackage/cs.g:274:43: ',' explicit_anonymous_function_parameter
            	    {
            	    char_literal217=(Token)match(input,98,FOLLOW_98_in_explicit_anonymous_function_parameter_list2095); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal217_tree = (CommonTree)adaptor.create(char_literal217);
            	    adaptor.addChild(root_0, char_literal217_tree);
            	    }
            	    pushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2099);
            	    explicit_anonymous_function_parameter218=explicit_anonymous_function_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter218.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, explicit_anonymous_function_parameter_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"

    public static class explicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_anonymous_function_parameter"
    // mypackage/cs.g:275:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
    public final csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() throws RecognitionException {
        csParser.explicit_anonymous_function_parameter_return retval = new csParser.explicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);
        int explicit_anonymous_function_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier219 = null;

        csParser.type_return type220 = null;

        csParser.identifier_return identifier221 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // mypackage/cs.g:275:38: ( ( anonymous_function_parameter_modifier )? type identifier )
            // mypackage/cs.g:276:2: ( anonymous_function_parameter_modifier )? type identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:276:2: ( anonymous_function_parameter_modifier )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 100:
                case 101:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // mypackage/cs.g:0:0: anonymous_function_parameter_modifier
                    {
                    pushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2110);
                    anonymous_function_parameter_modifier219=anonymous_function_parameter_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_parameter_modifier219.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter2115);
            type220=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type220.getTree());
            pushFollow(FOLLOW_identifier_in_explicit_anonymous_function_parameter2119);
            identifier221=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier221.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, explicit_anonymous_function_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter"

    public static class anonymous_function_parameter_modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_function_parameter_modifier"
    // mypackage/cs.g:277:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
    public final csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() throws RecognitionException {
        csParser.anonymous_function_parameter_modifier_return retval = new csParser.anonymous_function_parameter_modifier_return();
        retval.start = input.LT(1);
        int anonymous_function_parameter_modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set222=null;

        CommonTree set222_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // mypackage/cs.g:277:38: ( 'ref' | 'out' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set222=(Token)input.LT(1);
            if ( (input.LA(1)>=100 && input.LA(1)<=101) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set222));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, anonymous_function_parameter_modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_parameter_modifier"

    public static class object_creation_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_creation_expression"
    // mypackage/cs.g:282:1: object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
    public final csParser.object_creation_expression_return object_creation_expression() throws RecognitionException {
        csParser.object_creation_expression_return retval = new csParser.object_creation_expression_return();
        retval.start = input.LT(1);
        int object_creation_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal224=null;
        Token char_literal226=null;
        csParser.type_return type223 = null;

        csParser.argument_list_return argument_list225 = null;

        csParser.object_or_collection_initializer_return object_or_collection_initializer227 = null;

        csParser.object_or_collection_initializer_return object_or_collection_initializer228 = null;


        CommonTree char_literal224_tree=null;
        CommonTree char_literal226_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // mypackage/cs.g:282:27: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
            // mypackage/cs.g:284:2: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_object_creation_expression2143);
            type223=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type223.getTree());
            // mypackage/cs.g:285:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            int alt63=2;
            switch ( input.LA(1) ) {
            case 97:
                {
                alt63=1;
                }
                break;
            case 71:
                {
                alt63=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // mypackage/cs.g:285:5: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
                    {
                    char_literal224=(Token)match(input,97,FOLLOW_97_in_object_creation_expression2152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal224_tree = (CommonTree)adaptor.create(char_literal224);
                    adaptor.addChild(root_0, char_literal224_tree);
                    }
                    // mypackage/cs.g:285:11: ( argument_list )?
                    int alt61=2;
                    switch ( input.LA(1) ) {
                        case IDENTIFIER:
                        case Real_literal:
                        case NUMBER:
                        case Hex_number:
                        case Character_literal:
                        case StringLITERAL:
                        case Verbatim_String_literal:
                        case TRUE:
                        case FALSE:
                        case NULL:
                        case MINUS:
                        case 74:
                        case 77:
                        case 92:
                        case 94:
                        case 97:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 109:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 126:
                        case 141:
                        case 142:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 159:
                        case 160:
                        case 161:
                        case 163:
                        case 166:
                        case 167:
                        case 168:
                        case 169:
                        case 170:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 179:
                        case 186:
                        case 187:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                            {
                            alt61=1;
                            }
                            break;
                    }

                    switch (alt61) {
                        case 1 :
                            // mypackage/cs.g:0:0: argument_list
                            {
                            pushFollow(FOLLOW_argument_list_in_object_creation_expression2156);
                            argument_list225=argument_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_list225.getTree());

                            }
                            break;

                    }

                    char_literal226=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_object_creation_expression2161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal226_tree = (CommonTree)adaptor.create(char_literal226);
                    adaptor.addChild(root_0, char_literal226_tree);
                    }
                    // mypackage/cs.g:285:34: ( object_or_collection_initializer )?
                    int alt62=2;
                    switch ( input.LA(1) ) {
                        case 71:
                            {
                            alt62=1;
                            }
                            break;
                    }

                    switch (alt62) {
                        case 1 :
                            // mypackage/cs.g:0:0: object_or_collection_initializer
                            {
                            pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2165);
                            object_or_collection_initializer227=object_or_collection_initializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer227.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:286:7: object_or_collection_initializer
                    {
                    pushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression2176);
                    object_or_collection_initializer228=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer228.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, object_creation_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression"

    public static class object_or_collection_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_or_collection_initializer"
    // mypackage/cs.g:288:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
    public final csParser.object_or_collection_initializer_return object_or_collection_initializer() throws RecognitionException {
        csParser.object_or_collection_initializer_return retval = new csParser.object_or_collection_initializer_return();
        retval.start = input.LT(1);
        int object_or_collection_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal229=null;
        csParser.object_initializer_return object_initializer230 = null;

        csParser.collection_initializer_return collection_initializer231 = null;


        CommonTree char_literal229_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // mypackage/cs.g:288:33: ( '{' ( object_initializer | collection_initializer ) )
            // mypackage/cs.g:289:2: '{' ( object_initializer | collection_initializer )
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal229=(Token)match(input,71,FOLLOW_71_in_object_or_collection_initializer2188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal229_tree = (CommonTree)adaptor.create(char_literal229);
            adaptor.addChild(root_0, char_literal229_tree);
            }
            // mypackage/cs.g:289:7: ( object_initializer | collection_initializer )
            int alt64=2;
            switch ( input.LA(1) ) {
            case 142:
                {
                switch ( input.LA(2) ) {
                case IDENTIFIER:
                case DOT:
                case PTR:
                case MINUS:
                case GT:
                case 72:
                case 74:
                case 91:
                case 93:
                case 95:
                case 97:
                case 98:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt64=2;
                    }
                    break;
                case 75:
                    {
                    alt64=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;
                }

                }
                break;
            case 72:
            case 98:
                {
                alt64=1;
                }
                break;
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 71:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
                {
                alt64=2;
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                switch ( input.LA(2) ) {
                case DOT:
                case PTR:
                case MINUS:
                case GT:
                case 72:
                case 93:
                case 95:
                case 97:
                case 98:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                    {
                    alt64=2;
                    }
                    break;
                case 75:
                    {
                    alt64=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 4, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }

            switch (alt64) {
                case 1 :
                    // mypackage/cs.g:289:8: object_initializer
                    {
                    pushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer2192);
                    object_initializer230=object_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_initializer230.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:290:5: collection_initializer
                    {
                    pushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer2199);
                    collection_initializer231=collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, collection_initializer231.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, object_or_collection_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_or_collection_initializer"

    public static class collection_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_initializer"
    // mypackage/cs.g:291:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
    public final csParser.collection_initializer_return collection_initializer() throws RecognitionException {
        csParser.collection_initializer_return retval = new csParser.collection_initializer_return();
        retval.start = input.LT(1);
        int collection_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal233=null;
        Token char_literal234=null;
        csParser.element_initializer_list_return element_initializer_list232 = null;


        CommonTree char_literal233_tree=null;
        CommonTree char_literal234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // mypackage/cs.g:291:23: ( element_initializer_list ( ',' )? '}' )
            // mypackage/cs.g:292:2: element_initializer_list ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_element_initializer_list_in_collection_initializer2209);
            element_initializer_list232=element_initializer_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer_list232.getTree());
            // mypackage/cs.g:292:29: ( ',' )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // mypackage/cs.g:0:0: ','
                    {
                    char_literal233=(Token)match(input,98,FOLLOW_98_in_collection_initializer2213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal233_tree = (CommonTree)adaptor.create(char_literal233);
                    adaptor.addChild(root_0, char_literal233_tree);
                    }

                    }
                    break;

            }

            char_literal234=(Token)match(input,72,FOLLOW_72_in_collection_initializer2218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal234_tree = (CommonTree)adaptor.create(char_literal234);
            adaptor.addChild(root_0, char_literal234_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, collection_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_initializer"

    public static class element_initializer_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_initializer_list"
    // mypackage/cs.g:293:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
    public final csParser.element_initializer_list_return element_initializer_list() throws RecognitionException {
        csParser.element_initializer_list_return retval = new csParser.element_initializer_list_return();
        retval.start = input.LT(1);
        int element_initializer_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal236=null;
        csParser.element_initializer_return element_initializer235 = null;

        csParser.element_initializer_return element_initializer237 = null;


        CommonTree char_literal236_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // mypackage/cs.g:293:25: ( element_initializer ( ',' element_initializer )* )
            // mypackage/cs.g:294:2: element_initializer ( ',' element_initializer )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_element_initializer_in_element_initializer_list2227);
            element_initializer235=element_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer235.getTree());
            // mypackage/cs.g:294:23: ( ',' element_initializer )*
            loop66:
            do {
                int alt66=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case IDENTIFIER:
                    case Real_literal:
                    case NUMBER:
                    case Hex_number:
                    case Character_literal:
                    case StringLITERAL:
                    case Verbatim_String_literal:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case MINUS:
                    case 71:
                    case 74:
                    case 77:
                    case 92:
                    case 94:
                    case 97:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 109:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 126:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                        {
                        alt66=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt66) {
            	case 1 :
            	    // mypackage/cs.g:294:24: ',' element_initializer
            	    {
            	    char_literal236=(Token)match(input,98,FOLLOW_98_in_element_initializer_list2231); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal236_tree = (CommonTree)adaptor.create(char_literal236);
            	    adaptor.addChild(root_0, char_literal236_tree);
            	    }
            	    pushFollow(FOLLOW_element_initializer_in_element_initializer_list2233);
            	    element_initializer237=element_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_initializer237.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, element_initializer_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element_initializer_list"

    public static class element_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element_initializer"
    // mypackage/cs.g:295:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
    public final csParser.element_initializer_return element_initializer() throws RecognitionException {
        csParser.element_initializer_return retval = new csParser.element_initializer_return();
        retval.start = input.LT(1);
        int element_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal239=null;
        Token char_literal241=null;
        csParser.non_assignment_expression_return non_assignment_expression238 = null;

        csParser.expression_list_return expression_list240 = null;


        CommonTree char_literal239_tree=null;
        CommonTree char_literal241_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // mypackage/cs.g:295:20: ( non_assignment_expression | '{' expression_list '}' )
            int alt67=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 74:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt67=1;
                }
                break;
            case 71:
                {
                alt67=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // mypackage/cs.g:296:2: non_assignment_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_non_assignment_expression_in_element_initializer2244);
                    non_assignment_expression238=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression238.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:297:4: '{' expression_list '}'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal239=(Token)match(input,71,FOLLOW_71_in_element_initializer2250); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal239_tree = (CommonTree)adaptor.create(char_literal239);
                    adaptor.addChild(root_0, char_literal239_tree);
                    }
                    pushFollow(FOLLOW_expression_list_in_element_initializer2254);
                    expression_list240=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list240.getTree());
                    char_literal241=(Token)match(input,72,FOLLOW_72_in_element_initializer2258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal241_tree = (CommonTree)adaptor.create(char_literal241);
                    adaptor.addChild(root_0, char_literal241_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, element_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "element_initializer"

    public static class object_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_initializer"
    // mypackage/cs.g:304:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
    public final csParser.object_initializer_return object_initializer() throws RecognitionException {
        csParser.object_initializer_return retval = new csParser.object_initializer_return();
        retval.start = input.LT(1);
        int object_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal243=null;
        Token char_literal244=null;
        csParser.member_initializer_list_return member_initializer_list242 = null;


        CommonTree char_literal243_tree=null;
        CommonTree char_literal244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // mypackage/cs.g:304:19: ( ( member_initializer_list )? ( ',' )? '}' )
            // mypackage/cs.g:305:2: ( member_initializer_list )? ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:305:2: ( member_initializer_list )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // mypackage/cs.g:0:0: member_initializer_list
                    {
                    pushFollow(FOLLOW_member_initializer_list_in_object_initializer2273);
                    member_initializer_list242=member_initializer_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer_list242.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:305:29: ( ',' )?
            int alt69=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt69=1;
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // mypackage/cs.g:0:0: ','
                    {
                    char_literal243=(Token)match(input,98,FOLLOW_98_in_object_initializer2278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal243_tree = (CommonTree)adaptor.create(char_literal243);
                    adaptor.addChild(root_0, char_literal243_tree);
                    }

                    }
                    break;

            }

            char_literal244=(Token)match(input,72,FOLLOW_72_in_object_initializer2283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal244_tree = (CommonTree)adaptor.create(char_literal244);
            adaptor.addChild(root_0, char_literal244_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, object_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_initializer"

    public static class member_initializer_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "member_initializer_list"
    // mypackage/cs.g:306:1: member_initializer_list : member_initializer ( ',' member_initializer ) ;
    public final csParser.member_initializer_list_return member_initializer_list() throws RecognitionException {
        csParser.member_initializer_list_return retval = new csParser.member_initializer_list_return();
        retval.start = input.LT(1);
        int member_initializer_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal246=null;
        csParser.member_initializer_return member_initializer245 = null;

        csParser.member_initializer_return member_initializer247 = null;


        CommonTree char_literal246_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // mypackage/cs.g:306:24: ( member_initializer ( ',' member_initializer ) )
            // mypackage/cs.g:307:2: member_initializer ( ',' member_initializer )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_member_initializer_in_member_initializer_list2292);
            member_initializer245=member_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer245.getTree());
            // mypackage/cs.g:307:22: ( ',' member_initializer )
            // mypackage/cs.g:307:23: ',' member_initializer
            {
            char_literal246=(Token)match(input,98,FOLLOW_98_in_member_initializer_list2296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal246_tree = (CommonTree)adaptor.create(char_literal246);
            adaptor.addChild(root_0, char_literal246_tree);
            }
            pushFollow(FOLLOW_member_initializer_in_member_initializer_list2298);
            member_initializer247=member_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_initializer247.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, member_initializer_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "member_initializer_list"

    public static class member_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "member_initializer"
    // mypackage/cs.g:308:1: member_initializer : identifier '=' initializer_value ;
    public final csParser.member_initializer_return member_initializer() throws RecognitionException {
        csParser.member_initializer_return retval = new csParser.member_initializer_return();
        retval.start = input.LT(1);
        int member_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal249=null;
        csParser.identifier_return identifier248 = null;

        csParser.initializer_value_return initializer_value250 = null;


        CommonTree char_literal249_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // mypackage/cs.g:308:19: ( identifier '=' initializer_value )
            // mypackage/cs.g:309:2: identifier '=' initializer_value
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_member_initializer2308);
            identifier248=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier248.getTree());
            char_literal249=(Token)match(input,75,FOLLOW_75_in_member_initializer2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal249_tree = (CommonTree)adaptor.create(char_literal249);
            adaptor.addChild(root_0, char_literal249_tree);
            }
            pushFollow(FOLLOW_initializer_value_in_member_initializer2316);
            initializer_value250=initializer_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, initializer_value250.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, member_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "member_initializer"

    public static class initializer_value_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "initializer_value"
    // mypackage/cs.g:310:1: initializer_value : ( expression | object_or_collection_initializer );
    public final csParser.initializer_value_return initializer_value() throws RecognitionException {
        csParser.initializer_value_return retval = new csParser.initializer_value_return();
        retval.start = input.LT(1);
        int initializer_value_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression251 = null;

        csParser.object_or_collection_initializer_return object_or_collection_initializer252 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // mypackage/cs.g:310:18: ( expression | object_or_collection_initializer )
            int alt70=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 74:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt70=1;
                }
                break;
            case 71:
                {
                alt70=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }

            switch (alt70) {
                case 1 :
                    // mypackage/cs.g:311:2: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_initializer_value2325);
                    expression251=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression251.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:312:4: object_or_collection_initializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value2331);
                    object_or_collection_initializer252=object_or_collection_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_or_collection_initializer252.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, initializer_value_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "initializer_value"

    public static class typeof_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeof_expression"
    // mypackage/cs.g:316:1: typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
    public final csParser.typeof_expression_return typeof_expression() throws RecognitionException {
        csParser.typeof_expression_return retval = new csParser.typeof_expression_return();
        retval.start = input.LT(1);
        int typeof_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal253=null;
        Token char_literal254=null;
        Token string_literal257=null;
        Token char_literal258=null;
        csParser.unbound_type_name_return unbound_type_name255 = null;

        csParser.type_return type256 = null;


        CommonTree string_literal253_tree=null;
        CommonTree char_literal254_tree=null;
        CommonTree string_literal257_tree=null;
        CommonTree char_literal258_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // mypackage/cs.g:316:18: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
            // mypackage/cs.g:317:2: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal253=(Token)match(input,107,FOLLOW_107_in_typeof_expression2343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal253_tree = (CommonTree)adaptor.create(string_literal253);
            adaptor.addChild(root_0, string_literal253_tree);
            }
            char_literal254=(Token)match(input,97,FOLLOW_97_in_typeof_expression2347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal254_tree = (CommonTree)adaptor.create(char_literal254);
            adaptor.addChild(root_0, char_literal254_tree);
            }
            // mypackage/cs.g:317:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
            int alt71=3;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // mypackage/cs.g:317:20: ( unbound_type_name )=> unbound_type_name
                    {
                    pushFollow(FOLLOW_unbound_type_name_in_typeof_expression2358);
                    unbound_type_name255=unbound_type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name255.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:318:10: type
                    {
                    pushFollow(FOLLOW_type_in_typeof_expression2369);
                    type256=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type256.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:319:10: 'void'
                    {
                    string_literal257=(Token)match(input,91,FOLLOW_91_in_typeof_expression2381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal257_tree = (CommonTree)adaptor.create(string_literal257);
                    adaptor.addChild(root_0, string_literal257_tree);
                    }

                    }
                    break;

            }

            char_literal258=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression2386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal258_tree = (CommonTree)adaptor.create(char_literal258);
            adaptor.addChild(root_0, char_literal258_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, typeof_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeof_expression"

    public static class unbound_type_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unbound_type_name"
    // mypackage/cs.g:324:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
    public final csParser.unbound_type_name_return unbound_type_name() throws RecognitionException {
        csParser.unbound_type_name_return retval = new csParser.unbound_type_name_return();
        retval.start = input.LT(1);
        int unbound_type_name_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.unbound_type_name_start_return unbound_type_name_start259 = null;

        csParser.generic_dimension_specifier_return generic_dimension_specifier260 = null;

        csParser.unbound_type_name_part_return unbound_type_name_part261 = null;

        csParser.unbound_type_name_part_return unbound_type_name_part262 = null;

        csParser.generic_dimension_specifier_return generic_dimension_specifier263 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // mypackage/cs.g:324:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
            // mypackage/cs.g:326:2: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unbound_type_name_start_in_unbound_type_name2401);
            unbound_type_name_start259=unbound_type_name_start();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_start259.getTree());
            // mypackage/cs.g:327:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
            loop72:
            do {
                int alt72=3;
                alt72 = dfa72.predict(input);
                switch (alt72) {
            	case 1 :
            	    // mypackage/cs.g:327:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            	    {
            	    // mypackage/cs.g:327:4: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
            	    // mypackage/cs.g:327:5: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
            	    {
            	    pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2420);
            	    generic_dimension_specifier260=generic_dimension_specifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_dimension_specifier260.getTree());
            	    pushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name2424);
            	    unbound_type_name_part261=unbound_type_name_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_part261.getTree());

            	    }


            	    }
            	    break;
            	case 2 :
            	    // mypackage/cs.g:328:5: unbound_type_name_part
            	    {
            	    pushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name2431);
            	    unbound_type_name_part262=unbound_type_name_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unbound_type_name_part262.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            pushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name2441);
            generic_dimension_specifier263=generic_dimension_specifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_dimension_specifier263.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, unbound_type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name"

    public static class unbound_type_name_start_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unbound_type_name_start"
    // mypackage/cs.g:332:1: unbound_type_name_start : identifier ( '::' identifier )? ;
    public final csParser.unbound_type_name_start_return unbound_type_name_start() throws RecognitionException {
        csParser.unbound_type_name_start_return retval = new csParser.unbound_type_name_start_return();
        retval.start = input.LT(1);
        int unbound_type_name_start_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal265=null;
        csParser.identifier_return identifier264 = null;

        csParser.identifier_return identifier266 = null;


        CommonTree string_literal265_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // mypackage/cs.g:332:24: ( identifier ( '::' identifier )? )
            // mypackage/cs.g:333:2: identifier ( '::' identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_unbound_type_name_start2451);
            identifier264=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier264.getTree());
            // mypackage/cs.g:333:13: ( '::' identifier )?
            int alt73=2;
            switch ( input.LA(1) ) {
                case 93:
                    {
                    alt73=1;
                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // mypackage/cs.g:333:14: '::' identifier
                    {
                    string_literal265=(Token)match(input,93,FOLLOW_93_in_unbound_type_name_start2454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal265_tree = (CommonTree)adaptor.create(string_literal265);
                    adaptor.addChild(root_0, string_literal265_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_unbound_type_name_start2456);
                    identifier266=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier266.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, unbound_type_name_start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_start"

    public static class unbound_type_name_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unbound_type_name_part"
    // mypackage/cs.g:334:1: unbound_type_name_part : '.' identifier ;
    public final csParser.unbound_type_name_part_return unbound_type_name_part() throws RecognitionException {
        csParser.unbound_type_name_part_return retval = new csParser.unbound_type_name_part_return();
        retval.start = input.LT(1);
        int unbound_type_name_part_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal267=null;
        csParser.identifier_return identifier268 = null;


        CommonTree char_literal267_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // mypackage/cs.g:334:23: ( '.' identifier )
            // mypackage/cs.g:335:2: '.' identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal267=(Token)match(input,DOT,FOLLOW_DOT_in_unbound_type_name_part2465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal267_tree = (CommonTree)adaptor.create(char_literal267);
            adaptor.addChild(root_0, char_literal267_tree);
            }
            pushFollow(FOLLOW_identifier_in_unbound_type_name_part2469);
            identifier268=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier268.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, unbound_type_name_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_part"

    public static class generic_dimension_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "generic_dimension_specifier"
    // mypackage/cs.g:336:1: generic_dimension_specifier : '<' ( commas )? '>' ;
    public final csParser.generic_dimension_specifier_return generic_dimension_specifier() throws RecognitionException {
        csParser.generic_dimension_specifier_return retval = new csParser.generic_dimension_specifier_return();
        retval.start = input.LT(1);
        int generic_dimension_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal269=null;
        Token char_literal271=null;
        csParser.commas_return commas270 = null;


        CommonTree char_literal269_tree=null;
        CommonTree char_literal271_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // mypackage/cs.g:336:28: ( '<' ( commas )? '>' )
            // mypackage/cs.g:337:2: '<' ( commas )? '>'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal269=(Token)match(input,108,FOLLOW_108_in_generic_dimension_specifier2477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal269_tree = (CommonTree)adaptor.create(char_literal269);
            adaptor.addChild(root_0, char_literal269_tree);
            }
            // mypackage/cs.g:337:8: ( commas )?
            int alt74=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt74=1;
                    }
                    break;
            }

            switch (alt74) {
                case 1 :
                    // mypackage/cs.g:0:0: commas
                    {
                    pushFollow(FOLLOW_commas_in_generic_dimension_specifier2481);
                    commas270=commas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commas270.getTree());

                    }
                    break;

            }

            char_literal271=(Token)match(input,GT,FOLLOW_GT_in_generic_dimension_specifier2486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal271_tree = (CommonTree)adaptor.create(char_literal271);
            adaptor.addChild(root_0, char_literal271_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, generic_dimension_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "generic_dimension_specifier"

    public static class commas_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commas"
    // mypackage/cs.g:338:1: commas : ( ',' )+ ;
    public final csParser.commas_return commas() throws RecognitionException {
        csParser.commas_return retval = new csParser.commas_return();
        retval.start = input.LT(1);
        int commas_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal272=null;

        CommonTree char_literal272_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // mypackage/cs.g:338:7: ( ( ',' )+ )
            // mypackage/cs.g:339:2: ( ',' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:339:2: ( ',' )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt75=1;
                    }
                    break;

                }

                switch (alt75) {
            	case 1 :
            	    // mypackage/cs.g:0:0: ','
            	    {
            	    char_literal272=(Token)match(input,98,FOLLOW_98_in_commas2495); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal272_tree = (CommonTree)adaptor.create(char_literal272);
            	    adaptor.addChild(root_0, char_literal272_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, commas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commas"

    public static class type_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_name"
    // mypackage/cs.g:345:1: type_name : namespace_or_type_name ;
    public final csParser.type_name_return type_name() throws RecognitionException {
        csParser.type_name_return retval = new csParser.type_name_return();
        retval.start = input.LT(1);
        int type_name_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name273 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // mypackage/cs.g:345:10: ( namespace_or_type_name )
            // mypackage/cs.g:346:2: namespace_or_type_name
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_namespace_or_type_name_in_type_name2511);
            namespace_or_type_name273=namespace_or_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespace_or_type_name273.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_name"

    public static class namespace_or_type_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespace_or_type_name"
    // mypackage/cs.g:347:1: namespace_or_type_name : type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
    public final csParser.namespace_or_type_name_return namespace_or_type_name() throws RecognitionException {
        csParser.namespace_or_type_name_return retval = new csParser.namespace_or_type_name_return();
        retval.start = input.LT(1);
        int namespace_or_type_name_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal275=null;
        Token char_literal277=null;
        csParser.type_or_generic_return type_or_generic274 = null;

        csParser.type_or_generic_return type_or_generic276 = null;

        csParser.type_or_generic_return type_or_generic278 = null;


        CommonTree string_literal275_tree=null;
        CommonTree char_literal277_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // mypackage/cs.g:347:23: ( type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
            // mypackage/cs.g:348:3: type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name2519);
            type_or_generic274=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic274.getTree());
            // mypackage/cs.g:348:21: ( '::' type_or_generic )?
            int alt76=2;
            switch ( input.LA(1) ) {
                case 93:
                    {
                    alt76=1;
                    }
                    break;
            }

            switch (alt76) {
                case 1 :
                    // mypackage/cs.g:348:22: '::' type_or_generic
                    {
                    string_literal275=(Token)match(input,93,FOLLOW_93_in_namespace_or_type_name2524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal275_tree = (CommonTree)adaptor.create(string_literal275);
                    adaptor.addChild(root_0, string_literal275_tree);
                    }
                    pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name2526);
                    type_or_generic276=type_or_generic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic276.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:348:45: ( '.' type_or_generic )*
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case DOT:
                    {
                    switch ( input.LA(2) ) {
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt77=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // mypackage/cs.g:348:46: '.' type_or_generic
            	    {
            	    char_literal277=(Token)match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name2531); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal277_tree = (CommonTree)adaptor.create(char_literal277);
            	    adaptor.addChild(root_0, char_literal277_tree);
            	    }
            	    pushFollow(FOLLOW_type_or_generic_in_namespace_or_type_name2535);
            	    type_or_generic278=type_or_generic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic278.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, namespace_or_type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name"

    public static class type_or_generic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_or_generic"
    // mypackage/cs.g:349:1: type_or_generic : ( ( identifier '<' )=> identifier generic_argument_list -> identifier generic_argument_list | identifier -> identifier );
    public final csParser.type_or_generic_return type_or_generic() throws RecognitionException {
        csParser.type_or_generic_return retval = new csParser.type_or_generic_return();
        retval.start = input.LT(1);
        int type_or_generic_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.identifier_return identifier279 = null;

        csParser.generic_argument_list_return generic_argument_list280 = null;

        csParser.identifier_return identifier281 = null;


        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_generic_argument_list=new RewriteRuleSubtreeStream(adaptor,"rule generic_argument_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // mypackage/cs.g:349:16: ( ( identifier '<' )=> identifier generic_argument_list -> identifier generic_argument_list | identifier -> identifier )
            int alt78=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                int LA78_1 = input.LA(2);

                if ( (synpred141_cs()) ) {
                    alt78=1;
                }
                else if ( (true) ) {
                    alt78=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 78, 1, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // mypackage/cs.g:350:2: ( identifier '<' )=> identifier generic_argument_list
                    {
                    pushFollow(FOLLOW_identifier_in_type_or_generic2555);
                    identifier279=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier279.getTree());
                    pushFollow(FOLLOW_generic_argument_list_in_type_or_generic2559);
                    generic_argument_list280=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_generic_argument_list.add(generic_argument_list280.getTree());


                    // AST REWRITE
                    // elements: identifier, generic_argument_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 351:2: -> identifier generic_argument_list
                    {
                        adaptor.addChild(root_0, stream_identifier.nextTree());
                        adaptor.addChild(root_0, stream_generic_argument_list.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // mypackage/cs.g:352:4: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_type_or_generic2572);
                    identifier281=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier281.getTree());


                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 353:2: -> identifier
                    {
                        adaptor.addChild(root_0, stream_identifier.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, type_or_generic_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_or_generic"

    public static class qid_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qid"
    // mypackage/cs.g:356:1: qid : qid_start ( qid_part )* ;
    public final csParser.qid_return qid() throws RecognitionException {
        csParser.qid_return retval = new csParser.qid_return();
        retval.start = input.LT(1);
        int qid_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.qid_start_return qid_start282 = null;

        csParser.qid_part_return qid_part283 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // mypackage/cs.g:356:4: ( qid_start ( qid_part )* )
            // mypackage/cs.g:357:2: qid_start ( qid_part )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qid_start_in_qid2590);
            qid_start282=qid_start();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qid_start282.getTree());
            // mypackage/cs.g:357:14: ( qid_part )*
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case DOT:
                    {
                    switch ( input.LA(2) ) {
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt79=1;
                        }
                        break;

                    }

                    }
                    break;
                case PTR:
                    {
                    alt79=1;
                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // mypackage/cs.g:0:0: qid_part
            	    {
            	    pushFollow(FOLLOW_qid_part_in_qid2594);
            	    qid_part283=qid_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qid_part283.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, qid_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qid"

    public static class qid_start_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qid_start"
    // mypackage/cs.g:359:1: qid_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
    public final csParser.qid_start_return qid_start() throws RecognitionException {
        csParser.qid_start_return retval = new csParser.qid_start_return();
        retval.start = input.LT(1);
        int qid_start_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal288=null;
        csParser.predefined_type_return predefined_type284 = null;

        csParser.identifier_return identifier285 = null;

        csParser.generic_argument_list_return generic_argument_list286 = null;

        csParser.identifier_return identifier287 = null;

        csParser.identifier_return identifier289 = null;

        csParser.literal_return literal290 = null;


        CommonTree string_literal288_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // mypackage/cs.g:359:10: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
            int alt81=4;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
                {
                alt81=1;
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                int LA81_2 = input.LA(2);

                if ( ((LA81_2>=DOT && LA81_2<=PTR)||LA81_2==71||LA81_2==93||LA81_2==97) ) {
                    alt81=3;
                }
                else if ( (LA81_2==108) && (synpred144_cs())) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 2, input);

                    throw nvae;
                }
                }
                break;
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
                {
                alt81=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    // mypackage/cs.g:360:2: predefined_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_predefined_type_in_qid_start2604);
                    predefined_type284=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type284.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:361:4: ( identifier '<' )=> identifier generic_argument_list
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_qid_start2620);
                    identifier285=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier285.getTree());
                    pushFollow(FOLLOW_generic_argument_list_in_qid_start2624);
                    generic_argument_list286=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list286.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:364:4: identifier ( '::' identifier )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_qid_start2631);
                    identifier287=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier287.getTree());
                    // mypackage/cs.g:364:17: ( '::' identifier )?
                    int alt80=2;
                    switch ( input.LA(1) ) {
                        case 93:
                            {
                            alt80=1;
                            }
                            break;
                    }

                    switch (alt80) {
                        case 1 :
                            // mypackage/cs.g:364:18: '::' identifier
                            {
                            string_literal288=(Token)match(input,93,FOLLOW_93_in_qid_start2636); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal288_tree = (CommonTree)adaptor.create(string_literal288);
                            adaptor.addChild(root_0, string_literal288_tree);
                            }
                            pushFollow(FOLLOW_identifier_in_qid_start2640);
                            identifier289=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier289.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // mypackage/cs.g:365:4: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_qid_start2647);
                    literal290=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal290.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, qid_start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qid_start"

    public static class qid_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qid_part"
    // mypackage/cs.g:369:1: qid_part : access_identifier ;
    public final csParser.qid_part_return qid_part() throws RecognitionException {
        csParser.qid_part_return retval = new csParser.qid_part_return();
        retval.start = input.LT(1);
        int qid_part_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.access_identifier_return access_identifier291 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // mypackage/cs.g:369:9: ( access_identifier )
            // mypackage/cs.g:370:2: access_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_access_identifier_in_qid_part2661);
            access_identifier291=access_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier291.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, qid_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qid_part"

    public static class generic_argument_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "generic_argument_list"
    // mypackage/cs.g:372:1: generic_argument_list : '<' type_arguments '>' ;
    public final csParser.generic_argument_list_return generic_argument_list() throws RecognitionException {
        csParser.generic_argument_list_return retval = new csParser.generic_argument_list_return();
        retval.start = input.LT(1);
        int generic_argument_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal292=null;
        Token char_literal294=null;
        csParser.type_arguments_return type_arguments293 = null;


        CommonTree char_literal292_tree=null;
        CommonTree char_literal294_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // mypackage/cs.g:372:22: ( '<' type_arguments '>' )
            // mypackage/cs.g:373:2: '<' type_arguments '>'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal292=(Token)match(input,108,FOLLOW_108_in_generic_argument_list2671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal292_tree = (CommonTree)adaptor.create(char_literal292);
            adaptor.addChild(root_0, char_literal292_tree);
            }
            pushFollow(FOLLOW_type_arguments_in_generic_argument_list2675);
            type_arguments293=type_arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_arguments293.getTree());
            char_literal294=(Token)match(input,GT,FOLLOW_GT_in_generic_argument_list2679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal294_tree = (CommonTree)adaptor.create(char_literal294);
            adaptor.addChild(root_0, char_literal294_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, generic_argument_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "generic_argument_list"

    public static class type_arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_arguments"
    // mypackage/cs.g:374:1: type_arguments : type ( ',' type )* ;
    public final csParser.type_arguments_return type_arguments() throws RecognitionException {
        csParser.type_arguments_return retval = new csParser.type_arguments_return();
        retval.start = input.LT(1);
        int type_arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal296=null;
        csParser.type_return type295 = null;

        csParser.type_return type297 = null;


        CommonTree char_literal296_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // mypackage/cs.g:374:15: ( type ( ',' type )* )
            // mypackage/cs.g:375:2: type ( ',' type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_type_arguments2688);
            type295=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type295.getTree());
            // mypackage/cs.g:375:7: ( ',' type )*
            loop82:
            do {
                int alt82=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt82=1;
                    }
                    break;

                }

                switch (alt82) {
            	case 1 :
            	    // mypackage/cs.g:375:8: ',' type
            	    {
            	    char_literal296=(Token)match(input,98,FOLLOW_98_in_type_arguments2691); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal296_tree = (CommonTree)adaptor.create(char_literal296);
            	    adaptor.addChild(root_0, char_literal296_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_type_arguments2693);
            	    type297=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type297.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, type_arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_arguments"

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // mypackage/cs.g:377:1: type : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ );
    public final csParser.type_return type() throws RecognitionException {
        csParser.type_return retval = new csParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal301=null;
        Token char_literal304=null;
        Token char_literal305=null;
        Token string_literal308=null;
        Token char_literal309=null;
        csParser.predefined_type_return predefined_type298 = null;

        csParser.type_name_return type_name299 = null;

        csParser.rank_specifiers_return rank_specifiers300 = null;

        csParser.predefined_type_return predefined_type302 = null;

        csParser.type_name_return type_name303 = null;

        csParser.predefined_type_return predefined_type306 = null;

        csParser.type_name_return type_name307 = null;


        CommonTree char_literal301_tree=null;
        CommonTree char_literal304_tree=null;
        CommonTree char_literal305_tree=null;
        CommonTree string_literal308_tree=null;
        CommonTree char_literal309_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // mypackage/cs.g:377:5: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
            int alt90=4;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
                {
                int LA90_1 = input.LA(2);

                if ( (synpred149_cs()) ) {
                    alt90=1;
                }
                else if ( (synpred155_cs()) ) {
                    alt90=2;
                }
                else if ( (synpred160_cs()) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 1, input);

                    throw nvae;
                }
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                int LA90_2 = input.LA(2);

                if ( (synpred149_cs()) ) {
                    alt90=1;
                }
                else if ( (synpred155_cs()) ) {
                    alt90=2;
                }
                else if ( (synpred160_cs()) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 2, input);

                    throw nvae;
                }
                }
                break;
            case 91:
                {
                alt90=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // mypackage/cs.g:378:4: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // mypackage/cs.g:378:56: ( predefined_type | type_name )
                    int alt83=2;
                    switch ( input.LA(1) ) {
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        {
                        alt83=1;
                        }
                        break;
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt83=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 83, 0, input);

                        throw nvae;
                    }

                    switch (alt83) {
                        case 1 :
                            // mypackage/cs.g:378:57: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_type2722);
                            predefined_type298=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type298.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:378:75: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_type2726);
                            type_name299=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name299.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_rank_specifiers_in_type2731);
                    rank_specifiers300=rank_specifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers300.getTree());
                    // mypackage/cs.g:378:106: ( '*' )*
                    loop84:
                    do {
                        int alt84=2;
                        switch ( input.LA(1) ) {
                        case 109:
                            {
                            alt84=1;
                            }
                            break;

                        }

                        switch (alt84) {
                    	case 1 :
                    	    // mypackage/cs.g:0:0: '*'
                    	    {
                    	    char_literal301=(Token)match(input,109,FOLLOW_109_in_type2735); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal301_tree = (CommonTree)adaptor.create(char_literal301);
                    	    adaptor.addChild(root_0, char_literal301_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop84;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:379:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // mypackage/cs.g:379:53: ( predefined_type | type_name )
                    int alt85=2;
                    switch ( input.LA(1) ) {
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        {
                        alt85=1;
                        }
                        break;
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt85=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }

                    switch (alt85) {
                        case 1 :
                            // mypackage/cs.g:379:54: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_type2764);
                            predefined_type302=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type302.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:379:72: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_type2768);
                            type_name303=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name303.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:379:85: ( ( '*' )+ | '?' )
                    int alt87=2;
                    switch ( input.LA(1) ) {
                    case 109:
                        {
                        alt87=1;
                        }
                        break;
                    case 110:
                        {
                        alt87=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 0, input);

                        throw nvae;
                    }

                    switch (alt87) {
                        case 1 :
                            // mypackage/cs.g:379:86: ( '*' )+
                            {
                            // mypackage/cs.g:379:86: ( '*' )+
                            int cnt86=0;
                            loop86:
                            do {
                                int alt86=2;
                                switch ( input.LA(1) ) {
                                case 109:
                                    {
                                    alt86=1;
                                    }
                                    break;

                                }

                                switch (alt86) {
                            	case 1 :
                            	    // mypackage/cs.g:0:0: '*'
                            	    {
                            	    char_literal304=(Token)match(input,109,FOLLOW_109_in_type2774); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal304_tree = (CommonTree)adaptor.create(char_literal304);
                            	    adaptor.addChild(root_0, char_literal304_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt86 >= 1 ) break loop86;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(86, input);
                                        throw eee;
                                }
                                cnt86++;
                            } while (true);


                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:379:93: '?'
                            {
                            char_literal305=(Token)match(input,110,FOLLOW_110_in_type2779); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal305_tree = (CommonTree)adaptor.create(char_literal305);
                            adaptor.addChild(root_0, char_literal305_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // mypackage/cs.g:380:4: ( predefined_type | type_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // mypackage/cs.g:380:4: ( predefined_type | type_name )
                    int alt88=2;
                    switch ( input.LA(1) ) {
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        {
                        alt88=1;
                        }
                        break;
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt88=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;
                    }

                    switch (alt88) {
                        case 1 :
                            // mypackage/cs.g:380:5: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_type2786);
                            predefined_type306=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type306.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:380:23: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_type2790);
                            type_name307=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name307.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // mypackage/cs.g:381:4: 'void' ( '*' )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal308=(Token)match(input,91,FOLLOW_91_in_type2796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal308_tree = (CommonTree)adaptor.create(string_literal308);
                    adaptor.addChild(root_0, string_literal308_tree);
                    }
                    // mypackage/cs.g:381:11: ( '*' )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        switch ( input.LA(1) ) {
                        case 109:
                            {
                            alt89=1;
                            }
                            break;

                        }

                        switch (alt89) {
                    	case 1 :
                    	    // mypackage/cs.g:0:0: '*'
                    	    {
                    	    char_literal309=(Token)match(input,109,FOLLOW_109_in_type2798); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal309_tree = (CommonTree)adaptor.create(char_literal309);
                    	    adaptor.addChild(root_0, char_literal309_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class non_nullable_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_nullable_type"
    // mypackage/cs.g:383:1: non_nullable_type : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ );
    public final csParser.non_nullable_type_return non_nullable_type() throws RecognitionException {
        csParser.non_nullable_type_return retval = new csParser.non_nullable_type_return();
        retval.start = input.LT(1);
        int non_nullable_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal313=null;
        Token char_literal314=null;
        Token string_literal315=null;
        Token char_literal316=null;
        csParser.predefined_type_return predefined_type310 = null;

        csParser.type_name_return type_name311 = null;

        csParser.rank_specifiers_return rank_specifiers312 = null;


        CommonTree char_literal313_tree=null;
        CommonTree char_literal314_tree=null;
        CommonTree string_literal315_tree=null;
        CommonTree char_literal316_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // mypackage/cs.g:383:18: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ )
            int alt97=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt97=1;
                }
                break;
            case 91:
                {
                alt97=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // mypackage/cs.g:384:2: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // mypackage/cs.g:384:2: ( predefined_type | type_name )
                    int alt91=2;
                    switch ( input.LA(1) ) {
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                        {
                        alt91=1;
                        }
                        break;
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt91=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;
                    }

                    switch (alt91) {
                        case 1 :
                            // mypackage/cs.g:384:3: predefined_type
                            {
                            pushFollow(FOLLOW_predefined_type_in_non_nullable_type2809);
                            predefined_type310=predefined_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type310.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:384:21: type_name
                            {
                            pushFollow(FOLLOW_type_name_in_non_nullable_type2813);
                            type_name311=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name311.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:385:3: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
                    int alt95=2;
                    switch ( input.LA(1) ) {
                    case 95:
                        {
                        alt95=1;
                        }
                        break;
                    case EOF:
                    case IDENTIFIER:
                    case GT:
                    case SEMI:
                    case RPAREN:
                    case 72:
                    case 74:
                    case 96:
                    case 98:
                    case 99:
                    case 108:
                    case 109:
                    case 110:
                    case 125:
                    case 126:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt95=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 0, input);

                        throw nvae;
                    }

                    switch (alt95) {
                        case 1 :
                            // mypackage/cs.g:385:7: rank_specifiers ( '*' )*
                            {
                            pushFollow(FOLLOW_rank_specifiers_in_non_nullable_type2822);
                            rank_specifiers312=rank_specifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_specifiers312.getTree());
                            // mypackage/cs.g:385:25: ( '*' )*
                            loop92:
                            do {
                                int alt92=2;
                                switch ( input.LA(1) ) {
                                case 109:
                                    {
                                    alt92=1;
                                    }
                                    break;

                                }

                                switch (alt92) {
                            	case 1 :
                            	    // mypackage/cs.g:0:0: '*'
                            	    {
                            	    char_literal313=(Token)match(input,109,FOLLOW_109_in_non_nullable_type2826); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal313_tree = (CommonTree)adaptor.create(char_literal313);
                            	    adaptor.addChild(root_0, char_literal313_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop92;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:386:6: ( ( '*' )+ )?
                            {
                            // mypackage/cs.g:386:6: ( ( '*' )+ )?
                            int alt94=2;
                            switch ( input.LA(1) ) {
                                case 109:
                                    {
                                    alt94=1;
                                    }
                                    break;
                            }

                            switch (alt94) {
                                case 1 :
                                    // mypackage/cs.g:386:7: ( '*' )+
                                    {
                                    // mypackage/cs.g:386:7: ( '*' )+
                                    int cnt93=0;
                                    loop93:
                                    do {
                                        int alt93=2;
                                        switch ( input.LA(1) ) {
                                        case 109:
                                            {
                                            alt93=1;
                                            }
                                            break;

                                        }

                                        switch (alt93) {
                                    	case 1 :
                                    	    // mypackage/cs.g:0:0: '*'
                                    	    {
                                    	    char_literal314=(Token)match(input,109,FOLLOW_109_in_non_nullable_type2835); if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) {
                                    	    char_literal314_tree = (CommonTree)adaptor.create(char_literal314);
                                    	    adaptor.addChild(root_0, char_literal314_tree);
                                    	    }

                                    	    }
                                    	    break;

                                    	default :
                                    	    if ( cnt93 >= 1 ) break loop93;
                                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                                EarlyExitException eee =
                                                    new EarlyExitException(93, input);
                                                throw eee;
                                        }
                                        cnt93++;
                                    } while (true);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:388:4: 'void' ( '*' )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal315=(Token)match(input,91,FOLLOW_91_in_non_nullable_type2847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal315_tree = (CommonTree)adaptor.create(string_literal315);
                    adaptor.addChild(root_0, string_literal315_tree);
                    }
                    // mypackage/cs.g:388:13: ( '*' )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        switch ( input.LA(1) ) {
                        case 109:
                            {
                            alt96=1;
                            }
                            break;

                        }

                        switch (alt96) {
                    	case 1 :
                    	    // mypackage/cs.g:0:0: '*'
                    	    {
                    	    char_literal316=(Token)match(input,109,FOLLOW_109_in_non_nullable_type2851); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal316_tree = (CommonTree)adaptor.create(char_literal316);
                    	    adaptor.addChild(root_0, char_literal316_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, non_nullable_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_nullable_type"

    public static class non_array_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_array_type"
    // mypackage/cs.g:390:1: non_array_type : type ;
    public final csParser.non_array_type_return non_array_type() throws RecognitionException {
        csParser.non_array_type_return retval = new csParser.non_array_type_return();
        retval.start = input.LT(1);
        int non_array_type_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.type_return type317 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // mypackage/cs.g:390:15: ( type )
            // mypackage/cs.g:391:2: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_non_array_type2862);
            type317=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type317.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, non_array_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_array_type"

    public static class array_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_type"
    // mypackage/cs.g:392:1: array_type : type ;
    public final csParser.array_type_return array_type() throws RecognitionException {
        csParser.array_type_return retval = new csParser.array_type_return();
        retval.start = input.LT(1);
        int array_type_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.type_return type318 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // mypackage/cs.g:392:11: ( type )
            // mypackage/cs.g:393:2: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_array_type2869);
            type318=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type318.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, array_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "array_type"

    public static class unmanaged_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmanaged_type"
    // mypackage/cs.g:394:1: unmanaged_type : type ;
    public final csParser.unmanaged_type_return unmanaged_type() throws RecognitionException {
        csParser.unmanaged_type_return retval = new csParser.unmanaged_type_return();
        retval.start = input.LT(1);
        int unmanaged_type_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.type_return type319 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // mypackage/cs.g:394:15: ( type )
            // mypackage/cs.g:395:2: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_unmanaged_type2876);
            type319=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type319.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, unmanaged_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmanaged_type"

    public static class class_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_type"
    // mypackage/cs.g:396:1: class_type : type ;
    public final csParser.class_type_return class_type() throws RecognitionException {
        csParser.class_type_return retval = new csParser.class_type_return();
        retval.start = input.LT(1);
        int class_type_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.type_return type320 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // mypackage/cs.g:396:11: ( type )
            // mypackage/cs.g:397:2: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_class_type2883);
            type320=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type320.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, class_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "class_type"

    public static class pointer_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pointer_type"
    // mypackage/cs.g:398:1: pointer_type : type ;
    public final csParser.pointer_type_return pointer_type() throws RecognitionException {
        csParser.pointer_type_return retval = new csParser.pointer_type_return();
        retval.start = input.LT(1);
        int pointer_type_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.type_return type321 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // mypackage/cs.g:398:13: ( type )
            // mypackage/cs.g:399:2: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_pointer_type2890);
            type321=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type321.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, pointer_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pointer_type"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // mypackage/cs.g:405:1: block : ( ';' | '{' ( statement_list )? '}' );
    public final csParser.block_return block() throws RecognitionException {
        csParser.block_return retval = new csParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal322=null;
        Token char_literal323=null;
        Token char_literal325=null;
        csParser.statement_list_return statement_list324 = null;


        CommonTree char_literal322_tree=null;
        CommonTree char_literal323_tree=null;
        CommonTree char_literal325_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // mypackage/cs.g:405:6: ( ';' | '{' ( statement_list )? '}' )
            int alt99=2;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt99=1;
                }
                break;
            case 71:
                {
                alt99=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // mypackage/cs.g:406:2: ';'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal322=(Token)match(input,SEMI,FOLLOW_SEMI_in_block2902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal322_tree = (CommonTree)adaptor.create(char_literal322);
                    adaptor.addChild(root_0, char_literal322_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:407:4: '{' ( statement_list )? '}'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal323=(Token)match(input,71,FOLLOW_71_in_block2907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal323_tree = (CommonTree)adaptor.create(char_literal323);
                    adaptor.addChild(root_0, char_literal323_tree);
                    }
                    // mypackage/cs.g:407:10: ( statement_list )?
                    int alt98=2;
                    switch ( input.LA(1) ) {
                        case USING:
                        case IDENTIFIER:
                        case Real_literal:
                        case NUMBER:
                        case Hex_number:
                        case Character_literal:
                        case StringLITERAL:
                        case Verbatim_String_literal:
                        case TRUE:
                        case FALSE:
                        case NULL:
                        case MINUS:
                        case IF:
                        case SEMI:
                        case 71:
                        case 74:
                        case 77:
                        case 82:
                        case 90:
                        case 91:
                        case 92:
                        case 94:
                        case 97:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 109:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 126:
                        case 141:
                        case 142:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 166:
                        case 167:
                        case 168:
                        case 169:
                        case 170:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 179:
                        case 185:
                        case 186:
                        case 187:
                        case 190:
                        case 192:
                        case 193:
                        case 194:
                        case 195:
                        case 196:
                        case 197:
                        case 198:
                        case 199:
                        case 200:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                            {
                            alt98=1;
                            }
                            break;
                    }

                    switch (alt98) {
                        case 1 :
                            // mypackage/cs.g:0:0: statement_list
                            {
                            pushFollow(FOLLOW_statement_list_in_block2911);
                            statement_list324=statement_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_list324.getTree());

                            }
                            break;

                    }

                    char_literal325=(Token)match(input,72,FOLLOW_72_in_block2916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal325_tree = (CommonTree)adaptor.create(char_literal325);
                    adaptor.addChild(root_0, char_literal325_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class statement_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_list"
    // mypackage/cs.g:408:1: statement_list : ( statement )+ ;
    public final csParser.statement_list_return statement_list() throws RecognitionException {
        csParser.statement_list_return retval = new csParser.statement_list_return();
        retval.start = input.LT(1);
        int statement_list_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.statement_return statement326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // mypackage/cs.g:408:15: ( ( statement )+ )
            // mypackage/cs.g:409:2: ( statement )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:409:2: ( statement )+
            int cnt100=0;
            loop100:
            do {
                int alt100=2;
                switch ( input.LA(1) ) {
                case 105:
                    {
                    switch ( input.LA(2) ) {
                    case 97:
                        {
                        alt100=1;
                        }
                        break;

                    }

                    }
                    break;
                case USING:
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case IF:
                case SEMI:
                case 71:
                case 74:
                case 77:
                case 82:
                case 90:
                case 91:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 185:
                case 186:
                case 187:
                case 190:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt100=1;
                    }
                    break;

                }

                switch (alt100) {
            	case 1 :
            	    // mypackage/cs.g:0:0: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_statement_list2923);
            	    statement326=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement326.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt100 >= 1 ) break loop100;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(100, input);
                        throw eee;
                }
                cnt100++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, statement_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement_list"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // mypackage/cs.g:414:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
    public final csParser.expression_return expression() throws RecognitionException {
        csParser.expression_return retval = new csParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.assignment_return assignment327 = null;

        csParser.non_assignment_expression_return non_assignment_expression328 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // mypackage/cs.g:414:11: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // mypackage/cs.g:415:2: ( unary_expression assignment_operator )=> assignment
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_assignment_in_expression2948);
                    assignment327=assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment327.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:416:4: non_assignment_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_non_assignment_expression_in_expression2954);
                    non_assignment_expression328=non_assignment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression328.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_list"
    // mypackage/cs.g:418:1: expression_list : expression ( ',' expression )* ;
    public final csParser.expression_list_return expression_list() throws RecognitionException {
        csParser.expression_list_return retval = new csParser.expression_list_return();
        retval.start = input.LT(1);
        int expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal330=null;
        csParser.expression_return expression329 = null;

        csParser.expression_return expression331 = null;


        CommonTree char_literal330_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // mypackage/cs.g:418:16: ( expression ( ',' expression )* )
            // mypackage/cs.g:419:2: expression ( ',' expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expression_list2963);
            expression329=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression329.getTree());
            // mypackage/cs.g:419:14: ( ',' expression )*
            loop102:
            do {
                int alt102=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt102=1;
                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // mypackage/cs.g:419:15: ',' expression
            	    {
            	    char_literal330=(Token)match(input,98,FOLLOW_98_in_expression_list2967); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal330_tree = (CommonTree)adaptor.create(char_literal330);
            	    adaptor.addChild(root_0, char_literal330_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expression_list2971);
            	    expression331=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression331.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_list"

    public static class assignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment"
    // mypackage/cs.g:420:1: assignment : unary_expression assignment_operator expression ;
    public final csParser.assignment_return assignment() throws RecognitionException {
        csParser.assignment_return retval = new csParser.assignment_return();
        retval.start = input.LT(1);
        int assignment_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.unary_expression_return unary_expression332 = null;

        csParser.assignment_operator_return assignment_operator333 = null;

        csParser.expression_return expression334 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // mypackage/cs.g:420:11: ( unary_expression assignment_operator expression )
            // mypackage/cs.g:421:2: unary_expression assignment_operator expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_expression_in_assignment2981);
            unary_expression332=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression332.getTree());
            pushFollow(FOLLOW_assignment_operator_in_assignment2985);
            assignment_operator333=assignment_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_operator333.getTree());
            pushFollow(FOLLOW_expression_in_assignment2989);
            expression334=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression334.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, assignment_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment"

    public static class unary_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_expression"
    // mypackage/cs.g:422:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
    public final csParser.unary_expression_return unary_expression() throws RecognitionException {
        csParser.unary_expression_return retval = new csParser.unary_expression_return();
        retval.start = input.LT(1);
        int unary_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal337=null;
        Token string_literal338=null;
        Token char_literal339=null;
        Token char_literal341=null;
        Token char_literal343=null;
        Token char_literal345=null;
        csParser.cast_expression_return cast_expression335 = null;

        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression336 = null;

        csParser.unary_expression_return unary_expression340 = null;

        csParser.unary_expression_return unary_expression342 = null;

        csParser.unary_expression_return unary_expression344 = null;

        csParser.unary_expression_return unary_expression346 = null;

        csParser.pre_increment_expression_return pre_increment_expression347 = null;

        csParser.pre_decrement_expression_return pre_decrement_expression348 = null;

        csParser.pointer_indirection_expression_return pointer_indirection_expression349 = null;

        csParser.addressof_expression_return addressof_expression350 = null;


        CommonTree string_literal337_tree=null;
        CommonTree string_literal338_tree=null;
        CommonTree char_literal339_tree=null;
        CommonTree char_literal341_tree=null;
        CommonTree char_literal343_tree=null;
        CommonTree char_literal345_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // mypackage/cs.g:422:17: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )
            int alt105=10;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    // mypackage/cs.g:424:2: ( cast_expression )=> cast_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_cast_expression_in_unary_expression3006);
                    cast_expression335=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression335.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:425:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primary_or_array_creation_expression_in_unary_expression3011);
                    primary_or_array_creation_expression336=primary_or_array_creation_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_or_array_creation_expression336.getTree());
                    // mypackage/cs.g:425:43: ( '++' )?
                    int alt103=2;
                    switch ( input.LA(1) ) {
                        case 111:
                            {
                            alt103=1;
                            }
                            break;
                    }

                    switch (alt103) {
                        case 1 :
                            // mypackage/cs.g:0:0: '++'
                            {
                            string_literal337=(Token)match(input,111,FOLLOW_111_in_unary_expression3015); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal337_tree = (CommonTree)adaptor.create(string_literal337);
                            adaptor.addChild(root_0, string_literal337_tree);
                            }

                            }
                            break;

                    }

                    // mypackage/cs.g:425:51: ( '--' )?
                    int alt104=2;
                    switch ( input.LA(1) ) {
                        case 112:
                            {
                            alt104=1;
                            }
                            break;
                    }

                    switch (alt104) {
                        case 1 :
                            // mypackage/cs.g:0:0: '--'
                            {
                            string_literal338=(Token)match(input,112,FOLLOW_112_in_unary_expression3020); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal338_tree = (CommonTree)adaptor.create(string_literal338);
                            adaptor.addChild(root_0, string_literal338_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // mypackage/cs.g:426:4: '+' unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal339=(Token)match(input,113,FOLLOW_113_in_unary_expression3026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal339_tree = (CommonTree)adaptor.create(char_literal339);
                    adaptor.addChild(root_0, char_literal339_tree);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression3030);
                    unary_expression340=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression340.getTree());

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:427:4: '-' unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal341=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary_expression3036); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal341_tree = (CommonTree)adaptor.create(char_literal341);
                    adaptor.addChild(root_0, char_literal341_tree);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression3040);
                    unary_expression342=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression342.getTree());

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:428:4: '!' unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal343=(Token)match(input,114,FOLLOW_114_in_unary_expression3046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal343_tree = (CommonTree)adaptor.create(char_literal343);
                    adaptor.addChild(root_0, char_literal343_tree);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression3050);
                    unary_expression344=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression344.getTree());

                    }
                    break;
                case 6 :
                    // mypackage/cs.g:429:4: '~' unary_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal345=(Token)match(input,115,FOLLOW_115_in_unary_expression3056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal345_tree = (CommonTree)adaptor.create(char_literal345);
                    adaptor.addChild(root_0, char_literal345_tree);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression3060);
                    unary_expression346=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression346.getTree());

                    }
                    break;
                case 7 :
                    // mypackage/cs.g:430:4: pre_increment_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pre_increment_expression_in_unary_expression3066);
                    pre_increment_expression347=pre_increment_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_increment_expression347.getTree());

                    }
                    break;
                case 8 :
                    // mypackage/cs.g:431:4: pre_decrement_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pre_decrement_expression_in_unary_expression3072);
                    pre_decrement_expression348=pre_decrement_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_decrement_expression348.getTree());

                    }
                    break;
                case 9 :
                    // mypackage/cs.g:432:4: pointer_indirection_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression3078);
                    pointer_indirection_expression349=pointer_indirection_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer_indirection_expression349.getTree());

                    }
                    break;
                case 10 :
                    // mypackage/cs.g:433:4: addressof_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_addressof_expression_in_unary_expression3083);
                    addressof_expression350=addressof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, addressof_expression350.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, unary_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public static class cast_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cast_expression"
    // mypackage/cs.g:435:1: cast_expression : '(' type ')' unary_expression ;
    public final csParser.cast_expression_return cast_expression() throws RecognitionException {
        csParser.cast_expression_return retval = new csParser.cast_expression_return();
        retval.start = input.LT(1);
        int cast_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal351=null;
        Token char_literal353=null;
        csParser.type_return type352 = null;

        csParser.unary_expression_return unary_expression354 = null;


        CommonTree char_literal351_tree=null;
        CommonTree char_literal353_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // mypackage/cs.g:435:16: ( '(' type ')' unary_expression )
            // mypackage/cs.g:436:2: '(' type ')' unary_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal351=(Token)match(input,97,FOLLOW_97_in_cast_expression3093); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal351_tree = (CommonTree)adaptor.create(char_literal351);
            adaptor.addChild(root_0, char_literal351_tree);
            }
            pushFollow(FOLLOW_type_in_cast_expression3097);
            type352=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type352.getTree());
            char_literal353=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cast_expression3101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal353_tree = (CommonTree)adaptor.create(char_literal353);
            adaptor.addChild(root_0, char_literal353_tree);
            }
            pushFollow(FOLLOW_unary_expression_in_cast_expression3105);
            unary_expression354=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression354.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, cast_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cast_expression"

    public static class assignment_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_operator"
    // mypackage/cs.g:437:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
    public final csParser.assignment_operator_return assignment_operator() throws RecognitionException {
        csParser.assignment_operator_return retval = new csParser.assignment_operator_return();
        retval.start = input.LT(1);
        int assignment_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal355=null;
        Token string_literal356=null;
        Token string_literal357=null;
        Token string_literal358=null;
        Token string_literal359=null;
        Token string_literal360=null;
        Token string_literal361=null;
        Token string_literal362=null;
        Token string_literal363=null;
        Token string_literal364=null;
        Token char_literal365=null;
        Token string_literal366=null;

        CommonTree char_literal355_tree=null;
        CommonTree string_literal356_tree=null;
        CommonTree string_literal357_tree=null;
        CommonTree string_literal358_tree=null;
        CommonTree string_literal359_tree=null;
        CommonTree string_literal360_tree=null;
        CommonTree string_literal361_tree=null;
        CommonTree string_literal362_tree=null;
        CommonTree string_literal363_tree=null;
        CommonTree string_literal364_tree=null;
        CommonTree char_literal365_tree=null;
        CommonTree string_literal366_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // mypackage/cs.g:437:20: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
            int alt106=11;
            switch ( input.LA(1) ) {
            case 75:
                {
                alt106=1;
                }
                break;
            case 116:
                {
                alt106=2;
                }
                break;
            case 117:
                {
                alt106=3;
                }
                break;
            case 118:
                {
                alt106=4;
                }
                break;
            case 119:
                {
                alt106=5;
                }
                break;
            case 120:
                {
                alt106=6;
                }
                break;
            case 121:
                {
                alt106=7;
                }
                break;
            case 122:
                {
                alt106=8;
                }
                break;
            case 123:
                {
                alt106=9;
                }
                break;
            case 124:
                {
                alt106=10;
                }
                break;
            case GT:
                {
                alt106=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }

            switch (alt106) {
                case 1 :
                    // mypackage/cs.g:438:2: '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal355=(Token)match(input,75,FOLLOW_75_in_assignment_operator3113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal355_tree = (CommonTree)adaptor.create(char_literal355);
                    adaptor.addChild(root_0, char_literal355_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:438:8: '+='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal356=(Token)match(input,116,FOLLOW_116_in_assignment_operator3117); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal356_tree = (CommonTree)adaptor.create(string_literal356);
                    adaptor.addChild(root_0, string_literal356_tree);
                    }

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:438:15: '-='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal357=(Token)match(input,117,FOLLOW_117_in_assignment_operator3121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal357_tree = (CommonTree)adaptor.create(string_literal357);
                    adaptor.addChild(root_0, string_literal357_tree);
                    }

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:438:22: '*='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal358=(Token)match(input,118,FOLLOW_118_in_assignment_operator3125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal358_tree = (CommonTree)adaptor.create(string_literal358);
                    adaptor.addChild(root_0, string_literal358_tree);
                    }

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:438:29: '/='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal359=(Token)match(input,119,FOLLOW_119_in_assignment_operator3129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal359_tree = (CommonTree)adaptor.create(string_literal359);
                    adaptor.addChild(root_0, string_literal359_tree);
                    }

                    }
                    break;
                case 6 :
                    // mypackage/cs.g:438:36: '%='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal360=(Token)match(input,120,FOLLOW_120_in_assignment_operator3133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal360_tree = (CommonTree)adaptor.create(string_literal360);
                    adaptor.addChild(root_0, string_literal360_tree);
                    }

                    }
                    break;
                case 7 :
                    // mypackage/cs.g:438:43: '&='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal361=(Token)match(input,121,FOLLOW_121_in_assignment_operator3137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal361_tree = (CommonTree)adaptor.create(string_literal361);
                    adaptor.addChild(root_0, string_literal361_tree);
                    }

                    }
                    break;
                case 8 :
                    // mypackage/cs.g:438:50: '|='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal362=(Token)match(input,122,FOLLOW_122_in_assignment_operator3141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal362_tree = (CommonTree)adaptor.create(string_literal362);
                    adaptor.addChild(root_0, string_literal362_tree);
                    }

                    }
                    break;
                case 9 :
                    // mypackage/cs.g:438:57: '^='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal363=(Token)match(input,123,FOLLOW_123_in_assignment_operator3145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal363_tree = (CommonTree)adaptor.create(string_literal363);
                    adaptor.addChild(root_0, string_literal363_tree);
                    }

                    }
                    break;
                case 10 :
                    // mypackage/cs.g:438:64: '<<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal364=(Token)match(input,124,FOLLOW_124_in_assignment_operator3149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal364_tree = (CommonTree)adaptor.create(string_literal364);
                    adaptor.addChild(root_0, string_literal364_tree);
                    }

                    }
                    break;
                case 11 :
                    // mypackage/cs.g:438:72: '>' '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal365=(Token)match(input,GT,FOLLOW_GT_in_assignment_operator3153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal365_tree = (CommonTree)adaptor.create(char_literal365);
                    adaptor.addChild(root_0, char_literal365_tree);
                    }
                    string_literal366=(Token)match(input,125,FOLLOW_125_in_assignment_operator3155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal366_tree = (CommonTree)adaptor.create(string_literal366);
                    adaptor.addChild(root_0, string_literal366_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, assignment_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_operator"

    public static class pre_increment_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pre_increment_expression"
    // mypackage/cs.g:439:1: pre_increment_expression : '++' unary_expression ;
    public final csParser.pre_increment_expression_return pre_increment_expression() throws RecognitionException {
        csParser.pre_increment_expression_return retval = new csParser.pre_increment_expression_return();
        retval.start = input.LT(1);
        int pre_increment_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal367=null;
        csParser.unary_expression_return unary_expression368 = null;


        CommonTree string_literal367_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // mypackage/cs.g:439:25: ( '++' unary_expression )
            // mypackage/cs.g:440:2: '++' unary_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal367=(Token)match(input,111,FOLLOW_111_in_pre_increment_expression3164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal367_tree = (CommonTree)adaptor.create(string_literal367);
            adaptor.addChild(root_0, string_literal367_tree);
            }
            pushFollow(FOLLOW_unary_expression_in_pre_increment_expression3168);
            unary_expression368=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression368.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, pre_increment_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pre_increment_expression"

    public static class pre_decrement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pre_decrement_expression"
    // mypackage/cs.g:441:1: pre_decrement_expression : '--' unary_expression ;
    public final csParser.pre_decrement_expression_return pre_decrement_expression() throws RecognitionException {
        csParser.pre_decrement_expression_return retval = new csParser.pre_decrement_expression_return();
        retval.start = input.LT(1);
        int pre_decrement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal369=null;
        csParser.unary_expression_return unary_expression370 = null;


        CommonTree string_literal369_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // mypackage/cs.g:441:25: ( '--' unary_expression )
            // mypackage/cs.g:442:2: '--' unary_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal369=(Token)match(input,112,FOLLOW_112_in_pre_decrement_expression3177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal369_tree = (CommonTree)adaptor.create(string_literal369);
            adaptor.addChild(root_0, string_literal369_tree);
            }
            pushFollow(FOLLOW_unary_expression_in_pre_decrement_expression3181);
            unary_expression370=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression370.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, pre_decrement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pre_decrement_expression"

    public static class pointer_indirection_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pointer_indirection_expression"
    // mypackage/cs.g:443:1: pointer_indirection_expression : '*' unary_expression ;
    public final csParser.pointer_indirection_expression_return pointer_indirection_expression() throws RecognitionException {
        csParser.pointer_indirection_expression_return retval = new csParser.pointer_indirection_expression_return();
        retval.start = input.LT(1);
        int pointer_indirection_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal371=null;
        csParser.unary_expression_return unary_expression372 = null;


        CommonTree char_literal371_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // mypackage/cs.g:443:31: ( '*' unary_expression )
            // mypackage/cs.g:444:2: '*' unary_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal371=(Token)match(input,109,FOLLOW_109_in_pointer_indirection_expression3189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal371_tree = (CommonTree)adaptor.create(char_literal371);
            adaptor.addChild(root_0, char_literal371_tree);
            }
            pushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression3193);
            unary_expression372=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression372.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, pointer_indirection_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pointer_indirection_expression"

    public static class addressof_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "addressof_expression"
    // mypackage/cs.g:445:1: addressof_expression : '&' unary_expression ;
    public final csParser.addressof_expression_return addressof_expression() throws RecognitionException {
        csParser.addressof_expression_return retval = new csParser.addressof_expression_return();
        retval.start = input.LT(1);
        int addressof_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal373=null;
        csParser.unary_expression_return unary_expression374 = null;


        CommonTree char_literal373_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // mypackage/cs.g:445:21: ( '&' unary_expression )
            // mypackage/cs.g:446:2: '&' unary_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal373=(Token)match(input,126,FOLLOW_126_in_addressof_expression3201); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal373_tree = (CommonTree)adaptor.create(char_literal373);
            adaptor.addChild(root_0, char_literal373_tree);
            }
            pushFollow(FOLLOW_unary_expression_in_addressof_expression3205);
            unary_expression374=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression374.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, addressof_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "addressof_expression"

    public static class non_assignment_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_assignment_expression"
    // mypackage/cs.g:448:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
    public final csParser.non_assignment_expression_return non_assignment_expression() throws RecognitionException {
        csParser.non_assignment_expression_return retval = new csParser.non_assignment_expression_return();
        retval.start = input.LT(1);
        int non_assignment_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.lambda_expression_return lambda_expression375 = null;

        csParser.query_expression_return query_expression376 = null;

        csParser.conditional_expression_return conditional_expression377 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // mypackage/cs.g:448:26: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )
            int alt107=3;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // mypackage/cs.g:450:2: ( anonymous_function_signature '=>' )=> lambda_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expression_in_non_assignment_expression3226);
                    lambda_expression375=lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expression375.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:451:4: ( query_expression )=> query_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_query_expression_in_non_assignment_expression3237);
                    query_expression376=query_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_expression376.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:452:4: conditional_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_conditional_expression_in_non_assignment_expression3243);
                    conditional_expression377=conditional_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_expression377.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, non_assignment_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression"

    public static class multiplicative_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicative_expression"
    // mypackage/cs.g:459:1: multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
    public final csParser.multiplicative_expression_return multiplicative_expression() throws RecognitionException {
        csParser.multiplicative_expression_return retval = new csParser.multiplicative_expression_return();
        retval.start = input.LT(1);
        int multiplicative_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set379=null;
        csParser.unary_expression_return unary_expression378 = null;

        csParser.unary_expression_return unary_expression380 = null;


        CommonTree set379_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // mypackage/cs.g:459:26: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
            // mypackage/cs.g:460:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3257);
            unary_expression378=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression378.getTree());
            // mypackage/cs.g:460:19: ( ( '*' | '/' | '%' ) unary_expression )*
            loop108:
            do {
                int alt108=2;
                switch ( input.LA(1) ) {
                case 109:
                case 127:
                case 128:
                    {
                    alt108=1;
                    }
                    break;

                }

                switch (alt108) {
            	case 1 :
            	    // mypackage/cs.g:460:22: ( '*' | '/' | '%' ) unary_expression
            	    {
            	    set379=(Token)input.LT(1);
            	    if ( input.LA(1)==109||(input.LA(1)>=127 && input.LA(1)<=128) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set379));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unary_expression_in_multiplicative_expression3272);
            	    unary_expression380=unary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression380.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, multiplicative_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"

    public static class additive_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additive_expression"
    // mypackage/cs.g:461:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
    public final csParser.additive_expression_return additive_expression() throws RecognitionException {
        csParser.additive_expression_return retval = new csParser.additive_expression_return();
        retval.start = input.LT(1);
        int additive_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set382=null;
        csParser.multiplicative_expression_return multiplicative_expression381 = null;

        csParser.multiplicative_expression_return multiplicative_expression383 = null;


        CommonTree set382_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // mypackage/cs.g:461:20: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
            // mypackage/cs.g:462:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression3282);
            multiplicative_expression381=multiplicative_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression381.getTree());
            // mypackage/cs.g:462:28: ( ( '+' | '-' ) multiplicative_expression )*
            loop109:
            do {
                int alt109=2;
                switch ( input.LA(1) ) {
                case MINUS:
                case 113:
                    {
                    alt109=1;
                    }
                    break;

                }

                switch (alt109) {
            	case 1 :
            	    // mypackage/cs.g:462:29: ( '+' | '-' ) multiplicative_expression
            	    {
            	    set382=(Token)input.LT(1);
            	    if ( input.LA(1)==MINUS||input.LA(1)==113 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set382));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression3293);
            	    multiplicative_expression383=multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicative_expression383.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, additive_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additive_expression"

    public static class shift_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shift_expression"
    // mypackage/cs.g:464:1: shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
    public final csParser.shift_expression_return shift_expression() throws RecognitionException {
        csParser.shift_expression_return retval = new csParser.shift_expression_return();
        retval.start = input.LT(1);
        int shift_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal385=null;
        Token char_literal386=null;
        Token char_literal387=null;
        csParser.additive_expression_return additive_expression384 = null;

        csParser.additive_expression_return additive_expression388 = null;


        CommonTree string_literal385_tree=null;
        CommonTree char_literal386_tree=null;
        CommonTree char_literal387_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // mypackage/cs.g:464:17: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
            // mypackage/cs.g:465:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additive_expression_in_shift_expression3304);
            additive_expression384=additive_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression384.getTree());
            // mypackage/cs.g:465:22: ( ( '<<' | '>' '>' ) additive_expression )*
            loop111:
            do {
                int alt111=2;
                switch ( input.LA(1) ) {
                case GT:
                    {
                    switch ( input.LA(2) ) {
                    case GT:
                        {
                        alt111=1;
                        }
                        break;

                    }

                    }
                    break;
                case 129:
                    {
                    alt111=1;
                    }
                    break;

                }

                switch (alt111) {
            	case 1 :
            	    // mypackage/cs.g:465:23: ( '<<' | '>' '>' ) additive_expression
            	    {
            	    // mypackage/cs.g:465:23: ( '<<' | '>' '>' )
            	    int alt110=2;
            	    switch ( input.LA(1) ) {
            	    case 129:
            	        {
            	        alt110=1;
            	        }
            	        break;
            	    case GT:
            	        {
            	        alt110=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 110, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt110) {
            	        case 1 :
            	            // mypackage/cs.g:465:24: '<<'
            	            {
            	            string_literal385=(Token)match(input,129,FOLLOW_129_in_shift_expression3308); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal385_tree = (CommonTree)adaptor.create(string_literal385);
            	            adaptor.addChild(root_0, string_literal385_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // mypackage/cs.g:465:29: '>' '>'
            	            {
            	            char_literal386=(Token)match(input,GT,FOLLOW_GT_in_shift_expression3310); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal386_tree = (CommonTree)adaptor.create(char_literal386);
            	            adaptor.addChild(root_0, char_literal386_tree);
            	            }
            	            char_literal387=(Token)match(input,GT,FOLLOW_GT_in_shift_expression3312); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal387_tree = (CommonTree)adaptor.create(char_literal387);
            	            adaptor.addChild(root_0, char_literal387_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additive_expression_in_shift_expression3315);
            	    additive_expression388=additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression388.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, shift_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shift_expression"

    public static class relational_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_expression"
    // mypackage/cs.g:466:1: relational_expression : shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* ;
    public final csParser.relational_expression_return relational_expression() throws RecognitionException {
        csParser.relational_expression_return retval = new csParser.relational_expression_return();
        retval.start = input.LT(1);
        int relational_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set390=null;
        Token set392=null;
        csParser.shift_expression_return shift_expression389 = null;

        csParser.shift_expression_return shift_expression391 = null;

        csParser.non_nullable_type_return non_nullable_type393 = null;


        CommonTree set390_tree=null;
        CommonTree set392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // mypackage/cs.g:466:22: ( shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* )
            // mypackage/cs.g:467:2: shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shift_expression_in_relational_expression3325);
            shift_expression389=shift_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression389.getTree());
            // mypackage/cs.g:468:3: ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
            loop112:
            do {
                int alt112=3;
                switch ( input.LA(1) ) {
                case GT:
                case 108:
                case 125:
                case 130:
                    {
                    alt112=1;
                    }
                    break;
                case 131:
                case 132:
                    {
                    alt112=2;
                    }
                    break;

                }

                switch (alt112) {
            	case 1 :
            	    // mypackage/cs.g:468:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            	    {
            	    // mypackage/cs.g:468:5: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
            	    // mypackage/cs.g:468:6: ( '<' | '>' | '>=' | '<=' ) shift_expression
            	    {
            	    set390=(Token)input.LT(1);
            	    if ( input.LA(1)==GT||input.LA(1)==108||input.LA(1)==125||input.LA(1)==130 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set390));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression3342);
            	    shift_expression391=shift_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shift_expression391.getTree());

            	    }


            	    }
            	    break;
            	case 2 :
            	    // mypackage/cs.g:469:6: ( ( 'is' | 'as' ) non_nullable_type )
            	    {
            	    // mypackage/cs.g:469:6: ( ( 'is' | 'as' ) non_nullable_type )
            	    // mypackage/cs.g:469:7: ( 'is' | 'as' ) non_nullable_type
            	    {
            	    set392=(Token)input.LT(1);
            	    if ( (input.LA(1)>=131 && input.LA(1)<=132) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set392));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_non_nullable_type_in_relational_expression3359);
            	    non_nullable_type393=non_nullable_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_nullable_type393.getTree());

            	    }


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, relational_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public static class equality_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equality_expression"
    // mypackage/cs.g:471:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
    public final csParser.equality_expression_return equality_expression() throws RecognitionException {
        csParser.equality_expression_return retval = new csParser.equality_expression_return();
        retval.start = input.LT(1);
        int equality_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set395=null;
        csParser.relational_expression_return relational_expression394 = null;

        csParser.relational_expression_return relational_expression396 = null;


        CommonTree set395_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // mypackage/cs.g:471:20: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
            // mypackage/cs.g:472:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relational_expression_in_equality_expression3373);
            relational_expression394=relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression394.getTree());
            // mypackage/cs.g:473:5: ( ( '==' | '!=' ) relational_expression )*
            loop113:
            do {
                int alt113=2;
                switch ( input.LA(1) ) {
                case 133:
                case 134:
                    {
                    alt113=1;
                    }
                    break;

                }

                switch (alt113) {
            	case 1 :
            	    // mypackage/cs.g:473:6: ( '==' | '!=' ) relational_expression
            	    {
            	    set395=(Token)input.LT(1);
            	    if ( (input.LA(1)>=133 && input.LA(1)<=134) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set395));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_relational_expression_in_equality_expression3388);
            	    relational_expression396=relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression396.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, equality_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equality_expression"

    public static class and_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_expression"
    // mypackage/cs.g:474:1: and_expression : equality_expression ( '&' equality_expression )* ;
    public final csParser.and_expression_return and_expression() throws RecognitionException {
        csParser.and_expression_return retval = new csParser.and_expression_return();
        retval.start = input.LT(1);
        int and_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal398=null;
        csParser.equality_expression_return equality_expression397 = null;

        csParser.equality_expression_return equality_expression399 = null;


        CommonTree char_literal398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // mypackage/cs.g:474:15: ( equality_expression ( '&' equality_expression )* )
            // mypackage/cs.g:475:2: equality_expression ( '&' equality_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equality_expression_in_and_expression3398);
            equality_expression397=equality_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression397.getTree());
            // mypackage/cs.g:475:22: ( '&' equality_expression )*
            loop114:
            do {
                int alt114=2;
                switch ( input.LA(1) ) {
                case 126:
                    {
                    alt114=1;
                    }
                    break;

                }

                switch (alt114) {
            	case 1 :
            	    // mypackage/cs.g:475:23: '&' equality_expression
            	    {
            	    char_literal398=(Token)match(input,126,FOLLOW_126_in_and_expression3401); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal398_tree = (CommonTree)adaptor.create(char_literal398);
            	    adaptor.addChild(root_0, char_literal398_tree);
            	    }
            	    pushFollow(FOLLOW_equality_expression_in_and_expression3405);
            	    equality_expression399=equality_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression399.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, and_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "and_expression"

    public static class exclusive_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusive_or_expression"
    // mypackage/cs.g:476:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
    public final csParser.exclusive_or_expression_return exclusive_or_expression() throws RecognitionException {
        csParser.exclusive_or_expression_return retval = new csParser.exclusive_or_expression_return();
        retval.start = input.LT(1);
        int exclusive_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal401=null;
        csParser.and_expression_return and_expression400 = null;

        csParser.and_expression_return and_expression402 = null;


        CommonTree char_literal401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // mypackage/cs.g:476:24: ( and_expression ( '^' and_expression )* )
            // mypackage/cs.g:477:2: and_expression ( '^' and_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression3415);
            and_expression400=and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression400.getTree());
            // mypackage/cs.g:477:17: ( '^' and_expression )*
            loop115:
            do {
                int alt115=2;
                switch ( input.LA(1) ) {
                case 135:
                    {
                    alt115=1;
                    }
                    break;

                }

                switch (alt115) {
            	case 1 :
            	    // mypackage/cs.g:477:18: '^' and_expression
            	    {
            	    char_literal401=(Token)match(input,135,FOLLOW_135_in_exclusive_or_expression3418); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal401_tree = (CommonTree)adaptor.create(char_literal401);
            	    adaptor.addChild(root_0, char_literal401_tree);
            	    }
            	    pushFollow(FOLLOW_and_expression_in_exclusive_or_expression3422);
            	    and_expression402=and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_expression402.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, exclusive_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"

    public static class inclusive_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusive_or_expression"
    // mypackage/cs.g:478:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
    public final csParser.inclusive_or_expression_return inclusive_or_expression() throws RecognitionException {
        csParser.inclusive_or_expression_return retval = new csParser.inclusive_or_expression_return();
        retval.start = input.LT(1);
        int inclusive_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal404=null;
        csParser.exclusive_or_expression_return exclusive_or_expression403 = null;

        csParser.exclusive_or_expression_return exclusive_or_expression405 = null;


        CommonTree char_literal404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // mypackage/cs.g:478:24: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
            // mypackage/cs.g:479:2: exclusive_or_expression ( '|' exclusive_or_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3432);
            exclusive_or_expression403=exclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression403.getTree());
            // mypackage/cs.g:479:28: ( '|' exclusive_or_expression )*
            loop116:
            do {
                int alt116=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt116=1;
                    }
                    break;

                }

                switch (alt116) {
            	case 1 :
            	    // mypackage/cs.g:479:29: '|' exclusive_or_expression
            	    {
            	    char_literal404=(Token)match(input,136,FOLLOW_136_in_inclusive_or_expression3437); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal404_tree = (CommonTree)adaptor.create(char_literal404);
            	    adaptor.addChild(root_0, char_literal404_tree);
            	    }
            	    pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression3441);
            	    exclusive_or_expression405=exclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_or_expression405.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, inclusive_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"

    public static class conditional_and_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_and_expression"
    // mypackage/cs.g:480:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
    public final csParser.conditional_and_expression_return conditional_and_expression() throws RecognitionException {
        csParser.conditional_and_expression_return retval = new csParser.conditional_and_expression_return();
        retval.start = input.LT(1);
        int conditional_and_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal407=null;
        csParser.inclusive_or_expression_return inclusive_or_expression406 = null;

        csParser.inclusive_or_expression_return inclusive_or_expression408 = null;


        CommonTree string_literal407_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // mypackage/cs.g:480:27: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
            // mypackage/cs.g:481:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression3451);
            inclusive_or_expression406=inclusive_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression406.getTree());
            // mypackage/cs.g:481:28: ( '&&' inclusive_or_expression )*
            loop117:
            do {
                int alt117=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt117=1;
                    }
                    break;

                }

                switch (alt117) {
            	case 1 :
            	    // mypackage/cs.g:481:29: '&&' inclusive_or_expression
            	    {
            	    string_literal407=(Token)match(input,137,FOLLOW_137_in_conditional_and_expression3456); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal407_tree = (CommonTree)adaptor.create(string_literal407);
            	    adaptor.addChild(root_0, string_literal407_tree);
            	    }
            	    pushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression3460);
            	    inclusive_or_expression408=inclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusive_or_expression408.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, conditional_and_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression"

    public static class conditional_or_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_or_expression"
    // mypackage/cs.g:482:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
    public final csParser.conditional_or_expression_return conditional_or_expression() throws RecognitionException {
        csParser.conditional_or_expression_return retval = new csParser.conditional_or_expression_return();
        retval.start = input.LT(1);
        int conditional_or_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal410=null;
        csParser.conditional_and_expression_return conditional_and_expression409 = null;

        csParser.conditional_and_expression_return conditional_and_expression411 = null;


        CommonTree string_literal410_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // mypackage/cs.g:482:26: ( conditional_and_expression ( '||' conditional_and_expression )* )
            // mypackage/cs.g:483:2: conditional_and_expression ( '||' conditional_and_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression3470);
            conditional_and_expression409=conditional_and_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_and_expression409.getTree());
            // mypackage/cs.g:483:30: ( '||' conditional_and_expression )*
            loop118:
            do {
                int alt118=2;
                switch ( input.LA(1) ) {
                case 138:
                    {
                    alt118=1;
                    }
                    break;

                }

                switch (alt118) {
            	case 1 :
            	    // mypackage/cs.g:483:31: '||' conditional_and_expression
            	    {
            	    string_literal410=(Token)match(input,138,FOLLOW_138_in_conditional_or_expression3474); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal410_tree = (CommonTree)adaptor.create(string_literal410);
            	    adaptor.addChild(root_0, string_literal410_tree);
            	    }
            	    pushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression3478);
            	    conditional_and_expression411=conditional_and_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_and_expression411.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, conditional_or_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression"

    public static class null_coalescing_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "null_coalescing_expression"
    // mypackage/cs.g:485:1: null_coalescing_expression : conditional_or_expression ( '??' conditional_or_expression )* ;
    public final csParser.null_coalescing_expression_return null_coalescing_expression() throws RecognitionException {
        csParser.null_coalescing_expression_return retval = new csParser.null_coalescing_expression_return();
        retval.start = input.LT(1);
        int null_coalescing_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal413=null;
        csParser.conditional_or_expression_return conditional_or_expression412 = null;

        csParser.conditional_or_expression_return conditional_or_expression414 = null;


        CommonTree string_literal413_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // mypackage/cs.g:485:27: ( conditional_or_expression ( '??' conditional_or_expression )* )
            // mypackage/cs.g:486:2: conditional_or_expression ( '??' conditional_or_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression3489);
            conditional_or_expression412=conditional_or_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_or_expression412.getTree());
            // mypackage/cs.g:486:30: ( '??' conditional_or_expression )*
            loop119:
            do {
                int alt119=2;
                switch ( input.LA(1) ) {
                case 139:
                    {
                    alt119=1;
                    }
                    break;

                }

                switch (alt119) {
            	case 1 :
            	    // mypackage/cs.g:486:31: '??' conditional_or_expression
            	    {
            	    string_literal413=(Token)match(input,139,FOLLOW_139_in_null_coalescing_expression3494); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal413_tree = (CommonTree)adaptor.create(string_literal413);
            	    adaptor.addChild(root_0, string_literal413_tree);
            	    }
            	    pushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression3498);
            	    conditional_or_expression414=conditional_or_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditional_or_expression414.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, null_coalescing_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "null_coalescing_expression"

    public static class conditional_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditional_expression"
    // mypackage/cs.g:487:1: conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
    public final csParser.conditional_expression_return conditional_expression() throws RecognitionException {
        csParser.conditional_expression_return retval = new csParser.conditional_expression_return();
        retval.start = input.LT(1);
        int conditional_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal416=null;
        Token char_literal418=null;
        csParser.null_coalescing_expression_return null_coalescing_expression415 = null;

        csParser.expression_return expression417 = null;

        csParser.expression_return expression419 = null;


        CommonTree char_literal416_tree=null;
        CommonTree char_literal418_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // mypackage/cs.g:487:23: ( null_coalescing_expression ( '?' expression ':' expression )? )
            // mypackage/cs.g:488:2: null_coalescing_expression ( '?' expression ':' expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression3508);
            null_coalescing_expression415=null_coalescing_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_coalescing_expression415.getTree());
            // mypackage/cs.g:488:31: ( '?' expression ':' expression )?
            int alt120=2;
            switch ( input.LA(1) ) {
                case 110:
                    {
                    alt120=1;
                    }
                    break;
            }

            switch (alt120) {
                case 1 :
                    // mypackage/cs.g:488:32: '?' expression ':' expression
                    {
                    char_literal416=(Token)match(input,110,FOLLOW_110_in_conditional_expression3513); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal416_tree = (CommonTree)adaptor.create(char_literal416);
                    adaptor.addChild(root_0, char_literal416_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditional_expression3517);
                    expression417=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression417.getTree());
                    char_literal418=(Token)match(input,99,FOLLOW_99_in_conditional_expression3521); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal418_tree = (CommonTree)adaptor.create(char_literal418);
                    adaptor.addChild(root_0, char_literal418_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditional_expression3525);
                    expression419=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression419.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, conditional_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"

    public static class lambda_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expression"
    // mypackage/cs.g:493:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
    public final csParser.lambda_expression_return lambda_expression() throws RecognitionException {
        csParser.lambda_expression_return retval = new csParser.lambda_expression_return();
        retval.start = input.LT(1);
        int lambda_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal421=null;
        csParser.anonymous_function_signature_return anonymous_function_signature420 = null;

        csParser.anonymous_function_body_return anonymous_function_body422 = null;


        CommonTree string_literal421_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // mypackage/cs.g:493:18: ( anonymous_function_signature '=>' anonymous_function_body )
            // mypackage/cs.g:494:2: anonymous_function_signature '=>' anonymous_function_body
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression3545);
            anonymous_function_signature420=anonymous_function_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_signature420.getTree());
            string_literal421=(Token)match(input,140,FOLLOW_140_in_lambda_expression3549); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal421_tree = (CommonTree)adaptor.create(string_literal421);
            adaptor.addChild(root_0, string_literal421_tree);
            }
            pushFollow(FOLLOW_anonymous_function_body_in_lambda_expression3553);
            anonymous_function_body422=anonymous_function_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, anonymous_function_body422.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, lambda_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"

    public static class anonymous_function_signature_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_function_signature"
    // mypackage/cs.g:495:1: anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
    public final csParser.anonymous_function_signature_return anonymous_function_signature() throws RecognitionException {
        csParser.anonymous_function_signature_return retval = new csParser.anonymous_function_signature_return();
        retval.start = input.LT(1);
        int anonymous_function_signature_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal423=null;
        Token char_literal426=null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list424 = null;

        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list425 = null;

        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list427 = null;


        CommonTree char_literal423_tree=null;
        CommonTree char_literal426_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // mypackage/cs.g:495:29: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )
            int alt122=2;
            switch ( input.LA(1) ) {
            case 97:
                {
                alt122=1;
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                alt122=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // mypackage/cs.g:496:2: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal423=(Token)match(input,97,FOLLOW_97_in_anonymous_function_signature3560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal423_tree = (CommonTree)adaptor.create(char_literal423);
                    adaptor.addChild(root_0, char_literal423_tree);
                    }
                    // mypackage/cs.g:496:6: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
                    int alt121=3;
                    switch ( input.LA(1) ) {
                        case 91:
                        case 100:
                        case 101:
                        case 169:
                        case 170:
                        case 171:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                            {
                            alt121=1;
                            }
                            break;
                        case IDENTIFIER:
                        case 74:
                        case 141:
                        case 142:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 159:
                        case 160:
                        case 161:
                        case 163:
                        case 166:
                        case 167:
                        case 168:
                        case 179:
                        case 186:
                        case 187:
                        case 204:
                        case 211:
                            {
                            switch ( input.LA(2) ) {
                                case IDENTIFIER:
                                case DOT:
                                case 74:
                                case 93:
                                case 95:
                                case 108:
                                case 109:
                                case 110:
                                case 141:
                                case 142:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 154:
                                case 155:
                                case 156:
                                case 157:
                                case 159:
                                case 160:
                                case 161:
                                case 163:
                                case 166:
                                case 167:
                                case 168:
                                case 179:
                                case 186:
                                case 187:
                                case 204:
                                case 211:
                                    {
                                    alt121=1;
                                    }
                                    break;
                                case RPAREN:
                                case 98:
                                    {
                                    alt121=2;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt121) {
                        case 1 :
                            // mypackage/cs.g:496:7: explicit_anonymous_function_parameter_list
                            {
                            pushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3563);
                            explicit_anonymous_function_parameter_list424=explicit_anonymous_function_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_anonymous_function_parameter_list424.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:497:5: implicit_anonymous_function_parameter_list
                            {
                            pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3569);
                            implicit_anonymous_function_parameter_list425=implicit_anonymous_function_parameter_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter_list425.getTree());

                            }
                            break;

                    }

                    char_literal426=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_anonymous_function_signature3573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal426_tree = (CommonTree)adaptor.create(char_literal426);
                    adaptor.addChild(root_0, char_literal426_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:498:4: implicit_anonymous_function_parameter_list
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3578);
                    implicit_anonymous_function_parameter_list427=implicit_anonymous_function_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter_list427.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, anonymous_function_signature_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_signature"

    public static class implicit_anonymous_function_parameter_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // mypackage/cs.g:500:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
    public final csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() throws RecognitionException {
        csParser.implicit_anonymous_function_parameter_list_return retval = new csParser.implicit_anonymous_function_parameter_list_return();
        retval.start = input.LT(1);
        int implicit_anonymous_function_parameter_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal429=null;
        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter428 = null;

        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter430 = null;


        CommonTree char_literal429_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // mypackage/cs.g:500:43: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
            // mypackage/cs.g:501:2: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3587);
            implicit_anonymous_function_parameter428=implicit_anonymous_function_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter428.getTree());
            // mypackage/cs.g:501:42: ( ',' implicit_anonymous_function_parameter )*
            loop123:
            do {
                int alt123=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt123=1;
                    }
                    break;

                }

                switch (alt123) {
            	case 1 :
            	    // mypackage/cs.g:501:43: ',' implicit_anonymous_function_parameter
            	    {
            	    char_literal429=(Token)match(input,98,FOLLOW_98_in_implicit_anonymous_function_parameter_list3592); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal429_tree = (CommonTree)adaptor.create(char_literal429);
            	    adaptor.addChild(root_0, char_literal429_tree);
            	    }
            	    pushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3596);
            	    implicit_anonymous_function_parameter430=implicit_anonymous_function_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_anonymous_function_parameter430.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, implicit_anonymous_function_parameter_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"

    public static class implicit_anonymous_function_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implicit_anonymous_function_parameter"
    // mypackage/cs.g:502:1: implicit_anonymous_function_parameter : identifier ;
    public final csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() throws RecognitionException {
        csParser.implicit_anonymous_function_parameter_return retval = new csParser.implicit_anonymous_function_parameter_return();
        retval.start = input.LT(1);
        int implicit_anonymous_function_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.identifier_return identifier431 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // mypackage/cs.g:502:38: ( identifier )
            // mypackage/cs.g:503:2: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_implicit_anonymous_function_parameter3606);
            identifier431=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier431.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, implicit_anonymous_function_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter"

    public static class anonymous_function_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "anonymous_function_body"
    // mypackage/cs.g:504:1: anonymous_function_body : ( expression | block );
    public final csParser.anonymous_function_body_return anonymous_function_body() throws RecognitionException {
        csParser.anonymous_function_body_return retval = new csParser.anonymous_function_body_return();
        retval.start = input.LT(1);
        int anonymous_function_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression432 = null;

        csParser.block_return block433 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // mypackage/cs.g:504:24: ( expression | block )
            int alt124=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 74:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt124=1;
                }
                break;
            case SEMI:
            case 71:
                {
                alt124=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }

            switch (alt124) {
                case 1 :
                    // mypackage/cs.g:505:2: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_anonymous_function_body3613);
                    expression432=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression432.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:506:4: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_anonymous_function_body3618);
                    block433=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block433.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, anonymous_function_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_body"

    public static class query_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_expression"
    // mypackage/cs.g:511:1: query_expression : from_clause query_body ;
    public final csParser.query_expression_return query_expression() throws RecognitionException {
        csParser.query_expression_return retval = new csParser.query_expression_return();
        retval.start = input.LT(1);
        int query_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.from_clause_return from_clause434 = null;

        csParser.query_body_return query_body435 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // mypackage/cs.g:511:17: ( from_clause query_body )
            // mypackage/cs.g:512:2: from_clause query_body
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_from_clause_in_query_expression3630);
            from_clause434=from_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_clause434.getTree());
            pushFollow(FOLLOW_query_body_in_query_expression3634);
            query_body435=query_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body435.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, query_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_expression"

    public static class query_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_body"
    // mypackage/cs.g:513:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
    public final csParser.query_body_return query_body() throws RecognitionException {
        csParser.query_body_return retval = new csParser.query_body_return();
        retval.start = input.LT(1);
        int query_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.query_body_clauses_return query_body_clauses436 = null;

        csParser.select_or_group_clause_return select_or_group_clause437 = null;

        csParser.query_continuation_return query_continuation438 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // mypackage/cs.g:513:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
            // mypackage/cs.g:515:2: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:515:2: ( query_body_clauses )?
            int alt125=2;
            switch ( input.LA(1) ) {
                case 142:
                case 144:
                case 147:
                case 148:
                case 154:
                    {
                    alt125=1;
                    }
                    break;
            }

            switch (alt125) {
                case 1 :
                    // mypackage/cs.g:0:0: query_body_clauses
                    {
                    pushFollow(FOLLOW_query_body_clauses_in_query_body3644);
                    query_body_clauses436=query_body_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body_clauses436.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_select_or_group_clause_in_query_body3649);
            select_or_group_clause437=select_or_group_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_or_group_clause437.getTree());
            // mypackage/cs.g:515:49: ( ( 'into' )=> query_continuation )?
            int alt126=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    int LA126_1 = input.LA(2);

                    if ( (synpred225_cs()) ) {
                        alt126=1;
                    }
                    }
                    break;
            }

            switch (alt126) {
                case 1 :
                    // mypackage/cs.g:515:50: ( 'into' )=> query_continuation
                    {
                    pushFollow(FOLLOW_query_continuation_in_query_body3660);
                    query_continuation438=query_continuation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_continuation438.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, query_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_body"

    public static class query_continuation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_continuation"
    // mypackage/cs.g:516:1: query_continuation : 'into' identifier query_body ;
    public final csParser.query_continuation_return query_continuation() throws RecognitionException {
        csParser.query_continuation_return retval = new csParser.query_continuation_return();
        retval.start = input.LT(1);
        int query_continuation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal439=null;
        csParser.identifier_return identifier440 = null;

        csParser.query_body_return query_body441 = null;


        CommonTree string_literal439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // mypackage/cs.g:516:19: ( 'into' identifier query_body )
            // mypackage/cs.g:517:2: 'into' identifier query_body
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal439=(Token)match(input,141,FOLLOW_141_in_query_continuation3670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal439_tree = (CommonTree)adaptor.create(string_literal439);
            adaptor.addChild(root_0, string_literal439_tree);
            }
            pushFollow(FOLLOW_identifier_in_query_continuation3674);
            identifier440=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier440.getTree());
            pushFollow(FOLLOW_query_body_in_query_continuation3678);
            query_body441=query_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body441.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, query_continuation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_continuation"

    public static class query_body_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_body_clauses"
    // mypackage/cs.g:518:1: query_body_clauses : ( query_body_clause )+ ;
    public final csParser.query_body_clauses_return query_body_clauses() throws RecognitionException {
        csParser.query_body_clauses_return retval = new csParser.query_body_clauses_return();
        retval.start = input.LT(1);
        int query_body_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.query_body_clause_return query_body_clause442 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // mypackage/cs.g:518:19: ( ( query_body_clause )+ )
            // mypackage/cs.g:519:2: ( query_body_clause )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:519:2: ( query_body_clause )+
            int cnt127=0;
            loop127:
            do {
                int alt127=2;
                switch ( input.LA(1) ) {
                case 142:
                case 144:
                case 147:
                case 148:
                case 154:
                    {
                    alt127=1;
                    }
                    break;

                }

                switch (alt127) {
            	case 1 :
            	    // mypackage/cs.g:0:0: query_body_clause
            	    {
            	    pushFollow(FOLLOW_query_body_clause_in_query_body_clauses3685);
            	    query_body_clause442=query_body_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_body_clause442.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt127 >= 1 ) break loop127;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(127, input);
                        throw eee;
                }
                cnt127++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, query_body_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_body_clauses"

    public static class query_body_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_body_clause"
    // mypackage/cs.g:520:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
    public final csParser.query_body_clause_return query_body_clause() throws RecognitionException {
        csParser.query_body_clause_return retval = new csParser.query_body_clause_return();
        retval.start = input.LT(1);
        int query_body_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.from_clause_return from_clause443 = null;

        csParser.let_clause_return let_clause444 = null;

        csParser.where_clause_return where_clause445 = null;

        csParser.join_clause_return join_clause446 = null;

        csParser.orderby_clause_return orderby_clause447 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // mypackage/cs.g:520:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
            int alt128=5;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt128=1;
                }
                break;
            case 147:
                {
                alt128=2;
                }
                break;
            case 154:
                {
                alt128=3;
                }
                break;
            case 144:
                {
                alt128=4;
                }
                break;
            case 148:
                {
                alt128=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // mypackage/cs.g:521:2: from_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_from_clause_in_query_body_clause3694);
                    from_clause443=from_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, from_clause443.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:522:4: let_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_let_clause_in_query_body_clause3699);
                    let_clause444=let_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, let_clause444.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:523:4: where_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_where_clause_in_query_body_clause3704);
                    where_clause445=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause445.getTree());

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:524:4: join_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_join_clause_in_query_body_clause3709);
                    join_clause446=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause446.getTree());

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:525:4: orderby_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_orderby_clause_in_query_body_clause3714);
                    orderby_clause447=orderby_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause447.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, query_body_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_body_clause"

    public static class from_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_clause"
    // mypackage/cs.g:526:1: from_clause : 'from' ( type )? identifier 'in' expression ;
    public final csParser.from_clause_return from_clause() throws RecognitionException {
        csParser.from_clause_return retval = new csParser.from_clause_return();
        retval.start = input.LT(1);
        int from_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal448=null;
        Token string_literal451=null;
        csParser.type_return type449 = null;

        csParser.identifier_return identifier450 = null;

        csParser.expression_return expression452 = null;


        CommonTree string_literal448_tree=null;
        CommonTree string_literal451_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // mypackage/cs.g:526:12: ( 'from' ( type )? identifier 'in' expression )
            // mypackage/cs.g:527:2: 'from' ( type )? identifier 'in' expression
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal448=(Token)match(input,142,FOLLOW_142_in_from_clause3721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal448_tree = (CommonTree)adaptor.create(string_literal448);
            adaptor.addChild(root_0, string_literal448_tree);
            }
            // mypackage/cs.g:527:11: ( type )?
            int alt129=2;
            switch ( input.LA(1) ) {
                case 91:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                    {
                    alt129=1;
                    }
                    break;
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    switch ( input.LA(2) ) {
                        case IDENTIFIER:
                        case DOT:
                        case 74:
                        case 93:
                        case 95:
                        case 108:
                        case 109:
                        case 110:
                        case 141:
                        case 142:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 159:
                        case 160:
                        case 161:
                        case 163:
                        case 166:
                        case 167:
                        case 168:
                        case 179:
                        case 186:
                        case 187:
                        case 204:
                        case 211:
                            {
                            alt129=1;
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt129) {
                case 1 :
                    // mypackage/cs.g:0:0: type
                    {
                    pushFollow(FOLLOW_type_in_from_clause3725);
                    type449=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type449.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifier_in_from_clause3730);
            identifier450=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier450.getTree());
            string_literal451=(Token)match(input,143,FOLLOW_143_in_from_clause3734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal451_tree = (CommonTree)adaptor.create(string_literal451);
            adaptor.addChild(root_0, string_literal451_tree);
            }
            pushFollow(FOLLOW_expression_in_from_clause3738);
            expression452=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression452.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, from_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "from_clause"

    public static class join_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_clause"
    // mypackage/cs.g:528:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
    public final csParser.join_clause_return join_clause() throws RecognitionException {
        csParser.join_clause_return retval = new csParser.join_clause_return();
        retval.start = input.LT(1);
        int join_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal453=null;
        Token string_literal456=null;
        Token string_literal458=null;
        Token string_literal460=null;
        Token string_literal462=null;
        csParser.type_return type454 = null;

        csParser.identifier_return identifier455 = null;

        csParser.expression_return expression457 = null;

        csParser.expression_return expression459 = null;

        csParser.expression_return expression461 = null;

        csParser.identifier_return identifier463 = null;


        CommonTree string_literal453_tree=null;
        CommonTree string_literal456_tree=null;
        CommonTree string_literal458_tree=null;
        CommonTree string_literal460_tree=null;
        CommonTree string_literal462_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // mypackage/cs.g:528:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
            // mypackage/cs.g:529:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal453=(Token)match(input,144,FOLLOW_144_in_join_clause3746); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal453_tree = (CommonTree)adaptor.create(string_literal453);
            adaptor.addChild(root_0, string_literal453_tree);
            }
            // mypackage/cs.g:529:11: ( type )?
            int alt130=2;
            switch ( input.LA(1) ) {
                case 91:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                    {
                    alt130=1;
                    }
                    break;
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    switch ( input.LA(2) ) {
                        case IDENTIFIER:
                        case DOT:
                        case 74:
                        case 93:
                        case 95:
                        case 108:
                        case 109:
                        case 110:
                        case 141:
                        case 142:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 159:
                        case 160:
                        case 161:
                        case 163:
                        case 166:
                        case 167:
                        case 168:
                        case 179:
                        case 186:
                        case 187:
                        case 204:
                        case 211:
                            {
                            alt130=1;
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt130) {
                case 1 :
                    // mypackage/cs.g:0:0: type
                    {
                    pushFollow(FOLLOW_type_in_join_clause3750);
                    type454=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type454.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifier_in_join_clause3755);
            identifier455=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier455.getTree());
            string_literal456=(Token)match(input,143,FOLLOW_143_in_join_clause3759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = (CommonTree)adaptor.create(string_literal456);
            adaptor.addChild(root_0, string_literal456_tree);
            }
            pushFollow(FOLLOW_expression_in_join_clause3763);
            expression457=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression457.getTree());
            string_literal458=(Token)match(input,145,FOLLOW_145_in_join_clause3767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal458_tree = (CommonTree)adaptor.create(string_literal458);
            adaptor.addChild(root_0, string_literal458_tree);
            }
            pushFollow(FOLLOW_expression_in_join_clause3771);
            expression459=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression459.getTree());
            string_literal460=(Token)match(input,146,FOLLOW_146_in_join_clause3775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = (CommonTree)adaptor.create(string_literal460);
            adaptor.addChild(root_0, string_literal460_tree);
            }
            pushFollow(FOLLOW_expression_in_join_clause3779);
            expression461=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression461.getTree());
            // mypackage/cs.g:529:94: ( 'into' identifier )?
            int alt131=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt131=1;
                    }
                    break;
            }

            switch (alt131) {
                case 1 :
                    // mypackage/cs.g:529:95: 'into' identifier
                    {
                    string_literal462=(Token)match(input,141,FOLLOW_141_in_join_clause3782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal462_tree = (CommonTree)adaptor.create(string_literal462);
                    adaptor.addChild(root_0, string_literal462_tree);
                    }
                    pushFollow(FOLLOW_identifier_in_join_clause3784);
                    identifier463=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier463.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_clause"

    public static class let_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "let_clause"
    // mypackage/cs.g:530:1: let_clause : 'let' identifier '=' expression ;
    public final csParser.let_clause_return let_clause() throws RecognitionException {
        csParser.let_clause_return retval = new csParser.let_clause_return();
        retval.start = input.LT(1);
        int let_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal464=null;
        Token char_literal466=null;
        csParser.identifier_return identifier465 = null;

        csParser.expression_return expression467 = null;


        CommonTree string_literal464_tree=null;
        CommonTree char_literal466_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // mypackage/cs.g:530:11: ( 'let' identifier '=' expression )
            // mypackage/cs.g:531:2: 'let' identifier '=' expression
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal464=(Token)match(input,147,FOLLOW_147_in_let_clause3794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal464_tree = (CommonTree)adaptor.create(string_literal464);
            adaptor.addChild(root_0, string_literal464_tree);
            }
            pushFollow(FOLLOW_identifier_in_let_clause3798);
            identifier465=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier465.getTree());
            char_literal466=(Token)match(input,75,FOLLOW_75_in_let_clause3802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal466_tree = (CommonTree)adaptor.create(char_literal466);
            adaptor.addChild(root_0, char_literal466_tree);
            }
            pushFollow(FOLLOW_expression_in_let_clause3806);
            expression467=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression467.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, let_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "let_clause"

    public static class orderby_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderby_clause"
    // mypackage/cs.g:532:1: orderby_clause : 'orderby' ordering_list ;
    public final csParser.orderby_clause_return orderby_clause() throws RecognitionException {
        csParser.orderby_clause_return retval = new csParser.orderby_clause_return();
        retval.start = input.LT(1);
        int orderby_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal468=null;
        csParser.ordering_list_return ordering_list469 = null;


        CommonTree string_literal468_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // mypackage/cs.g:532:15: ( 'orderby' ordering_list )
            // mypackage/cs.g:533:2: 'orderby' ordering_list
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal468=(Token)match(input,148,FOLLOW_148_in_orderby_clause3813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal468_tree = (CommonTree)adaptor.create(string_literal468);
            adaptor.addChild(root_0, string_literal468_tree);
            }
            pushFollow(FOLLOW_ordering_list_in_orderby_clause3817);
            ordering_list469=ordering_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering_list469.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, orderby_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "orderby_clause"

    public static class ordering_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ordering_list"
    // mypackage/cs.g:534:1: ordering_list : ordering ( ',' ordering )* ;
    public final csParser.ordering_list_return ordering_list() throws RecognitionException {
        csParser.ordering_list_return retval = new csParser.ordering_list_return();
        retval.start = input.LT(1);
        int ordering_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal471=null;
        csParser.ordering_return ordering470 = null;

        csParser.ordering_return ordering472 = null;


        CommonTree char_literal471_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // mypackage/cs.g:534:14: ( ordering ( ',' ordering )* )
            // mypackage/cs.g:535:2: ordering ( ',' ordering )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ordering_in_ordering_list3825);
            ordering470=ordering();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering470.getTree());
            // mypackage/cs.g:535:13: ( ',' ordering )*
            loop132:
            do {
                int alt132=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt132=1;
                    }
                    break;

                }

                switch (alt132) {
            	case 1 :
            	    // mypackage/cs.g:535:14: ',' ordering
            	    {
            	    char_literal471=(Token)match(input,98,FOLLOW_98_in_ordering_list3830); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal471_tree = (CommonTree)adaptor.create(char_literal471);
            	    adaptor.addChild(root_0, char_literal471_tree);
            	    }
            	    pushFollow(FOLLOW_ordering_in_ordering_list3834);
            	    ordering472=ordering();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering472.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, ordering_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ordering_list"

    public static class ordering_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ordering"
    // mypackage/cs.g:536:1: ordering : expression ordering_direction ;
    public final csParser.ordering_return ordering() throws RecognitionException {
        csParser.ordering_return retval = new csParser.ordering_return();
        retval.start = input.LT(1);
        int ordering_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression473 = null;

        csParser.ordering_direction_return ordering_direction474 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // mypackage/cs.g:536:9: ( expression ordering_direction )
            // mypackage/cs.g:537:2: expression ordering_direction
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_ordering3844);
            expression473=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression473.getTree());
            pushFollow(FOLLOW_ordering_direction_in_ordering3849);
            ordering_direction474=ordering_direction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ordering_direction474.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, ordering_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ordering"

    public static class ordering_direction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ordering_direction"
    // mypackage/cs.g:539:1: ordering_direction : ( 'ascending' | 'descending' );
    public final csParser.ordering_direction_return ordering_direction() throws RecognitionException {
        csParser.ordering_direction_return retval = new csParser.ordering_direction_return();
        retval.start = input.LT(1);
        int ordering_direction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set475=null;

        CommonTree set475_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // mypackage/cs.g:539:19: ( 'ascending' | 'descending' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set475=(Token)input.LT(1);
            if ( (input.LA(1)>=149 && input.LA(1)<=150) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set475));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, ordering_direction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ordering_direction"

    public static class select_or_group_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_or_group_clause"
    // mypackage/cs.g:542:1: select_or_group_clause : ( select_clause | group_clause );
    public final csParser.select_or_group_clause_return select_or_group_clause() throws RecognitionException {
        csParser.select_or_group_clause_return retval = new csParser.select_or_group_clause_return();
        retval.start = input.LT(1);
        int select_or_group_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.select_clause_return select_clause476 = null;

        csParser.group_clause_return group_clause477 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // mypackage/cs.g:542:23: ( select_clause | group_clause )
            int alt133=2;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt133=1;
                }
                break;
            case 152:
                {
                alt133=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }

            switch (alt133) {
                case 1 :
                    // mypackage/cs.g:543:2: select_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_select_clause_in_select_or_group_clause3871);
                    select_clause476=select_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_clause476.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:544:4: group_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_group_clause_in_select_or_group_clause3876);
                    group_clause477=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause477.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, select_or_group_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_or_group_clause"

    public static class select_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_clause"
    // mypackage/cs.g:545:1: select_clause : 'select' expression ;
    public final csParser.select_clause_return select_clause() throws RecognitionException {
        csParser.select_clause_return retval = new csParser.select_clause_return();
        retval.start = input.LT(1);
        int select_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal478=null;
        csParser.expression_return expression479 = null;


        CommonTree string_literal478_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // mypackage/cs.g:545:14: ( 'select' expression )
            // mypackage/cs.g:546:2: 'select' expression
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal478=(Token)match(input,151,FOLLOW_151_in_select_clause3884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = (CommonTree)adaptor.create(string_literal478);
            adaptor.addChild(root_0, string_literal478_tree);
            }
            pushFollow(FOLLOW_expression_in_select_clause3888);
            expression479=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression479.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, select_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_clause"

    public static class group_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_clause"
    // mypackage/cs.g:547:1: group_clause : 'group' expression 'by' expression ;
    public final csParser.group_clause_return group_clause() throws RecognitionException {
        csParser.group_clause_return retval = new csParser.group_clause_return();
        retval.start = input.LT(1);
        int group_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal480=null;
        Token string_literal482=null;
        csParser.expression_return expression481 = null;

        csParser.expression_return expression483 = null;


        CommonTree string_literal480_tree=null;
        CommonTree string_literal482_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // mypackage/cs.g:547:13: ( 'group' expression 'by' expression )
            // mypackage/cs.g:548:2: 'group' expression 'by' expression
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal480=(Token)match(input,152,FOLLOW_152_in_group_clause3896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal480_tree = (CommonTree)adaptor.create(string_literal480);
            adaptor.addChild(root_0, string_literal480_tree);
            }
            pushFollow(FOLLOW_expression_in_group_clause3900);
            expression481=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression481.getTree());
            string_literal482=(Token)match(input,153,FOLLOW_153_in_group_clause3904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = (CommonTree)adaptor.create(string_literal482);
            adaptor.addChild(root_0, string_literal482_tree);
            }
            pushFollow(FOLLOW_expression_in_group_clause3908);
            expression483=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression483.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, group_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_clause"

    public static class where_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_clause"
    // mypackage/cs.g:549:1: where_clause : 'where' booleanean_expression ;
    public final csParser.where_clause_return where_clause() throws RecognitionException {
        csParser.where_clause_return retval = new csParser.where_clause_return();
        retval.start = input.LT(1);
        int where_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal484=null;
        csParser.booleanean_expression_return booleanean_expression485 = null;


        CommonTree string_literal484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // mypackage/cs.g:549:13: ( 'where' booleanean_expression )
            // mypackage/cs.g:550:2: 'where' booleanean_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal484=(Token)match(input,154,FOLLOW_154_in_where_clause3916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal484_tree = (CommonTree)adaptor.create(string_literal484);
            adaptor.addChild(root_0, string_literal484_tree);
            }
            pushFollow(FOLLOW_booleanean_expression_in_where_clause3920);
            booleanean_expression485=booleanean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanean_expression485.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, where_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public static class booleanean_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanean_expression"
    // mypackage/cs.g:551:1: booleanean_expression : expression ;
    public final csParser.booleanean_expression_return booleanean_expression() throws RecognitionException {
        csParser.booleanean_expression_return retval = new csParser.booleanean_expression_return();
        retval.start = input.LT(1);
        int booleanean_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression486 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // mypackage/cs.g:551:22: ( expression )
            // mypackage/cs.g:552:2: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_booleanean_expression3928);
            expression486=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression486.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, booleanean_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanean_expression"

    public static class global_attributes_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_attributes"
    // mypackage/cs.g:557:1: global_attributes : ( global_attribute )+ ;
    public final csParser.global_attributes_return global_attributes() throws RecognitionException {
        csParser.global_attributes_return retval = new csParser.global_attributes_return();
        retval.start = input.LT(1);
        int global_attributes_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.global_attribute_return global_attribute487 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // mypackage/cs.g:557:18: ( ( global_attribute )+ )
            // mypackage/cs.g:558:2: ( global_attribute )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:558:2: ( global_attribute )+
            int cnt134=0;
            loop134:
            do {
                int alt134=2;
                switch ( input.LA(1) ) {
                case 95:
                    {
                    switch ( input.LA(2) ) {
                    case 155:
                    case 156:
                        {
                        switch ( input.LA(3) ) {
                        case 99:
                            {
                            alt134=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt134) {
            	case 1 :
            	    // mypackage/cs.g:0:0: global_attribute
            	    {
            	    pushFollow(FOLLOW_global_attribute_in_global_attributes3940);
            	    global_attribute487=global_attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute487.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt134 >= 1 ) break loop134;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(134, input);
                        throw eee;
                }
                cnt134++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, global_attributes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "global_attributes"

    public static class global_attribute_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_attribute"
    // mypackage/cs.g:559:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
    public final csParser.global_attribute_return global_attribute() throws RecognitionException {
        csParser.global_attribute_return retval = new csParser.global_attribute_return();
        retval.start = input.LT(1);
        int global_attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal488=null;
        Token char_literal491=null;
        Token char_literal492=null;
        csParser.global_attribute_target_specifier_return global_attribute_target_specifier489 = null;

        csParser.attribute_list_return attribute_list490 = null;


        CommonTree char_literal488_tree=null;
        CommonTree char_literal491_tree=null;
        CommonTree char_literal492_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // mypackage/cs.g:559:17: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
            // mypackage/cs.g:560:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal488=(Token)match(input,95,FOLLOW_95_in_global_attribute3950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal488_tree = (CommonTree)adaptor.create(char_literal488);
            adaptor.addChild(root_0, char_literal488_tree);
            }
            pushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute3954);
            global_attribute_target_specifier489=global_attribute_target_specifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute_target_specifier489.getTree());
            pushFollow(FOLLOW_attribute_list_in_global_attribute3958);
            attribute_list490=attribute_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_list490.getTree());
            // mypackage/cs.g:560:61: ( ',' )?
            int alt135=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt135=1;
                    }
                    break;
            }

            switch (alt135) {
                case 1 :
                    // mypackage/cs.g:0:0: ','
                    {
                    char_literal491=(Token)match(input,98,FOLLOW_98_in_global_attribute3962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal491_tree = (CommonTree)adaptor.create(char_literal491);
                    adaptor.addChild(root_0, char_literal491_tree);
                    }

                    }
                    break;

            }

            char_literal492=(Token)match(input,96,FOLLOW_96_in_global_attribute3967); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal492_tree = (CommonTree)adaptor.create(char_literal492);
            adaptor.addChild(root_0, char_literal492_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, global_attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "global_attribute"

    public static class global_attribute_target_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_attribute_target_specifier"
    // mypackage/cs.g:561:1: global_attribute_target_specifier : global_attribute_target ':' ;
    public final csParser.global_attribute_target_specifier_return global_attribute_target_specifier() throws RecognitionException {
        csParser.global_attribute_target_specifier_return retval = new csParser.global_attribute_target_specifier_return();
        retval.start = input.LT(1);
        int global_attribute_target_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal494=null;
        csParser.global_attribute_target_return global_attribute_target493 = null;


        CommonTree char_literal494_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // mypackage/cs.g:561:34: ( global_attribute_target ':' )
            // mypackage/cs.g:562:2: global_attribute_target ':'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier3976);
            global_attribute_target493=global_attribute_target();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, global_attribute_target493.getTree());
            char_literal494=(Token)match(input,99,FOLLOW_99_in_global_attribute_target_specifier3980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal494_tree = (CommonTree)adaptor.create(char_literal494);
            adaptor.addChild(root_0, char_literal494_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, global_attribute_target_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target_specifier"

    public static class global_attribute_target_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_attribute_target"
    // mypackage/cs.g:563:1: global_attribute_target : ( 'assembly' | 'module' );
    public final csParser.global_attribute_target_return global_attribute_target() throws RecognitionException {
        csParser.global_attribute_target_return retval = new csParser.global_attribute_target_return();
        retval.start = input.LT(1);
        int global_attribute_target_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set495=null;

        CommonTree set495_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // mypackage/cs.g:563:24: ( 'assembly' | 'module' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set495=(Token)input.LT(1);
            if ( (input.LA(1)>=155 && input.LA(1)<=156) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set495));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, global_attribute_target_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target"

    public static class attributes_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributes"
    // mypackage/cs.g:565:1: attributes : attribute_sections ;
    public final csParser.attributes_return attributes() throws RecognitionException {
        csParser.attributes_return retval = new csParser.attributes_return();
        retval.start = input.LT(1);
        int attributes_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attribute_sections_return attribute_sections496 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // mypackage/cs.g:565:11: ( attribute_sections )
            // mypackage/cs.g:566:2: attribute_sections
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_sections_in_attributes4002);
            attribute_sections496=attribute_sections();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_sections496.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, attributes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attributes"

    public static class attribute_sections_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_sections"
    // mypackage/cs.g:567:1: attribute_sections : ( attribute_section )+ ;
    public final csParser.attribute_sections_return attribute_sections() throws RecognitionException {
        csParser.attribute_sections_return retval = new csParser.attribute_sections_return();
        retval.start = input.LT(1);
        int attribute_sections_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attribute_section_return attribute_section497 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // mypackage/cs.g:567:19: ( ( attribute_section )+ )
            // mypackage/cs.g:568:2: ( attribute_section )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:568:2: ( attribute_section )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                switch ( input.LA(1) ) {
                case 95:
                    {
                    alt136=1;
                    }
                    break;

                }

                switch (alt136) {
            	case 1 :
            	    // mypackage/cs.g:0:0: attribute_section
            	    {
            	    pushFollow(FOLLOW_attribute_section_in_attribute_sections4011);
            	    attribute_section497=attribute_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_section497.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, attribute_sections_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_sections"

    public static class attribute_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_section"
    // mypackage/cs.g:569:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
    public final csParser.attribute_section_return attribute_section() throws RecognitionException {
        csParser.attribute_section_return retval = new csParser.attribute_section_return();
        retval.start = input.LT(1);
        int attribute_section_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal498=null;
        Token char_literal501=null;
        Token char_literal502=null;
        csParser.attribute_target_specifier_return attribute_target_specifier499 = null;

        csParser.attribute_list_return attribute_list500 = null;


        CommonTree char_literal498_tree=null;
        CommonTree char_literal501_tree=null;
        CommonTree char_literal502_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // mypackage/cs.g:569:18: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
            // mypackage/cs.g:570:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal498=(Token)match(input,95,FOLLOW_95_in_attribute_section4021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal498_tree = (CommonTree)adaptor.create(char_literal498);
            adaptor.addChild(root_0, char_literal498_tree);
            }
            // mypackage/cs.g:570:8: ( attribute_target_specifier )?
            int alt137=2;
            switch ( input.LA(1) ) {
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                    {
                    switch ( input.LA(2) ) {
                        case 99:
                            {
                            alt137=1;
                            }
                            break;
                    }

                    }
                    break;
                case 158:
                case 162:
                    {
                    alt137=1;
                    }
                    break;
            }

            switch (alt137) {
                case 1 :
                    // mypackage/cs.g:0:0: attribute_target_specifier
                    {
                    pushFollow(FOLLOW_attribute_target_specifier_in_attribute_section4025);
                    attribute_target_specifier499=attribute_target_specifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_target_specifier499.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_attribute_list_in_attribute_section4030);
            attribute_list500=attribute_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_list500.getTree());
            // mypackage/cs.g:570:55: ( ',' )?
            int alt138=2;
            switch ( input.LA(1) ) {
                case 98:
                    {
                    alt138=1;
                    }
                    break;
            }

            switch (alt138) {
                case 1 :
                    // mypackage/cs.g:0:0: ','
                    {
                    char_literal501=(Token)match(input,98,FOLLOW_98_in_attribute_section4034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal501_tree = (CommonTree)adaptor.create(char_literal501);
                    adaptor.addChild(root_0, char_literal501_tree);
                    }

                    }
                    break;

            }

            char_literal502=(Token)match(input,96,FOLLOW_96_in_attribute_section4039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal502_tree = (CommonTree)adaptor.create(char_literal502);
            adaptor.addChild(root_0, char_literal502_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, attribute_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_section"

    public static class attribute_target_specifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_target_specifier"
    // mypackage/cs.g:571:1: attribute_target_specifier : attribute_target ':' ;
    public final csParser.attribute_target_specifier_return attribute_target_specifier() throws RecognitionException {
        csParser.attribute_target_specifier_return retval = new csParser.attribute_target_specifier_return();
        retval.start = input.LT(1);
        int attribute_target_specifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal504=null;
        csParser.attribute_target_return attribute_target503 = null;


        CommonTree char_literal504_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // mypackage/cs.g:571:27: ( attribute_target ':' )
            // mypackage/cs.g:572:2: attribute_target ':'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_target_in_attribute_target_specifier4048);
            attribute_target503=attribute_target();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_target503.getTree());
            char_literal504=(Token)match(input,99,FOLLOW_99_in_attribute_target_specifier4052); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal504_tree = (CommonTree)adaptor.create(char_literal504);
            adaptor.addChild(root_0, char_literal504_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, attribute_target_specifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_target_specifier"

    public static class attribute_target_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_target"
    // mypackage/cs.g:573:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
    public final csParser.attribute_target_return attribute_target() throws RecognitionException {
        csParser.attribute_target_return retval = new csParser.attribute_target_return();
        retval.start = input.LT(1);
        int attribute_target_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set505=null;

        CommonTree set505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // mypackage/cs.g:573:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set505=(Token)input.LT(1);
            if ( (input.LA(1)>=157 && input.LA(1)<=163) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set505));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, attribute_target_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_target"

    public static class attribute_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_list"
    // mypackage/cs.g:575:1: attribute_list : attribute ( ',' attribute )* ;
    public final csParser.attribute_list_return attribute_list() throws RecognitionException {
        csParser.attribute_list_return retval = new csParser.attribute_list_return();
        retval.start = input.LT(1);
        int attribute_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal507=null;
        csParser.attribute_return attribute506 = null;

        csParser.attribute_return attribute508 = null;


        CommonTree char_literal507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // mypackage/cs.g:575:15: ( attribute ( ',' attribute )* )
            // mypackage/cs.g:576:2: attribute ( ',' attribute )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_in_attribute_list4094);
            attribute506=attribute();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute506.getTree());
            // mypackage/cs.g:576:12: ( ',' attribute )*
            loop139:
            do {
                int alt139=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt139=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt139) {
            	case 1 :
            	    // mypackage/cs.g:576:13: ',' attribute
            	    {
            	    char_literal507=(Token)match(input,98,FOLLOW_98_in_attribute_list4097); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal507_tree = (CommonTree)adaptor.create(char_literal507);
            	    adaptor.addChild(root_0, char_literal507_tree);
            	    }
            	    pushFollow(FOLLOW_attribute_in_attribute_list4099);
            	    attribute508=attribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute508.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, attribute_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_list"

    public static class attribute_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute"
    // mypackage/cs.g:577:1: attribute : type_name ( attribute_arguments )? ;
    public final csParser.attribute_return attribute() throws RecognitionException {
        csParser.attribute_return retval = new csParser.attribute_return();
        retval.start = input.LT(1);
        int attribute_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.type_name_return type_name509 = null;

        csParser.attribute_arguments_return attribute_arguments510 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // mypackage/cs.g:577:10: ( type_name ( attribute_arguments )? )
            // mypackage/cs.g:578:2: type_name ( attribute_arguments )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_name_in_attribute4111);
            type_name509=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name509.getTree());
            // mypackage/cs.g:578:14: ( attribute_arguments )?
            int alt140=2;
            switch ( input.LA(1) ) {
                case 97:
                    {
                    alt140=1;
                    }
                    break;
            }

            switch (alt140) {
                case 1 :
                    // mypackage/cs.g:0:0: attribute_arguments
                    {
                    pushFollow(FOLLOW_attribute_arguments_in_attribute4115);
                    attribute_arguments510=attribute_arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_arguments510.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, attribute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute"

    public static class attribute_arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_arguments"
    // mypackage/cs.g:580:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
    public final csParser.attribute_arguments_return attribute_arguments() throws RecognitionException {
        csParser.attribute_arguments_return retval = new csParser.attribute_arguments_return();
        retval.start = input.LT(1);
        int attribute_arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal511=null;
        Token char_literal512=null;
        Token char_literal515=null;
        Token char_literal517=null;
        csParser.positional_argument_return positional_argument513 = null;

        csParser.named_argument_return named_argument514 = null;

        csParser.positional_argument_return positional_argument516 = null;


        CommonTree char_literal511_tree=null;
        CommonTree char_literal512_tree=null;
        CommonTree char_literal515_tree=null;
        CommonTree char_literal517_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // mypackage/cs.g:580:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
            // mypackage/cs.g:581:2: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal511=(Token)match(input,97,FOLLOW_97_in_attribute_arguments4126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal511_tree = (CommonTree)adaptor.create(char_literal511);
            adaptor.addChild(root_0, char_literal511_tree);
            }
            // mypackage/cs.g:581:8: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
            int alt142=2;
            switch ( input.LA(1) ) {
            case RPAREN:
                {
                alt142=1;
                }
                break;
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 74:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt142=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // mypackage/cs.g:581:9: ')'
                    {
                    char_literal512=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments4131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal512_tree = (CommonTree)adaptor.create(char_literal512);
                    adaptor.addChild(root_0, char_literal512_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:582:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
                    {
                    // mypackage/cs.g:582:8: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
                    // mypackage/cs.g:582:9: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                    {
                    pushFollow(FOLLOW_positional_argument_in_attribute_arguments4151);
                    positional_argument513=positional_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument513.getTree());
                    // mypackage/cs.g:582:31: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
                    loop141:
                    do {
                        int alt141=3;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==IDENTIFIER||LA141_0==74||(LA141_0>=141 && LA141_0<=142)||(LA141_0>=144 && LA141_0<=157)||(LA141_0>=159 && LA141_0<=161)||LA141_0==163||(LA141_0>=166 && LA141_0<=168)||LA141_0==179||(LA141_0>=186 && LA141_0<=187)||LA141_0==204||LA141_0==211) && (synpred252_cs())) {
                            alt141=1;
                        }
                        else if ( (LA141_0==98) ) {
                            alt141=2;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // mypackage/cs.g:582:32: ( ',' identifier '=' )=> named_argument
                    	    {
                    	    pushFollow(FOLLOW_named_argument_in_attribute_arguments4170);
                    	    named_argument514=named_argument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument514.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // mypackage/cs.g:583:15: ',' positional_argument
                    	    {
                    	    char_literal515=(Token)match(input,98,FOLLOW_98_in_attribute_arguments4186); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal515_tree = (CommonTree)adaptor.create(char_literal515);
                    	    adaptor.addChild(root_0, char_literal515_tree);
                    	    }
                    	    pushFollow(FOLLOW_positional_argument_in_attribute_arguments4188);
                    	    positional_argument516=positional_argument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument516.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);


                    }

                    char_literal517=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments4199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal517_tree = (CommonTree)adaptor.create(char_literal517);
                    adaptor.addChild(root_0, char_literal517_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, attribute_arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_arguments"

    public static class positional_argument_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "positional_argument_list"
    // mypackage/cs.g:586:1: positional_argument_list : positional_argument ( ',' positional_argument )* ;
    public final csParser.positional_argument_list_return positional_argument_list() throws RecognitionException {
        csParser.positional_argument_list_return retval = new csParser.positional_argument_list_return();
        retval.start = input.LT(1);
        int positional_argument_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal519=null;
        csParser.positional_argument_return positional_argument518 = null;

        csParser.positional_argument_return positional_argument520 = null;


        CommonTree char_literal519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // mypackage/cs.g:586:25: ( positional_argument ( ',' positional_argument )* )
            // mypackage/cs.g:587:2: positional_argument ( ',' positional_argument )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_positional_argument_in_positional_argument_list4213);
            positional_argument518=positional_argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument518.getTree());
            // mypackage/cs.g:587:22: ( ',' positional_argument )*
            loop143:
            do {
                int alt143=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt143=1;
                    }
                    break;

                }

                switch (alt143) {
            	case 1 :
            	    // mypackage/cs.g:587:23: ',' positional_argument
            	    {
            	    char_literal519=(Token)match(input,98,FOLLOW_98_in_positional_argument_list4216); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal519_tree = (CommonTree)adaptor.create(char_literal519);
            	    adaptor.addChild(root_0, char_literal519_tree);
            	    }
            	    pushFollow(FOLLOW_positional_argument_in_positional_argument_list4218);
            	    positional_argument520=positional_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, positional_argument520.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, positional_argument_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "positional_argument_list"

    public static class positional_argument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "positional_argument"
    // mypackage/cs.g:588:1: positional_argument : attribute_argument_expression ;
    public final csParser.positional_argument_return positional_argument() throws RecognitionException {
        csParser.positional_argument_return retval = new csParser.positional_argument_return();
        retval.start = input.LT(1);
        int positional_argument_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attribute_argument_expression_return attribute_argument_expression521 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // mypackage/cs.g:588:20: ( attribute_argument_expression )
            // mypackage/cs.g:589:2: attribute_argument_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attribute_argument_expression_in_positional_argument4229);
            attribute_argument_expression521=attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_argument_expression521.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, positional_argument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "positional_argument"

    public static class named_argument_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "named_argument_list"
    // mypackage/cs.g:590:1: named_argument_list : named_argument ( ',' named_argument )* ;
    public final csParser.named_argument_list_return named_argument_list() throws RecognitionException {
        csParser.named_argument_list_return retval = new csParser.named_argument_list_return();
        retval.start = input.LT(1);
        int named_argument_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal523=null;
        csParser.named_argument_return named_argument522 = null;

        csParser.named_argument_return named_argument524 = null;


        CommonTree char_literal523_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // mypackage/cs.g:590:20: ( named_argument ( ',' named_argument )* )
            // mypackage/cs.g:591:2: named_argument ( ',' named_argument )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_named_argument_in_named_argument_list4238);
            named_argument522=named_argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument522.getTree());
            // mypackage/cs.g:591:17: ( ',' named_argument )*
            loop144:
            do {
                int alt144=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt144=1;
                    }
                    break;

                }

                switch (alt144) {
            	case 1 :
            	    // mypackage/cs.g:591:18: ',' named_argument
            	    {
            	    char_literal523=(Token)match(input,98,FOLLOW_98_in_named_argument_list4241); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal523_tree = (CommonTree)adaptor.create(char_literal523);
            	    adaptor.addChild(root_0, char_literal523_tree);
            	    }
            	    pushFollow(FOLLOW_named_argument_in_named_argument_list4243);
            	    named_argument524=named_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, named_argument524.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, named_argument_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "named_argument_list"

    public static class named_argument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "named_argument"
    // mypackage/cs.g:592:1: named_argument : identifier '=' attribute_argument_expression ;
    public final csParser.named_argument_return named_argument() throws RecognitionException {
        csParser.named_argument_return retval = new csParser.named_argument_return();
        retval.start = input.LT(1);
        int named_argument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal526=null;
        csParser.identifier_return identifier525 = null;

        csParser.attribute_argument_expression_return attribute_argument_expression527 = null;


        CommonTree char_literal526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // mypackage/cs.g:592:15: ( identifier '=' attribute_argument_expression )
            // mypackage/cs.g:593:2: identifier '=' attribute_argument_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_named_argument4254);
            identifier525=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier525.getTree());
            char_literal526=(Token)match(input,75,FOLLOW_75_in_named_argument4258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal526_tree = (CommonTree)adaptor.create(char_literal526);
            adaptor.addChild(root_0, char_literal526_tree);
            }
            pushFollow(FOLLOW_attribute_argument_expression_in_named_argument4262);
            attribute_argument_expression527=attribute_argument_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attribute_argument_expression527.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, named_argument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "named_argument"

    public static class attribute_argument_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attribute_argument_expression"
    // mypackage/cs.g:594:1: attribute_argument_expression : expression ;
    public final csParser.attribute_argument_expression_return attribute_argument_expression() throws RecognitionException {
        csParser.attribute_argument_expression_return retval = new csParser.attribute_argument_expression_return();
        retval.start = input.LT(1);
        int attribute_argument_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression528 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // mypackage/cs.g:594:30: ( expression )
            // mypackage/cs.g:595:2: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_attribute_argument_expression4271);
            expression528=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression528.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, attribute_argument_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "attribute_argument_expression"

    public static class class_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_declaration"
    // mypackage/cs.g:601:1: class_declaration : 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ;
    public final csParser.class_declaration_return class_declaration() throws RecognitionException {
        csParser.class_declaration_return retval = new csParser.class_declaration_return();
        retval.start = input.LT(1);
        int class_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal529=null;
        Token char_literal534=null;
        csParser.type_or_generic_return type_or_generic530 = null;

        csParser.class_base_return class_base531 = null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses532 = null;

        csParser.class_body_return class_body533 = null;


        CommonTree string_literal529_tree=null;
        CommonTree char_literal534_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_class_body=new RewriteRuleSubtreeStream(adaptor,"rule class_body");
        RewriteRuleSubtreeStream stream_type_or_generic=new RewriteRuleSubtreeStream(adaptor,"rule type_or_generic");
        RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses=new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
        RewriteRuleSubtreeStream stream_class_base=new RewriteRuleSubtreeStream(adaptor,"rule class_base");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // mypackage/cs.g:601:18: ( 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? -> type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body )
            // mypackage/cs.g:602:2: 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
            {
            string_literal529=(Token)match(input,164,FOLLOW_164_in_class_declaration4284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal529);

            pushFollow(FOLLOW_type_or_generic_in_class_declaration4287);
            type_or_generic530=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_or_generic.add(type_or_generic530.getTree());
            // mypackage/cs.g:602:29: ( class_base )?
            int alt145=2;
            switch ( input.LA(1) ) {
                case 99:
                    {
                    alt145=1;
                    }
                    break;
            }

            switch (alt145) {
                case 1 :
                    // mypackage/cs.g:0:0: class_base
                    {
                    pushFollow(FOLLOW_class_base_in_class_declaration4291);
                    class_base531=class_base();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_base.add(class_base531.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:602:43: ( type_parameter_constraints_clauses )?
            int alt146=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt146=1;
                    }
                    break;
            }

            switch (alt146) {
                case 1 :
                    // mypackage/cs.g:0:0: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration4296);
                    type_parameter_constraints_clauses532=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_parameter_constraints_clauses.add(type_parameter_constraints_clauses532.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_class_body_in_class_declaration4301);
            class_body533=class_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_class_body.add(class_body533.getTree());
            // mypackage/cs.g:602:94: ( ';' )?
            int alt147=2;
            switch ( input.LA(1) ) {
                case SEMI:
                    {
                    alt147=1;
                    }
                    break;
            }

            switch (alt147) {
                case 1 :
                    // mypackage/cs.g:0:0: ';'
                    {
                    char_literal534=(Token)match(input,SEMI,FOLLOW_SEMI_in_class_declaration4305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal534);


                    }
                    break;

            }



            // AST REWRITE
            // elements: class_body, type_parameter_constraints_clauses, class_base, type_or_generic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 603:2: -> type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body
            {
                adaptor.addChild(root_0, stream_type_or_generic.nextTree());
                // mypackage/cs.g:603:23: ( class_base )?
                if ( stream_class_base.hasNext() ) {
                    adaptor.addChild(root_0, stream_class_base.nextTree());

                }
                stream_class_base.reset();
                // mypackage/cs.g:603:37: ( type_parameter_constraints_clauses )?
                if ( stream_type_parameter_constraints_clauses.hasNext() ) {
                    adaptor.addChild(root_0, stream_type_parameter_constraints_clauses.nextTree());

                }
                stream_type_parameter_constraints_clauses.reset();
                adaptor.addChild(root_0, stream_class_body.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, class_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "class_declaration"

    public static class class_base_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_base"
    // mypackage/cs.g:605:1: class_base : ':' interface_type_list ;
    public final csParser.class_base_return class_base() throws RecognitionException {
        csParser.class_base_return retval = new csParser.class_base_return();
        retval.start = input.LT(1);
        int class_base_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal535=null;
        csParser.interface_type_list_return interface_type_list536 = null;


        CommonTree char_literal535_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // mypackage/cs.g:605:11: ( ':' interface_type_list )
            // mypackage/cs.g:608:2: ':' interface_type_list
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal535=(Token)match(input,99,FOLLOW_99_in_class_base4339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal535_tree = (CommonTree)adaptor.create(char_literal535);
            adaptor.addChild(root_0, char_literal535_tree);
            }
            pushFollow(FOLLOW_interface_type_list_in_class_base4343);
            interface_type_list536=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list536.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, class_base_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "class_base"

    public static class interface_type_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_type_list"
    // mypackage/cs.g:610:1: interface_type_list : type ( ',' type )* ;
    public final csParser.interface_type_list_return interface_type_list() throws RecognitionException {
        csParser.interface_type_list_return retval = new csParser.interface_type_list_return();
        retval.start = input.LT(1);
        int interface_type_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal538=null;
        csParser.type_return type537 = null;

        csParser.type_return type539 = null;


        CommonTree char_literal538_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // mypackage/cs.g:610:20: ( type ( ',' type )* )
            // mypackage/cs.g:611:2: type ( ',' type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_interface_type_list4353);
            type537=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type537.getTree());
            // mypackage/cs.g:611:7: ( ',' type )*
            loop148:
            do {
                int alt148=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt148=1;
                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // mypackage/cs.g:611:8: ',' type
            	    {
            	    char_literal538=(Token)match(input,98,FOLLOW_98_in_interface_type_list4356); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal538_tree = (CommonTree)adaptor.create(char_literal538);
            	    adaptor.addChild(root_0, char_literal538_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_interface_type_list4360);
            	    type539=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type539.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, interface_type_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_type_list"

    public static class class_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_body"
    // mypackage/cs.g:613:1: class_body : '{' ( class_member_declarations )? '}' ;
    public final csParser.class_body_return class_body() throws RecognitionException {
        csParser.class_body_return retval = new csParser.class_body_return();
        retval.start = input.LT(1);
        int class_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal540=null;
        Token char_literal542=null;
        csParser.class_member_declarations_return class_member_declarations541 = null;


        CommonTree char_literal540_tree=null;
        CommonTree char_literal542_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // mypackage/cs.g:613:11: ( '{' ( class_member_declarations )? '}' )
            // mypackage/cs.g:614:2: '{' ( class_member_declarations )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal540=(Token)match(input,71,FOLLOW_71_in_class_body4371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal540_tree = (CommonTree)adaptor.create(char_literal540);
            adaptor.addChild(root_0, char_literal540_tree);
            }
            // mypackage/cs.g:614:8: ( class_member_declarations )?
            int alt149=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case ENUM:
                case 73:
                case 74:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 95:
                case 106:
                case 115:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 163:
                case 164:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 181:
                case 183:
                case 184:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt149=1;
                    }
                    break;
            }

            switch (alt149) {
                case 1 :
                    // mypackage/cs.g:0:0: class_member_declarations
                    {
                    pushFollow(FOLLOW_class_member_declarations_in_class_body4375);
                    class_member_declarations541=class_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_member_declarations541.getTree());

                    }
                    break;

            }

            char_literal542=(Token)match(input,72,FOLLOW_72_in_class_body4380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal542_tree = (CommonTree)adaptor.create(char_literal542);
            adaptor.addChild(root_0, char_literal542_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, class_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "class_body"

    public static class class_member_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_member_declarations"
    // mypackage/cs.g:615:1: class_member_declarations : ( class_member_declaration )+ ;
    public final csParser.class_member_declarations_return class_member_declarations() throws RecognitionException {
        csParser.class_member_declarations_return retval = new csParser.class_member_declarations_return();
        retval.start = input.LT(1);
        int class_member_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.class_member_declaration_return class_member_declaration543 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // mypackage/cs.g:615:26: ( ( class_member_declaration )+ )
            // mypackage/cs.g:616:2: ( class_member_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:616:2: ( class_member_declaration )+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case ENUM:
                case 73:
                case 74:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 95:
                case 106:
                case 115:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 163:
                case 164:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 181:
                case 183:
                case 184:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt150=1;
                    }
                    break;

                }

                switch (alt150) {
            	case 1 :
            	    // mypackage/cs.g:0:0: class_member_declaration
            	    {
            	    pushFollow(FOLLOW_class_member_declaration_in_class_member_declarations4387);
            	    class_member_declaration543=class_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_member_declaration543.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, class_member_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "class_member_declarations"

    public static class constant_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_declaration"
    // mypackage/cs.g:619:1: constant_declaration : 'const' type constant_declarators ';' ;
    public final csParser.constant_declaration_return constant_declaration() throws RecognitionException {
        csParser.constant_declaration_return retval = new csParser.constant_declaration_return();
        retval.start = input.LT(1);
        int constant_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal544=null;
        Token char_literal547=null;
        csParser.type_return type545 = null;

        csParser.constant_declarators_return constant_declarators546 = null;


        CommonTree string_literal544_tree=null;
        CommonTree char_literal547_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // mypackage/cs.g:619:21: ( 'const' type constant_declarators ';' )
            // mypackage/cs.g:620:2: 'const' type constant_declarators ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal544=(Token)match(input,90,FOLLOW_90_in_constant_declaration4398); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal544_tree = (CommonTree)adaptor.create(string_literal544);
            adaptor.addChild(root_0, string_literal544_tree);
            }
            pushFollow(FOLLOW_type_in_constant_declaration4402);
            type545=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type545.getTree());
            pushFollow(FOLLOW_constant_declarators_in_constant_declaration4406);
            constant_declarators546=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators546.getTree());
            char_literal547=(Token)match(input,SEMI,FOLLOW_SEMI_in_constant_declaration4410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal547_tree = (CommonTree)adaptor.create(char_literal547);
            adaptor.addChild(root_0, char_literal547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, constant_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_declaration"

    public static class constant_declarators_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_declarators"
    // mypackage/cs.g:621:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
    public final csParser.constant_declarators_return constant_declarators() throws RecognitionException {
        csParser.constant_declarators_return retval = new csParser.constant_declarators_return();
        retval.start = input.LT(1);
        int constant_declarators_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal549=null;
        csParser.constant_declarator_return constant_declarator548 = null;

        csParser.constant_declarator_return constant_declarator550 = null;


        CommonTree char_literal549_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // mypackage/cs.g:621:21: ( constant_declarator ( ',' constant_declarator )* )
            // mypackage/cs.g:622:2: constant_declarator ( ',' constant_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_constant_declarator_in_constant_declarators4418);
            constant_declarator548=constant_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarator548.getTree());
            // mypackage/cs.g:622:22: ( ',' constant_declarator )*
            loop151:
            do {
                int alt151=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt151=1;
                    }
                    break;

                }

                switch (alt151) {
            	case 1 :
            	    // mypackage/cs.g:622:23: ',' constant_declarator
            	    {
            	    char_literal549=(Token)match(input,98,FOLLOW_98_in_constant_declarators4421); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal549_tree = (CommonTree)adaptor.create(char_literal549);
            	    adaptor.addChild(root_0, char_literal549_tree);
            	    }
            	    pushFollow(FOLLOW_constant_declarator_in_constant_declarators4423);
            	    constant_declarator550=constant_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarator550.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, constant_declarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_declarators"

    public static class constant_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_declarator"
    // mypackage/cs.g:623:1: constant_declarator : identifier ( '=' constant_expression )? ;
    public final csParser.constant_declarator_return constant_declarator() throws RecognitionException {
        csParser.constant_declarator_return retval = new csParser.constant_declarator_return();
        retval.start = input.LT(1);
        int constant_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal552=null;
        csParser.identifier_return identifier551 = null;

        csParser.constant_expression_return constant_expression553 = null;


        CommonTree char_literal552_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // mypackage/cs.g:623:20: ( identifier ( '=' constant_expression )? )
            // mypackage/cs.g:624:2: identifier ( '=' constant_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_constant_declarator4433);
            identifier551=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier551.getTree());
            // mypackage/cs.g:624:15: ( '=' constant_expression )?
            int alt152=2;
            switch ( input.LA(1) ) {
                case 75:
                    {
                    alt152=1;
                    }
                    break;
            }

            switch (alt152) {
                case 1 :
                    // mypackage/cs.g:624:16: '=' constant_expression
                    {
                    char_literal552=(Token)match(input,75,FOLLOW_75_in_constant_declarator4438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal552_tree = (CommonTree)adaptor.create(char_literal552);
                    adaptor.addChild(root_0, char_literal552_tree);
                    }
                    pushFollow(FOLLOW_constant_expression_in_constant_declarator4442);
                    constant_expression553=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression553.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, constant_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_declarator"

    public static class constant_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_expression"
    // mypackage/cs.g:625:1: constant_expression : expression ;
    public final csParser.constant_expression_return constant_expression() throws RecognitionException {
        csParser.constant_expression_return retval = new csParser.constant_expression_return();
        retval.start = input.LT(1);
        int constant_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression554 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // mypackage/cs.g:625:20: ( expression )
            // mypackage/cs.g:626:2: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constant_expression4452);
            expression554=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, constant_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_expression"

    public static class field_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_declaration"
    // mypackage/cs.g:629:1: field_declaration : variable_declarators ';' -> variable_declarators ;
    public final csParser.field_declaration_return field_declaration() throws RecognitionException {
        csParser.field_declaration_return retval = new csParser.field_declaration_return();
        retval.start = input.LT(1);
        int field_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal556=null;
        csParser.variable_declarators_return variable_declarators555 = null;


        CommonTree char_literal556_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_variable_declarators=new RewriteRuleSubtreeStream(adaptor,"rule variable_declarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // mypackage/cs.g:629:18: ( variable_declarators ';' -> variable_declarators )
            // mypackage/cs.g:630:2: variable_declarators ';'
            {
            pushFollow(FOLLOW_variable_declarators_in_field_declaration4461);
            variable_declarators555=variable_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_declarators.add(variable_declarators555.getTree());
            char_literal556=(Token)match(input,SEMI,FOLLOW_SEMI_in_field_declaration4465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal556);



            // AST REWRITE
            // elements: variable_declarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 631:2: -> variable_declarators
            {
                adaptor.addChild(root_0, stream_variable_declarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, field_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_declaration"

    public static class variable_declarators_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declarators"
    // mypackage/cs.g:633:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
    public final csParser.variable_declarators_return variable_declarators() throws RecognitionException {
        csParser.variable_declarators_return retval = new csParser.variable_declarators_return();
        retval.start = input.LT(1);
        int variable_declarators_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal558=null;
        csParser.variable_declarator_return variable_declarator557 = null;

        csParser.variable_declarator_return variable_declarator559 = null;


        CommonTree char_literal558_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // mypackage/cs.g:633:21: ( variable_declarator ( ',' variable_declarator )* )
            // mypackage/cs.g:634:2: variable_declarator ( ',' variable_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variable_declarator_in_variable_declarators4479);
            variable_declarator557=variable_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarator557.getTree());
            // mypackage/cs.g:634:22: ( ',' variable_declarator )*
            loop153:
            do {
                int alt153=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt153=1;
                    }
                    break;

                }

                switch (alt153) {
            	case 1 :
            	    // mypackage/cs.g:634:23: ',' variable_declarator
            	    {
            	    char_literal558=(Token)match(input,98,FOLLOW_98_in_variable_declarators4482); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal558_tree = (CommonTree)adaptor.create(char_literal558);
            	    adaptor.addChild(root_0, char_literal558_tree);
            	    }
            	    pushFollow(FOLLOW_variable_declarator_in_variable_declarators4486);
            	    variable_declarator559=variable_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarator559.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, variable_declarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declarators"

    public static class variable_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declarator"
    // mypackage/cs.g:635:1: variable_declarator : type_name ( '=' variable_initializer )? ;
    public final csParser.variable_declarator_return variable_declarator() throws RecognitionException {
        csParser.variable_declarator_return retval = new csParser.variable_declarator_return();
        retval.start = input.LT(1);
        int variable_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal561=null;
        csParser.type_name_return type_name560 = null;

        csParser.variable_initializer_return variable_initializer562 = null;


        CommonTree char_literal561_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // mypackage/cs.g:635:20: ( type_name ( '=' variable_initializer )? )
            // mypackage/cs.g:636:2: type_name ( '=' variable_initializer )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_name_in_variable_declarator4496);
            type_name560=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name560.getTree());
            // mypackage/cs.g:636:12: ( '=' variable_initializer )?
            int alt154=2;
            switch ( input.LA(1) ) {
                case 75:
                    {
                    alt154=1;
                    }
                    break;
            }

            switch (alt154) {
                case 1 :
                    // mypackage/cs.g:636:13: '=' variable_initializer
                    {
                    char_literal561=(Token)match(input,75,FOLLOW_75_in_variable_declarator4499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal561_tree = (CommonTree)adaptor.create(char_literal561);
                    adaptor.addChild(root_0, char_literal561_tree);
                    }
                    pushFollow(FOLLOW_variable_initializer_in_variable_declarator4503);
                    variable_initializer562=variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_initializer562.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, variable_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declarator"

    public static class method_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method_declaration"
    // mypackage/cs.g:639:1: method_declaration : method_header method_body -> ^( METHOD method_header method_body ) ;
    public final csParser.method_declaration_return method_declaration() throws RecognitionException {
        csParser.method_declaration_return retval = new csParser.method_declaration_return();
        retval.start = input.LT(1);
        int method_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.method_header_return method_header563 = null;

        csParser.method_body_return method_body564 = null;


        RewriteRuleSubtreeStream stream_method_body=new RewriteRuleSubtreeStream(adaptor,"rule method_body");
        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // mypackage/cs.g:639:19: ( method_header method_body -> ^( METHOD method_header method_body ) )
            // mypackage/cs.g:640:2: method_header method_body
            {
            pushFollow(FOLLOW_method_header_in_method_declaration4517);
            method_header563=method_header();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_header.add(method_header563.getTree());
            pushFollow(FOLLOW_method_body_in_method_declaration4521);
            method_body564=method_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_body.add(method_body564.getTree());


            // AST REWRITE
            // elements: method_header, method_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 640:30: -> ^( METHOD method_header method_body )
            {
                // mypackage/cs.g:640:33: ^( METHOD method_header method_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD, "METHOD"), root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());
                adaptor.addChild(root_1, stream_method_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, method_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method_declaration"

    public static class method_header_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method_header"
    // mypackage/cs.g:641:1: method_header : member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
    public final csParser.method_header_return method_header() throws RecognitionException {
        csParser.method_header_return retval = new csParser.method_header_return();
        retval.start = input.LT(1);
        int method_header_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal566=null;
        Token char_literal568=null;
        csParser.member_name_return member_name565 = null;

        csParser.formal_parameter_list_return formal_parameter_list567 = null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses569 = null;


        CommonTree char_literal566_tree=null;
        CommonTree char_literal568_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // mypackage/cs.g:641:14: ( member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
            // mypackage/cs.g:642:2: member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_member_name_in_method_header4538);
            member_name565=member_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name565.getTree());
            char_literal566=(Token)match(input,97,FOLLOW_97_in_method_header4541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal566_tree = (CommonTree)adaptor.create(char_literal566);
            adaptor.addChild(root_0, char_literal566_tree);
            }
            // mypackage/cs.g:642:21: ( formal_parameter_list )?
            int alt155=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 91:
                case 92:
                case 95:
                case 100:
                case 101:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 180:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt155=1;
                    }
                    break;
            }

            switch (alt155) {
                case 1 :
                    // mypackage/cs.g:0:0: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_method_header4545);
                    formal_parameter_list567=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list567.getTree());

                    }
                    break;

            }

            char_literal568=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_method_header4550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal568_tree = (CommonTree)adaptor.create(char_literal568);
            adaptor.addChild(root_0, char_literal568_tree);
            }
            // mypackage/cs.g:642:52: ( type_parameter_constraints_clauses )?
            int alt156=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt156=1;
                    }
                    break;
            }

            switch (alt156) {
                case 1 :
                    // mypackage/cs.g:0:0: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header4554);
                    type_parameter_constraints_clauses569=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses569.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, method_header_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method_header"

    public static class method_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method_body"
    // mypackage/cs.g:643:1: method_body : block ;
    public final csParser.method_body_return method_body() throws RecognitionException {
        csParser.method_body_return retval = new csParser.method_body_return();
        retval.start = input.LT(1);
        int method_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.block_return block570 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // mypackage/cs.g:643:12: ( block )
            // mypackage/cs.g:644:2: block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_block_in_method_body4563);
            block570=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block570.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, method_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method_body"

    public static class member_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "member_name"
    // mypackage/cs.g:645:1: member_name : qid ;
    public final csParser.member_name_return member_name() throws RecognitionException {
        csParser.member_name_return retval = new csParser.member_name_return();
        retval.start = input.LT(1);
        int member_name_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.qid_return qid571 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // mypackage/cs.g:645:12: ( qid )
            // mypackage/cs.g:646:2: qid
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qid_in_member_name4571);
            qid571=qid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qid571.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, member_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "member_name"

    public static class property_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "property_declaration"
    // mypackage/cs.g:649:1: property_declaration : member_name '{' accessor_declarations '}' ;
    public final csParser.property_declaration_return property_declaration() throws RecognitionException {
        csParser.property_declaration_return retval = new csParser.property_declaration_return();
        retval.start = input.LT(1);
        int property_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal573=null;
        Token char_literal575=null;
        csParser.member_name_return member_name572 = null;

        csParser.accessor_declarations_return accessor_declarations574 = null;


        CommonTree char_literal573_tree=null;
        CommonTree char_literal575_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // mypackage/cs.g:649:21: ( member_name '{' accessor_declarations '}' )
            // mypackage/cs.g:650:2: member_name '{' accessor_declarations '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_member_name_in_property_declaration4583);
            member_name572=member_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name572.getTree());
            char_literal573=(Token)match(input,71,FOLLOW_71_in_property_declaration4587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal573_tree = (CommonTree)adaptor.create(char_literal573);
            adaptor.addChild(root_0, char_literal573_tree);
            }
            pushFollow(FOLLOW_accessor_declarations_in_property_declaration4591);
            accessor_declarations574=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_declarations574.getTree());
            char_literal575=(Token)match(input,72,FOLLOW_72_in_property_declaration4595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal575_tree = (CommonTree)adaptor.create(char_literal575);
            adaptor.addChild(root_0, char_literal575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, property_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "property_declaration"

    public static class accessor_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_declarations"
    // mypackage/cs.g:651:1: accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
    public final csParser.accessor_declarations_return accessor_declarations() throws RecognitionException {
        csParser.accessor_declarations_return retval = new csParser.accessor_declarations_return();
        retval.start = input.LT(1);
        int accessor_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attributes_return attributes576 = null;

        csParser.get_accessor_declaration_return get_accessor_declaration577 = null;

        csParser.attributes_return attributes578 = null;

        csParser.set_accessor_declaration_return set_accessor_declaration579 = null;

        csParser.set_accessor_declaration_return set_accessor_declaration580 = null;

        csParser.attributes_return attributes581 = null;

        csParser.get_accessor_declaration_return get_accessor_declaration582 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // mypackage/cs.g:651:22: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
            // mypackage/cs.g:652:2: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:652:2: ( attributes )?
            int alt157=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt157=1;
                    }
                    break;
            }

            switch (alt157) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_accessor_declarations4603);
                    attributes576=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes576.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:653:3: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
            int alt162=2;
            switch ( input.LA(1) ) {
            case 78:
            case 79:
            case 80:
            case 81:
                {
                switch ( input.LA(2) ) {
                case 165:
                    {
                    alt162=1;
                    }
                    break;
                case 166:
                    {
                    alt162=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);

                    throw nvae;
                }

                }
                break;
            case 165:
                {
                alt162=1;
                }
                break;
            case 166:
                {
                alt162=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // mypackage/cs.g:653:4: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations4609);
                    get_accessor_declaration577=get_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, get_accessor_declaration577.getTree());
                    // mypackage/cs.g:653:31: ( attributes )?
                    int alt158=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt158=1;
                            }
                            break;
                    }

                    switch (alt158) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations4613);
                            attributes578=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes578.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:653:45: ( set_accessor_declaration )?
                    int alt159=2;
                    switch ( input.LA(1) ) {
                        case 78:
                        case 79:
                        case 80:
                        case 81:
                        case 166:
                            {
                            alt159=1;
                            }
                            break;
                    }

                    switch (alt159) {
                        case 1 :
                            // mypackage/cs.g:0:0: set_accessor_declaration
                            {
                            pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations4618);
                            set_accessor_declaration579=set_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, set_accessor_declaration579.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:654:5: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations4625);
                    set_accessor_declaration580=set_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_accessor_declaration580.getTree());
                    // mypackage/cs.g:654:32: ( attributes )?
                    int alt160=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt160=1;
                            }
                            break;
                    }

                    switch (alt160) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_accessor_declarations4629);
                            attributes581=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes581.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:654:46: ( get_accessor_declaration )?
                    int alt161=2;
                    switch ( input.LA(1) ) {
                        case 78:
                        case 79:
                        case 80:
                        case 81:
                        case 165:
                            {
                            alt161=1;
                            }
                            break;
                    }

                    switch (alt161) {
                        case 1 :
                            // mypackage/cs.g:0:0: get_accessor_declaration
                            {
                            pushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations4634);
                            get_accessor_declaration582=get_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, get_accessor_declaration582.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, accessor_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "accessor_declarations"

    public static class get_accessor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "get_accessor_declaration"
    // mypackage/cs.g:655:1: get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
    public final csParser.get_accessor_declaration_return get_accessor_declaration() throws RecognitionException {
        csParser.get_accessor_declaration_return retval = new csParser.get_accessor_declaration_return();
        retval.start = input.LT(1);
        int get_accessor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal584=null;
        csParser.accessor_modifier_return accessor_modifier583 = null;

        csParser.accessor_body_return accessor_body585 = null;


        CommonTree string_literal584_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // mypackage/cs.g:655:25: ( ( accessor_modifier )? 'get' accessor_body )
            // mypackage/cs.g:656:2: ( accessor_modifier )? 'get' accessor_body
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:656:2: ( accessor_modifier )?
            int alt163=2;
            switch ( input.LA(1) ) {
                case 78:
                case 79:
                case 80:
                case 81:
                    {
                    alt163=1;
                    }
                    break;
            }

            switch (alt163) {
                case 1 :
                    // mypackage/cs.g:0:0: accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration4644);
                    accessor_modifier583=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_modifier583.getTree());

                    }
                    break;

            }

            string_literal584=(Token)match(input,165,FOLLOW_165_in_get_accessor_declaration4649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (CommonTree)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            pushFollow(FOLLOW_accessor_body_in_get_accessor_declaration4653);
            accessor_body585=accessor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_body585.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, get_accessor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "get_accessor_declaration"

    public static class set_accessor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_accessor_declaration"
    // mypackage/cs.g:657:1: set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
    public final csParser.set_accessor_declaration_return set_accessor_declaration() throws RecognitionException {
        csParser.set_accessor_declaration_return retval = new csParser.set_accessor_declaration_return();
        retval.start = input.LT(1);
        int set_accessor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal587=null;
        csParser.accessor_modifier_return accessor_modifier586 = null;

        csParser.accessor_body_return accessor_body588 = null;


        CommonTree string_literal587_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // mypackage/cs.g:657:25: ( ( accessor_modifier )? 'set' accessor_body )
            // mypackage/cs.g:658:2: ( accessor_modifier )? 'set' accessor_body
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:658:2: ( accessor_modifier )?
            int alt164=2;
            switch ( input.LA(1) ) {
                case 78:
                case 79:
                case 80:
                case 81:
                    {
                    alt164=1;
                    }
                    break;
            }

            switch (alt164) {
                case 1 :
                    // mypackage/cs.g:0:0: accessor_modifier
                    {
                    pushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration4661);
                    accessor_modifier586=accessor_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_modifier586.getTree());

                    }
                    break;

            }

            string_literal587=(Token)match(input,166,FOLLOW_166_in_set_accessor_declaration4666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal587_tree = (CommonTree)adaptor.create(string_literal587);
            adaptor.addChild(root_0, string_literal587_tree);
            }
            pushFollow(FOLLOW_accessor_body_in_set_accessor_declaration4670);
            accessor_body588=accessor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_body588.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, set_accessor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_accessor_declaration"

    public static class accessor_modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_modifier"
    // mypackage/cs.g:659:1: accessor_modifier : ( 'public' | 'protected' | 'private' | 'internal' );
    public final csParser.accessor_modifier_return accessor_modifier() throws RecognitionException {
        csParser.accessor_modifier_return retval = new csParser.accessor_modifier_return();
        retval.start = input.LT(1);
        int accessor_modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set589=null;

        CommonTree set589_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // mypackage/cs.g:659:18: ( 'public' | 'protected' | 'private' | 'internal' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set589=(Token)input.LT(1);
            if ( (input.LA(1)>=78 && input.LA(1)<=81) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set589));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, accessor_modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "accessor_modifier"

    public static class accessor_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessor_body"
    // mypackage/cs.g:661:1: accessor_body : block ;
    public final csParser.accessor_body_return accessor_body() throws RecognitionException {
        csParser.accessor_body_return retval = new csParser.accessor_body_return();
        retval.start = input.LT(1);
        int accessor_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.block_return block590 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // mypackage/cs.g:661:14: ( block )
            // mypackage/cs.g:662:2: block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_block_in_accessor_body4698);
            block590=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block590.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, accessor_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "accessor_body"

    public static class event_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "event_declaration"
    // mypackage/cs.g:665:1: event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
    public final csParser.event_declaration_return event_declaration() throws RecognitionException {
        csParser.event_declaration_return retval = new csParser.event_declaration_return();
        retval.start = input.LT(1);
        int event_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal591=null;
        Token char_literal594=null;
        Token char_literal596=null;
        Token char_literal598=null;
        csParser.type_return type592 = null;

        csParser.member_name_return member_name593 = null;

        csParser.event_accessor_declarations_return event_accessor_declarations595 = null;

        csParser.variable_declarators_return variable_declarators597 = null;


        CommonTree string_literal591_tree=null;
        CommonTree char_literal594_tree=null;
        CommonTree char_literal596_tree=null;
        CommonTree char_literal598_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // mypackage/cs.g:665:18: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
            // mypackage/cs.g:666:2: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal591=(Token)match(input,158,FOLLOW_158_in_event_declaration4708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal591_tree = (CommonTree)adaptor.create(string_literal591);
            adaptor.addChild(root_0, string_literal591_tree);
            }
            pushFollow(FOLLOW_type_in_event_declaration4712);
            type592=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type592.getTree());
            // mypackage/cs.g:667:3: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( ((LA165_0>=169 && LA165_0<=177)||(LA165_0>=205 && LA165_0<=210)) && (synpred279_cs())) {
                alt165=1;
            }
            else if ( (LA165_0==IDENTIFIER||LA165_0==74||(LA165_0>=141 && LA165_0<=142)||(LA165_0>=144 && LA165_0<=157)||(LA165_0>=159 && LA165_0<=161)||LA165_0==163||(LA165_0>=166 && LA165_0<=168)||LA165_0==179||(LA165_0>=186 && LA165_0<=187)||LA165_0==204||LA165_0==211) ) {
                int LA165_2 = input.LA(2);

                if ( (synpred279_cs()) ) {
                    alt165=1;
                }
                else if ( (true) ) {
                    alt165=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 165, 2, input);

                    throw nvae;
                }
            }
            else if ( ((LA165_0>=Real_literal && LA165_0<=NULL)) && (synpred279_cs())) {
                alt165=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // mypackage/cs.g:667:4: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
                    {
                    pushFollow(FOLLOW_member_name_in_event_declaration4727);
                    member_name593=member_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_name593.getTree());
                    char_literal594=(Token)match(input,71,FOLLOW_71_in_event_declaration4731); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal594_tree = (CommonTree)adaptor.create(char_literal594);
                    adaptor.addChild(root_0, char_literal594_tree);
                    }
                    pushFollow(FOLLOW_event_accessor_declarations_in_event_declaration4735);
                    event_accessor_declarations595=event_accessor_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, event_accessor_declarations595.getTree());
                    char_literal596=(Token)match(input,72,FOLLOW_72_in_event_declaration4739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal596_tree = (CommonTree)adaptor.create(char_literal596);
                    adaptor.addChild(root_0, char_literal596_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:668:5: variable_declarators ';'
                    {
                    pushFollow(FOLLOW_variable_declarators_in_event_declaration4745);
                    variable_declarators597=variable_declarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declarators597.getTree());
                    char_literal598=(Token)match(input,SEMI,FOLLOW_SEMI_in_event_declaration4749); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal598_tree = (CommonTree)adaptor.create(char_literal598);
                    adaptor.addChild(root_0, char_literal598_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, event_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "event_declaration"

    public static class event_modifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "event_modifiers"
    // mypackage/cs.g:670:1: event_modifiers : ( modifier )+ ;
    public final csParser.event_modifiers_return event_modifiers() throws RecognitionException {
        csParser.event_modifiers_return retval = new csParser.event_modifiers_return();
        retval.start = input.LT(1);
        int event_modifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.modifier_return modifier599 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // mypackage/cs.g:670:16: ( ( modifier )+ )
            // mypackage/cs.g:671:2: ( modifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:671:2: ( modifier )+
            int cnt166=0;
            loop166:
            do {
                int alt166=2;
                switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt166=1;
                    }
                    break;

                }

                switch (alt166) {
            	case 1 :
            	    // mypackage/cs.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_event_modifiers4761);
            	    modifier599=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier599.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, event_modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "event_modifiers"

    public static class event_accessor_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "event_accessor_declarations"
    // mypackage/cs.g:672:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
    public final csParser.event_accessor_declarations_return event_accessor_declarations() throws RecognitionException {
        csParser.event_accessor_declarations_return retval = new csParser.event_accessor_declarations_return();
        retval.start = input.LT(1);
        int event_accessor_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attributes_return attributes600 = null;

        csParser.add_accessor_declaration_return add_accessor_declaration601 = null;

        csParser.attributes_return attributes602 = null;

        csParser.remove_accessor_declaration_return remove_accessor_declaration603 = null;

        csParser.remove_accessor_declaration_return remove_accessor_declaration604 = null;

        csParser.attributes_return attributes605 = null;

        csParser.add_accessor_declaration_return add_accessor_declaration606 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // mypackage/cs.g:672:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
            // mypackage/cs.g:673:2: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:673:2: ( attributes )?
            int alt167=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt167=1;
                    }
                    break;
            }

            switch (alt167) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_event_accessor_declarations4770);
                    attributes600=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes600.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:673:16: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
            int alt170=2;
            switch ( input.LA(1) ) {
            case 167:
                {
                alt170=1;
                }
                break;
            case 168:
                {
                alt170=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // mypackage/cs.g:673:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                    {
                    // mypackage/cs.g:673:17: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
                    // mypackage/cs.g:673:18: add_accessor_declaration ( attributes )? remove_accessor_declaration
                    {
                    pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations4777);
                    add_accessor_declaration601=add_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add_accessor_declaration601.getTree());
                    // mypackage/cs.g:673:45: ( attributes )?
                    int alt168=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt168=1;
                            }
                            break;
                    }

                    switch (alt168) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_event_accessor_declarations4781);
                            attributes602=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes602.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4786);
                    remove_accessor_declaration603=remove_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, remove_accessor_declaration603.getTree());

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:674:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                    {
                    // mypackage/cs.g:674:18: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
                    // mypackage/cs.g:674:19: remove_accessor_declaration ( attributes )? add_accessor_declaration
                    {
                    pushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4807);
                    remove_accessor_declaration604=remove_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, remove_accessor_declaration604.getTree());
                    // mypackage/cs.g:674:49: ( attributes )?
                    int alt169=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt169=1;
                            }
                            break;
                    }

                    switch (alt169) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_event_accessor_declarations4811);
                            attributes605=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes605.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations4816);
                    add_accessor_declaration606=add_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add_accessor_declaration606.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, event_accessor_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations"

    public static class add_accessor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "add_accessor_declaration"
    // mypackage/cs.g:675:1: add_accessor_declaration : 'add' block ;
    public final csParser.add_accessor_declaration_return add_accessor_declaration() throws RecognitionException {
        csParser.add_accessor_declaration_return retval = new csParser.add_accessor_declaration_return();
        retval.start = input.LT(1);
        int add_accessor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal607=null;
        csParser.block_return block608 = null;


        CommonTree string_literal607_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // mypackage/cs.g:675:25: ( 'add' block )
            // mypackage/cs.g:676:2: 'add' block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal607=(Token)match(input,167,FOLLOW_167_in_add_accessor_declaration4826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal607_tree = (CommonTree)adaptor.create(string_literal607);
            adaptor.addChild(root_0, string_literal607_tree);
            }
            pushFollow(FOLLOW_block_in_add_accessor_declaration4830);
            block608=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block608.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, add_accessor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "add_accessor_declaration"

    public static class remove_accessor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "remove_accessor_declaration"
    // mypackage/cs.g:677:1: remove_accessor_declaration : 'remove' block ;
    public final csParser.remove_accessor_declaration_return remove_accessor_declaration() throws RecognitionException {
        csParser.remove_accessor_declaration_return retval = new csParser.remove_accessor_declaration_return();
        retval.start = input.LT(1);
        int remove_accessor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal609=null;
        csParser.block_return block610 = null;


        CommonTree string_literal609_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // mypackage/cs.g:677:28: ( 'remove' block )
            // mypackage/cs.g:678:2: 'remove' block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal609=(Token)match(input,168,FOLLOW_168_in_remove_accessor_declaration4838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal609_tree = (CommonTree)adaptor.create(string_literal609);
            adaptor.addChild(root_0, string_literal609_tree);
            }
            pushFollow(FOLLOW_block_in_remove_accessor_declaration4842);
            block610=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block610.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, remove_accessor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "remove_accessor_declaration"

    public static class enum_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_declaration"
    // mypackage/cs.g:683:1: enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
    public final csParser.enum_declaration_return enum_declaration() throws RecognitionException {
        csParser.enum_declaration_return retval = new csParser.enum_declaration_return();
        retval.start = input.LT(1);
        int enum_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal611=null;
        Token char_literal615=null;
        csParser.identifier_return identifier612 = null;

        csParser.enum_base_return enum_base613 = null;

        csParser.enum_body_return enum_body614 = null;


        CommonTree string_literal611_tree=null;
        CommonTree char_literal615_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // mypackage/cs.g:683:17: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
            // mypackage/cs.g:684:2: 'enum' identifier ( enum_base )? enum_body ( ';' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal611=(Token)match(input,ENUM,FOLLOW_ENUM_in_enum_declaration4854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal611_tree = (CommonTree)adaptor.create(string_literal611);
            adaptor.addChild(root_0, string_literal611_tree);
            }
            pushFollow(FOLLOW_identifier_in_enum_declaration4858);
            identifier612=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier612.getTree());
            // mypackage/cs.g:684:24: ( enum_base )?
            int alt171=2;
            switch ( input.LA(1) ) {
                case 99:
                    {
                    alt171=1;
                    }
                    break;
            }

            switch (alt171) {
                case 1 :
                    // mypackage/cs.g:0:0: enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_declaration4862);
                    enum_base613=enum_base();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_base613.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enum_body_in_enum_declaration4867);
            enum_body614=enum_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_body614.getTree());
            // mypackage/cs.g:684:49: ( ';' )?
            int alt172=2;
            switch ( input.LA(1) ) {
                case SEMI:
                    {
                    alt172=1;
                    }
                    break;
            }

            switch (alt172) {
                case 1 :
                    // mypackage/cs.g:0:0: ';'
                    {
                    char_literal615=(Token)match(input,SEMI,FOLLOW_SEMI_in_enum_declaration4871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal615_tree = (CommonTree)adaptor.create(char_literal615);
                    adaptor.addChild(root_0, char_literal615_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, enum_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"

    public static class enum_base_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_base"
    // mypackage/cs.g:685:1: enum_base : ':' integral_type ;
    public final csParser.enum_base_return enum_base() throws RecognitionException {
        csParser.enum_base_return retval = new csParser.enum_base_return();
        retval.start = input.LT(1);
        int enum_base_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal616=null;
        csParser.integral_type_return integral_type617 = null;


        CommonTree char_literal616_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // mypackage/cs.g:685:10: ( ':' integral_type )
            // mypackage/cs.g:686:2: ':' integral_type
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal616=(Token)match(input,99,FOLLOW_99_in_enum_base4880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal616_tree = (CommonTree)adaptor.create(char_literal616);
            adaptor.addChild(root_0, char_literal616_tree);
            }
            pushFollow(FOLLOW_integral_type_in_enum_base4884);
            integral_type617=integral_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integral_type617.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, enum_base_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enum_base"

    public static class enum_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_body"
    // mypackage/cs.g:687:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
    public final csParser.enum_body_return enum_body() throws RecognitionException {
        csParser.enum_body_return retval = new csParser.enum_body_return();
        retval.start = input.LT(1);
        int enum_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal618=null;
        Token char_literal620=null;
        Token char_literal621=null;
        csParser.enum_member_declarations_return enum_member_declarations619 = null;


        CommonTree char_literal618_tree=null;
        CommonTree char_literal620_tree=null;
        CommonTree char_literal621_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // mypackage/cs.g:687:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
            // mypackage/cs.g:688:2: '{' ( enum_member_declarations ( ',' )? )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal618=(Token)match(input,71,FOLLOW_71_in_enum_body4892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal618_tree = (CommonTree)adaptor.create(char_literal618);
            adaptor.addChild(root_0, char_literal618_tree);
            }
            // mypackage/cs.g:688:6: ( enum_member_declarations ( ',' )? )?
            int alt174=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 95:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    alt174=1;
                    }
                    break;
            }

            switch (alt174) {
                case 1 :
                    // mypackage/cs.g:688:7: enum_member_declarations ( ',' )?
                    {
                    pushFollow(FOLLOW_enum_member_declarations_in_enum_body4895);
                    enum_member_declarations619=enum_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declarations619.getTree());
                    // mypackage/cs.g:688:32: ( ',' )?
                    int alt173=2;
                    switch ( input.LA(1) ) {
                        case 98:
                            {
                            alt173=1;
                            }
                            break;
                    }

                    switch (alt173) {
                        case 1 :
                            // mypackage/cs.g:0:0: ','
                            {
                            char_literal620=(Token)match(input,98,FOLLOW_98_in_enum_body4897); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal620_tree = (CommonTree)adaptor.create(char_literal620);
                            adaptor.addChild(root_0, char_literal620_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal621=(Token)match(input,72,FOLLOW_72_in_enum_body4904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal621_tree = (CommonTree)adaptor.create(char_literal621);
            adaptor.addChild(root_0, char_literal621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, enum_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enum_body"

    public static class enum_member_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_member_declarations"
    // mypackage/cs.g:689:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
    public final csParser.enum_member_declarations_return enum_member_declarations() throws RecognitionException {
        csParser.enum_member_declarations_return retval = new csParser.enum_member_declarations_return();
        retval.start = input.LT(1);
        int enum_member_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal623=null;
        csParser.enum_member_declaration_return enum_member_declaration622 = null;

        csParser.enum_member_declaration_return enum_member_declaration624 = null;


        CommonTree char_literal623_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // mypackage/cs.g:689:25: ( enum_member_declaration ( ',' enum_member_declaration )* )
            // mypackage/cs.g:690:2: enum_member_declaration ( ',' enum_member_declaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations4912);
            enum_member_declaration622=enum_member_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declaration622.getTree());
            // mypackage/cs.g:690:26: ( ',' enum_member_declaration )*
            loop175:
            do {
                int alt175=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case IDENTIFIER:
                    case 74:
                    case 95:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt175=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt175) {
            	case 1 :
            	    // mypackage/cs.g:690:27: ',' enum_member_declaration
            	    {
            	    char_literal623=(Token)match(input,98,FOLLOW_98_in_enum_member_declarations4915); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal623_tree = (CommonTree)adaptor.create(char_literal623);
            	    adaptor.addChild(root_0, char_literal623_tree);
            	    }
            	    pushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations4917);
            	    enum_member_declaration624=enum_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_member_declaration624.getTree());

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, enum_member_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enum_member_declarations"

    public static class enum_member_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enum_member_declaration"
    // mypackage/cs.g:691:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
    public final csParser.enum_member_declaration_return enum_member_declaration() throws RecognitionException {
        csParser.enum_member_declaration_return retval = new csParser.enum_member_declaration_return();
        retval.start = input.LT(1);
        int enum_member_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal627=null;
        csParser.attributes_return attributes625 = null;

        csParser.identifier_return identifier626 = null;

        csParser.expression_return expression628 = null;


        CommonTree char_literal627_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // mypackage/cs.g:691:24: ( ( attributes )? identifier ( '=' expression )? )
            // mypackage/cs.g:692:2: ( attributes )? identifier ( '=' expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:692:2: ( attributes )?
            int alt176=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt176=1;
                    }
                    break;
            }

            switch (alt176) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_enum_member_declaration4927);
                    attributes625=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes625.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifier_in_enum_member_declaration4932);
            identifier626=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier626.getTree());
            // mypackage/cs.g:692:29: ( '=' expression )?
            int alt177=2;
            switch ( input.LA(1) ) {
                case 75:
                    {
                    alt177=1;
                    }
                    break;
            }

            switch (alt177) {
                case 1 :
                    // mypackage/cs.g:692:30: '=' expression
                    {
                    char_literal627=(Token)match(input,75,FOLLOW_75_in_enum_member_declaration4937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal627_tree = (CommonTree)adaptor.create(char_literal627);
                    adaptor.addChild(root_0, char_literal627_tree);
                    }
                    pushFollow(FOLLOW_expression_in_enum_member_declaration4941);
                    expression628=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression628.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, enum_member_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enum_member_declaration"

    public static class integral_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integral_type"
    // mypackage/cs.g:697:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
    public final csParser.integral_type_return integral_type() throws RecognitionException {
        csParser.integral_type_return retval = new csParser.integral_type_return();
        retval.start = input.LT(1);
        int integral_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set629=null;

        CommonTree set629_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // mypackage/cs.g:697:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set629=(Token)input.LT(1);
            if ( (input.LA(1)>=169 && input.LA(1)<=177) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set629));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, integral_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integral_type"

    public static class delegate_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delegate_declaration"
    // mypackage/cs.g:701:1: delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    public final csParser.delegate_declaration_return delegate_declaration() throws RecognitionException {
        csParser.delegate_declaration_return retval = new csParser.delegate_declaration_return();
        retval.start = input.LT(1);
        int delegate_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal630=null;
        Token char_literal634=null;
        Token char_literal636=null;
        Token char_literal638=null;
        csParser.return_type_return return_type631 = null;

        csParser.identifier_return identifier632 = null;

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list633 = null;

        csParser.formal_parameter_list_return formal_parameter_list635 = null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses637 = null;


        CommonTree string_literal630_tree=null;
        CommonTree char_literal634_tree=null;
        CommonTree char_literal636_tree=null;
        CommonTree char_literal638_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // mypackage/cs.g:701:21: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
            // mypackage/cs.g:702:2: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal630=(Token)match(input,106,FOLLOW_106_in_delegate_declaration4998); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = (CommonTree)adaptor.create(string_literal630);
            adaptor.addChild(root_0, string_literal630_tree);
            }
            pushFollow(FOLLOW_return_type_in_delegate_declaration5002);
            return_type631=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type631.getTree());
            pushFollow(FOLLOW_identifier_in_delegate_declaration5006);
            identifier632=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier632.getTree());
            // mypackage/cs.g:702:41: ( variant_generic_parameter_list )?
            int alt178=2;
            switch ( input.LA(1) ) {
                case 108:
                    {
                    alt178=1;
                    }
                    break;
            }

            switch (alt178) {
                case 1 :
                    // mypackage/cs.g:0:0: variant_generic_parameter_list
                    {
                    pushFollow(FOLLOW_variant_generic_parameter_list_in_delegate_declaration5009);
                    variant_generic_parameter_list633=variant_generic_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_generic_parameter_list633.getTree());

                    }
                    break;

            }

            char_literal634=(Token)match(input,97,FOLLOW_97_in_delegate_declaration5017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal634_tree = (CommonTree)adaptor.create(char_literal634);
            adaptor.addChild(root_0, char_literal634_tree);
            }
            // mypackage/cs.g:703:9: ( formal_parameter_list )?
            int alt179=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 91:
                case 92:
                case 95:
                case 100:
                case 101:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 180:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt179=1;
                    }
                    break;
            }

            switch (alt179) {
                case 1 :
                    // mypackage/cs.g:0:0: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration5021);
                    formal_parameter_list635=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list635.getTree());

                    }
                    break;

            }

            char_literal636=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_delegate_declaration5026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal636_tree = (CommonTree)adaptor.create(char_literal636);
            adaptor.addChild(root_0, char_literal636_tree);
            }
            // mypackage/cs.g:703:40: ( type_parameter_constraints_clauses )?
            int alt180=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt180=1;
                    }
                    break;
            }

            switch (alt180) {
                case 1 :
                    // mypackage/cs.g:0:0: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5030);
                    type_parameter_constraints_clauses637=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses637.getTree());

                    }
                    break;

            }

            char_literal638=(Token)match(input,SEMI,FOLLOW_SEMI_in_delegate_declaration5035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal638_tree = (CommonTree)adaptor.create(char_literal638);
            adaptor.addChild(root_0, char_literal638_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, delegate_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration"

    public static class delegate_modifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delegate_modifiers"
    // mypackage/cs.g:704:1: delegate_modifiers : ( modifier )+ ;
    public final csParser.delegate_modifiers_return delegate_modifiers() throws RecognitionException {
        csParser.delegate_modifiers_return retval = new csParser.delegate_modifiers_return();
        retval.start = input.LT(1);
        int delegate_modifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.modifier_return modifier639 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // mypackage/cs.g:704:19: ( ( modifier )+ )
            // mypackage/cs.g:705:2: ( modifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:705:2: ( modifier )+
            int cnt181=0;
            loop181:
            do {
                int alt181=2;
                switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt181=1;
                    }
                    break;

                }

                switch (alt181) {
            	case 1 :
            	    // mypackage/cs.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_delegate_modifiers5043);
            	    modifier639=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier639.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt181 >= 1 ) break loop181;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(181, input);
                        throw eee;
                }
                cnt181++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, delegate_modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delegate_modifiers"

    public static class variant_generic_parameter_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variant_generic_parameter_list"
    // mypackage/cs.g:707:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
    public final csParser.variant_generic_parameter_list_return variant_generic_parameter_list() throws RecognitionException {
        csParser.variant_generic_parameter_list_return retval = new csParser.variant_generic_parameter_list_return();
        retval.start = input.LT(1);
        int variant_generic_parameter_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal640=null;
        Token char_literal642=null;
        csParser.variant_type_parameters_return variant_type_parameters641 = null;


        CommonTree char_literal640_tree=null;
        CommonTree char_literal642_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // mypackage/cs.g:707:31: ( '<' variant_type_parameters '>' )
            // mypackage/cs.g:708:2: '<' variant_type_parameters '>'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal640=(Token)match(input,108,FOLLOW_108_in_variant_generic_parameter_list5053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal640_tree = (CommonTree)adaptor.create(char_literal640);
            adaptor.addChild(root_0, char_literal640_tree);
            }
            pushFollow(FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5057);
            variant_type_parameters641=variant_type_parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_parameters641.getTree());
            char_literal642=(Token)match(input,GT,FOLLOW_GT_in_variant_generic_parameter_list5061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal642_tree = (CommonTree)adaptor.create(char_literal642);
            adaptor.addChild(root_0, char_literal642_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, variant_generic_parameter_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variant_generic_parameter_list"

    public static class variant_type_parameters_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variant_type_parameters"
    // mypackage/cs.g:709:1: variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
    public final csParser.variant_type_parameters_return variant_type_parameters() throws RecognitionException {
        csParser.variant_type_parameters_return retval = new csParser.variant_type_parameters_return();
        retval.start = input.LT(1);
        int variant_type_parameters_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal644=null;
        csParser.variant_type_variable_name_return variant_type_variable_name643 = null;

        csParser.variant_type_variable_name_return variant_type_variable_name645 = null;


        CommonTree char_literal644_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // mypackage/cs.g:709:24: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
            // mypackage/cs.g:710:2: variant_type_variable_name ( ',' variant_type_variable_name )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters5069);
            variant_type_variable_name643=variant_type_variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_variable_name643.getTree());
            // mypackage/cs.g:710:29: ( ',' variant_type_variable_name )*
            loop182:
            do {
                int alt182=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt182=1;
                    }
                    break;

                }

                switch (alt182) {
            	case 1 :
            	    // mypackage/cs.g:710:30: ',' variant_type_variable_name
            	    {
            	    char_literal644=(Token)match(input,98,FOLLOW_98_in_variant_type_parameters5072); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal644_tree = (CommonTree)adaptor.create(char_literal644);
            	    adaptor.addChild(root_0, char_literal644_tree);
            	    }
            	    pushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters5074);
            	    variant_type_variable_name645=variant_type_variable_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variant_type_variable_name645.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, variant_type_parameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variant_type_parameters"

    public static class variant_type_variable_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variant_type_variable_name"
    // mypackage/cs.g:711:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
    public final csParser.variant_type_variable_name_return variant_type_variable_name() throws RecognitionException {
        csParser.variant_type_variable_name_return retval = new csParser.variant_type_variable_name_return();
        retval.start = input.LT(1);
        int variant_type_variable_name_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attributes_return attributes646 = null;

        csParser.variance_annotation_return variance_annotation647 = null;

        csParser.type_variable_name_return type_variable_name648 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // mypackage/cs.g:711:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
            // mypackage/cs.g:712:2: ( attributes )? ( variance_annotation )? type_variable_name
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:712:2: ( attributes )?
            int alt183=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt183=1;
                    }
                    break;
            }

            switch (alt183) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_variant_type_variable_name5084);
                    attributes646=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes646.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:712:16: ( variance_annotation )?
            int alt184=2;
            switch ( input.LA(1) ) {
                case 100:
                case 143:
                    {
                    alt184=1;
                    }
                    break;
            }

            switch (alt184) {
                case 1 :
                    // mypackage/cs.g:0:0: variance_annotation
                    {
                    pushFollow(FOLLOW_variance_annotation_in_variant_type_variable_name5089);
                    variance_annotation647=variance_annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variance_annotation647.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_variable_name_in_variant_type_variable_name5094);
            type_variable_name648=type_variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variable_name648.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, variant_type_variable_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variant_type_variable_name"

    public static class variance_annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variance_annotation"
    // mypackage/cs.g:713:1: variance_annotation : ( 'in' | 'out' );
    public final csParser.variance_annotation_return variance_annotation() throws RecognitionException {
        csParser.variance_annotation_return retval = new csParser.variance_annotation_return();
        retval.start = input.LT(1);
        int variance_annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set649=null;

        CommonTree set649_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // mypackage/cs.g:713:20: ( 'in' | 'out' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set649=(Token)input.LT(1);
            if ( input.LA(1)==100||input.LA(1)==143 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set649));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, variance_annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variance_annotation"

    public static class type_parameter_constraints_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_parameter_constraints_clauses"
    // mypackage/cs.g:716:1: type_parameter_constraints_clauses : type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* ;
    public final csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() throws RecognitionException {
        csParser.type_parameter_constraints_clauses_return retval = new csParser.type_parameter_constraints_clauses_return();
        retval.start = input.LT(1);
        int type_parameter_constraints_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal651=null;
        csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause650 = null;

        csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause652 = null;


        CommonTree char_literal651_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // mypackage/cs.g:716:35: ( type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* )
            // mypackage/cs.g:717:2: type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5115);
            type_parameter_constraints_clause650=type_parameter_constraints_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clause650.getTree());
            // mypackage/cs.g:717:38: ( ',' type_parameter_constraints_clause )*
            loop185:
            do {
                int alt185=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt185=1;
                    }
                    break;

                }

                switch (alt185) {
            	case 1 :
            	    // mypackage/cs.g:717:39: ',' type_parameter_constraints_clause
            	    {
            	    char_literal651=(Token)match(input,98,FOLLOW_98_in_type_parameter_constraints_clauses5120); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal651_tree = (CommonTree)adaptor.create(char_literal651);
            	    adaptor.addChild(root_0, char_literal651_tree);
            	    }
            	    pushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5124);
            	    type_parameter_constraints_clause652=type_parameter_constraints_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clause652.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, type_parameter_constraints_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clauses"

    public static class type_parameter_constraints_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_parameter_constraints_clause"
    // mypackage/cs.g:718:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
    public final csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause() throws RecognitionException {
        csParser.type_parameter_constraints_clause_return retval = new csParser.type_parameter_constraints_clause_return();
        retval.start = input.LT(1);
        int type_parameter_constraints_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal653=null;
        Token char_literal655=null;
        csParser.type_variable_name_return type_variable_name654 = null;

        csParser.type_parameter_constraint_list_return type_parameter_constraint_list656 = null;


        CommonTree string_literal653_tree=null;
        CommonTree char_literal655_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // mypackage/cs.g:718:34: ( 'where' type_variable_name ':' type_parameter_constraint_list )
            // mypackage/cs.g:719:2: 'where' type_variable_name ':' type_parameter_constraint_list
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal653=(Token)match(input,154,FOLLOW_154_in_type_parameter_constraints_clause5134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal653_tree = (CommonTree)adaptor.create(string_literal653);
            adaptor.addChild(root_0, string_literal653_tree);
            }
            pushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause5138);
            type_variable_name654=type_variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_variable_name654.getTree());
            char_literal655=(Token)match(input,99,FOLLOW_99_in_type_parameter_constraints_clause5142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal655_tree = (CommonTree)adaptor.create(char_literal655);
            adaptor.addChild(root_0, char_literal655_tree);
            }
            pushFollow(FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5146);
            type_parameter_constraint_list656=type_parameter_constraint_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraint_list656.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, type_parameter_constraints_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clause"

    public static class type_parameter_constraint_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_parameter_constraint_list"
    // mypackage/cs.g:721:1: type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
    public final csParser.type_parameter_constraint_list_return type_parameter_constraint_list() throws RecognitionException {
        csParser.type_parameter_constraint_list_return retval = new csParser.type_parameter_constraint_list_return();
        retval.start = input.LT(1);
        int type_parameter_constraint_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set657=null;
        Token char_literal658=null;
        Token char_literal660=null;
        Token char_literal663=null;
        csParser.secondary_constraint_list_return secondary_constraint_list659 = null;

        csParser.constructor_constraint_return constructor_constraint661 = null;

        csParser.secondary_constraint_list_return secondary_constraint_list662 = null;

        csParser.constructor_constraint_return constructor_constraint664 = null;

        csParser.constructor_constraint_return constructor_constraint665 = null;


        CommonTree set657_tree=null;
        CommonTree char_literal658_tree=null;
        CommonTree char_literal660_tree=null;
        CommonTree char_literal663_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // mypackage/cs.g:721:31: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )
            int alt189=3;
            switch ( input.LA(1) ) {
            case 164:
            case 178:
                {
                alt189=1;
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                alt189=2;
                }
                break;
            case 77:
                {
                alt189=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // mypackage/cs.g:722:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    set657=(Token)input.LT(1);
                    if ( input.LA(1)==164||input.LA(1)==178 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set657));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // mypackage/cs.g:722:28: ( ',' secondary_constraint_list )?
                    int alt186=2;
                    switch ( input.LA(1) ) {
                        case 98:
                            {
                            switch ( input.LA(2) ) {
                                case 154:
                                    {
                                    switch ( input.LA(3) ) {
                                        case EOF:
                                        case DOT:
                                        case SEMI:
                                        case 71:
                                        case 93:
                                        case 98:
                                        case 108:
                                            {
                                            alt186=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case IDENTIFIER:
                                case 74:
                                case 141:
                                case 142:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 150:
                                case 151:
                                case 152:
                                case 153:
                                case 155:
                                case 156:
                                case 157:
                                case 159:
                                case 160:
                                case 161:
                                case 163:
                                case 166:
                                case 167:
                                case 168:
                                case 179:
                                case 186:
                                case 187:
                                case 204:
                                case 211:
                                    {
                                    alt186=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt186) {
                        case 1 :
                            // mypackage/cs.g:722:29: ',' secondary_constraint_list
                            {
                            char_literal658=(Token)match(input,98,FOLLOW_98_in_type_parameter_constraint_list5220); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal658_tree = (CommonTree)adaptor.create(char_literal658);
                            adaptor.addChild(root_0, char_literal658_tree);
                            }
                            pushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5224);
                            secondary_constraint_list659=secondary_constraint_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint_list659.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:722:65: ( ',' constructor_constraint )?
                    int alt187=2;
                    switch ( input.LA(1) ) {
                        case 98:
                            {
                            switch ( input.LA(2) ) {
                                case 77:
                                    {
                                    alt187=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt187) {
                        case 1 :
                            // mypackage/cs.g:722:66: ',' constructor_constraint
                            {
                            char_literal660=(Token)match(input,98,FOLLOW_98_in_type_parameter_constraint_list5231); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal660_tree = (CommonTree)adaptor.create(char_literal660);
                            adaptor.addChild(root_0, char_literal660_tree);
                            }
                            pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5235);
                            constructor_constraint661=constructor_constraint();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint661.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:723:4: secondary_constraint_list ( ',' constructor_constraint )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5242);
                    secondary_constraint_list662=secondary_constraint_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint_list662.getTree());
                    // mypackage/cs.g:723:32: ( ',' constructor_constraint )?
                    int alt188=2;
                    switch ( input.LA(1) ) {
                        case 98:
                            {
                            switch ( input.LA(2) ) {
                                case 77:
                                    {
                                    alt188=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt188) {
                        case 1 :
                            // mypackage/cs.g:723:33: ',' constructor_constraint
                            {
                            char_literal663=(Token)match(input,98,FOLLOW_98_in_type_parameter_constraint_list5247); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal663_tree = (CommonTree)adaptor.create(char_literal663);
                            adaptor.addChild(root_0, char_literal663_tree);
                            }
                            pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5251);
                            constructor_constraint664=constructor_constraint();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint664.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // mypackage/cs.g:724:4: constructor_constraint
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list5258);
                    constructor_constraint665=constructor_constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_constraint665.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, type_parameter_constraint_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraint_list"

    public static class secondary_constraint_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondary_constraint_list"
    // mypackage/cs.g:729:1: secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
    public final csParser.secondary_constraint_list_return secondary_constraint_list() throws RecognitionException {
        csParser.secondary_constraint_list_return retval = new csParser.secondary_constraint_list_return();
        retval.start = input.LT(1);
        int secondary_constraint_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal667=null;
        csParser.secondary_constraint_return secondary_constraint666 = null;

        csParser.secondary_constraint_return secondary_constraint668 = null;


        CommonTree char_literal667_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // mypackage/cs.g:729:26: ( secondary_constraint ( ',' secondary_constraint )* )
            // mypackage/cs.g:730:2: secondary_constraint ( ',' secondary_constraint )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list5270);
            secondary_constraint666=secondary_constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint666.getTree());
            // mypackage/cs.g:730:23: ( ',' secondary_constraint )*
            loop190:
            do {
                int alt190=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case 154:
                        {
                        switch ( input.LA(3) ) {
                        case EOF:
                        case DOT:
                        case SEMI:
                        case 71:
                        case 93:
                        case 98:
                        case 108:
                            {
                            alt190=1;
                            }
                            break;

                        }

                        }
                        break;
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        alt190=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt190) {
            	case 1 :
            	    // mypackage/cs.g:730:24: ',' secondary_constraint
            	    {
            	    char_literal667=(Token)match(input,98,FOLLOW_98_in_secondary_constraint_list5273); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal667_tree = (CommonTree)adaptor.create(char_literal667);
            	    adaptor.addChild(root_0, char_literal667_tree);
            	    }
            	    pushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list5275);
            	    secondary_constraint668=secondary_constraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, secondary_constraint668.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, secondary_constraint_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "secondary_constraint_list"

    public static class secondary_constraint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondary_constraint"
    // mypackage/cs.g:731:1: secondary_constraint : type_name ;
    public final csParser.secondary_constraint_return secondary_constraint() throws RecognitionException {
        csParser.secondary_constraint_return retval = new csParser.secondary_constraint_return();
        retval.start = input.LT(1);
        int secondary_constraint_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.type_name_return type_name669 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // mypackage/cs.g:731:21: ( type_name )
            // mypackage/cs.g:732:2: type_name
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_name_in_secondary_constraint5285);
            type_name669=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name669.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, secondary_constraint_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "secondary_constraint"

    public static class type_variable_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_variable_name"
    // mypackage/cs.g:733:1: type_variable_name : identifier ;
    public final csParser.type_variable_name_return type_variable_name() throws RecognitionException {
        csParser.type_variable_name_return retval = new csParser.type_variable_name_return();
        retval.start = input.LT(1);
        int type_variable_name_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.identifier_return identifier670 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // mypackage/cs.g:733:19: ( identifier )
            // mypackage/cs.g:734:2: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_type_variable_name5295);
            identifier670=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier670.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, type_variable_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_variable_name"

    public static class constructor_constraint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_constraint"
    // mypackage/cs.g:735:1: constructor_constraint : 'new' '(' ')' ;
    public final csParser.constructor_constraint_return constructor_constraint() throws RecognitionException {
        csParser.constructor_constraint_return retval = new csParser.constructor_constraint_return();
        retval.start = input.LT(1);
        int constructor_constraint_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal671=null;
        Token char_literal672=null;
        Token char_literal673=null;

        CommonTree string_literal671_tree=null;
        CommonTree char_literal672_tree=null;
        CommonTree char_literal673_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // mypackage/cs.g:735:23: ( 'new' '(' ')' )
            // mypackage/cs.g:736:2: 'new' '(' ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal671=(Token)match(input,77,FOLLOW_77_in_constructor_constraint5303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal671_tree = (CommonTree)adaptor.create(string_literal671);
            adaptor.addChild(root_0, string_literal671_tree);
            }
            char_literal672=(Token)match(input,97,FOLLOW_97_in_constructor_constraint5307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal672_tree = (CommonTree)adaptor.create(char_literal672);
            adaptor.addChild(root_0, char_literal672_tree);
            }
            char_literal673=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_constraint5311); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal673_tree = (CommonTree)adaptor.create(char_literal673);
            adaptor.addChild(root_0, char_literal673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, constructor_constraint_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_constraint"

    public static class return_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_type"
    // mypackage/cs.g:737:1: return_type : ( type | 'void' );
    public final csParser.return_type_return return_type() throws RecognitionException {
        csParser.return_type_return retval = new csParser.return_type_return();
        retval.start = input.LT(1);
        int return_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal675=null;
        csParser.type_return type674 = null;


        CommonTree string_literal675_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // mypackage/cs.g:737:12: ( type | 'void' )
            int alt191=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt191=1;
                }
                break;
            case 91:
                {
                switch ( input.LA(2) ) {
                case 109:
                    {
                    alt191=1;
                    }
                    break;
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    alt191=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // mypackage/cs.g:738:2: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_return_type5319);
                    type674=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type674.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:739:5: 'void'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal675=(Token)match(input,91,FOLLOW_91_in_return_type5325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal675_tree = (CommonTree)adaptor.create(string_literal675);
                    adaptor.addChild(root_0, string_literal675_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, return_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_type"

    public static class formal_parameter_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_parameter_list"
    // mypackage/cs.g:740:1: formal_parameter_list : formal_parameter ( ',' formal_parameter )* ;
    public final csParser.formal_parameter_list_return formal_parameter_list() throws RecognitionException {
        csParser.formal_parameter_list_return retval = new csParser.formal_parameter_list_return();
        retval.start = input.LT(1);
        int formal_parameter_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal677=null;
        csParser.formal_parameter_return formal_parameter676 = null;

        csParser.formal_parameter_return formal_parameter678 = null;


        CommonTree char_literal677_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // mypackage/cs.g:740:22: ( formal_parameter ( ',' formal_parameter )* )
            // mypackage/cs.g:741:2: formal_parameter ( ',' formal_parameter )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_formal_parameter_in_formal_parameter_list5332);
            formal_parameter676=formal_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter676.getTree());
            // mypackage/cs.g:741:19: ( ',' formal_parameter )*
            loop192:
            do {
                int alt192=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt192=1;
                    }
                    break;

                }

                switch (alt192) {
            	case 1 :
            	    // mypackage/cs.g:741:20: ',' formal_parameter
            	    {
            	    char_literal677=(Token)match(input,98,FOLLOW_98_in_formal_parameter_list5335); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal677_tree = (CommonTree)adaptor.create(char_literal677);
            	    adaptor.addChild(root_0, char_literal677_tree);
            	    }
            	    pushFollow(FOLLOW_formal_parameter_in_formal_parameter_list5337);
            	    formal_parameter678=formal_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter678.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, formal_parameter_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list"

    public static class formal_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formal_parameter"
    // mypackage/cs.g:742:1: formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
    public final csParser.formal_parameter_return formal_parameter() throws RecognitionException {
        csParser.formal_parameter_return retval = new csParser.formal_parameter_return();
        retval.start = input.LT(1);
        int formal_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal682=null;
        csParser.attributes_return attributes679 = null;

        csParser.fixed_parameter_return fixed_parameter680 = null;

        csParser.parameter_array_return parameter_array681 = null;


        CommonTree string_literal682_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // mypackage/cs.g:742:17: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )
            int alt195=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 74:
            case 91:
            case 92:
            case 95:
            case 100:
            case 101:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 180:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt195=1;
                }
                break;
            case 179:
                {
                switch ( input.LA(2) ) {
                case IDENTIFIER:
                case DOT:
                case 74:
                case 93:
                case 95:
                case 108:
                case 109:
                case 110:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    alt195=1;
                    }
                    break;
                case EOF:
                case RPAREN:
                case 96:
                case 98:
                    {
                    alt195=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // mypackage/cs.g:743:2: ( attributes )? ( fixed_parameter | parameter_array )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // mypackage/cs.g:743:2: ( attributes )?
                    int alt193=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt193=1;
                            }
                            break;
                    }

                    switch (alt193) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_formal_parameter5347);
                            attributes679=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes679.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:743:16: ( fixed_parameter | parameter_array )
                    int alt194=2;
                    switch ( input.LA(1) ) {
                    case IDENTIFIER:
                    case 74:
                    case 91:
                    case 92:
                    case 100:
                    case 101:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                        {
                        alt194=1;
                        }
                        break;
                    case 180:
                        {
                        alt194=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 0, input);

                        throw nvae;
                    }

                    switch (alt194) {
                        case 1 :
                            // mypackage/cs.g:743:17: fixed_parameter
                            {
                            pushFollow(FOLLOW_fixed_parameter_in_formal_parameter5353);
                            fixed_parameter680=fixed_parameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter680.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:743:35: parameter_array
                            {
                            pushFollow(FOLLOW_parameter_array_in_formal_parameter5357);
                            parameter_array681=parameter_array();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_array681.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:744:4: '__arglist'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal682=(Token)match(input,179,FOLLOW_179_in_formal_parameter5364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal682_tree = (CommonTree)adaptor.create(string_literal682);
                    adaptor.addChild(root_0, string_literal682_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, formal_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formal_parameter"

    public static class fixed_parameters_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fixed_parameters"
    // mypackage/cs.g:745:1: fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
    public final csParser.fixed_parameters_return fixed_parameters() throws RecognitionException {
        csParser.fixed_parameters_return retval = new csParser.fixed_parameters_return();
        retval.start = input.LT(1);
        int fixed_parameters_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal684=null;
        csParser.fixed_parameter_return fixed_parameter683 = null;

        csParser.fixed_parameter_return fixed_parameter685 = null;


        CommonTree char_literal684_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // mypackage/cs.g:745:17: ( fixed_parameter ( ',' fixed_parameter )* )
            // mypackage/cs.g:746:2: fixed_parameter ( ',' fixed_parameter )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters5372);
            fixed_parameter683=fixed_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter683.getTree());
            // mypackage/cs.g:746:20: ( ',' fixed_parameter )*
            loop196:
            do {
                int alt196=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt196=1;
                    }
                    break;

                }

                switch (alt196) {
            	case 1 :
            	    // mypackage/cs.g:746:21: ',' fixed_parameter
            	    {
            	    char_literal684=(Token)match(input,98,FOLLOW_98_in_fixed_parameters5377); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal684_tree = (CommonTree)adaptor.create(char_literal684);
            	    adaptor.addChild(root_0, char_literal684_tree);
            	    }
            	    pushFollow(FOLLOW_fixed_parameter_in_fixed_parameters5381);
            	    fixed_parameter685=fixed_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_parameter685.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, fixed_parameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fixed_parameters"

    public static class fixed_parameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fixed_parameter"
    // mypackage/cs.g:748:1: fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
    public final csParser.fixed_parameter_return fixed_parameter() throws RecognitionException {
        csParser.fixed_parameter_return retval = new csParser.fixed_parameter_return();
        retval.start = input.LT(1);
        int fixed_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.parameter_modifier_return parameter_modifier686 = null;

        csParser.type_return type687 = null;

        csParser.identifier_return identifier688 = null;

        csParser.default_argument_return default_argument689 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // mypackage/cs.g:748:16: ( ( parameter_modifier )? type identifier ( default_argument )? )
            // mypackage/cs.g:749:2: ( parameter_modifier )? type identifier ( default_argument )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:749:2: ( parameter_modifier )?
            int alt197=2;
            switch ( input.LA(1) ) {
                case 92:
                case 100:
                case 101:
                    {
                    alt197=1;
                    }
                    break;
            }

            switch (alt197) {
                case 1 :
                    // mypackage/cs.g:0:0: parameter_modifier
                    {
                    pushFollow(FOLLOW_parameter_modifier_in_fixed_parameter5392);
                    parameter_modifier686=parameter_modifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_modifier686.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_in_fixed_parameter5397);
            type687=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type687.getTree());
            pushFollow(FOLLOW_identifier_in_fixed_parameter5401);
            identifier688=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier688.getTree());
            // mypackage/cs.g:749:44: ( default_argument )?
            int alt198=2;
            switch ( input.LA(1) ) {
                case 75:
                    {
                    alt198=1;
                    }
                    break;
            }

            switch (alt198) {
                case 1 :
                    // mypackage/cs.g:0:0: default_argument
                    {
                    pushFollow(FOLLOW_default_argument_in_fixed_parameter5405);
                    default_argument689=default_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_argument689.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, fixed_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fixed_parameter"

    public static class default_argument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_argument"
    // mypackage/cs.g:751:1: default_argument : '=' expression ;
    public final csParser.default_argument_return default_argument() throws RecognitionException {
        csParser.default_argument_return retval = new csParser.default_argument_return();
        retval.start = input.LT(1);
        int default_argument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal690=null;
        csParser.expression_return expression691 = null;


        CommonTree char_literal690_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // mypackage/cs.g:751:17: ( '=' expression )
            // mypackage/cs.g:752:2: '=' expression
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal690=(Token)match(input,75,FOLLOW_75_in_default_argument5415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal690_tree = (CommonTree)adaptor.create(char_literal690);
            adaptor.addChild(root_0, char_literal690_tree);
            }
            pushFollow(FOLLOW_expression_in_default_argument5417);
            expression691=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression691.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, default_argument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "default_argument"

    public static class parameter_modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_modifier"
    // mypackage/cs.g:753:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
    public final csParser.parameter_modifier_return parameter_modifier() throws RecognitionException {
        csParser.parameter_modifier_return retval = new csParser.parameter_modifier_return();
        retval.start = input.LT(1);
        int parameter_modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set692=null;

        CommonTree set692_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // mypackage/cs.g:753:19: ( 'ref' | 'out' | 'this' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set692=(Token)input.LT(1);
            if ( input.LA(1)==92||(input.LA(1)>=100 && input.LA(1)<=101) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set692));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, parameter_modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_modifier"

    public static class parameter_array_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_array"
    // mypackage/cs.g:755:1: parameter_array : 'params' type identifier ;
    public final csParser.parameter_array_return parameter_array() throws RecognitionException {
        csParser.parameter_array_return retval = new csParser.parameter_array_return();
        retval.start = input.LT(1);
        int parameter_array_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal693=null;
        csParser.type_return type694 = null;

        csParser.identifier_return identifier695 = null;


        CommonTree string_literal693_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // mypackage/cs.g:755:16: ( 'params' type identifier )
            // mypackage/cs.g:756:2: 'params' type identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal693=(Token)match(input,180,FOLLOW_180_in_parameter_array5440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal693_tree = (CommonTree)adaptor.create(string_literal693);
            adaptor.addChild(root_0, string_literal693_tree);
            }
            pushFollow(FOLLOW_type_in_parameter_array5444);
            type694=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type694.getTree());
            pushFollow(FOLLOW_identifier_in_parameter_array5448);
            identifier695=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier695.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, parameter_array_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_array"

    public static class interface_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_declaration"
    // mypackage/cs.g:759:1: interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? -> identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ;
    public final csParser.interface_declaration_return interface_declaration() throws RecognitionException {
        csParser.interface_declaration_return retval = new csParser.interface_declaration_return();
        retval.start = input.LT(1);
        int interface_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal696=null;
        Token char_literal702=null;
        csParser.identifier_return identifier697 = null;

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list698 = null;

        csParser.interface_base_return interface_base699 = null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses700 = null;

        csParser.interface_body_return interface_body701 = null;


        CommonTree string_literal696_tree=null;
        CommonTree char_literal702_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_interface_body=new RewriteRuleSubtreeStream(adaptor,"rule interface_body");
        RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses=new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_interface_base=new RewriteRuleSubtreeStream(adaptor,"rule interface_base");
        RewriteRuleSubtreeStream stream_variant_generic_parameter_list=new RewriteRuleSubtreeStream(adaptor,"rule variant_generic_parameter_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // mypackage/cs.g:759:22: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? -> identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body )
            // mypackage/cs.g:760:2: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
            {
            string_literal696=(Token)match(input,181,FOLLOW_181_in_interface_declaration5458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal696);

            pushFollow(FOLLOW_identifier_in_interface_declaration5462);
            identifier697=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier697.getTree());
            // mypackage/cs.g:760:29: ( variant_generic_parameter_list )?
            int alt199=2;
            switch ( input.LA(1) ) {
                case 108:
                    {
                    alt199=1;
                    }
                    break;
            }

            switch (alt199) {
                case 1 :
                    // mypackage/cs.g:0:0: variant_generic_parameter_list
                    {
                    pushFollow(FOLLOW_variant_generic_parameter_list_in_interface_declaration5466);
                    variant_generic_parameter_list698=variant_generic_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variant_generic_parameter_list.add(variant_generic_parameter_list698.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:760:61: ( interface_base )?
            int alt200=2;
            switch ( input.LA(1) ) {
                case 99:
                    {
                    alt200=1;
                    }
                    break;
            }

            switch (alt200) {
                case 1 :
                    // mypackage/cs.g:0:0: interface_base
                    {
                    pushFollow(FOLLOW_interface_base_in_interface_declaration5469);
                    interface_base699=interface_base();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interface_base.add(interface_base699.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:760:79: ( type_parameter_constraints_clauses )?
            int alt201=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt201=1;
                    }
                    break;
            }

            switch (alt201) {
                case 1 :
                    // mypackage/cs.g:0:0: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5474);
                    type_parameter_constraints_clauses700=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_parameter_constraints_clauses.add(type_parameter_constraints_clauses700.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interface_body_in_interface_declaration5479);
            interface_body701=interface_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_body.add(interface_body701.getTree());
            // mypackage/cs.g:760:134: ( ';' )?
            int alt202=2;
            switch ( input.LA(1) ) {
                case SEMI:
                    {
                    alt202=1;
                    }
                    break;
            }

            switch (alt202) {
                case 1 :
                    // mypackage/cs.g:0:0: ';'
                    {
                    char_literal702=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_declaration5483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal702);


                    }
                    break;

            }



            // AST REWRITE
            // elements: interface_base, variant_generic_parameter_list, identifier, type_parameter_constraints_clauses, interface_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 761:2: -> identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body
            {
                adaptor.addChild(root_0, stream_identifier.nextTree());
                // mypackage/cs.g:761:16: ( variant_generic_parameter_list )?
                if ( stream_variant_generic_parameter_list.hasNext() ) {
                    adaptor.addChild(root_0, stream_variant_generic_parameter_list.nextTree());

                }
                stream_variant_generic_parameter_list.reset();
                // mypackage/cs.g:761:48: ( interface_base )?
                if ( stream_interface_base.hasNext() ) {
                    adaptor.addChild(root_0, stream_interface_base.nextTree());

                }
                stream_interface_base.reset();
                // mypackage/cs.g:761:66: ( type_parameter_constraints_clauses )?
                if ( stream_type_parameter_constraints_clauses.hasNext() ) {
                    adaptor.addChild(root_0, stream_type_parameter_constraints_clauses.nextTree());

                }
                stream_type_parameter_constraints_clauses.reset();
                adaptor.addChild(root_0, stream_interface_body.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, interface_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"

    public static class interface_modifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_modifiers"
    // mypackage/cs.g:763:1: interface_modifiers : ( modifier )+ ;
    public final csParser.interface_modifiers_return interface_modifiers() throws RecognitionException {
        csParser.interface_modifiers_return retval = new csParser.interface_modifiers_return();
        retval.start = input.LT(1);
        int interface_modifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.modifier_return modifier703 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // mypackage/cs.g:763:20: ( ( modifier )+ )
            // mypackage/cs.g:764:2: ( modifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:764:2: ( modifier )+
            int cnt203=0;
            loop203:
            do {
                int alt203=2;
                switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt203=1;
                    }
                    break;

                }

                switch (alt203) {
            	case 1 :
            	    // mypackage/cs.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_interface_modifiers5515);
            	    modifier703=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier703.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt203 >= 1 ) break loop203;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(203, input);
                        throw eee;
                }
                cnt203++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, interface_modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_modifiers"

    public static class interface_base_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_base"
    // mypackage/cs.g:765:1: interface_base : ':' interface_type_list ;
    public final csParser.interface_base_return interface_base() throws RecognitionException {
        csParser.interface_base_return retval = new csParser.interface_base_return();
        retval.start = input.LT(1);
        int interface_base_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal704=null;
        csParser.interface_type_list_return interface_type_list705 = null;


        CommonTree char_literal704_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // mypackage/cs.g:765:15: ( ':' interface_type_list )
            // mypackage/cs.g:766:5: ':' interface_type_list
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal704=(Token)match(input,99,FOLLOW_99_in_interface_base5528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal704_tree = (CommonTree)adaptor.create(char_literal704);
            adaptor.addChild(root_0, char_literal704_tree);
            }
            pushFollow(FOLLOW_interface_type_list_in_interface_base5530);
            interface_type_list705=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list705.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, interface_base_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_base"

    public static class interface_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_body"
    // mypackage/cs.g:767:1: interface_body : '{' ( interface_member_declarations )? '}' -> ( interface_member_declarations )? ;
    public final csParser.interface_body_return interface_body() throws RecognitionException {
        csParser.interface_body_return retval = new csParser.interface_body_return();
        retval.start = input.LT(1);
        int interface_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal706=null;
        Token char_literal708=null;
        csParser.interface_member_declarations_return interface_member_declarations707 = null;


        CommonTree char_literal706_tree=null;
        CommonTree char_literal708_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleSubtreeStream stream_interface_member_declarations=new RewriteRuleSubtreeStream(adaptor,"rule interface_member_declarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // mypackage/cs.g:767:15: ( '{' ( interface_member_declarations )? '}' -> ( interface_member_declarations )? )
            // mypackage/cs.g:768:2: '{' ( interface_member_declarations )? '}'
            {
            char_literal706=(Token)match(input,71,FOLLOW_71_in_interface_body5538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(char_literal706);

            // mypackage/cs.g:768:8: ( interface_member_declarations )?
            int alt204=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 73:
                case 74:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 91:
                case 95:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt204=1;
                    }
                    break;
            }

            switch (alt204) {
                case 1 :
                    // mypackage/cs.g:0:0: interface_member_declarations
                    {
                    pushFollow(FOLLOW_interface_member_declarations_in_interface_body5542);
                    interface_member_declarations707=interface_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interface_member_declarations.add(interface_member_declarations707.getTree());

                    }
                    break;

            }

            char_literal708=(Token)match(input,72,FOLLOW_72_in_interface_body5547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(char_literal708);



            // AST REWRITE
            // elements: interface_member_declarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 769:2: -> ( interface_member_declarations )?
            {
                // mypackage/cs.g:769:5: ( interface_member_declarations )?
                if ( stream_interface_member_declarations.hasNext() ) {
                    adaptor.addChild(root_0, stream_interface_member_declarations.nextTree());

                }
                stream_interface_member_declarations.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, interface_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_body"

    public static class interface_member_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_member_declarations"
    // mypackage/cs.g:771:1: interface_member_declarations : ( interface_member_declaration )+ ;
    public final csParser.interface_member_declarations_return interface_member_declarations() throws RecognitionException {
        csParser.interface_member_declarations_return retval = new csParser.interface_member_declarations_return();
        retval.start = input.LT(1);
        int interface_member_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.interface_member_declaration_return interface_member_declaration709 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // mypackage/cs.g:771:30: ( ( interface_member_declaration )+ )
            // mypackage/cs.g:772:2: ( interface_member_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:772:2: ( interface_member_declaration )+
            int cnt205=0;
            loop205:
            do {
                int alt205=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 73:
                case 74:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 91:
                case 95:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt205=1;
                    }
                    break;

                }

                switch (alt205) {
            	case 1 :
            	    // mypackage/cs.g:0:0: interface_member_declaration
            	    {
            	    pushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations5563);
            	    interface_member_declaration709=interface_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_member_declaration709.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt205 >= 1 ) break loop205;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(205, input);
                        throw eee;
                }
                cnt205++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, interface_member_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_member_declarations"

    public static class interface_member_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_member_declaration"
    // mypackage/cs.g:773:1: interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
    public final csParser.interface_member_declaration_return interface_member_declaration() throws RecognitionException {
        csParser.interface_member_declaration_return retval = new csParser.interface_member_declaration_return();
        retval.start = input.LT(1);
        int interface_member_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal712=null;
        csParser.attributes_return attributes710 = null;

        csParser.modifiers_return modifiers711 = null;

        csParser.interface_method_declaration_return interface_method_declaration713 = null;

        csParser.interface_event_declaration_return interface_event_declaration714 = null;

        csParser.type_return type715 = null;

        csParser.interface_method_declaration_return interface_method_declaration716 = null;

        csParser.interface_property_declaration_return interface_property_declaration717 = null;

        csParser.interface_indexer_declaration_return interface_indexer_declaration718 = null;


        CommonTree string_literal712_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // mypackage/cs.g:773:29: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
            // mypackage/cs.g:774:2: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:774:2: ( attributes )?
            int alt206=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt206=1;
                    }
                    break;
            }

            switch (alt206) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_member_declaration5572);
                    attributes710=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes710.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:774:17: ( modifiers )?
            int alt207=2;
            switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt207=1;
                    }
                    break;
            }

            switch (alt207) {
                case 1 :
                    // mypackage/cs.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_interface_member_declaration5578);
                    modifiers711=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers711.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:775:3: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
            int alt209=3;
            switch ( input.LA(1) ) {
            case 91:
                {
                switch ( input.LA(2) ) {
                case 109:
                    {
                    alt209=3;
                    }
                    break;
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    alt209=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 1, input);

                    throw nvae;
                }

                }
                break;
            case 158:
                {
                alt209=2;
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt209=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // mypackage/cs.g:775:4: 'void' interface_method_declaration
                    {
                    string_literal712=(Token)match(input,91,FOLLOW_91_in_interface_member_declaration5584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal712_tree = (CommonTree)adaptor.create(string_literal712);
                    adaptor.addChild(root_0, string_literal712_tree);
                    }
                    pushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration5588);
                    interface_method_declaration713=interface_method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_method_declaration713.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:776:5: interface_event_declaration
                    {
                    pushFollow(FOLLOW_interface_event_declaration_in_interface_member_declaration5594);
                    interface_event_declaration714=interface_event_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_event_declaration714.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:777:5: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
                    {
                    pushFollow(FOLLOW_type_in_interface_member_declaration5600);
                    type715=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type715.getTree());
                    // mypackage/cs.g:777:12: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
                    int alt208=3;
                    switch ( input.LA(1) ) {
                    case IDENTIFIER:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 211:
                        {
                        int LA208_1 = input.LA(2);

                        if ( (LA208_1==71) && (synpred338_cs())) {
                            alt208=2;
                        }
                        else if ( (LA208_1==108) && (synpred337_cs())) {
                            alt208=1;
                        }
                        else if ( (LA208_1==97) && (synpred337_cs())) {
                            alt208=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 208, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 92:
                        {
                        alt208=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 208, 0, input);

                        throw nvae;
                    }

                    switch (alt208) {
                        case 1 :
                            // mypackage/cs.g:777:14: ( member_name '(' )=> interface_method_declaration
                            {
                            pushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration5616);
                            interface_method_declaration716=interface_method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_method_declaration716.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:778:14: ( member_name '{' )=> interface_property_declaration
                            {
                            pushFollow(FOLLOW_interface_property_declaration_in_interface_member_declaration5641);
                            interface_property_declaration717=interface_property_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_property_declaration717.getTree());

                            }
                            break;
                        case 3 :
                            // mypackage/cs.g:779:8: interface_indexer_declaration
                            {
                            pushFollow(FOLLOW_interface_indexer_declaration_in_interface_member_declaration5651);
                            interface_indexer_declaration718=interface_indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_indexer_declaration718.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, interface_member_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration"

    public static class interface_property_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_property_declaration"
    // mypackage/cs.g:782:1: interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
    public final csParser.interface_property_declaration_return interface_property_declaration() throws RecognitionException {
        csParser.interface_property_declaration_return retval = new csParser.interface_property_declaration_return();
        retval.start = input.LT(1);
        int interface_property_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal720=null;
        Token char_literal722=null;
        csParser.identifier_return identifier719 = null;

        csParser.interface_accessor_declarations_return interface_accessor_declarations721 = null;


        CommonTree char_literal720_tree=null;
        CommonTree char_literal722_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // mypackage/cs.g:782:31: ( identifier '{' interface_accessor_declarations '}' )
            // mypackage/cs.g:783:2: identifier '{' interface_accessor_declarations '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_interface_property_declaration5668);
            identifier719=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier719.getTree());
            char_literal720=(Token)match(input,71,FOLLOW_71_in_interface_property_declaration5672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal720_tree = (CommonTree)adaptor.create(char_literal720);
            adaptor.addChild(root_0, char_literal720_tree);
            }
            pushFollow(FOLLOW_interface_accessor_declarations_in_interface_property_declaration5676);
            interface_accessor_declarations721=interface_accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_accessor_declarations721.getTree());
            char_literal722=(Token)match(input,72,FOLLOW_72_in_interface_property_declaration5680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal722_tree = (CommonTree)adaptor.create(char_literal722);
            adaptor.addChild(root_0, char_literal722_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, interface_property_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration"

    public static class interface_method_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_method_declaration"
    // mypackage/cs.g:784:1: interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' -> ^( INTERFACEMETHOD identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ) ;
    public final csParser.interface_method_declaration_return interface_method_declaration() throws RecognitionException {
        csParser.interface_method_declaration_return retval = new csParser.interface_method_declaration_return();
        retval.start = input.LT(1);
        int interface_method_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal725=null;
        Token char_literal727=null;
        Token char_literal729=null;
        csParser.identifier_return identifier723 = null;

        csParser.generic_argument_list_return generic_argument_list724 = null;

        csParser.formal_parameter_list_return formal_parameter_list726 = null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses728 = null;


        CommonTree char_literal725_tree=null;
        CommonTree char_literal727_tree=null;
        CommonTree char_literal729_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_type_parameter_constraints_clauses=new RewriteRuleSubtreeStream(adaptor,"rule type_parameter_constraints_clauses");
        RewriteRuleSubtreeStream stream_formal_parameter_list=new RewriteRuleSubtreeStream(adaptor,"rule formal_parameter_list");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_generic_argument_list=new RewriteRuleSubtreeStream(adaptor,"rule generic_argument_list");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // mypackage/cs.g:784:29: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' -> ^( INTERFACEMETHOD identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ) )
            // mypackage/cs.g:785:2: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            pushFollow(FOLLOW_identifier_in_interface_method_declaration5688);
            identifier723=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier723.getTree());
            // mypackage/cs.g:785:15: ( generic_argument_list )?
            int alt210=2;
            switch ( input.LA(1) ) {
                case 108:
                    {
                    alt210=1;
                    }
                    break;
            }

            switch (alt210) {
                case 1 :
                    // mypackage/cs.g:0:0: generic_argument_list
                    {
                    pushFollow(FOLLOW_generic_argument_list_in_interface_method_declaration5692);
                    generic_argument_list724=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_generic_argument_list.add(generic_argument_list724.getTree());

                    }
                    break;

            }

            char_literal725=(Token)match(input,97,FOLLOW_97_in_interface_method_declaration5695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(char_literal725);

            // mypackage/cs.g:785:44: ( formal_parameter_list )?
            int alt211=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 91:
                case 92:
                case 95:
                case 100:
                case 101:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 180:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt211=1;
                    }
                    break;
            }

            switch (alt211) {
                case 1 :
                    // mypackage/cs.g:0:0: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration5699);
                    formal_parameter_list726=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formal_parameter_list.add(formal_parameter_list726.getTree());

                    }
                    break;

            }

            char_literal727=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interface_method_declaration5704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal727);

            // mypackage/cs.g:785:75: ( type_parameter_constraints_clauses )?
            int alt212=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt212=1;
                    }
                    break;
            }

            switch (alt212) {
                case 1 :
                    // mypackage/cs.g:0:0: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5708);
                    type_parameter_constraints_clauses728=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_parameter_constraints_clauses.add(type_parameter_constraints_clauses728.getTree());

                    }
                    break;

            }

            char_literal729=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_method_declaration5713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal729);



            // AST REWRITE
            // elements: type_parameter_constraints_clauses, identifier, RPAREN, 97, formal_parameter_list, generic_argument_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 785:118: -> ^( INTERFACEMETHOD identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
            {
                // mypackage/cs.g:785:121: ^( INTERFACEMETHOD identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACEMETHOD, "INTERFACEMETHOD"), root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());
                // mypackage/cs.g:785:152: ( generic_argument_list )?
                if ( stream_generic_argument_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic_argument_list.nextTree());

                }
                stream_generic_argument_list.reset();
                adaptor.addChild(root_1, stream_97.nextNode());
                // mypackage/cs.g:785:181: ( formal_parameter_list )?
                if ( stream_formal_parameter_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_formal_parameter_list.nextTree());

                }
                stream_formal_parameter_list.reset();
                adaptor.addChild(root_1, stream_RPAREN.nextNode());
                // mypackage/cs.g:785:212: ( type_parameter_constraints_clauses )?
                if ( stream_type_parameter_constraints_clauses.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_parameter_constraints_clauses.nextTree());

                }
                stream_type_parameter_constraints_clauses.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, interface_method_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration"

    public static class interface_event_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_event_declaration"
    // mypackage/cs.g:786:1: interface_event_declaration : 'event' type identifier ';' ;
    public final csParser.interface_event_declaration_return interface_event_declaration() throws RecognitionException {
        csParser.interface_event_declaration_return retval = new csParser.interface_event_declaration_return();
        retval.start = input.LT(1);
        int interface_event_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal730=null;
        Token char_literal733=null;
        csParser.type_return type731 = null;

        csParser.identifier_return identifier732 = null;


        CommonTree string_literal730_tree=null;
        CommonTree char_literal733_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // mypackage/cs.g:786:28: ( 'event' type identifier ';' )
            // mypackage/cs.g:788:2: 'event' type identifier ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal730=(Token)match(input,158,FOLLOW_158_in_interface_event_declaration5754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal730_tree = (CommonTree)adaptor.create(string_literal730);
            adaptor.addChild(root_0, string_literal730_tree);
            }
            pushFollow(FOLLOW_type_in_interface_event_declaration5758);
            type731=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type731.getTree());
            pushFollow(FOLLOW_identifier_in_interface_event_declaration5762);
            identifier732=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier732.getTree());
            char_literal733=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_event_declaration5766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal733_tree = (CommonTree)adaptor.create(char_literal733);
            adaptor.addChild(root_0, char_literal733_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, interface_event_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration"

    public static class interface_indexer_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_indexer_declaration"
    // mypackage/cs.g:789:1: interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
    public final csParser.interface_indexer_declaration_return interface_indexer_declaration() throws RecognitionException {
        csParser.interface_indexer_declaration_return retval = new csParser.interface_indexer_declaration_return();
        retval.start = input.LT(1);
        int interface_indexer_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal734=null;
        Token char_literal735=null;
        Token char_literal737=null;
        Token char_literal738=null;
        Token char_literal740=null;
        csParser.formal_parameter_list_return formal_parameter_list736 = null;

        csParser.interface_accessor_declarations_return interface_accessor_declarations739 = null;


        CommonTree string_literal734_tree=null;
        CommonTree char_literal735_tree=null;
        CommonTree char_literal737_tree=null;
        CommonTree char_literal738_tree=null;
        CommonTree char_literal740_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // mypackage/cs.g:789:30: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
            // mypackage/cs.g:791:2: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal734=(Token)match(input,92,FOLLOW_92_in_interface_indexer_declaration5778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal734_tree = (CommonTree)adaptor.create(string_literal734);
            adaptor.addChild(root_0, string_literal734_tree);
            }
            char_literal735=(Token)match(input,95,FOLLOW_95_in_interface_indexer_declaration5782); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal735_tree = (CommonTree)adaptor.create(char_literal735);
            adaptor.addChild(root_0, char_literal735_tree);
            }
            pushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration5786);
            formal_parameter_list736=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list736.getTree());
            char_literal737=(Token)match(input,96,FOLLOW_96_in_interface_indexer_declaration5790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal737_tree = (CommonTree)adaptor.create(char_literal737);
            adaptor.addChild(root_0, char_literal737_tree);
            }
            char_literal738=(Token)match(input,71,FOLLOW_71_in_interface_indexer_declaration5794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal738_tree = (CommonTree)adaptor.create(char_literal738);
            adaptor.addChild(root_0, char_literal738_tree);
            }
            pushFollow(FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5798);
            interface_accessor_declarations739=interface_accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_accessor_declarations739.getTree());
            char_literal740=(Token)match(input,72,FOLLOW_72_in_interface_indexer_declaration5802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal740_tree = (CommonTree)adaptor.create(char_literal740);
            adaptor.addChild(root_0, char_literal740_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, interface_indexer_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration"

    public static class interface_accessor_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_accessor_declarations"
    // mypackage/cs.g:792:1: interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
    public final csParser.interface_accessor_declarations_return interface_accessor_declarations() throws RecognitionException {
        csParser.interface_accessor_declarations_return retval = new csParser.interface_accessor_declarations_return();
        retval.start = input.LT(1);
        int interface_accessor_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attributes_return attributes741 = null;

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration742 = null;

        csParser.attributes_return attributes743 = null;

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration744 = null;

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration745 = null;

        csParser.attributes_return attributes746 = null;

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration747 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // mypackage/cs.g:792:32: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
            // mypackage/cs.g:793:2: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:793:2: ( attributes )?
            int alt213=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt213=1;
                    }
                    break;
            }

            switch (alt213) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_interface_accessor_declarations5810);
                    attributes741=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes741.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:794:3: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
            int alt218=2;
            switch ( input.LA(1) ) {
            case 165:
                {
                alt218=1;
                }
                break;
            case 166:
                {
                alt218=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }

            switch (alt218) {
                case 1 :
                    // mypackage/cs.g:794:4: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5819);
                    interface_get_accessor_declaration742=interface_get_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_get_accessor_declaration742.getTree());
                    // mypackage/cs.g:794:41: ( attributes )?
                    int alt214=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt214=1;
                            }
                            break;
                    }

                    switch (alt214) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_accessor_declarations5823);
                            attributes743=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes743.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:794:55: ( interface_set_accessor_declaration )?
                    int alt215=2;
                    switch ( input.LA(1) ) {
                        case 166:
                            {
                            alt215=1;
                            }
                            break;
                    }

                    switch (alt215) {
                        case 1 :
                            // mypackage/cs.g:0:0: interface_set_accessor_declaration
                            {
                            pushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5828);
                            interface_set_accessor_declaration744=interface_set_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_set_accessor_declaration744.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:795:5: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
                    {
                    pushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5835);
                    interface_set_accessor_declaration745=interface_set_accessor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_set_accessor_declaration745.getTree());
                    // mypackage/cs.g:795:42: ( attributes )?
                    int alt216=2;
                    switch ( input.LA(1) ) {
                        case 95:
                            {
                            alt216=1;
                            }
                            break;
                    }

                    switch (alt216) {
                        case 1 :
                            // mypackage/cs.g:0:0: attributes
                            {
                            pushFollow(FOLLOW_attributes_in_interface_accessor_declarations5839);
                            attributes746=attributes();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes746.getTree());

                            }
                            break;

                    }

                    // mypackage/cs.g:795:56: ( interface_get_accessor_declaration )?
                    int alt217=2;
                    switch ( input.LA(1) ) {
                        case 165:
                            {
                            alt217=1;
                            }
                            break;
                    }

                    switch (alt217) {
                        case 1 :
                            // mypackage/cs.g:0:0: interface_get_accessor_declaration
                            {
                            pushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5844);
                            interface_get_accessor_declaration747=interface_get_accessor_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_get_accessor_declaration747.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, interface_accessor_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_accessor_declarations"

    public static class interface_get_accessor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_get_accessor_declaration"
    // mypackage/cs.g:796:1: interface_get_accessor_declaration : 'get' ';' ;
    public final csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration() throws RecognitionException {
        csParser.interface_get_accessor_declaration_return retval = new csParser.interface_get_accessor_declaration_return();
        retval.start = input.LT(1);
        int interface_get_accessor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal748=null;
        Token char_literal749=null;

        CommonTree string_literal748_tree=null;
        CommonTree char_literal749_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // mypackage/cs.g:796:35: ( 'get' ';' )
            // mypackage/cs.g:797:2: 'get' ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal748=(Token)match(input,165,FOLLOW_165_in_interface_get_accessor_declaration5854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal748_tree = (CommonTree)adaptor.create(string_literal748);
            adaptor.addChild(root_0, string_literal748_tree);
            }
            char_literal749=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_get_accessor_declaration5858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal749_tree = (CommonTree)adaptor.create(char_literal749);
            adaptor.addChild(root_0, char_literal749_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, interface_get_accessor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_get_accessor_declaration"

    public static class interface_set_accessor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interface_set_accessor_declaration"
    // mypackage/cs.g:798:1: interface_set_accessor_declaration : 'set' ';' ;
    public final csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration() throws RecognitionException {
        csParser.interface_set_accessor_declaration_return retval = new csParser.interface_set_accessor_declaration_return();
        retval.start = input.LT(1);
        int interface_set_accessor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal750=null;
        Token char_literal751=null;

        CommonTree string_literal750_tree=null;
        CommonTree char_literal751_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // mypackage/cs.g:798:35: ( 'set' ';' )
            // mypackage/cs.g:799:2: 'set' ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal750=(Token)match(input,166,FOLLOW_166_in_interface_set_accessor_declaration5868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal750_tree = (CommonTree)adaptor.create(string_literal750);
            adaptor.addChild(root_0, string_literal750_tree);
            }
            char_literal751=(Token)match(input,SEMI,FOLLOW_SEMI_in_interface_set_accessor_declaration5872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal751_tree = (CommonTree)adaptor.create(char_literal751);
            adaptor.addChild(root_0, char_literal751_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, interface_set_accessor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interface_set_accessor_declaration"

    public static class method_modifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method_modifiers"
    // mypackage/cs.g:800:1: method_modifiers : ( modifier )+ ;
    public final csParser.method_modifiers_return method_modifiers() throws RecognitionException {
        csParser.method_modifiers_return retval = new csParser.method_modifiers_return();
        retval.start = input.LT(1);
        int method_modifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.modifier_return modifier752 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // mypackage/cs.g:800:17: ( ( modifier )+ )
            // mypackage/cs.g:801:2: ( modifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:801:2: ( modifier )+
            int cnt219=0;
            loop219:
            do {
                int alt219=2;
                switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt219=1;
                    }
                    break;

                }

                switch (alt219) {
            	case 1 :
            	    // mypackage/cs.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_method_modifiers5882);
            	    modifier752=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, modifier752.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt219 >= 1 ) break loop219;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(219, input);
                        throw eee;
                }
                cnt219++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, method_modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method_modifiers"

    public static class struct_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_declaration"
    // mypackage/cs.g:804:1: struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
    public final csParser.struct_declaration_return struct_declaration() throws RecognitionException {
        csParser.struct_declaration_return retval = new csParser.struct_declaration_return();
        retval.start = input.LT(1);
        int struct_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal753=null;
        Token char_literal758=null;
        csParser.type_or_generic_return type_or_generic754 = null;

        csParser.struct_interfaces_return struct_interfaces755 = null;

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses756 = null;

        csParser.struct_body_return struct_body757 = null;


        CommonTree string_literal753_tree=null;
        CommonTree char_literal758_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // mypackage/cs.g:804:19: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
            // mypackage/cs.g:805:2: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal753=(Token)match(input,178,FOLLOW_178_in_struct_declaration5894); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal753_tree = (CommonTree)adaptor.create(string_literal753);
            adaptor.addChild(root_0, string_literal753_tree);
            }
            pushFollow(FOLLOW_type_or_generic_in_struct_declaration5898);
            type_or_generic754=type_or_generic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_or_generic754.getTree());
            // mypackage/cs.g:805:31: ( struct_interfaces )?
            int alt220=2;
            switch ( input.LA(1) ) {
                case 99:
                    {
                    alt220=1;
                    }
                    break;
            }

            switch (alt220) {
                case 1 :
                    // mypackage/cs.g:0:0: struct_interfaces
                    {
                    pushFollow(FOLLOW_struct_interfaces_in_struct_declaration5902);
                    struct_interfaces755=struct_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_interfaces755.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:805:52: ( type_parameter_constraints_clauses )?
            int alt221=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt221=1;
                    }
                    break;
            }

            switch (alt221) {
                case 1 :
                    // mypackage/cs.g:0:0: type_parameter_constraints_clauses
                    {
                    pushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5907);
                    type_parameter_constraints_clauses756=type_parameter_constraints_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_parameter_constraints_clauses756.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_struct_body_in_struct_declaration5912);
            struct_body757=struct_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_body757.getTree());
            // mypackage/cs.g:805:104: ( ';' )?
            int alt222=2;
            switch ( input.LA(1) ) {
                case SEMI:
                    {
                    alt222=1;
                    }
                    break;
            }

            switch (alt222) {
                case 1 :
                    // mypackage/cs.g:0:0: ';'
                    {
                    char_literal758=(Token)match(input,SEMI,FOLLOW_SEMI_in_struct_declaration5916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal758_tree = (CommonTree)adaptor.create(char_literal758);
                    adaptor.addChild(root_0, char_literal758_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, struct_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_declaration"

    public static class struct_modifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_modifiers"
    // mypackage/cs.g:806:1: struct_modifiers : ( struct_modifier )+ ;
    public final csParser.struct_modifiers_return struct_modifiers() throws RecognitionException {
        csParser.struct_modifiers_return retval = new csParser.struct_modifiers_return();
        retval.start = input.LT(1);
        int struct_modifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.struct_modifier_return struct_modifier759 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // mypackage/cs.g:806:17: ( ( struct_modifier )+ )
            // mypackage/cs.g:807:2: ( struct_modifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:807:2: ( struct_modifier )+
            int cnt223=0;
            loop223:
            do {
                int alt223=2;
                switch ( input.LA(1) ) {
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                    {
                    alt223=1;
                    }
                    break;

                }

                switch (alt223) {
            	case 1 :
            	    // mypackage/cs.g:0:0: struct_modifier
            	    {
            	    pushFollow(FOLLOW_struct_modifier_in_struct_modifiers5925);
            	    struct_modifier759=struct_modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_modifier759.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt223 >= 1 ) break loop223;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(223, input);
                        throw eee;
                }
                cnt223++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, struct_modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_modifiers"

    public static class struct_modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_modifier"
    // mypackage/cs.g:808:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    public final csParser.struct_modifier_return struct_modifier() throws RecognitionException {
        csParser.struct_modifier_return retval = new csParser.struct_modifier_return();
        retval.start = input.LT(1);
        int struct_modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set760=null;

        CommonTree set760_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // mypackage/cs.g:808:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set760=(Token)input.LT(1);
            if ( (input.LA(1)>=77 && input.LA(1)<=82) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set760));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, struct_modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_modifier"

    public static class struct_interfaces_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_interfaces"
    // mypackage/cs.g:810:1: struct_interfaces : ':' interface_type_list ;
    public final csParser.struct_interfaces_return struct_interfaces() throws RecognitionException {
        csParser.struct_interfaces_return retval = new csParser.struct_interfaces_return();
        retval.start = input.LT(1);
        int struct_interfaces_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal761=null;
        csParser.interface_type_list_return interface_type_list762 = null;


        CommonTree char_literal761_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // mypackage/cs.g:810:18: ( ':' interface_type_list )
            // mypackage/cs.g:811:2: ':' interface_type_list
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal761=(Token)match(input,99,FOLLOW_99_in_struct_interfaces5962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal761_tree = (CommonTree)adaptor.create(char_literal761);
            adaptor.addChild(root_0, char_literal761_tree);
            }
            pushFollow(FOLLOW_interface_type_list_in_struct_interfaces5966);
            interface_type_list762=interface_type_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_type_list762.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, struct_interfaces_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_interfaces"

    public static class struct_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_body"
    // mypackage/cs.g:812:1: struct_body : '{' ( struct_member_declarations )? '}' ;
    public final csParser.struct_body_return struct_body() throws RecognitionException {
        csParser.struct_body_return retval = new csParser.struct_body_return();
        retval.start = input.LT(1);
        int struct_body_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal763=null;
        Token char_literal765=null;
        csParser.struct_member_declarations_return struct_member_declarations764 = null;


        CommonTree char_literal763_tree=null;
        CommonTree char_literal765_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // mypackage/cs.g:812:12: ( '{' ( struct_member_declarations )? '}' )
            // mypackage/cs.g:813:2: '{' ( struct_member_declarations )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal763=(Token)match(input,71,FOLLOW_71_in_struct_body5973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal763_tree = (CommonTree)adaptor.create(char_literal763);
            adaptor.addChild(root_0, char_literal763_tree);
            }
            // mypackage/cs.g:813:8: ( struct_member_declarations )?
            int alt224=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case ENUM:
                case 73:
                case 74:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 95:
                case 106:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 163:
                case 164:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 181:
                case 183:
                case 184:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt224=1;
                    }
                    break;
            }

            switch (alt224) {
                case 1 :
                    // mypackage/cs.g:0:0: struct_member_declarations
                    {
                    pushFollow(FOLLOW_struct_member_declarations_in_struct_body5977);
                    struct_member_declarations764=struct_member_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_member_declarations764.getTree());

                    }
                    break;

            }

            char_literal765=(Token)match(input,72,FOLLOW_72_in_struct_body5982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal765_tree = (CommonTree)adaptor.create(char_literal765);
            adaptor.addChild(root_0, char_literal765_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, struct_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_body"

    public static class struct_member_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_member_declarations"
    // mypackage/cs.g:814:1: struct_member_declarations : ( struct_member_declaration )+ ;
    public final csParser.struct_member_declarations_return struct_member_declarations() throws RecognitionException {
        csParser.struct_member_declarations_return retval = new csParser.struct_member_declarations_return();
        retval.start = input.LT(1);
        int struct_member_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.struct_member_declaration_return struct_member_declaration766 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // mypackage/cs.g:814:27: ( ( struct_member_declaration )+ )
            // mypackage/cs.g:815:2: ( struct_member_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:815:2: ( struct_member_declaration )+
            int cnt225=0;
            loop225:
            do {
                int alt225=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case ENUM:
                case 73:
                case 74:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 95:
                case 106:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 163:
                case 164:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 181:
                case 183:
                case 184:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt225=1;
                    }
                    break;

                }

                switch (alt225) {
            	case 1 :
            	    // mypackage/cs.g:0:0: struct_member_declaration
            	    {
            	    pushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations5989);
            	    struct_member_declaration766=struct_member_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_member_declaration766.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt225 >= 1 ) break loop225;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(225, input);
                        throw eee;
                }
                cnt225++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, struct_member_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_member_declarations"

    public static class struct_member_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "struct_member_declaration"
    // mypackage/cs.g:816:1: struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
    public final csParser.struct_member_declaration_return struct_member_declaration() throws RecognitionException {
        csParser.struct_member_declaration_return retval = new csParser.struct_member_declaration_return();
        retval.start = input.LT(1);
        int struct_member_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal768=null;
        Token char_literal771=null;
        Token string_literal773=null;
        Token string_literal780=null;
        Token char_literal786=null;
        csParser.modifiers_return m = null;

        csParser.attributes_return attributes767 = null;

        csParser.type_return type769 = null;

        csParser.constant_declarators_return constant_declarators770 = null;

        csParser.event_declaration_return event_declaration772 = null;

        csParser.method_declaration_return method_declaration774 = null;

        csParser.interface_declaration_return interface_declaration775 = null;

        csParser.class_declaration_return class_declaration776 = null;

        csParser.struct_declaration_return struct_declaration777 = null;

        csParser.interface_declaration_return interface_declaration778 = null;

        csParser.class_declaration_return class_declaration779 = null;

        csParser.method_declaration_return method_declaration781 = null;

        csParser.type_return type782 = null;

        csParser.method_declaration_return method_declaration783 = null;

        csParser.property_declaration_return property_declaration784 = null;

        csParser.type_name_return type_name785 = null;

        csParser.indexer_declaration_return indexer_declaration787 = null;

        csParser.indexer_declaration_return indexer_declaration788 = null;

        csParser.field_declaration_return field_declaration789 = null;

        csParser.operator_declaration_return operator_declaration790 = null;

        csParser.struct_declaration_return struct_declaration791 = null;

        csParser.enum_declaration_return enum_declaration792 = null;

        csParser.delegate_declaration_return delegate_declaration793 = null;

        csParser.conversion_operator_declaration_return conversion_operator_declaration794 = null;

        csParser.constructor_declaration_return constructor_declaration795 = null;


        CommonTree string_literal768_tree=null;
        CommonTree char_literal771_tree=null;
        CommonTree string_literal773_tree=null;
        CommonTree string_literal780_tree=null;
        CommonTree char_literal786_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");
        RewriteRuleSubtreeStream stream_class_declaration=new RewriteRuleSubtreeStream(adaptor,"rule class_declaration");
        RewriteRuleSubtreeStream stream_indexer_declaration=new RewriteRuleSubtreeStream(adaptor,"rule indexer_declaration");
        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        RewriteRuleSubtreeStream stream_constant_declarators=new RewriteRuleSubtreeStream(adaptor,"rule constant_declarators");
        RewriteRuleSubtreeStream stream_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule struct_declaration");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_enum_declaration=new RewriteRuleSubtreeStream(adaptor,"rule enum_declaration");
        RewriteRuleSubtreeStream stream_event_declaration=new RewriteRuleSubtreeStream(adaptor,"rule event_declaration");
        RewriteRuleSubtreeStream stream_constructor_declaration=new RewriteRuleSubtreeStream(adaptor,"rule constructor_declaration");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_declaration=new RewriteRuleSubtreeStream(adaptor,"rule property_declaration");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_operator_declaration=new RewriteRuleSubtreeStream(adaptor,"rule operator_declaration");
        RewriteRuleSubtreeStream stream_attributes=new RewriteRuleSubtreeStream(adaptor,"rule attributes");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_delegate_declaration=new RewriteRuleSubtreeStream(adaptor,"rule delegate_declaration");
        RewriteRuleSubtreeStream stream_conversion_operator_declaration=new RewriteRuleSubtreeStream(adaptor,"rule conversion_operator_declaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // mypackage/cs.g:816:26: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
            // mypackage/cs.g:817:2: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
            {
            // mypackage/cs.g:817:2: ( attributes )?
            int alt226=2;
            switch ( input.LA(1) ) {
                case 95:
                    {
                    alt226=1;
                    }
                    break;
            }

            switch (alt226) {
                case 1 :
                    // mypackage/cs.g:0:0: attributes
                    {
                    pushFollow(FOLLOW_attributes_in_struct_member_declaration5998);
                    attributes767=attributes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attributes.add(attributes767.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:817:17: (m= modifiers )?
            int alt227=2;
            switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    {
                    alt227=1;
                    }
                    break;
            }

            switch (alt227) {
                case 1 :
                    // mypackage/cs.g:0:0: m= modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_struct_member_declaration6005);
                    m=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(m.getTree());

                    }
                    break;

            }

            // mypackage/cs.g:818:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
            int alt230=12;
            alt230 = dfa230.predict(input);
            switch (alt230) {
                case 1 :
                    // mypackage/cs.g:818:4: 'const' type constant_declarators ';'
                    {
                    string_literal768=(Token)match(input,90,FOLLOW_90_in_struct_member_declaration6011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_90.add(string_literal768);

                    pushFollow(FOLLOW_type_in_struct_member_declaration6015);
                    type769=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type769.getTree());
                    pushFollow(FOLLOW_constant_declarators_in_struct_member_declaration6019);
                    constant_declarators770=constant_declarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_declarators.add(constant_declarators770.getTree());
                    char_literal771=(Token)match(input,SEMI,FOLLOW_SEMI_in_struct_member_declaration6023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal771);


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:819:4: event_declaration
                    {
                    pushFollow(FOLLOW_event_declaration_in_struct_member_declaration6028);
                    event_declaration772=event_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_event_declaration.add(event_declaration772.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:820:4: 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration )
                    {
                    string_literal773=(Token)match(input,76,FOLLOW_76_in_struct_member_declaration6035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_76.add(string_literal773);

                    // mypackage/cs.g:820:14: ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration )
                    int alt228=4;
                    switch ( input.LA(1) ) {
                    case IDENTIFIER:
                    case Real_literal:
                    case NUMBER:
                    case Hex_number:
                    case Character_literal:
                    case StringLITERAL:
                    case Verbatim_String_literal:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case 74:
                    case 141:
                    case 142:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 159:
                    case 160:
                    case 161:
                    case 163:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 179:
                    case 186:
                    case 187:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                        {
                        alt228=1;
                        }
                        break;
                    case 181:
                        {
                        alt228=2;
                        }
                        break;
                    case 164:
                        {
                        alt228=3;
                        }
                        break;
                    case 178:
                        {
                        alt228=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 228, 0, input);

                        throw nvae;
                    }

                    switch (alt228) {
                        case 1 :
                            // mypackage/cs.g:820:15: method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_struct_member_declaration6038);
                            method_declaration774=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration774.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:821:9: interface_declaration
                            {
                            pushFollow(FOLLOW_interface_declaration_in_struct_member_declaration6049);
                            interface_declaration775=interface_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration775.getTree());


                            // AST REWRITE
                            // elements: interface_declaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 821:31: -> ^( INTERFACE interface_declaration )
                            {
                                // mypackage/cs.g:821:34: ^( INTERFACE interface_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // mypackage/cs.g:822:9: class_declaration
                            {
                            pushFollow(FOLLOW_class_declaration_in_struct_member_declaration6067);
                            class_declaration776=class_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_class_declaration.add(class_declaration776.getTree());


                            // AST REWRITE
                            // elements: class_declaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 822:27: -> ^( CLASS class_declaration )
                            {
                                // mypackage/cs.g:822:30: ^( CLASS class_declaration )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS, "CLASS"), root_1);

                                adaptor.addChild(root_1, stream_class_declaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // mypackage/cs.g:823:9: struct_declaration
                            {
                            pushFollow(FOLLOW_struct_declaration_in_struct_member_declaration6085);
                            struct_declaration777=struct_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_struct_declaration.add(struct_declaration777.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // mypackage/cs.g:825:4: interface_declaration
                    {
                    pushFollow(FOLLOW_interface_declaration_in_struct_member_declaration6092);
                    interface_declaration778=interface_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration778.getTree());


                    // AST REWRITE
                    // elements: interface_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 826:2: -> ^( INTERFACE interface_declaration )
                    {
                        // mypackage/cs.g:826:5: ^( INTERFACE interface_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // mypackage/cs.g:827:4: class_declaration
                    {
                    pushFollow(FOLLOW_class_declaration_in_struct_member_declaration6107);
                    class_declaration779=class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_declaration.add(class_declaration779.getTree());


                    // AST REWRITE
                    // elements: class_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 828:3: -> ^( CLASS class_declaration )
                    {
                        // mypackage/cs.g:828:6: ^( CLASS class_declaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS, "CLASS"), root_1);

                        adaptor.addChild(root_1, stream_class_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // mypackage/cs.g:829:4: 'void' method_declaration
                    {
                    string_literal780=(Token)match(input,91,FOLLOW_91_in_struct_member_declaration6124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_91.add(string_literal780);

                    pushFollow(FOLLOW_method_declaration_in_struct_member_declaration6128);
                    method_declaration781=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration781.getTree());

                    }
                    break;
                case 7 :
                    // mypackage/cs.g:830:4: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
                    {
                    pushFollow(FOLLOW_type_in_struct_member_declaration6133);
                    type782=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type782.getTree());
                    // mypackage/cs.g:830:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
                    int alt229=6;
                    alt229 = dfa229.predict(input);
                    switch (alt229) {
                        case 1 :
                            // mypackage/cs.g:830:11: ( member_name '(' )=> method_declaration
                            {
                            pushFollow(FOLLOW_method_declaration_in_struct_member_declaration6147);
                            method_declaration783=method_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration783.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:831:8: ( member_name '{' )=> property_declaration
                            {
                            pushFollow(FOLLOW_property_declaration_in_struct_member_declaration6166);
                            property_declaration784=property_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_property_declaration.add(property_declaration784.getTree());

                            }
                            break;
                        case 3 :
                            // mypackage/cs.g:832:8: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
                            {
                            pushFollow(FOLLOW_type_name_in_struct_member_declaration6189);
                            type_name785=type_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_name.add(type_name785.getTree());
                            char_literal786=(Token)match(input,DOT,FOLLOW_DOT_in_struct_member_declaration6191); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(char_literal786);

                            pushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration6193);
                            indexer_declaration787=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_indexer_declaration.add(indexer_declaration787.getTree());

                            }
                            break;
                        case 4 :
                            // mypackage/cs.g:833:8: indexer_declaration
                            {
                            pushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration6202);
                            indexer_declaration788=indexer_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_indexer_declaration.add(indexer_declaration788.getTree());

                            }
                            break;
                        case 5 :
                            // mypackage/cs.g:834:11: field_declaration
                            {
                            pushFollow(FOLLOW_field_declaration_in_struct_member_declaration6215);
                            field_declaration789=field_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration789.getTree());

                            }
                            break;
                        case 6 :
                            // mypackage/cs.g:835:11: operator_declaration
                            {
                            pushFollow(FOLLOW_operator_declaration_in_struct_member_declaration6233);
                            operator_declaration790=operator_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_operator_declaration.add(operator_declaration790.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // mypackage/cs.g:839:4: struct_declaration
                    {
                    pushFollow(FOLLOW_struct_declaration_in_struct_member_declaration6251);
                    struct_declaration791=struct_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_declaration.add(struct_declaration791.getTree());

                    }
                    break;
                case 9 :
                    // mypackage/cs.g:840:4: enum_declaration
                    {
                    pushFollow(FOLLOW_enum_declaration_in_struct_member_declaration6257);
                    enum_declaration792=enum_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enum_declaration.add(enum_declaration792.getTree());

                    }
                    break;
                case 10 :
                    // mypackage/cs.g:841:4: delegate_declaration
                    {
                    pushFollow(FOLLOW_delegate_declaration_in_struct_member_declaration6264);
                    delegate_declaration793=delegate_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delegate_declaration.add(delegate_declaration793.getTree());

                    }
                    break;
                case 11 :
                    // mypackage/cs.g:842:4: conversion_operator_declaration
                    {
                    pushFollow(FOLLOW_conversion_operator_declaration_in_struct_member_declaration6270);
                    conversion_operator_declaration794=conversion_operator_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conversion_operator_declaration.add(conversion_operator_declaration794.getTree());

                    }
                    break;
                case 12 :
                    // mypackage/cs.g:843:4: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_struct_member_declaration6275);
                    constructor_declaration795=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructor_declaration.add(constructor_declaration795.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, struct_member_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration"

    public static class indexer_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indexer_declaration"
    // mypackage/cs.g:849:1: indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
    public final csParser.indexer_declaration_return indexer_declaration() throws RecognitionException {
        csParser.indexer_declaration_return retval = new csParser.indexer_declaration_return();
        retval.start = input.LT(1);
        int indexer_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal797=null;
        Token char_literal799=null;
        csParser.indexer_declarator_return indexer_declarator796 = null;

        csParser.accessor_declarations_return accessor_declarations798 = null;


        CommonTree char_literal797_tree=null;
        CommonTree char_literal799_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // mypackage/cs.g:849:20: ( indexer_declarator '{' accessor_declarations '}' )
            // mypackage/cs.g:850:2: indexer_declarator '{' accessor_declarations '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_indexer_declarator_in_indexer_declaration6292);
            indexer_declarator796=indexer_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, indexer_declarator796.getTree());
            char_literal797=(Token)match(input,71,FOLLOW_71_in_indexer_declaration6296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal797_tree = (CommonTree)adaptor.create(char_literal797);
            adaptor.addChild(root_0, char_literal797_tree);
            }
            pushFollow(FOLLOW_accessor_declarations_in_indexer_declaration6300);
            accessor_declarations798=accessor_declarations();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, accessor_declarations798.getTree());
            char_literal799=(Token)match(input,72,FOLLOW_72_in_indexer_declaration6304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal799_tree = (CommonTree)adaptor.create(char_literal799);
            adaptor.addChild(root_0, char_literal799_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, indexer_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indexer_declaration"

    public static class indexer_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indexer_declarator"
    // mypackage/cs.g:851:1: indexer_declarator : 'this' '[' formal_parameter_list ']' ;
    public final csParser.indexer_declarator_return indexer_declarator() throws RecognitionException {
        csParser.indexer_declarator_return retval = new csParser.indexer_declarator_return();
        retval.start = input.LT(1);
        int indexer_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal800=null;
        Token char_literal801=null;
        Token char_literal803=null;
        csParser.formal_parameter_list_return formal_parameter_list802 = null;


        CommonTree string_literal800_tree=null;
        CommonTree char_literal801_tree=null;
        CommonTree char_literal803_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // mypackage/cs.g:851:19: ( 'this' '[' formal_parameter_list ']' )
            // mypackage/cs.g:853:2: 'this' '[' formal_parameter_list ']'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal800=(Token)match(input,92,FOLLOW_92_in_indexer_declarator6314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal800_tree = (CommonTree)adaptor.create(string_literal800);
            adaptor.addChild(root_0, string_literal800_tree);
            }
            char_literal801=(Token)match(input,95,FOLLOW_95_in_indexer_declarator6318); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal801_tree = (CommonTree)adaptor.create(char_literal801);
            adaptor.addChild(root_0, char_literal801_tree);
            }
            pushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator6322);
            formal_parameter_list802=formal_parameter_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list802.getTree());
            char_literal803=(Token)match(input,96,FOLLOW_96_in_indexer_declarator6326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal803_tree = (CommonTree)adaptor.create(char_literal803);
            adaptor.addChild(root_0, char_literal803_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, indexer_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "indexer_declarator"

    public static class operator_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_declaration"
    // mypackage/cs.g:856:1: operator_declaration : operator_declarator operator_body ;
    public final csParser.operator_declaration_return operator_declaration() throws RecognitionException {
        csParser.operator_declaration_return retval = new csParser.operator_declaration_return();
        retval.start = input.LT(1);
        int operator_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.operator_declarator_return operator_declarator804 = null;

        csParser.operator_body_return operator_body805 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // mypackage/cs.g:856:21: ( operator_declarator operator_body )
            // mypackage/cs.g:857:2: operator_declarator operator_body
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_operator_declarator_in_operator_declaration6337);
            operator_declarator804=operator_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_declarator804.getTree());
            pushFollow(FOLLOW_operator_body_in_operator_declaration6341);
            operator_body805=operator_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_body805.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, operator_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "operator_declaration"

    public static class operator_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_declarator"
    // mypackage/cs.g:858:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) ;
    public final csParser.operator_declarator_return operator_declarator() throws RecognitionException {
        csParser.operator_declarator_return retval = new csParser.operator_declarator_return();
        retval.start = input.LT(1);
        int operator_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal806=null;
        Token set807=null;
        Token char_literal808=null;
        csParser.type_return type809 = null;

        csParser.identifier_return identifier810 = null;

        csParser.binary_operator_declarator_return binary_operator_declarator811 = null;

        csParser.unary_operator_declarator_return unary_operator_declarator812 = null;

        csParser.overloadable_unary_operator_return overloadable_unary_operator813 = null;

        csParser.unary_operator_declarator_return unary_operator_declarator814 = null;

        csParser.overloadable_binary_operator_return overloadable_binary_operator815 = null;

        csParser.binary_operator_declarator_return binary_operator_declarator816 = null;


        CommonTree string_literal806_tree=null;
        CommonTree set807_tree=null;
        CommonTree char_literal808_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // mypackage/cs.g:858:20: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) )
            // mypackage/cs.g:859:2: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal806=(Token)match(input,182,FOLLOW_182_in_operator_declarator6349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal806_tree = (CommonTree)adaptor.create(string_literal806);
            adaptor.addChild(root_0, string_literal806_tree);
            }
            // mypackage/cs.g:860:3: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
            int alt232=3;
            switch ( input.LA(1) ) {
            case MINUS:
            case 113:
                {
                alt232=1;
                }
                break;
            case TRUE:
            case FALSE:
            case 111:
            case 112:
            case 114:
            case 115:
                {
                alt232=2;
                }
                break;
            case GT:
            case 108:
            case 109:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 133:
            case 134:
            case 135:
            case 136:
                {
                alt232=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }

            switch (alt232) {
                case 1 :
                    // mypackage/cs.g:860:4: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
                    {
                    set807=(Token)input.LT(1);
                    if ( input.LA(1)==MINUS||input.LA(1)==113 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set807));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    char_literal808=(Token)match(input,97,FOLLOW_97_in_operator_declarator6367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal808_tree = (CommonTree)adaptor.create(char_literal808);
                    adaptor.addChild(root_0, char_literal808_tree);
                    }
                    pushFollow(FOLLOW_type_in_operator_declarator6371);
                    type809=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type809.getTree());
                    pushFollow(FOLLOW_identifier_in_operator_declarator6375);
                    identifier810=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier810.getTree());
                    // mypackage/cs.g:860:42: ( binary_operator_declarator | unary_operator_declarator )
                    int alt231=2;
                    switch ( input.LA(1) ) {
                    case 98:
                        {
                        alt231=1;
                        }
                        break;
                    case RPAREN:
                        {
                        alt231=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 231, 0, input);

                        throw nvae;
                    }

                    switch (alt231) {
                        case 1 :
                            // mypackage/cs.g:860:43: binary_operator_declarator
                            {
                            pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator6378);
                            binary_operator_declarator811=binary_operator_declarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator_declarator811.getTree());

                            }
                            break;
                        case 2 :
                            // mypackage/cs.g:860:72: unary_operator_declarator
                            {
                            pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator6382);
                            unary_operator_declarator812=unary_operator_declarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator_declarator812.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:861:5: overloadable_unary_operator unary_operator_declarator
                    {
                    pushFollow(FOLLOW_overloadable_unary_operator_in_operator_declarator6389);
                    overloadable_unary_operator813=overloadable_unary_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadable_unary_operator813.getTree());
                    pushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator6393);
                    unary_operator_declarator814=unary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_operator_declarator814.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:862:5: overloadable_binary_operator binary_operator_declarator
                    {
                    pushFollow(FOLLOW_overloadable_binary_operator_in_operator_declarator6399);
                    overloadable_binary_operator815=overloadable_binary_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, overloadable_binary_operator815.getTree());
                    pushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator6403);
                    binary_operator_declarator816=binary_operator_declarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator_declarator816.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, operator_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "operator_declarator"

    public static class unary_operator_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_operator_declarator"
    // mypackage/cs.g:863:1: unary_operator_declarator : ')' ;
    public final csParser.unary_operator_declarator_return unary_operator_declarator() throws RecognitionException {
        csParser.unary_operator_declarator_return retval = new csParser.unary_operator_declarator_return();
        retval.start = input.LT(1);
        int unary_operator_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal817=null;

        CommonTree char_literal817_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // mypackage/cs.g:863:26: ( ')' )
            // mypackage/cs.g:864:5: ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal817=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unary_operator_declarator6415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal817_tree = (CommonTree)adaptor.create(char_literal817);
            adaptor.addChild(root_0, char_literal817_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, unary_operator_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_operator_declarator"

    public static class overloadable_unary_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "overloadable_unary_operator"
    // mypackage/cs.g:865:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
    public final csParser.overloadable_unary_operator_return overloadable_unary_operator() throws RecognitionException {
        csParser.overloadable_unary_operator_return retval = new csParser.overloadable_unary_operator_return();
        retval.start = input.LT(1);
        int overloadable_unary_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set818=null;

        CommonTree set818_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // mypackage/cs.g:865:28: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set818=(Token)input.LT(1);
            if ( (input.LA(1)>=TRUE && input.LA(1)<=FALSE)||(input.LA(1)>=111 && input.LA(1)<=112)||(input.LA(1)>=114 && input.LA(1)<=115) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set818));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, overloadable_unary_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "overloadable_unary_operator"

    public static class binary_operator_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_operator_declarator"
    // mypackage/cs.g:867:1: binary_operator_declarator : ',' type identifier ')' ;
    public final csParser.binary_operator_declarator_return binary_operator_declarator() throws RecognitionException {
        csParser.binary_operator_declarator_return retval = new csParser.binary_operator_declarator_return();
        retval.start = input.LT(1);
        int binary_operator_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal819=null;
        Token char_literal822=null;
        csParser.type_return type820 = null;

        csParser.identifier_return identifier821 = null;


        CommonTree char_literal819_tree=null;
        CommonTree char_literal822_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // mypackage/cs.g:867:27: ( ',' type identifier ')' )
            // mypackage/cs.g:868:2: ',' type identifier ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal819=(Token)match(input,98,FOLLOW_98_in_binary_operator_declarator6458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal819_tree = (CommonTree)adaptor.create(char_literal819);
            adaptor.addChild(root_0, char_literal819_tree);
            }
            pushFollow(FOLLOW_type_in_binary_operator_declarator6462);
            type820=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type820.getTree());
            pushFollow(FOLLOW_identifier_in_binary_operator_declarator6466);
            identifier821=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier821.getTree());
            char_literal822=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_binary_operator_declarator6470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal822_tree = (CommonTree)adaptor.create(char_literal822);
            adaptor.addChild(root_0, char_literal822_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, binary_operator_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "binary_operator_declarator"

    public static class overloadable_binary_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "overloadable_binary_operator"
    // mypackage/cs.g:870:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
    public final csParser.overloadable_binary_operator_return overloadable_binary_operator() throws RecognitionException {
        csParser.overloadable_binary_operator_return retval = new csParser.overloadable_binary_operator_return();
        retval.start = input.LT(1);
        int overloadable_binary_operator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal823=null;
        Token char_literal824=null;
        Token char_literal825=null;
        Token char_literal826=null;
        Token char_literal827=null;
        Token char_literal828=null;
        Token string_literal829=null;
        Token char_literal830=null;
        Token char_literal831=null;
        Token string_literal832=null;
        Token string_literal833=null;
        Token char_literal834=null;
        Token char_literal835=null;
        Token string_literal836=null;
        Token string_literal837=null;

        CommonTree char_literal823_tree=null;
        CommonTree char_literal824_tree=null;
        CommonTree char_literal825_tree=null;
        CommonTree char_literal826_tree=null;
        CommonTree char_literal827_tree=null;
        CommonTree char_literal828_tree=null;
        CommonTree string_literal829_tree=null;
        CommonTree char_literal830_tree=null;
        CommonTree char_literal831_tree=null;
        CommonTree string_literal832_tree=null;
        CommonTree string_literal833_tree=null;
        CommonTree char_literal834_tree=null;
        CommonTree char_literal835_tree=null;
        CommonTree string_literal836_tree=null;
        CommonTree string_literal837_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // mypackage/cs.g:870:29: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
            int alt233=14;
            alt233 = dfa233.predict(input);
            switch (alt233) {
                case 1 :
                    // mypackage/cs.g:871:19: '*'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal823=(Token)match(input,109,FOLLOW_109_in_overloadable_binary_operator6481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal823_tree = (CommonTree)adaptor.create(char_literal823);
                    adaptor.addChild(root_0, char_literal823_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:871:25: '/'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal824=(Token)match(input,127,FOLLOW_127_in_overloadable_binary_operator6485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal824_tree = (CommonTree)adaptor.create(char_literal824);
                    adaptor.addChild(root_0, char_literal824_tree);
                    }

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:871:31: '%'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal825=(Token)match(input,128,FOLLOW_128_in_overloadable_binary_operator6489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal825_tree = (CommonTree)adaptor.create(char_literal825);
                    adaptor.addChild(root_0, char_literal825_tree);
                    }

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:871:37: '&'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal826=(Token)match(input,126,FOLLOW_126_in_overloadable_binary_operator6493); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal826_tree = (CommonTree)adaptor.create(char_literal826);
                    adaptor.addChild(root_0, char_literal826_tree);
                    }

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:871:43: '|'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal827=(Token)match(input,136,FOLLOW_136_in_overloadable_binary_operator6497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal827_tree = (CommonTree)adaptor.create(char_literal827);
                    adaptor.addChild(root_0, char_literal827_tree);
                    }

                    }
                    break;
                case 6 :
                    // mypackage/cs.g:871:49: '^'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal828=(Token)match(input,135,FOLLOW_135_in_overloadable_binary_operator6501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal828_tree = (CommonTree)adaptor.create(char_literal828);
                    adaptor.addChild(root_0, char_literal828_tree);
                    }

                    }
                    break;
                case 7 :
                    // mypackage/cs.g:871:55: '<<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal829=(Token)match(input,129,FOLLOW_129_in_overloadable_binary_operator6505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal829_tree = (CommonTree)adaptor.create(string_literal829);
                    adaptor.addChild(root_0, string_literal829_tree);
                    }

                    }
                    break;
                case 8 :
                    // mypackage/cs.g:871:62: '>' '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal830=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator6509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal830_tree = (CommonTree)adaptor.create(char_literal830);
                    adaptor.addChild(root_0, char_literal830_tree);
                    }
                    char_literal831=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator6511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal831_tree = (CommonTree)adaptor.create(char_literal831);
                    adaptor.addChild(root_0, char_literal831_tree);
                    }

                    }
                    break;
                case 9 :
                    // mypackage/cs.g:871:72: '=='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal832=(Token)match(input,133,FOLLOW_133_in_overloadable_binary_operator6515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal832_tree = (CommonTree)adaptor.create(string_literal832);
                    adaptor.addChild(root_0, string_literal832_tree);
                    }

                    }
                    break;
                case 10 :
                    // mypackage/cs.g:871:79: '!='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal833=(Token)match(input,134,FOLLOW_134_in_overloadable_binary_operator6519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal833_tree = (CommonTree)adaptor.create(string_literal833);
                    adaptor.addChild(root_0, string_literal833_tree);
                    }

                    }
                    break;
                case 11 :
                    // mypackage/cs.g:871:86: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal834=(Token)match(input,GT,FOLLOW_GT_in_overloadable_binary_operator6523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal834_tree = (CommonTree)adaptor.create(char_literal834);
                    adaptor.addChild(root_0, char_literal834_tree);
                    }

                    }
                    break;
                case 12 :
                    // mypackage/cs.g:871:92: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal835=(Token)match(input,108,FOLLOW_108_in_overloadable_binary_operator6527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal835_tree = (CommonTree)adaptor.create(char_literal835);
                    adaptor.addChild(root_0, char_literal835_tree);
                    }

                    }
                    break;
                case 13 :
                    // mypackage/cs.g:871:98: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal836=(Token)match(input,125,FOLLOW_125_in_overloadable_binary_operator6531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal836_tree = (CommonTree)adaptor.create(string_literal836);
                    adaptor.addChild(root_0, string_literal836_tree);
                    }

                    }
                    break;
                case 14 :
                    // mypackage/cs.g:871:105: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal837=(Token)match(input,130,FOLLOW_130_in_overloadable_binary_operator6535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal837_tree = (CommonTree)adaptor.create(string_literal837);
                    adaptor.addChild(root_0, string_literal837_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, overloadable_binary_operator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "overloadable_binary_operator"

    public static class conversion_operator_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conversion_operator_declaration"
    // mypackage/cs.g:873:1: conversion_operator_declaration : conversion_operator_declarator operator_body ;
    public final csParser.conversion_operator_declaration_return conversion_operator_declaration() throws RecognitionException {
        csParser.conversion_operator_declaration_return retval = new csParser.conversion_operator_declaration_return();
        retval.start = input.LT(1);
        int conversion_operator_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.conversion_operator_declarator_return conversion_operator_declarator838 = null;

        csParser.operator_body_return operator_body839 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // mypackage/cs.g:873:32: ( conversion_operator_declarator operator_body )
            // mypackage/cs.g:874:2: conversion_operator_declarator operator_body
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6545);
            conversion_operator_declarator838=conversion_operator_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conversion_operator_declarator838.getTree());
            pushFollow(FOLLOW_operator_body_in_conversion_operator_declaration6549);
            operator_body839=operator_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operator_body839.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, conversion_operator_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declaration"

    public static class conversion_operator_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conversion_operator_declarator"
    // mypackage/cs.g:875:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
    public final csParser.conversion_operator_declarator_return conversion_operator_declarator() throws RecognitionException {
        csParser.conversion_operator_declarator_return retval = new csParser.conversion_operator_declarator_return();
        retval.start = input.LT(1);
        int conversion_operator_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set840=null;
        Token string_literal841=null;
        Token char_literal843=null;
        Token char_literal846=null;
        csParser.type_return type842 = null;

        csParser.type_return type844 = null;

        csParser.identifier_return identifier845 = null;


        CommonTree set840_tree=null;
        CommonTree string_literal841_tree=null;
        CommonTree char_literal843_tree=null;
        CommonTree char_literal846_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // mypackage/cs.g:875:31: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
            // mypackage/cs.g:876:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            set840=(Token)input.LT(1);
            if ( (input.LA(1)>=183 && input.LA(1)<=184) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set840));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            string_literal841=(Token)match(input,182,FOLLOW_182_in_conversion_operator_declarator6566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal841_tree = (CommonTree)adaptor.create(string_literal841);
            adaptor.addChild(root_0, string_literal841_tree);
            }
            pushFollow(FOLLOW_type_in_conversion_operator_declarator6570);
            type842=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type842.getTree());
            char_literal843=(Token)match(input,97,FOLLOW_97_in_conversion_operator_declarator6574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal843_tree = (CommonTree)adaptor.create(char_literal843);
            adaptor.addChild(root_0, char_literal843_tree);
            }
            pushFollow(FOLLOW_type_in_conversion_operator_declarator6578);
            type844=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type844.getTree());
            pushFollow(FOLLOW_identifier_in_conversion_operator_declarator6582);
            identifier845=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier845.getTree());
            char_literal846=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_conversion_operator_declarator6586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal846_tree = (CommonTree)adaptor.create(char_literal846);
            adaptor.addChild(root_0, char_literal846_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, conversion_operator_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declarator"

    public static class operator_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operator_body"
    // mypackage/cs.g:877:1: operator_body : block ;
    public final csParser.operator_body_return operator_body() throws RecognitionException {
        csParser.operator_body_return retval = new csParser.operator_body_return();
        retval.start = input.LT(1);
        int operator_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.block_return block847 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // mypackage/cs.g:877:14: ( block )
            // mypackage/cs.g:878:2: block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_block_in_operator_body6594);
            block847=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block847.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, operator_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "operator_body"

    public static class constructor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_declaration"
    // mypackage/cs.g:881:1: constructor_declaration : constructor_declarator constructor_body ;
    public final csParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
        csParser.constructor_declaration_return retval = new csParser.constructor_declaration_return();
        retval.start = input.LT(1);
        int constructor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.constructor_declarator_return constructor_declarator848 = null;

        csParser.constructor_body_return constructor_body849 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // mypackage/cs.g:881:24: ( constructor_declarator constructor_body )
            // mypackage/cs.g:882:2: constructor_declarator constructor_body
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_constructor_declarator_in_constructor_declaration6604);
            constructor_declarator848=constructor_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declarator848.getTree());
            pushFollow(FOLLOW_constructor_body_in_constructor_declaration6608);
            constructor_body849=constructor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_body849.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, constructor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public static class constructor_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_declarator"
    // mypackage/cs.g:883:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
    public final csParser.constructor_declarator_return constructor_declarator() throws RecognitionException {
        csParser.constructor_declarator_return retval = new csParser.constructor_declarator_return();
        retval.start = input.LT(1);
        int constructor_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal851=null;
        Token char_literal853=null;
        csParser.identifier_return identifier850 = null;

        csParser.formal_parameter_list_return formal_parameter_list852 = null;

        csParser.constructor_initializer_return constructor_initializer854 = null;


        CommonTree char_literal851_tree=null;
        CommonTree char_literal853_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // mypackage/cs.g:883:23: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
            // mypackage/cs.g:884:2: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_constructor_declarator6616);
            identifier850=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier850.getTree());
            char_literal851=(Token)match(input,97,FOLLOW_97_in_constructor_declarator6620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal851_tree = (CommonTree)adaptor.create(char_literal851);
            adaptor.addChild(root_0, char_literal851_tree);
            }
            // mypackage/cs.g:884:21: ( formal_parameter_list )?
            int alt234=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 91:
                case 92:
                case 95:
                case 100:
                case 101:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 180:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt234=1;
                    }
                    break;
            }

            switch (alt234) {
                case 1 :
                    // mypackage/cs.g:0:0: formal_parameter_list
                    {
                    pushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator6624);
                    formal_parameter_list852=formal_parameter_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, formal_parameter_list852.getTree());

                    }
                    break;

            }

            char_literal853=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_declarator6629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal853_tree = (CommonTree)adaptor.create(char_literal853);
            adaptor.addChild(root_0, char_literal853_tree);
            }
            // mypackage/cs.g:884:52: ( constructor_initializer )?
            int alt235=2;
            switch ( input.LA(1) ) {
                case 99:
                    {
                    alt235=1;
                    }
                    break;
            }

            switch (alt235) {
                case 1 :
                    // mypackage/cs.g:0:0: constructor_initializer
                    {
                    pushFollow(FOLLOW_constructor_initializer_in_constructor_declarator6633);
                    constructor_initializer854=constructor_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_initializer854.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, constructor_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_declarator"

    public static class constructor_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_initializer"
    // mypackage/cs.g:885:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
    public final csParser.constructor_initializer_return constructor_initializer() throws RecognitionException {
        csParser.constructor_initializer_return retval = new csParser.constructor_initializer_return();
        retval.start = input.LT(1);
        int constructor_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal855=null;
        Token set856=null;
        Token char_literal857=null;
        Token char_literal859=null;
        csParser.argument_list_return argument_list858 = null;


        CommonTree char_literal855_tree=null;
        CommonTree set856_tree=null;
        CommonTree char_literal857_tree=null;
        CommonTree char_literal859_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // mypackage/cs.g:885:24: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
            // mypackage/cs.g:886:2: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal855=(Token)match(input,99,FOLLOW_99_in_constructor_initializer6642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal855_tree = (CommonTree)adaptor.create(char_literal855);
            adaptor.addChild(root_0, char_literal855_tree);
            }
            set856=(Token)input.LT(1);
            if ( input.LA(1)==92||input.LA(1)==94 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set856));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            char_literal857=(Token)match(input,97,FOLLOW_97_in_constructor_initializer6656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal857_tree = (CommonTree)adaptor.create(char_literal857);
            adaptor.addChild(root_0, char_literal857_tree);
            }
            // mypackage/cs.g:886:34: ( argument_list )?
            int alt236=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt236=1;
                    }
                    break;
            }

            switch (alt236) {
                case 1 :
                    // mypackage/cs.g:0:0: argument_list
                    {
                    pushFollow(FOLLOW_argument_list_in_constructor_initializer6660);
                    argument_list858=argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_list858.getTree());

                    }
                    break;

            }

            char_literal859=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constructor_initializer6665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal859_tree = (CommonTree)adaptor.create(char_literal859);
            adaptor.addChild(root_0, char_literal859_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, constructor_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_initializer"

    public static class constructor_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructor_body"
    // mypackage/cs.g:887:1: constructor_body : block ;
    public final csParser.constructor_body_return constructor_body() throws RecognitionException {
        csParser.constructor_body_return retval = new csParser.constructor_body_return();
        retval.start = input.LT(1);
        int constructor_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.block_return block860 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // mypackage/cs.g:887:17: ( block )
            // mypackage/cs.g:888:2: block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_block_in_constructor_body6673);
            block860=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block860.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, constructor_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructor_body"

    public static class destructor_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "destructor_declaration"
    // mypackage/cs.g:897:1: destructor_declaration : '~' identifier '(' ')' destructor_body ;
    public final csParser.destructor_declaration_return destructor_declaration() throws RecognitionException {
        csParser.destructor_declaration_return retval = new csParser.destructor_declaration_return();
        retval.start = input.LT(1);
        int destructor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal861=null;
        Token char_literal863=null;
        Token char_literal864=null;
        csParser.identifier_return identifier862 = null;

        csParser.destructor_body_return destructor_body865 = null;


        CommonTree char_literal861_tree=null;
        CommonTree char_literal863_tree=null;
        CommonTree char_literal864_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // mypackage/cs.g:897:23: ( '~' identifier '(' ')' destructor_body )
            // mypackage/cs.g:898:2: '~' identifier '(' ')' destructor_body
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal861=(Token)match(input,115,FOLLOW_115_in_destructor_declaration6689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal861_tree = (CommonTree)adaptor.create(char_literal861);
            adaptor.addChild(root_0, char_literal861_tree);
            }
            pushFollow(FOLLOW_identifier_in_destructor_declaration6692);
            identifier862=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier862.getTree());
            char_literal863=(Token)match(input,97,FOLLOW_97_in_destructor_declaration6696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal863_tree = (CommonTree)adaptor.create(char_literal863);
            adaptor.addChild(root_0, char_literal863_tree);
            }
            char_literal864=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_destructor_declaration6700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal864_tree = (CommonTree)adaptor.create(char_literal864);
            adaptor.addChild(root_0, char_literal864_tree);
            }
            pushFollow(FOLLOW_destructor_body_in_destructor_declaration6705);
            destructor_body865=destructor_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, destructor_body865.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, destructor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "destructor_declaration"

    public static class destructor_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "destructor_body"
    // mypackage/cs.g:899:1: destructor_body : block ;
    public final csParser.destructor_body_return destructor_body() throws RecognitionException {
        csParser.destructor_body_return retval = new csParser.destructor_body_return();
        retval.start = input.LT(1);
        int destructor_body_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.block_return block866 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // mypackage/cs.g:899:16: ( block )
            // mypackage/cs.g:900:2: block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_block_in_destructor_body6713);
            block866=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block866.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, destructor_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "destructor_body"

    public static class invocation_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invocation_expression"
    // mypackage/cs.g:903:1: invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
    public final csParser.invocation_expression_return invocation_expression() throws RecognitionException {
        csParser.invocation_expression_return retval = new csParser.invocation_expression_return();
        retval.start = input.LT(1);
        int invocation_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.invocation_start_return invocation_start867 = null;

        csParser.arguments_return arguments868 = null;

        csParser.invocation_part_return invocation_part869 = null;

        csParser.invocation_part_return invocation_part870 = null;

        csParser.arguments_return arguments871 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // mypackage/cs.g:903:22: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
            // mypackage/cs.g:904:2: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_invocation_start_in_invocation_expression6723);
            invocation_start867=invocation_start();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_start867.getTree());
            // mypackage/cs.g:904:21: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
            loop237:
            do {
                int alt237=3;
                switch ( input.LA(1) ) {
                case 97:
                    {
                    int LA237_1 = input.LA(2);

                    if ( (synpred411_cs()) ) {
                        alt237=1;
                    }


                    }
                    break;
                case DOT:
                case PTR:
                case 95:
                    {
                    alt237=2;
                    }
                    break;

                }

                switch (alt237) {
            	case 1 :
            	    // mypackage/cs.g:904:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	    {
            	    // mypackage/cs.g:904:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
            	    // mypackage/cs.g:904:23: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
            	    {
            	    pushFollow(FOLLOW_arguments_in_invocation_expression6745);
            	    arguments868=arguments();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments868.getTree());
            	    pushFollow(FOLLOW_invocation_part_in_invocation_expression6749);
            	    invocation_part869=invocation_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part869.getTree());

            	    }


            	    }
            	    break;
            	case 2 :
            	    // mypackage/cs.g:905:9: invocation_part
            	    {
            	    pushFollow(FOLLOW_invocation_part_in_invocation_expression6760);
            	    invocation_part870=invocation_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_part870.getTree());

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);

            pushFollow(FOLLOW_arguments_in_invocation_expression6766);
            arguments871=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments871.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, invocation_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invocation_expression"

    public static class invocation_start_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invocation_start"
    // mypackage/cs.g:906:1: invocation_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
    public final csParser.invocation_start_return invocation_start() throws RecognitionException {
        csParser.invocation_start_return retval = new csParser.invocation_start_return();
        retval.start = input.LT(1);
        int invocation_start_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal875=null;
        Token string_literal876=null;
        Token string_literal878=null;
        csParser.predefined_type_return predefined_type872 = null;

        csParser.identifier_return identifier873 = null;

        csParser.generic_argument_list_return generic_argument_list874 = null;

        csParser.identifier_return identifier877 = null;

        csParser.identifier_return identifier879 = null;

        csParser.typeof_expression_return typeof_expression880 = null;


        CommonTree string_literal875_tree=null;
        CommonTree string_literal876_tree=null;
        CommonTree string_literal878_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // mypackage/cs.g:906:17: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )
            int alt239=6;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
                {
                alt239=1;
                }
                break;
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                int LA239_2 = input.LA(2);

                if ( (LA239_2==108) && (synpred414_cs())) {
                    alt239=2;
                }
                else if ( ((LA239_2>=DOT && LA239_2<=PTR)||LA239_2==93||LA239_2==95||LA239_2==97) ) {
                    alt239=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 2, input);

                    throw nvae;
                }
                }
                break;
            case 92:
                {
                alt239=3;
                }
                break;
            case 94:
                {
                alt239=4;
                }
                break;
            case 107:
                {
                alt239=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }

            switch (alt239) {
                case 1 :
                    // mypackage/cs.g:907:2: predefined_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_predefined_type_in_invocation_start6774);
                    predefined_type872=predefined_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, predefined_type872.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:908:4: ( identifier '<' )=> identifier generic_argument_list
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_invocation_start6791);
                    identifier873=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier873.getTree());
                    pushFollow(FOLLOW_generic_argument_list_in_invocation_start6795);
                    generic_argument_list874=generic_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, generic_argument_list874.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:909:4: 'this'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal875=(Token)match(input,92,FOLLOW_92_in_invocation_start6800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal875_tree = (CommonTree)adaptor.create(string_literal875);
                    adaptor.addChild(root_0, string_literal875_tree);
                    }

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:910:4: 'base'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal876=(Token)match(input,94,FOLLOW_94_in_invocation_start6806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal876_tree = (CommonTree)adaptor.create(string_literal876);
                    adaptor.addChild(root_0, string_literal876_tree);
                    }

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:911:4: identifier ( '::' identifier )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_invocation_start6811);
                    identifier877=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier877.getTree());
                    // mypackage/cs.g:911:17: ( '::' identifier )?
                    int alt238=2;
                    switch ( input.LA(1) ) {
                        case 93:
                            {
                            alt238=1;
                            }
                            break;
                    }

                    switch (alt238) {
                        case 1 :
                            // mypackage/cs.g:911:18: '::' identifier
                            {
                            string_literal878=(Token)match(input,93,FOLLOW_93_in_invocation_start6816); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal878_tree = (CommonTree)adaptor.create(string_literal878);
                            adaptor.addChild(root_0, string_literal878_tree);
                            }
                            pushFollow(FOLLOW_identifier_in_invocation_start6820);
                            identifier879=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier879.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // mypackage/cs.g:912:4: typeof_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeof_expression_in_invocation_start6827);
                    typeof_expression880=typeof_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeof_expression880.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, invocation_start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invocation_start"

    public static class invocation_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invocation_part"
    // mypackage/cs.g:914:1: invocation_part : ( access_identifier | brackets );
    public final csParser.invocation_part_return invocation_part() throws RecognitionException {
        csParser.invocation_part_return retval = new csParser.invocation_part_return();
        retval.start = input.LT(1);
        int invocation_part_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.access_identifier_return access_identifier881 = null;

        csParser.brackets_return brackets882 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // mypackage/cs.g:914:16: ( access_identifier | brackets )
            int alt240=2;
            switch ( input.LA(1) ) {
            case DOT:
            case PTR:
                {
                alt240=1;
                }
                break;
            case 95:
                {
                alt240=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;
            }

            switch (alt240) {
                case 1 :
                    // mypackage/cs.g:915:3: access_identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_access_identifier_in_invocation_part6850);
                    access_identifier881=access_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_identifier881.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:916:4: brackets
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_brackets_in_invocation_part6855);
                    brackets882=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets882.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, invocation_part_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invocation_part"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // mypackage/cs.g:920:1: statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );
    public final csParser.statement_return statement() throws RecognitionException {
        csParser.statement_return retval = new csParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.declaration_statement_return declaration_statement883 = null;

        csParser.labeled_statement_return labeled_statement884 = null;

        csParser.embedded_statement_return embedded_statement885 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // mypackage/cs.g:920:10: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement )
            int alt241=3;
            alt241 = dfa241.predict(input);
            switch (alt241) {
                case 1 :
                    // mypackage/cs.g:921:2: ( declaration_statement )=> declaration_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_declaration_statement_in_statement6872);
                    declaration_statement883=declaration_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration_statement883.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:922:4: ( identifier ':' )=> labeled_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_labeled_statement_in_statement6887);
                    labeled_statement884=labeled_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labeled_statement884.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:923:4: embedded_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_embedded_statement_in_statement6892);
                    embedded_statement885=embedded_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement885.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class embedded_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "embedded_statement"
    // mypackage/cs.g:925:1: embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );
    public final csParser.embedded_statement_return embedded_statement() throws RecognitionException {
        csParser.embedded_statement_return retval = new csParser.embedded_statement_return();
        retval.start = input.LT(1);
        int embedded_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.block_return block886 = null;

        csParser.selection_statement_return selection_statement887 = null;

        csParser.iteration_statement_return iteration_statement888 = null;

        csParser.jump_statement_return jump_statement889 = null;

        csParser.try_statement_return try_statement890 = null;

        csParser.checked_statement_return checked_statement891 = null;

        csParser.unchecked_statement_return unchecked_statement892 = null;

        csParser.lock_statement_return lock_statement893 = null;

        csParser.using_statement_return using_statement894 = null;

        csParser.yield_statement_return yield_statement895 = null;

        csParser.unsafe_statement_return unsafe_statement896 = null;

        csParser.fixed_statement_return fixed_statement897 = null;

        csParser.expression_statement_return expression_statement898 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // mypackage/cs.g:925:19: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement )
            int alt242=13;
            alt242 = dfa242.predict(input);
            switch (alt242) {
                case 1 :
                    // mypackage/cs.g:926:2: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_embedded_statement6902);
                    block886=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block886.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:927:4: selection_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selection_statement_in_embedded_statement6907);
                    selection_statement887=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selection_statement887.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:928:4: iteration_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_iteration_statement_in_embedded_statement6913);
                    iteration_statement888=iteration_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iteration_statement888.getTree());

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:929:4: jump_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_jump_statement_in_embedded_statement6919);
                    jump_statement889=jump_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jump_statement889.getTree());

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:930:4: try_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_statement_in_embedded_statement6926);
                    try_statement890=try_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_statement890.getTree());

                    }
                    break;
                case 6 :
                    // mypackage/cs.g:931:4: checked_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_checked_statement_in_embedded_statement6931);
                    checked_statement891=checked_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, checked_statement891.getTree());

                    }
                    break;
                case 7 :
                    // mypackage/cs.g:932:4: unchecked_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unchecked_statement_in_embedded_statement6936);
                    unchecked_statement892=unchecked_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unchecked_statement892.getTree());

                    }
                    break;
                case 8 :
                    // mypackage/cs.g:933:4: lock_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lock_statement_in_embedded_statement6941);
                    lock_statement893=lock_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_statement893.getTree());

                    }
                    break;
                case 9 :
                    // mypackage/cs.g:934:4: using_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_using_statement_in_embedded_statement6946);
                    using_statement894=using_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_statement894.getTree());

                    }
                    break;
                case 10 :
                    // mypackage/cs.g:935:4: yield_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_yield_statement_in_embedded_statement6952);
                    yield_statement895=yield_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield_statement895.getTree());

                    }
                    break;
                case 11 :
                    // mypackage/cs.g:936:4: unsafe_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unsafe_statement_in_embedded_statement6958);
                    unsafe_statement896=unsafe_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unsafe_statement896.getTree());

                    }
                    break;
                case 12 :
                    // mypackage/cs.g:937:4: fixed_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fixed_statement_in_embedded_statement6963);
                    fixed_statement897=fixed_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_statement897.getTree());

                    }
                    break;
                case 13 :
                    // mypackage/cs.g:938:4: expression_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_statement_in_embedded_statement6968);
                    expression_statement898=expression_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_statement898.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, embedded_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "embedded_statement"

    public static class fixed_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fixed_statement"
    // mypackage/cs.g:940:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
    public final csParser.fixed_statement_return fixed_statement() throws RecognitionException {
        csParser.fixed_statement_return retval = new csParser.fixed_statement_return();
        retval.start = input.LT(1);
        int fixed_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal899=null;
        Token char_literal900=null;
        Token char_literal903=null;
        csParser.pointer_type_return pointer_type901 = null;

        csParser.fixed_pointer_declarators_return fixed_pointer_declarators902 = null;

        csParser.embedded_statement_return embedded_statement904 = null;


        CommonTree string_literal899_tree=null;
        CommonTree char_literal900_tree=null;
        CommonTree char_literal903_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // mypackage/cs.g:940:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
            // mypackage/cs.g:941:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal899=(Token)match(input,185,FOLLOW_185_in_fixed_statement6978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal899_tree = (CommonTree)adaptor.create(string_literal899);
            adaptor.addChild(root_0, string_literal899_tree);
            }
            char_literal900=(Token)match(input,97,FOLLOW_97_in_fixed_statement6982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal900_tree = (CommonTree)adaptor.create(char_literal900);
            adaptor.addChild(root_0, char_literal900_tree);
            }
            pushFollow(FOLLOW_pointer_type_in_fixed_statement6986);
            pointer_type901=pointer_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pointer_type901.getTree());
            pushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement6988);
            fixed_pointer_declarators902=fixed_pointer_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarators902.getTree());
            char_literal903=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_fixed_statement6992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal903_tree = (CommonTree)adaptor.create(char_literal903);
            adaptor.addChild(root_0, char_literal903_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_fixed_statement6996);
            embedded_statement904=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement904.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, fixed_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fixed_statement"

    public static class fixed_pointer_declarators_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fixed_pointer_declarators"
    // mypackage/cs.g:942:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
    public final csParser.fixed_pointer_declarators_return fixed_pointer_declarators() throws RecognitionException {
        csParser.fixed_pointer_declarators_return retval = new csParser.fixed_pointer_declarators_return();
        retval.start = input.LT(1);
        int fixed_pointer_declarators_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal906=null;
        csParser.fixed_pointer_declarator_return fixed_pointer_declarator905 = null;

        csParser.fixed_pointer_declarator_return fixed_pointer_declarator907 = null;


        CommonTree char_literal906_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // mypackage/cs.g:942:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
            // mypackage/cs.g:943:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7004);
            fixed_pointer_declarator905=fixed_pointer_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarator905.getTree());
            // mypackage/cs.g:943:29: ( ',' fixed_pointer_declarator )*
            loop243:
            do {
                int alt243=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt243=1;
                    }
                    break;

                }

                switch (alt243) {
            	case 1 :
            	    // mypackage/cs.g:943:30: ',' fixed_pointer_declarator
            	    {
            	    char_literal906=(Token)match(input,98,FOLLOW_98_in_fixed_pointer_declarators7009); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal906_tree = (CommonTree)adaptor.create(char_literal906);
            	    adaptor.addChild(root_0, char_literal906_tree);
            	    }
            	    pushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7013);
            	    fixed_pointer_declarator907=fixed_pointer_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_declarator907.getTree());

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, fixed_pointer_declarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarators"

    public static class fixed_pointer_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fixed_pointer_declarator"
    // mypackage/cs.g:944:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
    public final csParser.fixed_pointer_declarator_return fixed_pointer_declarator() throws RecognitionException {
        csParser.fixed_pointer_declarator_return retval = new csParser.fixed_pointer_declarator_return();
        retval.start = input.LT(1);
        int fixed_pointer_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal909=null;
        csParser.identifier_return identifier908 = null;

        csParser.fixed_pointer_initializer_return fixed_pointer_initializer910 = null;


        CommonTree char_literal909_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // mypackage/cs.g:944:25: ( identifier '=' fixed_pointer_initializer )
            // mypackage/cs.g:945:2: identifier '=' fixed_pointer_initializer
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_fixed_pointer_declarator7023);
            identifier908=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier908.getTree());
            char_literal909=(Token)match(input,75,FOLLOW_75_in_fixed_pointer_declarator7027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal909_tree = (CommonTree)adaptor.create(char_literal909);
            adaptor.addChild(root_0, char_literal909_tree);
            }
            pushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7031);
            fixed_pointer_initializer910=fixed_pointer_initializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fixed_pointer_initializer910.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, fixed_pointer_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarator"

    public static class fixed_pointer_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fixed_pointer_initializer"
    // mypackage/cs.g:946:1: fixed_pointer_initializer : expression ;
    public final csParser.fixed_pointer_initializer_return fixed_pointer_initializer() throws RecognitionException {
        csParser.fixed_pointer_initializer_return retval = new csParser.fixed_pointer_initializer_return();
        retval.start = input.LT(1);
        int fixed_pointer_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression911 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // mypackage/cs.g:946:26: ( expression )
            // mypackage/cs.g:948:2: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_fixed_pointer_initializer7041);
            expression911=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression911.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, fixed_pointer_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_initializer"

    public static class unsafe_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unsafe_statement"
    // mypackage/cs.g:949:1: unsafe_statement : 'unsafe' block ;
    public final csParser.unsafe_statement_return unsafe_statement() throws RecognitionException {
        csParser.unsafe_statement_return retval = new csParser.unsafe_statement_return();
        retval.start = input.LT(1);
        int unsafe_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal912=null;
        csParser.block_return block913 = null;


        CommonTree string_literal912_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // mypackage/cs.g:949:17: ( 'unsafe' block )
            // mypackage/cs.g:950:2: 'unsafe' block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal912=(Token)match(input,82,FOLLOW_82_in_unsafe_statement7048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal912_tree = (CommonTree)adaptor.create(string_literal912);
            adaptor.addChild(root_0, string_literal912_tree);
            }
            pushFollow(FOLLOW_block_in_unsafe_statement7052);
            block913=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block913.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, unsafe_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unsafe_statement"

    public static class labeled_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "labeled_statement"
    // mypackage/cs.g:951:1: labeled_statement : identifier ':' statement ;
    public final csParser.labeled_statement_return labeled_statement() throws RecognitionException {
        csParser.labeled_statement_return retval = new csParser.labeled_statement_return();
        retval.start = input.LT(1);
        int labeled_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal915=null;
        csParser.identifier_return identifier914 = null;

        csParser.statement_return statement916 = null;


        CommonTree char_literal915_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // mypackage/cs.g:951:18: ( identifier ':' statement )
            // mypackage/cs.g:952:2: identifier ':' statement
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_labeled_statement7059);
            identifier914=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier914.getTree());
            char_literal915=(Token)match(input,99,FOLLOW_99_in_labeled_statement7063); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal915_tree = (CommonTree)adaptor.create(char_literal915);
            adaptor.addChild(root_0, char_literal915_tree);
            }
            pushFollow(FOLLOW_statement_in_labeled_statement7067);
            statement916=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement916.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, labeled_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "labeled_statement"

    public static class declaration_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declaration_statement"
    // mypackage/cs.g:953:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
    public final csParser.declaration_statement_return declaration_statement() throws RecognitionException {
        csParser.declaration_statement_return retval = new csParser.declaration_statement_return();
        retval.start = input.LT(1);
        int declaration_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal919=null;
        csParser.local_variable_declaration_return local_variable_declaration917 = null;

        csParser.local_constant_declaration_return local_constant_declaration918 = null;


        CommonTree char_literal919_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // mypackage/cs.g:953:22: ( ( local_variable_declaration | local_constant_declaration ) ';' )
            // mypackage/cs.g:954:2: ( local_variable_declaration | local_constant_declaration ) ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:954:2: ( local_variable_declaration | local_constant_declaration )
            int alt244=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 74:
            case 91:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt244=1;
                }
                break;
            case 90:
                {
                alt244=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }

            switch (alt244) {
                case 1 :
                    // mypackage/cs.g:954:3: local_variable_declaration
                    {
                    pushFollow(FOLLOW_local_variable_declaration_in_declaration_statement7076);
                    local_variable_declaration917=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration917.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:955:4: local_constant_declaration
                    {
                    pushFollow(FOLLOW_local_constant_declaration_in_declaration_statement7082);
                    local_constant_declaration918=local_constant_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_constant_declaration918.getTree());

                    }
                    break;

            }

            char_literal919=(Token)match(input,SEMI,FOLLOW_SEMI_in_declaration_statement7085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal919_tree = (CommonTree)adaptor.create(char_literal919);
            adaptor.addChild(root_0, char_literal919_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, declaration_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declaration_statement"

    public static class local_variable_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable_declaration"
    // mypackage/cs.g:956:1: local_variable_declaration : local_variable_type local_variable_declarators ;
    public final csParser.local_variable_declaration_return local_variable_declaration() throws RecognitionException {
        csParser.local_variable_declaration_return retval = new csParser.local_variable_declaration_return();
        retval.start = input.LT(1);
        int local_variable_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.local_variable_type_return local_variable_type920 = null;

        csParser.local_variable_declarators_return local_variable_declarators921 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // mypackage/cs.g:956:27: ( local_variable_type local_variable_declarators )
            // mypackage/cs.g:957:2: local_variable_type local_variable_declarators
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_local_variable_type_in_local_variable_declaration7093);
            local_variable_type920=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_type920.getTree());
            pushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration7097);
            local_variable_declarators921=local_variable_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declarators921.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, local_variable_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration"

    public static class local_variable_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable_type"
    // mypackage/cs.g:958:1: local_variable_type : ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type );
    public final csParser.local_variable_type_return local_variable_type() throws RecognitionException {
        csParser.local_variable_type_return retval = new csParser.local_variable_type_return();
        retval.start = input.LT(1);
        int local_variable_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal922=null;
        Token string_literal923=null;
        csParser.type_return type924 = null;


        CommonTree string_literal922_tree=null;
        CommonTree string_literal923_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // mypackage/cs.g:958:20: ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type )
            int alt245=3;
            switch ( input.LA(1) ) {
            case 186:
                {
                int LA245_1 = input.LA(2);

                if ( (synpred436_cs()) ) {
                    alt245=1;
                }
                else if ( (true) ) {
                    alt245=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 1, input);

                    throw nvae;
                }
                }
                break;
            case 187:
                {
                int LA245_2 = input.LA(2);

                if ( (synpred437_cs()) ) {
                    alt245=2;
                }
                else if ( (true) ) {
                    alt245=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENTIFIER:
            case 74:
            case 91:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }

            switch (alt245) {
                case 1 :
                    // mypackage/cs.g:959:2: ( 'var' )=> 'var'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal922=(Token)match(input,186,FOLLOW_186_in_local_variable_type7111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal922_tree = (CommonTree)adaptor.create(string_literal922);
                    adaptor.addChild(root_0, string_literal922_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:960:4: ( 'dynamic' )=> 'dynamic'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal923=(Token)match(input,187,FOLLOW_187_in_local_variable_type7122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal923_tree = (CommonTree)adaptor.create(string_literal923);
                    adaptor.addChild(root_0, string_literal923_tree);
                    }

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:961:4: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_local_variable_type7127);
                    type924=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type924.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, local_variable_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable_type"

    public static class local_variable_declarators_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable_declarators"
    // mypackage/cs.g:962:1: local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* ;
    public final csParser.local_variable_declarators_return local_variable_declarators() throws RecognitionException {
        csParser.local_variable_declarators_return retval = new csParser.local_variable_declarators_return();
        retval.start = input.LT(1);
        int local_variable_declarators_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal926=null;
        csParser.local_variable_declarator_return local_variable_declarator925 = null;

        csParser.local_variable_declarator_return local_variable_declarator927 = null;


        CommonTree char_literal926_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // mypackage/cs.g:962:27: ( local_variable_declarator ( ',' local_variable_declarator )* )
            // mypackage/cs.g:963:2: local_variable_declarator ( ',' local_variable_declarator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators7135);
            local_variable_declarator925=local_variable_declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declarator925.getTree());
            // mypackage/cs.g:963:28: ( ',' local_variable_declarator )*
            loop246:
            do {
                int alt246=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt246=1;
                    }
                    break;

                }

                switch (alt246) {
            	case 1 :
            	    // mypackage/cs.g:963:29: ',' local_variable_declarator
            	    {
            	    char_literal926=(Token)match(input,98,FOLLOW_98_in_local_variable_declarators7138); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal926_tree = (CommonTree)adaptor.create(char_literal926);
            	    adaptor.addChild(root_0, char_literal926_tree);
            	    }
            	    pushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators7140);
            	    local_variable_declarator927=local_variable_declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declarator927.getTree());

            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, local_variable_declarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators"

    public static class local_variable_declarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable_declarator"
    // mypackage/cs.g:964:1: local_variable_declarator : identifier ( '=' local_variable_initializer )? ;
    public final csParser.local_variable_declarator_return local_variable_declarator() throws RecognitionException {
        csParser.local_variable_declarator_return retval = new csParser.local_variable_declarator_return();
        retval.start = input.LT(1);
        int local_variable_declarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal929=null;
        csParser.identifier_return identifier928 = null;

        csParser.local_variable_initializer_return local_variable_initializer930 = null;


        CommonTree char_literal929_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // mypackage/cs.g:964:26: ( identifier ( '=' local_variable_initializer )? )
            // mypackage/cs.g:965:2: identifier ( '=' local_variable_initializer )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_local_variable_declarator7150);
            identifier928=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier928.getTree());
            // mypackage/cs.g:965:13: ( '=' local_variable_initializer )?
            int alt247=2;
            switch ( input.LA(1) ) {
                case 75:
                    {
                    alt247=1;
                    }
                    break;
            }

            switch (alt247) {
                case 1 :
                    // mypackage/cs.g:965:14: '=' local_variable_initializer
                    {
                    char_literal929=(Token)match(input,75,FOLLOW_75_in_local_variable_declarator7153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal929_tree = (CommonTree)adaptor.create(char_literal929);
                    adaptor.addChild(root_0, char_literal929_tree);
                    }
                    pushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator7157);
                    local_variable_initializer930=local_variable_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_initializer930.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, local_variable_declarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarator"

    public static class local_variable_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable_initializer"
    // mypackage/cs.g:966:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
    public final csParser.local_variable_initializer_return local_variable_initializer() throws RecognitionException {
        csParser.local_variable_initializer_return retval = new csParser.local_variable_initializer_return();
        retval.start = input.LT(1);
        int local_variable_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression931 = null;

        csParser.array_initializer_return array_initializer932 = null;

        csParser.stackalloc_initializer_return stackalloc_initializer933 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // mypackage/cs.g:966:27: ( expression | array_initializer | stackalloc_initializer )
            int alt248=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case StringLITERAL:
            case Verbatim_String_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 74:
            case 77:
            case 92:
            case 94:
            case 97:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 126:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 186:
            case 187:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
                {
                alt248=1;
                }
                break;
            case 71:
                {
                alt248=2;
                }
                break;
            case 188:
                {
                alt248=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;
            }

            switch (alt248) {
                case 1 :
                    // mypackage/cs.g:967:2: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_local_variable_initializer7168);
                    expression931=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression931.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:968:4: array_initializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_array_initializer_in_local_variable_initializer7173);
                    array_initializer932=array_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_initializer932.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:969:4: stackalloc_initializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer7179);
                    stackalloc_initializer933=stackalloc_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stackalloc_initializer933.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, local_variable_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer"

    public static class stackalloc_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stackalloc_initializer"
    // mypackage/cs.g:970:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
    public final csParser.stackalloc_initializer_return stackalloc_initializer() throws RecognitionException {
        csParser.stackalloc_initializer_return retval = new csParser.stackalloc_initializer_return();
        retval.start = input.LT(1);
        int stackalloc_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal934=null;
        Token char_literal936=null;
        Token char_literal938=null;
        csParser.unmanaged_type_return unmanaged_type935 = null;

        csParser.expression_return expression937 = null;


        CommonTree string_literal934_tree=null;
        CommonTree char_literal936_tree=null;
        CommonTree char_literal938_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // mypackage/cs.g:970:23: ( 'stackalloc' unmanaged_type '[' expression ']' )
            // mypackage/cs.g:971:2: 'stackalloc' unmanaged_type '[' expression ']'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal934=(Token)match(input,188,FOLLOW_188_in_stackalloc_initializer7186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal934_tree = (CommonTree)adaptor.create(string_literal934);
            adaptor.addChild(root_0, string_literal934_tree);
            }
            pushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer7190);
            unmanaged_type935=unmanaged_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unmanaged_type935.getTree());
            char_literal936=(Token)match(input,95,FOLLOW_95_in_stackalloc_initializer7194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal936_tree = (CommonTree)adaptor.create(char_literal936);
            adaptor.addChild(root_0, char_literal936_tree);
            }
            pushFollow(FOLLOW_expression_in_stackalloc_initializer7198);
            expression937=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression937.getTree());
            char_literal938=(Token)match(input,96,FOLLOW_96_in_stackalloc_initializer7202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal938_tree = (CommonTree)adaptor.create(char_literal938);
            adaptor.addChild(root_0, char_literal938_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, stackalloc_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stackalloc_initializer"

    public static class local_constant_declaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_constant_declaration"
    // mypackage/cs.g:972:1: local_constant_declaration : 'const' type constant_declarators ;
    public final csParser.local_constant_declaration_return local_constant_declaration() throws RecognitionException {
        csParser.local_constant_declaration_return retval = new csParser.local_constant_declaration_return();
        retval.start = input.LT(1);
        int local_constant_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal939=null;
        csParser.type_return type940 = null;

        csParser.constant_declarators_return constant_declarators941 = null;


        CommonTree string_literal939_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // mypackage/cs.g:972:27: ( 'const' type constant_declarators )
            // mypackage/cs.g:973:2: 'const' type constant_declarators
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal939=(Token)match(input,90,FOLLOW_90_in_local_constant_declaration7210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal939_tree = (CommonTree)adaptor.create(string_literal939);
            adaptor.addChild(root_0, string_literal939_tree);
            }
            pushFollow(FOLLOW_type_in_local_constant_declaration7214);
            type940=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type940.getTree());
            pushFollow(FOLLOW_constant_declarators_in_local_constant_declaration7218);
            constant_declarators941=constant_declarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declarators941.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, local_constant_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_constant_declaration"

    public static class expression_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_statement"
    // mypackage/cs.g:974:1: expression_statement : expression ';' ;
    public final csParser.expression_statement_return expression_statement() throws RecognitionException {
        csParser.expression_statement_return retval = new csParser.expression_statement_return();
        retval.start = input.LT(1);
        int expression_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal943=null;
        csParser.expression_return expression942 = null;


        CommonTree char_literal943_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // mypackage/cs.g:974:21: ( expression ';' )
            // mypackage/cs.g:975:2: expression ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expression_statement7226);
            expression942=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression942.getTree());
            char_literal943=(Token)match(input,SEMI,FOLLOW_SEMI_in_expression_statement7230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal943_tree = (CommonTree)adaptor.create(char_literal943);
            adaptor.addChild(root_0, char_literal943_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, expression_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_statement"

    public static class statement_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_expression"
    // mypackage/cs.g:978:1: statement_expression : expression ;
    public final csParser.statement_expression_return statement_expression() throws RecognitionException {
        csParser.statement_expression_return retval = new csParser.statement_expression_return();
        retval.start = input.LT(1);
        int statement_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.expression_return expression944 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // mypackage/cs.g:978:21: ( expression )
            // mypackage/cs.g:979:2: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statement_expression7240);
            expression944=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression944.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, statement_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement_expression"

    public static class selection_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_statement"
    // mypackage/cs.g:981:1: selection_statement : ( if_statement | switch_statement );
    public final csParser.selection_statement_return selection_statement() throws RecognitionException {
        csParser.selection_statement_return retval = new csParser.selection_statement_return();
        retval.start = input.LT(1);
        int selection_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.if_statement_return if_statement945 = null;

        csParser.switch_statement_return switch_statement946 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // mypackage/cs.g:981:20: ( if_statement | switch_statement )
            int alt249=2;
            switch ( input.LA(1) ) {
            case IF:
                {
                alt249=1;
                }
                break;
            case 190:
                {
                alt249=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }

            switch (alt249) {
                case 1 :
                    // mypackage/cs.g:982:2: if_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_statement_in_selection_statement7249);
                    if_statement945=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement945.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:983:4: switch_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_switch_statement_in_selection_statement7254);
                    switch_statement946=switch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_statement946.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, selection_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // mypackage/cs.g:984:1: if_statement : 'if' '(' booleanean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? ;
    public final csParser.if_statement_return if_statement() throws RecognitionException {
        csParser.if_statement_return retval = new csParser.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal947=null;
        Token char_literal948=null;
        Token char_literal950=null;
        csParser.booleanean_expression_return booleanean_expression949 = null;

        csParser.embedded_statement_return embedded_statement951 = null;

        csParser.else_statement_return else_statement952 = null;


        CommonTree string_literal947_tree=null;
        CommonTree char_literal948_tree=null;
        CommonTree char_literal950_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // mypackage/cs.g:984:13: ( 'if' '(' booleanean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? )
            // mypackage/cs.g:986:2: 'if' '(' booleanean_expression ')' embedded_statement ( ( 'else' )=> else_statement )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal947=(Token)match(input,IF,FOLLOW_IF_in_if_statement7264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal947_tree = (CommonTree)adaptor.create(string_literal947);
            adaptor.addChild(root_0, string_literal947_tree);
            }
            char_literal948=(Token)match(input,97,FOLLOW_97_in_if_statement7268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal948_tree = (CommonTree)adaptor.create(char_literal948);
            adaptor.addChild(root_0, char_literal948_tree);
            }
            pushFollow(FOLLOW_booleanean_expression_in_if_statement7272);
            booleanean_expression949=booleanean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanean_expression949.getTree());
            char_literal950=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_if_statement7276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal950_tree = (CommonTree)adaptor.create(char_literal950);
            adaptor.addChild(root_0, char_literal950_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_if_statement7280);
            embedded_statement951=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement951.getTree());
            // mypackage/cs.g:986:64: ( ( 'else' )=> else_statement )?
            int alt250=2;
            switch ( input.LA(1) ) {
                case 189:
                    {
                    int LA250_1 = input.LA(2);

                    if ( (synpred443_cs()) ) {
                        alt250=1;
                    }
                    }
                    break;
            }

            switch (alt250) {
                case 1 :
                    // mypackage/cs.g:986:65: ( 'else' )=> else_statement
                    {
                    pushFollow(FOLLOW_else_statement_in_if_statement7289);
                    else_statement952=else_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_statement952.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, if_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class else_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_statement"
    // mypackage/cs.g:988:1: else_statement : 'else' embedded_statement ;
    public final csParser.else_statement_return else_statement() throws RecognitionException {
        csParser.else_statement_return retval = new csParser.else_statement_return();
        retval.start = input.LT(1);
        int else_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal953=null;
        csParser.embedded_statement_return embedded_statement954 = null;


        CommonTree string_literal953_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // mypackage/cs.g:988:15: ( 'else' embedded_statement )
            // mypackage/cs.g:989:2: 'else' embedded_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal953=(Token)match(input,189,FOLLOW_189_in_else_statement7300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal953_tree = (CommonTree)adaptor.create(string_literal953);
            adaptor.addChild(root_0, string_literal953_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_else_statement7304);
            embedded_statement954=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement954.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, else_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "else_statement"

    public static class switch_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_statement"
    // mypackage/cs.g:990:1: switch_statement : 'switch' '(' expression ')' switch_block ;
    public final csParser.switch_statement_return switch_statement() throws RecognitionException {
        csParser.switch_statement_return retval = new csParser.switch_statement_return();
        retval.start = input.LT(1);
        int switch_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal955=null;
        Token char_literal956=null;
        Token char_literal958=null;
        csParser.expression_return expression957 = null;

        csParser.switch_block_return switch_block959 = null;


        CommonTree string_literal955_tree=null;
        CommonTree char_literal956_tree=null;
        CommonTree char_literal958_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // mypackage/cs.g:990:17: ( 'switch' '(' expression ')' switch_block )
            // mypackage/cs.g:991:2: 'switch' '(' expression ')' switch_block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal955=(Token)match(input,190,FOLLOW_190_in_switch_statement7312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal955_tree = (CommonTree)adaptor.create(string_literal955);
            adaptor.addChild(root_0, string_literal955_tree);
            }
            char_literal956=(Token)match(input,97,FOLLOW_97_in_switch_statement7316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal956_tree = (CommonTree)adaptor.create(char_literal956);
            adaptor.addChild(root_0, char_literal956_tree);
            }
            pushFollow(FOLLOW_expression_in_switch_statement7320);
            expression957=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression957.getTree());
            char_literal958=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_switch_statement7324); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal958_tree = (CommonTree)adaptor.create(char_literal958);
            adaptor.addChild(root_0, char_literal958_tree);
            }
            pushFollow(FOLLOW_switch_block_in_switch_statement7328);
            switch_block959=switch_block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_block959.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, switch_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switch_statement"

    public static class switch_block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_block"
    // mypackage/cs.g:992:1: switch_block : '{' ( switch_sections )? '}' ;
    public final csParser.switch_block_return switch_block() throws RecognitionException {
        csParser.switch_block_return retval = new csParser.switch_block_return();
        retval.start = input.LT(1);
        int switch_block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal960=null;
        Token char_literal962=null;
        csParser.switch_sections_return switch_sections961 = null;


        CommonTree char_literal960_tree=null;
        CommonTree char_literal962_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // mypackage/cs.g:992:13: ( '{' ( switch_sections )? '}' )
            // mypackage/cs.g:993:2: '{' ( switch_sections )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal960=(Token)match(input,71,FOLLOW_71_in_switch_block7336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal960_tree = (CommonTree)adaptor.create(char_literal960);
            adaptor.addChild(root_0, char_literal960_tree);
            }
            // mypackage/cs.g:993:8: ( switch_sections )?
            int alt251=2;
            switch ( input.LA(1) ) {
                case 105:
                case 191:
                    {
                    alt251=1;
                    }
                    break;
            }

            switch (alt251) {
                case 1 :
                    // mypackage/cs.g:0:0: switch_sections
                    {
                    pushFollow(FOLLOW_switch_sections_in_switch_block7340);
                    switch_sections961=switch_sections();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_sections961.getTree());

                    }
                    break;

            }

            char_literal962=(Token)match(input,72,FOLLOW_72_in_switch_block7345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal962_tree = (CommonTree)adaptor.create(char_literal962);
            adaptor.addChild(root_0, char_literal962_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, switch_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switch_block"

    public static class switch_sections_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_sections"
    // mypackage/cs.g:994:1: switch_sections : ( switch_section )+ ;
    public final csParser.switch_sections_return switch_sections() throws RecognitionException {
        csParser.switch_sections_return retval = new csParser.switch_sections_return();
        retval.start = input.LT(1);
        int switch_sections_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.switch_section_return switch_section963 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // mypackage/cs.g:994:16: ( ( switch_section )+ )
            // mypackage/cs.g:995:2: ( switch_section )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:995:2: ( switch_section )+
            int cnt252=0;
            loop252:
            do {
                int alt252=2;
                switch ( input.LA(1) ) {
                case 105:
                case 191:
                    {
                    alt252=1;
                    }
                    break;

                }

                switch (alt252) {
            	case 1 :
            	    // mypackage/cs.g:0:0: switch_section
            	    {
            	    pushFollow(FOLLOW_switch_section_in_switch_sections7353);
            	    switch_section963=switch_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_section963.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt252 >= 1 ) break loop252;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(252, input);
                        throw eee;
                }
                cnt252++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, switch_sections_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switch_sections"

    public static class switch_section_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_section"
    // mypackage/cs.g:996:1: switch_section : switch_labels statement_list ;
    public final csParser.switch_section_return switch_section() throws RecognitionException {
        csParser.switch_section_return retval = new csParser.switch_section_return();
        retval.start = input.LT(1);
        int switch_section_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.switch_labels_return switch_labels964 = null;

        csParser.statement_list_return statement_list965 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // mypackage/cs.g:996:15: ( switch_labels statement_list )
            // mypackage/cs.g:997:2: switch_labels statement_list
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_switch_labels_in_switch_section7362);
            switch_labels964=switch_labels();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_labels964.getTree());
            pushFollow(FOLLOW_statement_list_in_switch_section7366);
            statement_list965=statement_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_list965.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, switch_section_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switch_section"

    public static class switch_labels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_labels"
    // mypackage/cs.g:998:1: switch_labels : ( switch_label )+ ;
    public final csParser.switch_labels_return switch_labels() throws RecognitionException {
        csParser.switch_labels_return retval = new csParser.switch_labels_return();
        retval.start = input.LT(1);
        int switch_labels_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.switch_label_return switch_label966 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // mypackage/cs.g:998:14: ( ( switch_label )+ )
            // mypackage/cs.g:999:2: ( switch_label )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:999:2: ( switch_label )+
            int cnt253=0;
            loop253:
            do {
                int alt253=2;
                switch ( input.LA(1) ) {
                case 105:
                    {
                    switch ( input.LA(2) ) {
                    case 99:
                        {
                        alt253=1;
                        }
                        break;

                    }

                    }
                    break;
                case 191:
                    {
                    alt253=1;
                    }
                    break;

                }

                switch (alt253) {
            	case 1 :
            	    // mypackage/cs.g:0:0: switch_label
            	    {
            	    pushFollow(FOLLOW_switch_label_in_switch_labels7374);
            	    switch_label966=switch_label();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_label966.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt253 >= 1 ) break loop253;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(253, input);
                        throw eee;
                }
                cnt253++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, switch_labels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switch_labels"

    public static class switch_label_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switch_label"
    // mypackage/cs.g:1000:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
    public final csParser.switch_label_return switch_label() throws RecognitionException {
        csParser.switch_label_return retval = new csParser.switch_label_return();
        retval.start = input.LT(1);
        int switch_label_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal967=null;
        Token char_literal969=null;
        Token string_literal970=null;
        Token char_literal971=null;
        csParser.constant_expression_return constant_expression968 = null;


        CommonTree string_literal967_tree=null;
        CommonTree char_literal969_tree=null;
        CommonTree string_literal970_tree=null;
        CommonTree char_literal971_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }
            // mypackage/cs.g:1000:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
            int alt254=2;
            switch ( input.LA(1) ) {
            case 191:
                {
                alt254=1;
                }
                break;
            case 105:
                {
                alt254=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }

            switch (alt254) {
                case 1 :
                    // mypackage/cs.g:1001:2: ( 'case' constant_expression ':' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // mypackage/cs.g:1001:2: ( 'case' constant_expression ':' )
                    // mypackage/cs.g:1001:3: 'case' constant_expression ':'
                    {
                    string_literal967=(Token)match(input,191,FOLLOW_191_in_switch_label7384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal967_tree = (CommonTree)adaptor.create(string_literal967);
                    adaptor.addChild(root_0, string_literal967_tree);
                    }
                    pushFollow(FOLLOW_constant_expression_in_switch_label7388);
                    constant_expression968=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression968.getTree());
                    char_literal969=(Token)match(input,99,FOLLOW_99_in_switch_label7392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal969_tree = (CommonTree)adaptor.create(char_literal969);
                    adaptor.addChild(root_0, char_literal969_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1002:4: ( 'default' ':' )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // mypackage/cs.g:1002:4: ( 'default' ':' )
                    // mypackage/cs.g:1002:5: 'default' ':'
                    {
                    string_literal970=(Token)match(input,105,FOLLOW_105_in_switch_label7399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal970_tree = (CommonTree)adaptor.create(string_literal970);
                    adaptor.addChild(root_0, string_literal970_tree);
                    }
                    char_literal971=(Token)match(input,99,FOLLOW_99_in_switch_label7403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal971_tree = (CommonTree)adaptor.create(char_literal971);
                    adaptor.addChild(root_0, char_literal971_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 271, switch_label_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switch_label"

    public static class iteration_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iteration_statement"
    // mypackage/cs.g:1003:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
    public final csParser.iteration_statement_return iteration_statement() throws RecognitionException {
        csParser.iteration_statement_return retval = new csParser.iteration_statement_return();
        retval.start = input.LT(1);
        int iteration_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.while_statement_return while_statement972 = null;

        csParser.do_statement_return do_statement973 = null;

        csParser.for_statement_return for_statement974 = null;

        csParser.foreach_statement_return foreach_statement975 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }
            // mypackage/cs.g:1003:20: ( while_statement | do_statement | for_statement | foreach_statement )
            int alt255=4;
            switch ( input.LA(1) ) {
            case 192:
                {
                alt255=1;
                }
                break;
            case 193:
                {
                alt255=2;
                }
                break;
            case 194:
                {
                alt255=3;
                }
                break;
            case 195:
                {
                alt255=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;
            }

            switch (alt255) {
                case 1 :
                    // mypackage/cs.g:1004:2: while_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_statement_in_iteration_statement7412);
                    while_statement972=while_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_statement972.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1005:4: do_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_do_statement_in_iteration_statement7417);
                    do_statement973=do_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement973.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:1006:4: for_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_statement_in_iteration_statement7422);
                    for_statement974=for_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_statement974.getTree());

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:1007:4: foreach_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_foreach_statement_in_iteration_statement7427);
                    foreach_statement975=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement975.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 272, iteration_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "iteration_statement"

    public static class while_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_statement"
    // mypackage/cs.g:1008:1: while_statement : 'while' '(' booleanean_expression ')' embedded_statement ;
    public final csParser.while_statement_return while_statement() throws RecognitionException {
        csParser.while_statement_return retval = new csParser.while_statement_return();
        retval.start = input.LT(1);
        int while_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal976=null;
        Token char_literal977=null;
        Token char_literal979=null;
        csParser.booleanean_expression_return booleanean_expression978 = null;

        csParser.embedded_statement_return embedded_statement980 = null;


        CommonTree string_literal976_tree=null;
        CommonTree char_literal977_tree=null;
        CommonTree char_literal979_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }
            // mypackage/cs.g:1008:16: ( 'while' '(' booleanean_expression ')' embedded_statement )
            // mypackage/cs.g:1009:2: 'while' '(' booleanean_expression ')' embedded_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal976=(Token)match(input,192,FOLLOW_192_in_while_statement7435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal976_tree = (CommonTree)adaptor.create(string_literal976);
            adaptor.addChild(root_0, string_literal976_tree);
            }
            char_literal977=(Token)match(input,97,FOLLOW_97_in_while_statement7439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal977_tree = (CommonTree)adaptor.create(char_literal977);
            adaptor.addChild(root_0, char_literal977_tree);
            }
            pushFollow(FOLLOW_booleanean_expression_in_while_statement7443);
            booleanean_expression978=booleanean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanean_expression978.getTree());
            char_literal979=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_while_statement7447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal979_tree = (CommonTree)adaptor.create(char_literal979);
            adaptor.addChild(root_0, char_literal979_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_while_statement7451);
            embedded_statement980=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement980.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 273, while_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "while_statement"

    public static class do_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "do_statement"
    // mypackage/cs.g:1010:1: do_statement : 'do' embedded_statement 'while' '(' booleanean_expression ')' ';' ;
    public final csParser.do_statement_return do_statement() throws RecognitionException {
        csParser.do_statement_return retval = new csParser.do_statement_return();
        retval.start = input.LT(1);
        int do_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal981=null;
        Token string_literal983=null;
        Token char_literal984=null;
        Token char_literal986=null;
        Token char_literal987=null;
        csParser.embedded_statement_return embedded_statement982 = null;

        csParser.booleanean_expression_return booleanean_expression985 = null;


        CommonTree string_literal981_tree=null;
        CommonTree string_literal983_tree=null;
        CommonTree char_literal984_tree=null;
        CommonTree char_literal986_tree=null;
        CommonTree char_literal987_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }
            // mypackage/cs.g:1010:13: ( 'do' embedded_statement 'while' '(' booleanean_expression ')' ';' )
            // mypackage/cs.g:1011:2: 'do' embedded_statement 'while' '(' booleanean_expression ')' ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal981=(Token)match(input,193,FOLLOW_193_in_do_statement7459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal981_tree = (CommonTree)adaptor.create(string_literal981);
            adaptor.addChild(root_0, string_literal981_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_do_statement7463);
            embedded_statement982=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement982.getTree());
            string_literal983=(Token)match(input,192,FOLLOW_192_in_do_statement7467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal983_tree = (CommonTree)adaptor.create(string_literal983);
            adaptor.addChild(root_0, string_literal983_tree);
            }
            char_literal984=(Token)match(input,97,FOLLOW_97_in_do_statement7471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal984_tree = (CommonTree)adaptor.create(char_literal984);
            adaptor.addChild(root_0, char_literal984_tree);
            }
            pushFollow(FOLLOW_booleanean_expression_in_do_statement7475);
            booleanean_expression985=booleanean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanean_expression985.getTree());
            char_literal986=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_do_statement7479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal986_tree = (CommonTree)adaptor.create(char_literal986);
            adaptor.addChild(root_0, char_literal986_tree);
            }
            char_literal987=(Token)match(input,SEMI,FOLLOW_SEMI_in_do_statement7483); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal987_tree = (CommonTree)adaptor.create(char_literal987);
            adaptor.addChild(root_0, char_literal987_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 274, do_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "do_statement"

    public static class for_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_statement"
    // mypackage/cs.g:1012:1: for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
    public final csParser.for_statement_return for_statement() throws RecognitionException {
        csParser.for_statement_return retval = new csParser.for_statement_return();
        retval.start = input.LT(1);
        int for_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal988=null;
        Token char_literal989=null;
        Token char_literal991=null;
        Token char_literal993=null;
        Token char_literal995=null;
        csParser.for_initializer_return for_initializer990 = null;

        csParser.for_condition_return for_condition992 = null;

        csParser.for_iterator_return for_iterator994 = null;

        csParser.embedded_statement_return embedded_statement996 = null;


        CommonTree string_literal988_tree=null;
        CommonTree char_literal989_tree=null;
        CommonTree char_literal991_tree=null;
        CommonTree char_literal993_tree=null;
        CommonTree char_literal995_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }
            // mypackage/cs.g:1012:14: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
            // mypackage/cs.g:1013:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal988=(Token)match(input,194,FOLLOW_194_in_for_statement7491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal988_tree = (CommonTree)adaptor.create(string_literal988);
            adaptor.addChild(root_0, string_literal988_tree);
            }
            char_literal989=(Token)match(input,97,FOLLOW_97_in_for_statement7495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal989_tree = (CommonTree)adaptor.create(char_literal989);
            adaptor.addChild(root_0, char_literal989_tree);
            }
            // mypackage/cs.g:1013:16: ( for_initializer )?
            int alt256=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 91:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt256=1;
                    }
                    break;
            }

            switch (alt256) {
                case 1 :
                    // mypackage/cs.g:0:0: for_initializer
                    {
                    pushFollow(FOLLOW_for_initializer_in_for_statement7499);
                    for_initializer990=for_initializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_initializer990.getTree());

                    }
                    break;

            }

            char_literal991=(Token)match(input,SEMI,FOLLOW_SEMI_in_for_statement7504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal991_tree = (CommonTree)adaptor.create(char_literal991);
            adaptor.addChild(root_0, char_literal991_tree);
            }
            // mypackage/cs.g:1013:41: ( for_condition )?
            int alt257=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt257=1;
                    }
                    break;
            }

            switch (alt257) {
                case 1 :
                    // mypackage/cs.g:0:0: for_condition
                    {
                    pushFollow(FOLLOW_for_condition_in_for_statement7508);
                    for_condition992=for_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_condition992.getTree());

                    }
                    break;

            }

            char_literal993=(Token)match(input,SEMI,FOLLOW_SEMI_in_for_statement7513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal993_tree = (CommonTree)adaptor.create(char_literal993);
            adaptor.addChild(root_0, char_literal993_tree);
            }
            // mypackage/cs.g:1013:64: ( for_iterator )?
            int alt258=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt258=1;
                    }
                    break;
            }

            switch (alt258) {
                case 1 :
                    // mypackage/cs.g:0:0: for_iterator
                    {
                    pushFollow(FOLLOW_for_iterator_in_for_statement7517);
                    for_iterator994=for_iterator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_iterator994.getTree());

                    }
                    break;

            }

            char_literal995=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_for_statement7522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal995_tree = (CommonTree)adaptor.create(char_literal995);
            adaptor.addChild(root_0, char_literal995_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_for_statement7526);
            embedded_statement996=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement996.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 275, for_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_statement"

    public static class for_initializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_initializer"
    // mypackage/cs.g:1014:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
    public final csParser.for_initializer_return for_initializer() throws RecognitionException {
        csParser.for_initializer_return retval = new csParser.for_initializer_return();
        retval.start = input.LT(1);
        int for_initializer_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration997 = null;

        csParser.statement_expression_list_return statement_expression_list998 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }
            // mypackage/cs.g:1014:16: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
            int alt259=2;
            alt259 = dfa259.predict(input);
            switch (alt259) {
                case 1 :
                    // mypackage/cs.g:1015:2: ( local_variable_declaration )=> local_variable_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_local_variable_declaration_in_for_initializer7540);
                    local_variable_declaration997=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration997.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1016:4: statement_expression_list
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_expression_list_in_for_initializer7545);
                    statement_expression_list998=statement_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression_list998.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 276, for_initializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_initializer"

    public static class for_condition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_condition"
    // mypackage/cs.g:1018:1: for_condition : booleanean_expression ;
    public final csParser.for_condition_return for_condition() throws RecognitionException {
        csParser.for_condition_return retval = new csParser.for_condition_return();
        retval.start = input.LT(1);
        int for_condition_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.booleanean_expression_return booleanean_expression999 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }
            // mypackage/cs.g:1018:14: ( booleanean_expression )
            // mypackage/cs.g:1019:2: booleanean_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_booleanean_expression_in_for_condition7555);
            booleanean_expression999=booleanean_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanean_expression999.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 277, for_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_condition"

    public static class for_iterator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_iterator"
    // mypackage/cs.g:1020:1: for_iterator : statement_expression_list ;
    public final csParser.for_iterator_return for_iterator() throws RecognitionException {
        csParser.for_iterator_return retval = new csParser.for_iterator_return();
        retval.start = input.LT(1);
        int for_iterator_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.statement_expression_list_return statement_expression_list1000 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }
            // mypackage/cs.g:1020:13: ( statement_expression_list )
            // mypackage/cs.g:1021:2: statement_expression_list
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_statement_expression_list_in_for_iterator7563);
            statement_expression_list1000=statement_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression_list1000.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 278, for_iterator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_iterator"

    public static class statement_expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_expression_list"
    // mypackage/cs.g:1022:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
    public final csParser.statement_expression_list_return statement_expression_list() throws RecognitionException {
        csParser.statement_expression_list_return retval = new csParser.statement_expression_list_return();
        retval.start = input.LT(1);
        int statement_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1002=null;
        csParser.statement_expression_return statement_expression1001 = null;

        csParser.statement_expression_return statement_expression1003 = null;


        CommonTree char_literal1002_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }
            // mypackage/cs.g:1022:26: ( statement_expression ( ',' statement_expression )* )
            // mypackage/cs.g:1023:2: statement_expression ( ',' statement_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_statement_expression_in_statement_expression_list7571);
            statement_expression1001=statement_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression1001.getTree());
            // mypackage/cs.g:1023:23: ( ',' statement_expression )*
            loop260:
            do {
                int alt260=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    alt260=1;
                    }
                    break;

                }

                switch (alt260) {
            	case 1 :
            	    // mypackage/cs.g:1023:24: ',' statement_expression
            	    {
            	    char_literal1002=(Token)match(input,98,FOLLOW_98_in_statement_expression_list7574); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1002_tree = (CommonTree)adaptor.create(char_literal1002);
            	    adaptor.addChild(root_0, char_literal1002_tree);
            	    }
            	    pushFollow(FOLLOW_statement_expression_in_statement_expression_list7576);
            	    statement_expression1003=statement_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_expression1003.getTree());

            	    }
            	    break;

            	default :
            	    break loop260;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 279, statement_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement_expression_list"

    public static class foreach_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "foreach_statement"
    // mypackage/cs.g:1024:1: foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
    public final csParser.foreach_statement_return foreach_statement() throws RecognitionException {
        csParser.foreach_statement_return retval = new csParser.foreach_statement_return();
        retval.start = input.LT(1);
        int foreach_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1004=null;
        Token char_literal1005=null;
        Token string_literal1008=null;
        Token char_literal1010=null;
        csParser.local_variable_type_return local_variable_type1006 = null;

        csParser.identifier_return identifier1007 = null;

        csParser.expression_return expression1009 = null;

        csParser.embedded_statement_return embedded_statement1011 = null;


        CommonTree string_literal1004_tree=null;
        CommonTree char_literal1005_tree=null;
        CommonTree string_literal1008_tree=null;
        CommonTree char_literal1010_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }
            // mypackage/cs.g:1024:18: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
            // mypackage/cs.g:1025:2: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1004=(Token)match(input,195,FOLLOW_195_in_foreach_statement7586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1004_tree = (CommonTree)adaptor.create(string_literal1004);
            adaptor.addChild(root_0, string_literal1004_tree);
            }
            char_literal1005=(Token)match(input,97,FOLLOW_97_in_foreach_statement7590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1005_tree = (CommonTree)adaptor.create(char_literal1005);
            adaptor.addChild(root_0, char_literal1005_tree);
            }
            pushFollow(FOLLOW_local_variable_type_in_foreach_statement7594);
            local_variable_type1006=local_variable_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_type1006.getTree());
            pushFollow(FOLLOW_identifier_in_foreach_statement7598);
            identifier1007=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1007.getTree());
            string_literal1008=(Token)match(input,143,FOLLOW_143_in_foreach_statement7602); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1008_tree = (CommonTree)adaptor.create(string_literal1008);
            adaptor.addChild(root_0, string_literal1008_tree);
            }
            pushFollow(FOLLOW_expression_in_foreach_statement7606);
            expression1009=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1009.getTree());
            char_literal1010=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_foreach_statement7610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1010_tree = (CommonTree)adaptor.create(char_literal1010);
            adaptor.addChild(root_0, char_literal1010_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_foreach_statement7614);
            embedded_statement1011=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement1011.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 280, foreach_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"

    public static class jump_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jump_statement"
    // mypackage/cs.g:1026:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
    public final csParser.jump_statement_return jump_statement() throws RecognitionException {
        csParser.jump_statement_return retval = new csParser.jump_statement_return();
        retval.start = input.LT(1);
        int jump_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.break_statement_return break_statement1012 = null;

        csParser.continue_statement_return continue_statement1013 = null;

        csParser.goto_statement_return goto_statement1014 = null;

        csParser.return_statement_return return_statement1015 = null;

        csParser.throw_statement_return throw_statement1016 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }
            // mypackage/cs.g:1026:15: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
            int alt261=5;
            switch ( input.LA(1) ) {
            case 196:
                {
                alt261=1;
                }
                break;
            case 197:
                {
                alt261=2;
                }
                break;
            case 198:
                {
                alt261=3;
                }
                break;
            case 162:
                {
                alt261=4;
                }
                break;
            case 199:
                {
                alt261=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }

            switch (alt261) {
                case 1 :
                    // mypackage/cs.g:1027:2: break_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_break_statement_in_jump_statement7622);
                    break_statement1012=break_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_statement1012.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1028:4: continue_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_continue_statement_in_jump_statement7627);
                    continue_statement1013=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement1013.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:1029:4: goto_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_goto_statement_in_jump_statement7632);
                    goto_statement1014=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement1014.getTree());

                    }
                    break;
                case 4 :
                    // mypackage/cs.g:1030:4: return_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_return_statement_in_jump_statement7637);
                    return_statement1015=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement1015.getTree());

                    }
                    break;
                case 5 :
                    // mypackage/cs.g:1031:4: throw_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_throw_statement_in_jump_statement7642);
                    throw_statement1016=throw_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_statement1016.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 281, jump_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jump_statement"

    public static class break_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "break_statement"
    // mypackage/cs.g:1032:1: break_statement : 'break' ';' ;
    public final csParser.break_statement_return break_statement() throws RecognitionException {
        csParser.break_statement_return retval = new csParser.break_statement_return();
        retval.start = input.LT(1);
        int break_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1017=null;
        Token char_literal1018=null;

        CommonTree string_literal1017_tree=null;
        CommonTree char_literal1018_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }
            // mypackage/cs.g:1032:16: ( 'break' ';' )
            // mypackage/cs.g:1033:2: 'break' ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1017=(Token)match(input,196,FOLLOW_196_in_break_statement7650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1017_tree = (CommonTree)adaptor.create(string_literal1017);
            adaptor.addChild(root_0, string_literal1017_tree);
            }
            char_literal1018=(Token)match(input,SEMI,FOLLOW_SEMI_in_break_statement7654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1018_tree = (CommonTree)adaptor.create(char_literal1018);
            adaptor.addChild(root_0, char_literal1018_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 282, break_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "break_statement"

    public static class continue_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_statement"
    // mypackage/cs.g:1034:1: continue_statement : 'continue' ';' ;
    public final csParser.continue_statement_return continue_statement() throws RecognitionException {
        csParser.continue_statement_return retval = new csParser.continue_statement_return();
        retval.start = input.LT(1);
        int continue_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1019=null;
        Token char_literal1020=null;

        CommonTree string_literal1019_tree=null;
        CommonTree char_literal1020_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }
            // mypackage/cs.g:1034:19: ( 'continue' ';' )
            // mypackage/cs.g:1035:2: 'continue' ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1019=(Token)match(input,197,FOLLOW_197_in_continue_statement7662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1019_tree = (CommonTree)adaptor.create(string_literal1019);
            adaptor.addChild(root_0, string_literal1019_tree);
            }
            char_literal1020=(Token)match(input,SEMI,FOLLOW_SEMI_in_continue_statement7666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1020_tree = (CommonTree)adaptor.create(char_literal1020);
            adaptor.addChild(root_0, char_literal1020_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 283, continue_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public static class goto_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // mypackage/cs.g:1036:1: goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
    public final csParser.goto_statement_return goto_statement() throws RecognitionException {
        csParser.goto_statement_return retval = new csParser.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1021=null;
        Token string_literal1023=null;
        Token string_literal1025=null;
        Token char_literal1026=null;
        csParser.identifier_return identifier1022 = null;

        csParser.constant_expression_return constant_expression1024 = null;


        CommonTree string_literal1021_tree=null;
        CommonTree string_literal1023_tree=null;
        CommonTree string_literal1025_tree=null;
        CommonTree char_literal1026_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }
            // mypackage/cs.g:1036:15: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
            // mypackage/cs.g:1037:2: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1021=(Token)match(input,198,FOLLOW_198_in_goto_statement7674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1021_tree = (CommonTree)adaptor.create(string_literal1021);
            adaptor.addChild(root_0, string_literal1021_tree);
            }
            // mypackage/cs.g:1037:11: ( identifier | 'case' constant_expression | 'default' )
            int alt262=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case 74:
            case 141:
            case 142:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 161:
            case 163:
            case 166:
            case 167:
            case 168:
            case 179:
            case 186:
            case 187:
            case 204:
            case 211:
                {
                alt262=1;
                }
                break;
            case 191:
                {
                alt262=2;
                }
                break;
            case 105:
                {
                alt262=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;
            }

            switch (alt262) {
                case 1 :
                    // mypackage/cs.g:1037:13: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_goto_statement7680);
                    identifier1022=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1022.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1038:7: 'case' constant_expression
                    {
                    string_literal1023=(Token)match(input,191,FOLLOW_191_in_goto_statement7688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1023_tree = (CommonTree)adaptor.create(string_literal1023);
                    adaptor.addChild(root_0, string_literal1023_tree);
                    }
                    pushFollow(FOLLOW_constant_expression_in_goto_statement7692);
                    constant_expression1024=constant_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_expression1024.getTree());

                    }
                    break;
                case 3 :
                    // mypackage/cs.g:1039:7: 'default'
                    {
                    string_literal1025=(Token)match(input,105,FOLLOW_105_in_goto_statement7700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1025_tree = (CommonTree)adaptor.create(string_literal1025);
                    adaptor.addChild(root_0, string_literal1025_tree);
                    }

                    }
                    break;

            }

            char_literal1026=(Token)match(input,SEMI,FOLLOW_SEMI_in_goto_statement7705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1026_tree = (CommonTree)adaptor.create(char_literal1026);
            adaptor.addChild(root_0, char_literal1026_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 284, goto_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class return_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // mypackage/cs.g:1040:1: return_statement : 'return' ( expression )? ';' ;
    public final csParser.return_statement_return return_statement() throws RecognitionException {
        csParser.return_statement_return retval = new csParser.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1027=null;
        Token char_literal1029=null;
        csParser.expression_return expression1028 = null;


        CommonTree string_literal1027_tree=null;
        CommonTree char_literal1029_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }
            // mypackage/cs.g:1040:17: ( 'return' ( expression )? ';' )
            // mypackage/cs.g:1041:2: 'return' ( expression )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1027=(Token)match(input,162,FOLLOW_162_in_return_statement7713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1027_tree = (CommonTree)adaptor.create(string_literal1027);
            adaptor.addChild(root_0, string_literal1027_tree);
            }
            // mypackage/cs.g:1041:13: ( expression )?
            int alt263=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt263=1;
                    }
                    break;
            }

            switch (alt263) {
                case 1 :
                    // mypackage/cs.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_statement7717);
                    expression1028=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1028.getTree());

                    }
                    break;

            }

            char_literal1029=(Token)match(input,SEMI,FOLLOW_SEMI_in_return_statement7722); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1029_tree = (CommonTree)adaptor.create(char_literal1029);
            adaptor.addChild(root_0, char_literal1029_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 285, return_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class throw_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throw_statement"
    // mypackage/cs.g:1042:1: throw_statement : 'throw' ( expression )? ';' ;
    public final csParser.throw_statement_return throw_statement() throws RecognitionException {
        csParser.throw_statement_return retval = new csParser.throw_statement_return();
        retval.start = input.LT(1);
        int throw_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1030=null;
        Token char_literal1032=null;
        csParser.expression_return expression1031 = null;


        CommonTree string_literal1030_tree=null;
        CommonTree char_literal1032_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }
            // mypackage/cs.g:1042:16: ( 'throw' ( expression )? ';' )
            // mypackage/cs.g:1043:2: 'throw' ( expression )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1030=(Token)match(input,199,FOLLOW_199_in_throw_statement7730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1030_tree = (CommonTree)adaptor.create(string_literal1030);
            adaptor.addChild(root_0, string_literal1030_tree);
            }
            // mypackage/cs.g:1043:12: ( expression )?
            int alt264=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt264=1;
                    }
                    break;
            }

            switch (alt264) {
                case 1 :
                    // mypackage/cs.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_throw_statement7734);
                    expression1031=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1031.getTree());

                    }
                    break;

            }

            char_literal1032=(Token)match(input,SEMI,FOLLOW_SEMI_in_throw_statement7739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1032_tree = (CommonTree)adaptor.create(char_literal1032);
            adaptor.addChild(root_0, char_literal1032_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 286, throw_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "throw_statement"

    public static class try_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_statement"
    // mypackage/cs.g:1044:1: try_statement : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
    public final csParser.try_statement_return try_statement() throws RecognitionException {
        csParser.try_statement_return retval = new csParser.try_statement_return();
        retval.start = input.LT(1);
        int try_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1033=null;
        csParser.block_return block1034 = null;

        csParser.catch_clauses_return catch_clauses1035 = null;

        csParser.finally_clause_return finally_clause1036 = null;

        csParser.finally_clause_return finally_clause1037 = null;


        CommonTree string_literal1033_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }
            // mypackage/cs.g:1044:14: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
            // mypackage/cs.g:1045:7: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1033=(Token)match(input,200,FOLLOW_200_in_try_statement7752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1033_tree = (CommonTree)adaptor.create(string_literal1033);
            adaptor.addChild(root_0, string_literal1033_tree);
            }
            pushFollow(FOLLOW_block_in_try_statement7756);
            block1034=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1034.getTree());
            // mypackage/cs.g:1045:23: ( catch_clauses ( finally_clause )? | finally_clause )
            int alt266=2;
            switch ( input.LA(1) ) {
            case 201:
                {
                alt266=1;
                }
                break;
            case 202:
                {
                alt266=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }

            switch (alt266) {
                case 1 :
                    // mypackage/cs.g:1045:25: catch_clauses ( finally_clause )?
                    {
                    pushFollow(FOLLOW_catch_clauses_in_try_statement7762);
                    catch_clauses1035=catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, catch_clauses1035.getTree());
                    // mypackage/cs.g:1045:41: ( finally_clause )?
                    int alt265=2;
                    switch ( input.LA(1) ) {
                        case 202:
                            {
                            alt265=1;
                            }
                            break;
                    }

                    switch (alt265) {
                        case 1 :
                            // mypackage/cs.g:0:0: finally_clause
                            {
                            pushFollow(FOLLOW_finally_clause_in_try_statement7766);
                            finally_clause1036=finally_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_clause1036.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1046:10: finally_clause
                    {
                    pushFollow(FOLLOW_finally_clause_in_try_statement7778);
                    finally_clause1037=finally_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, finally_clause1037.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 287, try_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "try_statement"

    public static class catch_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catch_clauses"
    // mypackage/cs.g:1048:1: catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
    public final csParser.catch_clauses_return catch_clauses() throws RecognitionException {
        csParser.catch_clauses_return retval = new csParser.catch_clauses_return();
        retval.start = input.LT(1);
        int catch_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1038=null;
        csParser.specific_catch_clauses_return specific_catch_clauses1039 = null;

        csParser.general_catch_clause_return general_catch_clause1040 = null;


        CommonTree string_literal1038_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }
            // mypackage/cs.g:1048:14: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
            // mypackage/cs.g:1049:2: 'catch' ( specific_catch_clauses | general_catch_clause )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1038=(Token)match(input,201,FOLLOW_201_in_catch_clauses7787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1038_tree = (CommonTree)adaptor.create(string_literal1038);
            adaptor.addChild(root_0, string_literal1038_tree);
            }
            // mypackage/cs.g:1049:12: ( specific_catch_clauses | general_catch_clause )
            int alt267=2;
            switch ( input.LA(1) ) {
            case 97:
                {
                alt267=1;
                }
                break;
            case SEMI:
            case 71:
                {
                alt267=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }

            switch (alt267) {
                case 1 :
                    // mypackage/cs.g:1049:13: specific_catch_clauses
                    {
                    pushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses7792);
                    specific_catch_clauses1039=specific_catch_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clauses1039.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1049:38: general_catch_clause
                    {
                    pushFollow(FOLLOW_general_catch_clause_in_catch_clauses7796);
                    general_catch_clause1040=general_catch_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_catch_clause1040.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 288, catch_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catch_clauses"

    public static class specific_catch_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "specific_catch_clauses"
    // mypackage/cs.g:1050:1: specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
    public final csParser.specific_catch_clauses_return specific_catch_clauses() throws RecognitionException {
        csParser.specific_catch_clauses_return retval = new csParser.specific_catch_clauses_return();
        retval.start = input.LT(1);
        int specific_catch_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1042=null;
        csParser.specific_catch_clause_return specific_catch_clause1041 = null;

        csParser.specific_catch_clause_return specific_catch_clause1043 = null;

        csParser.general_catch_clause_return general_catch_clause1044 = null;


        CommonTree string_literal1042_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }
            // mypackage/cs.g:1050:23: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
            // mypackage/cs.g:1051:2: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses7805);
            specific_catch_clause1041=specific_catch_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clause1041.getTree());
            // mypackage/cs.g:1051:26: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
            loop269:
            do {
                int alt269=2;
                switch ( input.LA(1) ) {
                case 201:
                    {
                    alt269=1;
                    }
                    break;

                }

                switch (alt269) {
            	case 1 :
            	    // mypackage/cs.g:1051:27: 'catch' ( specific_catch_clause | general_catch_clause )
            	    {
            	    string_literal1042=(Token)match(input,201,FOLLOW_201_in_specific_catch_clauses7810); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1042_tree = (CommonTree)adaptor.create(string_literal1042);
            	    adaptor.addChild(root_0, string_literal1042_tree);
            	    }
            	    // mypackage/cs.g:1051:37: ( specific_catch_clause | general_catch_clause )
            	    int alt268=2;
            	    switch ( input.LA(1) ) {
            	    case 97:
            	        {
            	        alt268=1;
            	        }
            	        break;
            	    case SEMI:
            	    case 71:
            	        {
            	        alt268=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 268, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt268) {
            	        case 1 :
            	            // mypackage/cs.g:1051:38: specific_catch_clause
            	            {
            	            pushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses7815);
            	            specific_catch_clause1043=specific_catch_clause();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, specific_catch_clause1043.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // mypackage/cs.g:1051:62: general_catch_clause
            	            {
            	            pushFollow(FOLLOW_general_catch_clause_in_specific_catch_clauses7819);
            	            general_catch_clause1044=general_catch_clause();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_catch_clause1044.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 289, specific_catch_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clauses"

    public static class specific_catch_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "specific_catch_clause"
    // mypackage/cs.g:1052:1: specific_catch_clause : '(' class_type ( identifier )? ')' block ;
    public final csParser.specific_catch_clause_return specific_catch_clause() throws RecognitionException {
        csParser.specific_catch_clause_return retval = new csParser.specific_catch_clause_return();
        retval.start = input.LT(1);
        int specific_catch_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1045=null;
        Token char_literal1048=null;
        csParser.class_type_return class_type1046 = null;

        csParser.identifier_return identifier1047 = null;

        csParser.block_return block1049 = null;


        CommonTree char_literal1045_tree=null;
        CommonTree char_literal1048_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }
            // mypackage/cs.g:1052:22: ( '(' class_type ( identifier )? ')' block )
            // mypackage/cs.g:1053:2: '(' class_type ( identifier )? ')' block
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal1045=(Token)match(input,97,FOLLOW_97_in_specific_catch_clause7829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1045_tree = (CommonTree)adaptor.create(char_literal1045);
            adaptor.addChild(root_0, char_literal1045_tree);
            }
            pushFollow(FOLLOW_class_type_in_specific_catch_clause7833);
            class_type1046=class_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_type1046.getTree());
            // mypackage/cs.g:1053:21: ( identifier )?
            int alt270=2;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 179:
                case 186:
                case 187:
                case 204:
                case 211:
                    {
                    alt270=1;
                    }
                    break;
            }

            switch (alt270) {
                case 1 :
                    // mypackage/cs.g:0:0: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_specific_catch_clause7837);
                    identifier1047=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1047.getTree());

                    }
                    break;

            }

            char_literal1048=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_specific_catch_clause7842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1048_tree = (CommonTree)adaptor.create(char_literal1048);
            adaptor.addChild(root_0, char_literal1048_tree);
            }
            pushFollow(FOLLOW_block_in_specific_catch_clause7846);
            block1049=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1049.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 290, specific_catch_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clause"

    public static class general_catch_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "general_catch_clause"
    // mypackage/cs.g:1054:1: general_catch_clause : block ;
    public final csParser.general_catch_clause_return general_catch_clause() throws RecognitionException {
        csParser.general_catch_clause_return retval = new csParser.general_catch_clause_return();
        retval.start = input.LT(1);
        int general_catch_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.block_return block1050 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }
            // mypackage/cs.g:1054:21: ( block )
            // mypackage/cs.g:1055:2: block
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_block_in_general_catch_clause7854);
            block1050=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1050.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 291, general_catch_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "general_catch_clause"

    public static class finally_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finally_clause"
    // mypackage/cs.g:1056:1: finally_clause : 'finally' block ;
    public final csParser.finally_clause_return finally_clause() throws RecognitionException {
        csParser.finally_clause_return retval = new csParser.finally_clause_return();
        retval.start = input.LT(1);
        int finally_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1051=null;
        csParser.block_return block1052 = null;


        CommonTree string_literal1051_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }
            // mypackage/cs.g:1056:15: ( 'finally' block )
            // mypackage/cs.g:1057:2: 'finally' block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1051=(Token)match(input,202,FOLLOW_202_in_finally_clause7862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1051_tree = (CommonTree)adaptor.create(string_literal1051);
            adaptor.addChild(root_0, string_literal1051_tree);
            }
            pushFollow(FOLLOW_block_in_finally_clause7866);
            block1052=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1052.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 292, finally_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "finally_clause"

    public static class checked_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "checked_statement"
    // mypackage/cs.g:1058:1: checked_statement : 'checked' block ;
    public final csParser.checked_statement_return checked_statement() throws RecognitionException {
        csParser.checked_statement_return retval = new csParser.checked_statement_return();
        retval.start = input.LT(1);
        int checked_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1053=null;
        csParser.block_return block1054 = null;


        CommonTree string_literal1053_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }
            // mypackage/cs.g:1058:18: ( 'checked' block )
            // mypackage/cs.g:1059:2: 'checked' block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1053=(Token)match(input,103,FOLLOW_103_in_checked_statement7874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1053_tree = (CommonTree)adaptor.create(string_literal1053);
            adaptor.addChild(root_0, string_literal1053_tree);
            }
            pushFollow(FOLLOW_block_in_checked_statement7878);
            block1054=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1054.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 293, checked_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "checked_statement"

    public static class unchecked_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unchecked_statement"
    // mypackage/cs.g:1060:1: unchecked_statement : 'unchecked' block ;
    public final csParser.unchecked_statement_return unchecked_statement() throws RecognitionException {
        csParser.unchecked_statement_return retval = new csParser.unchecked_statement_return();
        retval.start = input.LT(1);
        int unchecked_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1055=null;
        csParser.block_return block1056 = null;


        CommonTree string_literal1055_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }
            // mypackage/cs.g:1060:20: ( 'unchecked' block )
            // mypackage/cs.g:1061:2: 'unchecked' block
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1055=(Token)match(input,104,FOLLOW_104_in_unchecked_statement7886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1055_tree = (CommonTree)adaptor.create(string_literal1055);
            adaptor.addChild(root_0, string_literal1055_tree);
            }
            pushFollow(FOLLOW_block_in_unchecked_statement7890);
            block1056=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block1056.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 294, unchecked_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unchecked_statement"

    public static class lock_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_statement"
    // mypackage/cs.g:1062:1: lock_statement : 'lock' '(' expression ')' embedded_statement ;
    public final csParser.lock_statement_return lock_statement() throws RecognitionException {
        csParser.lock_statement_return retval = new csParser.lock_statement_return();
        retval.start = input.LT(1);
        int lock_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1057=null;
        Token char_literal1058=null;
        Token char_literal1060=null;
        csParser.expression_return expression1059 = null;

        csParser.embedded_statement_return embedded_statement1061 = null;


        CommonTree string_literal1057_tree=null;
        CommonTree char_literal1058_tree=null;
        CommonTree char_literal1060_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }
            // mypackage/cs.g:1062:15: ( 'lock' '(' expression ')' embedded_statement )
            // mypackage/cs.g:1063:2: 'lock' '(' expression ')' embedded_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1057=(Token)match(input,203,FOLLOW_203_in_lock_statement7898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1057_tree = (CommonTree)adaptor.create(string_literal1057);
            adaptor.addChild(root_0, string_literal1057_tree);
            }
            char_literal1058=(Token)match(input,97,FOLLOW_97_in_lock_statement7902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1058_tree = (CommonTree)adaptor.create(char_literal1058);
            adaptor.addChild(root_0, char_literal1058_tree);
            }
            pushFollow(FOLLOW_expression_in_lock_statement7905);
            expression1059=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1059.getTree());
            char_literal1060=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lock_statement7909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1060_tree = (CommonTree)adaptor.create(char_literal1060);
            adaptor.addChild(root_0, char_literal1060_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_lock_statement7913);
            embedded_statement1061=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement1061.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 295, lock_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_statement"

    public static class using_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "using_statement"
    // mypackage/cs.g:1064:1: using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
    public final csParser.using_statement_return using_statement() throws RecognitionException {
        csParser.using_statement_return retval = new csParser.using_statement_return();
        retval.start = input.LT(1);
        int using_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1062=null;
        Token char_literal1063=null;
        Token char_literal1065=null;
        csParser.resource_acquisition_return resource_acquisition1064 = null;

        csParser.embedded_statement_return embedded_statement1066 = null;


        CommonTree string_literal1062_tree=null;
        CommonTree char_literal1063_tree=null;
        CommonTree char_literal1065_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }
            // mypackage/cs.g:1064:16: ( 'using' '(' resource_acquisition ')' embedded_statement )
            // mypackage/cs.g:1065:2: 'using' '(' resource_acquisition ')' embedded_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1062=(Token)match(input,USING,FOLLOW_USING_in_using_statement7921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1062_tree = (CommonTree)adaptor.create(string_literal1062);
            adaptor.addChild(root_0, string_literal1062_tree);
            }
            char_literal1063=(Token)match(input,97,FOLLOW_97_in_using_statement7925); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1063_tree = (CommonTree)adaptor.create(char_literal1063);
            adaptor.addChild(root_0, char_literal1063_tree);
            }
            pushFollow(FOLLOW_resource_acquisition_in_using_statement7930);
            resource_acquisition1064=resource_acquisition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, resource_acquisition1064.getTree());
            char_literal1065=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_using_statement7934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal1065_tree = (CommonTree)adaptor.create(char_literal1065);
            adaptor.addChild(root_0, char_literal1065_tree);
            }
            pushFollow(FOLLOW_embedded_statement_in_using_statement7939);
            embedded_statement1066=embedded_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, embedded_statement1066.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 296, using_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "using_statement"

    public static class resource_acquisition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resource_acquisition"
    // mypackage/cs.g:1066:1: resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
    public final csParser.resource_acquisition_return resource_acquisition() throws RecognitionException {
        csParser.resource_acquisition_return retval = new csParser.resource_acquisition_return();
        retval.start = input.LT(1);
        int resource_acquisition_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1067 = null;

        csParser.expression_return expression1068 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }
            // mypackage/cs.g:1066:21: ( ( local_variable_declaration )=> local_variable_declaration | expression )
            int alt271=2;
            alt271 = dfa271.predict(input);
            switch (alt271) {
                case 1 :
                    // mypackage/cs.g:1067:2: ( local_variable_declaration )=> local_variable_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition7953);
                    local_variable_declaration1067=local_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration1067.getTree());

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1068:4: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_resource_acquisition7958);
                    expression1068=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1068.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 297, resource_acquisition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "resource_acquisition"

    public static class yield_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield_statement"
    // mypackage/cs.g:1069:1: yield_statement : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
    public final csParser.yield_statement_return yield_statement() throws RecognitionException {
        csParser.yield_statement_return retval = new csParser.yield_statement_return();
        retval.start = input.LT(1);
        int yield_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1069=null;
        Token string_literal1070=null;
        Token char_literal1072=null;
        Token string_literal1073=null;
        Token char_literal1074=null;
        csParser.expression_return expression1071 = null;


        CommonTree string_literal1069_tree=null;
        CommonTree string_literal1070_tree=null;
        CommonTree char_literal1072_tree=null;
        CommonTree string_literal1073_tree=null;
        CommonTree char_literal1074_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }
            // mypackage/cs.g:1069:16: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
            // mypackage/cs.g:1070:2: 'yield' ( 'return' expression ';' | 'break' ';' )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal1069=(Token)match(input,204,FOLLOW_204_in_yield_statement7966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1069_tree = (CommonTree)adaptor.create(string_literal1069);
            adaptor.addChild(root_0, string_literal1069_tree);
            }
            // mypackage/cs.g:1070:12: ( 'return' expression ';' | 'break' ';' )
            int alt272=2;
            switch ( input.LA(1) ) {
            case 162:
                {
                alt272=1;
                }
                break;
            case 196:
                {
                alt272=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }

            switch (alt272) {
                case 1 :
                    // mypackage/cs.g:1070:13: 'return' expression ';'
                    {
                    string_literal1070=(Token)match(input,162,FOLLOW_162_in_yield_statement7971); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1070_tree = (CommonTree)adaptor.create(string_literal1070);
                    adaptor.addChild(root_0, string_literal1070_tree);
                    }
                    pushFollow(FOLLOW_expression_in_yield_statement7975);
                    expression1071=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1071.getTree());
                    char_literal1072=(Token)match(input,SEMI,FOLLOW_SEMI_in_yield_statement7979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal1072_tree = (CommonTree)adaptor.create(char_literal1072);
                    adaptor.addChild(root_0, char_literal1072_tree);
                    }

                    }
                    break;
                case 2 :
                    // mypackage/cs.g:1071:14: 'break' ';'
                    {
                    string_literal1073=(Token)match(input,196,FOLLOW_196_in_yield_statement7994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1073_tree = (CommonTree)adaptor.create(string_literal1073);
                    adaptor.addChild(root_0, string_literal1073_tree);
                    }
                    char_literal1074=(Token)match(input,SEMI,FOLLOW_SEMI_in_yield_statement7998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal1074_tree = (CommonTree)adaptor.create(char_literal1074);
                    adaptor.addChild(root_0, char_literal1074_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 298, yield_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield_statement"

    public static class predefined_type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "predefined_type"
    // mypackage/cs.g:1077:1: predefined_type : ( 'boolean' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
    public final csParser.predefined_type_return predefined_type() throws RecognitionException {
        csParser.predefined_type_return retval = new csParser.predefined_type_return();
        retval.start = input.LT(1);
        int predefined_type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set1075=null;

        CommonTree set1075_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }
            // mypackage/cs.g:1077:16: ( 'boolean' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1075=(Token)input.LT(1);
            if ( (input.LA(1)>=169 && input.LA(1)<=177)||(input.LA(1)>=205 && input.LA(1)<=210) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1075));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 299, predefined_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "predefined_type"

    public static class identifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // mypackage/cs.g:1081:1: identifier : ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
    public final csParser.identifier_return identifier() throws RecognitionException {
        csParser.identifier_return retval = new csParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set1076=null;

        CommonTree set1076_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }
            // mypackage/cs.g:1081:11: ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1076=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==74||(input.LA(1)>=141 && input.LA(1)<=142)||(input.LA(1)>=144 && input.LA(1)<=157)||(input.LA(1)>=159 && input.LA(1)<=161)||input.LA(1)==163||(input.LA(1)>=166 && input.LA(1)<=168)||input.LA(1)==179||(input.LA(1)>=186 && input.LA(1)<=187)||input.LA(1)==204||input.LA(1)==211 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1076));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 300, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class keyword_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword"
    // mypackage/cs.g:1085:1: keyword : ( 'abstract' | 'as' | 'base' | 'boolean' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'String' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
    public final csParser.keyword_return keyword() throws RecognitionException {
        csParser.keyword_return retval = new csParser.keyword_return();
        retval.start = input.LT(1);
        int keyword_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set1077=null;

        CommonTree set1077_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }
            // mypackage/cs.g:1085:8: ( 'abstract' | 'as' | 'base' | 'boolean' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'String' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1077=(Token)input.LT(1);
            if ( input.LA(1)==USING||(input.LA(1)>=TRUE && input.LA(1)<=NULL)||(input.LA(1)>=ENUM && input.LA(1)<=IF)||input.LA(1)==70||input.LA(1)==73||(input.LA(1)>=77 && input.LA(1)<=92)||input.LA(1)==94||(input.LA(1)>=100 && input.LA(1)<=107)||(input.LA(1)>=131 && input.LA(1)<=132)||input.LA(1)==143||input.LA(1)==158||input.LA(1)==162||input.LA(1)==164||(input.LA(1)>=169 && input.LA(1)<=178)||(input.LA(1)>=180 && input.LA(1)<=185)||(input.LA(1)>=188 && input.LA(1)<=191)||(input.LA(1)>=193 && input.LA(1)<=203)||(input.LA(1)>=205 && input.LA(1)<=209)||input.LA(1)==212 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1077));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 301, keyword_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyword"

    public static class also_keyword_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "also_keyword"
    // mypackage/cs.g:1088:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
    public final csParser.also_keyword_return also_keyword() throws RecognitionException {
        csParser.also_keyword_return retval = new csParser.also_keyword_return();
        retval.start = input.LT(1);
        int also_keyword_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set1078=null;

        CommonTree set1078_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }
            // mypackage/cs.g:1088:13: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1078=(Token)input.LT(1);
            if ( input.LA(1)==74||(input.LA(1)>=141 && input.LA(1)<=142)||(input.LA(1)>=144 && input.LA(1)<=161)||input.LA(1)==163||(input.LA(1)>=166 && input.LA(1)<=168)||input.LA(1)==179||(input.LA(1)>=186 && input.LA(1)<=187)||input.LA(1)==204||input.LA(1)==211 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1078));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 302, also_keyword_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "also_keyword"

    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // mypackage/cs.g:1093:1: literal : ( Real_literal | NUMBER | Hex_number | Character_literal | StringLITERAL | Verbatim_String_literal | TRUE | FALSE | NULL );
    public final csParser.literal_return literal() throws RecognitionException {
        csParser.literal_return retval = new csParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set1079=null;

        CommonTree set1079_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }
            // mypackage/cs.g:1093:8: ( Real_literal | NUMBER | Hex_number | Character_literal | StringLITERAL | Verbatim_String_literal | TRUE | FALSE | NULL )
            // mypackage/cs.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1079=(Token)input.LT(1);
            if ( (input.LA(1)>=Real_literal && input.LA(1)<=NULL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set1079));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 303, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class assignment_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_list"
    // mypackage/cs.g:1374:1: assignment_list : ( assignment ';' )+ ;
    public final csParser.assignment_list_return assignment_list() throws RecognitionException {
        csParser.assignment_list_return retval = new csParser.assignment_list_return();
        retval.start = input.LT(1);
        int assignment_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1081=null;
        csParser.assignment_return assignment1080 = null;


        CommonTree char_literal1081_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }
            // mypackage/cs.g:1374:16: ( ( assignment ';' )+ )
            // mypackage/cs.g:1375:2: ( assignment ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1375:2: ( assignment ';' )+
            int cnt273=0;
            loop273:
            do {
                int alt273=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt273=1;
                    }
                    break;

                }

                switch (alt273) {
            	case 1 :
            	    // mypackage/cs.g:1375:3: assignment ';'
            	    {
            	    pushFollow(FOLLOW_assignment_in_assignment_list10691);
            	    assignment1080=assignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment1080.getTree());
            	    char_literal1081=(Token)match(input,SEMI,FOLLOW_SEMI_in_assignment_list10693); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1081_tree = (CommonTree)adaptor.create(char_literal1081);
            	    adaptor.addChild(root_0, char_literal1081_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt273 >= 1 ) break loop273;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(273, input);
                        throw eee;
                }
                cnt273++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 304, assignment_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_list"

    public static class field_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_declarations"
    // mypackage/cs.g:1376:1: field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
    public final csParser.field_declarations_return field_declarations() throws RecognitionException {
        csParser.field_declarations_return retval = new csParser.field_declarations_return();
        retval.start = input.LT(1);
        int field_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attributes_return attributes1082 = null;

        csParser.modifiers_return modifiers1083 = null;

        csParser.type_return type1084 = null;

        csParser.field_declaration_return field_declaration1085 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }
            // mypackage/cs.g:1376:19: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
            // mypackage/cs.g:1377:2: ( ( attributes )? ( modifiers )? type field_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1377:2: ( ( attributes )? ( modifiers )? type field_declaration )+
            int cnt276=0;
            loop276:
            do {
                int alt276=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 73:
                case 74:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 91:
                case 95:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt276=1;
                    }
                    break;

                }

                switch (alt276) {
            	case 1 :
            	    // mypackage/cs.g:1377:3: ( attributes )? ( modifiers )? type field_declaration
            	    {
            	    // mypackage/cs.g:1377:3: ( attributes )?
            	    int alt274=2;
            	    switch ( input.LA(1) ) {
            	        case 95:
            	            {
            	            alt274=1;
            	            }
            	            break;
            	    }

            	    switch (alt274) {
            	        case 1 :
            	            // mypackage/cs.g:0:0: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_field_declarations10704);
            	            attributes1082=attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes1082.getTree());

            	            }
            	            break;

            	    }

            	    // mypackage/cs.g:1377:17: ( modifiers )?
            	    int alt275=2;
            	    switch ( input.LA(1) ) {
            	        case 73:
            	        case 77:
            	        case 78:
            	        case 79:
            	        case 80:
            	        case 81:
            	        case 82:
            	        case 83:
            	        case 84:
            	        case 85:
            	        case 86:
            	        case 87:
            	        case 88:
            	        case 89:
            	            {
            	            alt275=1;
            	            }
            	            break;
            	    }

            	    switch (alt275) {
            	        case 1 :
            	            // mypackage/cs.g:0:0: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_field_declarations10709);
            	            modifiers1083=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1083.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_type_in_field_declarations10714);
            	    type1084=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type1084.getTree());
            	    pushFollow(FOLLOW_field_declaration_in_field_declarations10718);
            	    field_declaration1085=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration1085.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt276 >= 1 ) break loop276;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(276, input);
                        throw eee;
                }
                cnt276++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 305, field_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_declarations"

    public static class property_declaration_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "property_declaration_list"
    // mypackage/cs.g:1378:1: property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
    public final csParser.property_declaration_list_return property_declaration_list() throws RecognitionException {
        csParser.property_declaration_list_return retval = new csParser.property_declaration_list_return();
        retval.start = input.LT(1);
        int property_declaration_list_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attributes_return attributes1086 = null;

        csParser.modifiers_return modifiers1087 = null;

        csParser.type_return type1088 = null;

        csParser.property_declaration_return property_declaration1089 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }
            // mypackage/cs.g:1378:26: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
            // mypackage/cs.g:1379:2: ( ( attributes )? ( modifiers )? type property_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1379:2: ( ( attributes )? ( modifiers )? type property_declaration )+
            int cnt279=0;
            loop279:
            do {
                int alt279=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 73:
                case 74:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 91:
                case 95:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt279=1;
                    }
                    break;

                }

                switch (alt279) {
            	case 1 :
            	    // mypackage/cs.g:1379:3: ( attributes )? ( modifiers )? type property_declaration
            	    {
            	    // mypackage/cs.g:1379:3: ( attributes )?
            	    int alt277=2;
            	    switch ( input.LA(1) ) {
            	        case 95:
            	            {
            	            alt277=1;
            	            }
            	            break;
            	    }

            	    switch (alt277) {
            	        case 1 :
            	            // mypackage/cs.g:0:0: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_property_declaration_list10729);
            	            attributes1086=attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes1086.getTree());

            	            }
            	            break;

            	    }

            	    // mypackage/cs.g:1379:17: ( modifiers )?
            	    int alt278=2;
            	    switch ( input.LA(1) ) {
            	        case 73:
            	        case 77:
            	        case 78:
            	        case 79:
            	        case 80:
            	        case 81:
            	        case 82:
            	        case 83:
            	        case 84:
            	        case 85:
            	        case 86:
            	        case 87:
            	        case 88:
            	        case 89:
            	            {
            	            alt278=1;
            	            }
            	            break;
            	    }

            	    switch (alt278) {
            	        case 1 :
            	            // mypackage/cs.g:0:0: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_property_declaration_list10734);
            	            modifiers1087=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1087.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_type_in_property_declaration_list10739);
            	    type1088=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type1088.getTree());
            	    pushFollow(FOLLOW_property_declaration_in_property_declaration_list10743);
            	    property_declaration1089=property_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, property_declaration1089.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt279 >= 1 ) break loop279;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(279, input);
                        throw eee;
                }
                cnt279++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 306, property_declaration_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "property_declaration_list"

    public static class constant_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_declarations"
    // mypackage/cs.g:1380:1: constant_declarations : ( constant_declaration )+ ;
    public final csParser.constant_declarations_return constant_declarations() throws RecognitionException {
        csParser.constant_declarations_return retval = new csParser.constant_declarations_return();
        retval.start = input.LT(1);
        int constant_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.constant_declaration_return constant_declaration1090 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }
            // mypackage/cs.g:1380:22: ( ( constant_declaration )+ )
            // mypackage/cs.g:1381:2: ( constant_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1381:2: ( constant_declaration )+
            int cnt280=0;
            loop280:
            do {
                int alt280=2;
                switch ( input.LA(1) ) {
                case 90:
                    {
                    alt280=1;
                    }
                    break;

                }

                switch (alt280) {
            	case 1 :
            	    // mypackage/cs.g:0:0: constant_declaration
            	    {
            	    pushFollow(FOLLOW_constant_declaration_in_constant_declarations10753);
            	    constant_declaration1090=constant_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_declaration1090.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt280 >= 1 ) break loop280;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(280, input);
                        throw eee;
                }
                cnt280++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 307, constant_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constant_declarations"

    public static class literals_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literals"
    // mypackage/cs.g:1382:1: literals : ( literal )+ ;
    public final csParser.literals_return literals() throws RecognitionException {
        csParser.literals_return retval = new csParser.literals_return();
        retval.start = input.LT(1);
        int literals_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.literal_return literal1091 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }
            // mypackage/cs.g:1382:9: ( ( literal )+ )
            // mypackage/cs.g:1383:2: ( literal )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1383:2: ( literal )+
            int cnt281=0;
            loop281:
            do {
                int alt281=2;
                switch ( input.LA(1) ) {
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                    {
                    alt281=1;
                    }
                    break;

                }

                switch (alt281) {
            	case 1 :
            	    // mypackage/cs.g:0:0: literal
            	    {
            	    pushFollow(FOLLOW_literal_in_literals10761);
            	    literal1091=literal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal1091.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt281 >= 1 ) break loop281;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(281, input);
                        throw eee;
                }
                cnt281++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 308, literals_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literals"

    public static class delegate_declaration_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delegate_declaration_list"
    // mypackage/cs.g:1384:1: delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
    public final csParser.delegate_declaration_list_return delegate_declaration_list() throws RecognitionException {
        csParser.delegate_declaration_list_return retval = new csParser.delegate_declaration_list_return();
        retval.start = input.LT(1);
        int delegate_declaration_list_StartIndex = input.index();
        CommonTree root_0 = null;

        csParser.attributes_return attributes1092 = null;

        csParser.modifiers_return modifiers1093 = null;

        csParser.delegate_declaration_return delegate_declaration1094 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }
            // mypackage/cs.g:1384:26: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
            // mypackage/cs.g:1385:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1385:2: ( ( attributes )? ( modifiers )? delegate_declaration )+
            int cnt284=0;
            loop284:
            do {
                int alt284=2;
                switch ( input.LA(1) ) {
                case 73:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 95:
                case 106:
                    {
                    alt284=1;
                    }
                    break;

                }

                switch (alt284) {
            	case 1 :
            	    // mypackage/cs.g:1385:3: ( attributes )? ( modifiers )? delegate_declaration
            	    {
            	    // mypackage/cs.g:1385:3: ( attributes )?
            	    int alt282=2;
            	    switch ( input.LA(1) ) {
            	        case 95:
            	            {
            	            alt282=1;
            	            }
            	            break;
            	    }

            	    switch (alt282) {
            	        case 1 :
            	            // mypackage/cs.g:0:0: attributes
            	            {
            	            pushFollow(FOLLOW_attributes_in_delegate_declaration_list10771);
            	            attributes1092=attributes();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributes1092.getTree());

            	            }
            	            break;

            	    }

            	    // mypackage/cs.g:1385:17: ( modifiers )?
            	    int alt283=2;
            	    switch ( input.LA(1) ) {
            	        case 73:
            	        case 77:
            	        case 78:
            	        case 79:
            	        case 80:
            	        case 81:
            	        case 82:
            	        case 83:
            	        case 84:
            	        case 85:
            	        case 86:
            	        case 87:
            	        case 88:
            	        case 89:
            	            {
            	            alt283=1;
            	            }
            	            break;
            	    }

            	    switch (alt283) {
            	        case 1 :
            	            // mypackage/cs.g:0:0: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_delegate_declaration_list10776);
            	            modifiers1093=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1093.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_delegate_declaration_in_delegate_declaration_list10781);
            	    delegate_declaration1094=delegate_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, delegate_declaration1094.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt284 >= 1 ) break loop284;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(284, input);
                        throw eee;
                }
                cnt284++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 309, delegate_declaration_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration_list"

    public static class local_variable_declaration_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable_declaration_list"
    // mypackage/cs.g:1386:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
    public final csParser.local_variable_declaration_list_return local_variable_declaration_list() throws RecognitionException {
        csParser.local_variable_declaration_list_return retval = new csParser.local_variable_declaration_list_return();
        retval.start = input.LT(1);
        int local_variable_declaration_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1096=null;
        csParser.local_variable_declaration_return local_variable_declaration1095 = null;


        CommonTree char_literal1096_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }
            // mypackage/cs.g:1386:32: ( ( local_variable_declaration ';' )+ )
            // mypackage/cs.g:1387:2: ( local_variable_declaration ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1387:2: ( local_variable_declaration ';' )+
            int cnt285=0;
            loop285:
            do {
                int alt285=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 91:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt285=1;
                    }
                    break;

                }

                switch (alt285) {
            	case 1 :
            	    // mypackage/cs.g:1387:3: local_variable_declaration ';'
            	    {
            	    pushFollow(FOLLOW_local_variable_declaration_in_local_variable_declaration_list10792);
            	    local_variable_declaration1095=local_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_declaration1095.getTree());
            	    char_literal1096=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_variable_declaration_list10794); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1096_tree = (CommonTree)adaptor.create(char_literal1096);
            	    adaptor.addChild(root_0, char_literal1096_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt285 >= 1 ) break loop285;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(285, input);
                        throw eee;
                }
                cnt285++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 310, local_variable_declaration_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration_list"

    public static class local_variable_initializer_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "local_variable_initializer_list"
    // mypackage/cs.g:1388:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
    public final csParser.local_variable_initializer_list_return local_variable_initializer_list() throws RecognitionException {
        csParser.local_variable_initializer_list_return retval = new csParser.local_variable_initializer_list_return();
        retval.start = input.LT(1);
        int local_variable_initializer_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1098=null;
        csParser.local_variable_initializer_return local_variable_initializer1097 = null;


        CommonTree char_literal1098_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }
            // mypackage/cs.g:1388:32: ( ( local_variable_initializer ';' )+ )
            // mypackage/cs.g:1389:2: ( local_variable_initializer ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1389:2: ( local_variable_initializer ';' )+
            int cnt286=0;
            loop286:
            do {
                int alt286=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 71:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 188:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt286=1;
                    }
                    break;

                }

                switch (alt286) {
            	case 1 :
            	    // mypackage/cs.g:1389:3: local_variable_initializer ';'
            	    {
            	    pushFollow(FOLLOW_local_variable_initializer_in_local_variable_initializer_list10805);
            	    local_variable_initializer1097=local_variable_initializer();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, local_variable_initializer1097.getTree());
            	    char_literal1098=(Token)match(input,SEMI,FOLLOW_SEMI_in_local_variable_initializer_list10807); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1098_tree = (CommonTree)adaptor.create(char_literal1098);
            	    adaptor.addChild(root_0, char_literal1098_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt286 >= 1 ) break loop286;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(286, input);
                        throw eee;
                }
                cnt286++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 311, local_variable_initializer_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer_list"

    public static class expression_list_test_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_list_test"
    // mypackage/cs.g:1390:1: expression_list_test : ( expression ';' )+ ;
    public final csParser.expression_list_test_return expression_list_test() throws RecognitionException {
        csParser.expression_list_test_return retval = new csParser.expression_list_test_return();
        retval.start = input.LT(1);
        int expression_list_test_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1100=null;
        csParser.expression_return expression1099 = null;


        CommonTree char_literal1100_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }
            // mypackage/cs.g:1390:21: ( ( expression ';' )+ )
            // mypackage/cs.g:1391:2: ( expression ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1391:2: ( expression ';' )+
            int cnt287=0;
            loop287:
            do {
                int alt287=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt287=1;
                    }
                    break;

                }

                switch (alt287) {
            	case 1 :
            	    // mypackage/cs.g:1391:3: expression ';'
            	    {
            	    pushFollow(FOLLOW_expression_in_expression_list_test10818);
            	    expression1099=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1099.getTree());
            	    char_literal1100=(Token)match(input,SEMI,FOLLOW_SEMI_in_expression_list_test10820); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1100_tree = (CommonTree)adaptor.create(char_literal1100);
            	    adaptor.addChild(root_0, char_literal1100_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt287 >= 1 ) break loop287;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(287, input);
                        throw eee;
                }
                cnt287++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 312, expression_list_test_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_list_test"

    public static class unary_expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_expression_list"
    // mypackage/cs.g:1392:1: unary_expression_list : ( unary_expression ';' )+ ;
    public final csParser.unary_expression_list_return unary_expression_list() throws RecognitionException {
        csParser.unary_expression_list_return retval = new csParser.unary_expression_list_return();
        retval.start = input.LT(1);
        int unary_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1102=null;
        csParser.unary_expression_return unary_expression1101 = null;


        CommonTree char_literal1102_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }
            // mypackage/cs.g:1392:22: ( ( unary_expression ';' )+ )
            // mypackage/cs.g:1393:2: ( unary_expression ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1393:2: ( unary_expression ';' )+
            int cnt288=0;
            loop288:
            do {
                int alt288=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt288=1;
                    }
                    break;

                }

                switch (alt288) {
            	case 1 :
            	    // mypackage/cs.g:1393:3: unary_expression ';'
            	    {
            	    pushFollow(FOLLOW_unary_expression_in_unary_expression_list10831);
            	    unary_expression1101=unary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression1101.getTree());
            	    char_literal1102=(Token)match(input,SEMI,FOLLOW_SEMI_in_unary_expression_list10833); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1102_tree = (CommonTree)adaptor.create(char_literal1102);
            	    adaptor.addChild(root_0, char_literal1102_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt288 >= 1 ) break loop288;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(288, input);
                        throw eee;
                }
                cnt288++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 313, unary_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unary_expression_list"

    public static class invocation_expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invocation_expression_list"
    // mypackage/cs.g:1394:1: invocation_expression_list : ( invocation_expression ';' )+ ;
    public final csParser.invocation_expression_list_return invocation_expression_list() throws RecognitionException {
        csParser.invocation_expression_list_return retval = new csParser.invocation_expression_list_return();
        retval.start = input.LT(1);
        int invocation_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1104=null;
        csParser.invocation_expression_return invocation_expression1103 = null;


        CommonTree char_literal1104_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }
            // mypackage/cs.g:1394:27: ( ( invocation_expression ';' )+ )
            // mypackage/cs.g:1395:2: ( invocation_expression ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1395:2: ( invocation_expression ';' )+
            int cnt289=0;
            loop289:
            do {
                int alt289=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 74:
                case 92:
                case 94:
                case 107:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt289=1;
                    }
                    break;

                }

                switch (alt289) {
            	case 1 :
            	    // mypackage/cs.g:1395:3: invocation_expression ';'
            	    {
            	    pushFollow(FOLLOW_invocation_expression_in_invocation_expression_list10844);
            	    invocation_expression1103=invocation_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, invocation_expression1103.getTree());
            	    char_literal1104=(Token)match(input,SEMI,FOLLOW_SEMI_in_invocation_expression_list10846); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1104_tree = (CommonTree)adaptor.create(char_literal1104);
            	    adaptor.addChild(root_0, char_literal1104_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt289 >= 1 ) break loop289;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(289, input);
                        throw eee;
                }
                cnt289++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 314, invocation_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invocation_expression_list"

    public static class primary_expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary_expression_list"
    // mypackage/cs.g:1396:1: primary_expression_list : ( primary_expression ';' )+ ;
    public final csParser.primary_expression_list_return primary_expression_list() throws RecognitionException {
        csParser.primary_expression_list_return retval = new csParser.primary_expression_list_return();
        retval.start = input.LT(1);
        int primary_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1106=null;
        csParser.primary_expression_return primary_expression1105 = null;


        CommonTree char_literal1106_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }
            // mypackage/cs.g:1396:24: ( ( primary_expression ';' )+ )
            // mypackage/cs.g:1397:2: ( primary_expression ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1397:2: ( primary_expression ';' )+
            int cnt290=0;
            loop290:
            do {
                int alt290=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt290=1;
                    }
                    break;

                }

                switch (alt290) {
            	case 1 :
            	    // mypackage/cs.g:1397:3: primary_expression ';'
            	    {
            	    pushFollow(FOLLOW_primary_expression_in_primary_expression_list10857);
            	    primary_expression1105=primary_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary_expression1105.getTree());
            	    char_literal1106=(Token)match(input,SEMI,FOLLOW_SEMI_in_primary_expression_list10859); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1106_tree = (CommonTree)adaptor.create(char_literal1106);
            	    adaptor.addChild(root_0, char_literal1106_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt290 >= 1 ) break loop290;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(290, input);
                        throw eee;
                }
                cnt290++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 315, primary_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_list"

    public static class non_assignment_expression_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_assignment_expression_list"
    // mypackage/cs.g:1398:1: non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
    public final csParser.non_assignment_expression_list_return non_assignment_expression_list() throws RecognitionException {
        csParser.non_assignment_expression_list_return retval = new csParser.non_assignment_expression_list_return();
        retval.start = input.LT(1);
        int non_assignment_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal1108=null;
        csParser.non_assignment_expression_return non_assignment_expression1107 = null;


        CommonTree char_literal1108_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }
            // mypackage/cs.g:1398:31: ( ( non_assignment_expression ';' )+ )
            // mypackage/cs.g:1399:2: ( non_assignment_expression ';' )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1399:2: ( non_assignment_expression ';' )+
            int cnt291=0;
            loop291:
            do {
                int alt291=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case StringLITERAL:
                case Verbatim_String_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 74:
                case 77:
                case 92:
                case 94:
                case 97:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 126:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt291=1;
                    }
                    break;

                }

                switch (alt291) {
            	case 1 :
            	    // mypackage/cs.g:1399:3: non_assignment_expression ';'
            	    {
            	    pushFollow(FOLLOW_non_assignment_expression_in_non_assignment_expression_list10870);
            	    non_assignment_expression1107=non_assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_assignment_expression1107.getTree());
            	    char_literal1108=(Token)match(input,SEMI,FOLLOW_SEMI_in_non_assignment_expression_list10872); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal1108_tree = (CommonTree)adaptor.create(char_literal1108);
            	    adaptor.addChild(root_0, char_literal1108_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt291 >= 1 ) break loop291;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(291, input);
                        throw eee;
                }
                cnt291++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 316, non_assignment_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression_list"

    public static class method_declarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method_declarations"
    // mypackage/cs.g:1400:1: method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
    public final csParser.method_declarations_return method_declarations() throws RecognitionException {
        csParser.method_declarations_return retval = new csParser.method_declarations_return();
        retval.start = input.LT(1);
        int method_declarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal1110=null;
        csParser.modifiers_return modifiers1109 = null;

        csParser.type_return type1111 = null;

        csParser.method_declaration_return method_declaration1112 = null;


        CommonTree string_literal1110_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }
            // mypackage/cs.g:1400:20: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
            // mypackage/cs.g:1401:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // mypackage/cs.g:1401:2: ( ( modifiers )? ( 'void' | type ) method_declaration )+
            int cnt294=0;
            loop294:
            do {
                int alt294=2;
                switch ( input.LA(1) ) {
                case IDENTIFIER:
                case 73:
                case 74:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 91:
                case 141:
                case 142:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 159:
                case 160:
                case 161:
                case 163:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 179:
                case 186:
                case 187:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                    {
                    alt294=1;
                    }
                    break;

                }

                switch (alt294) {
            	case 1 :
            	    // mypackage/cs.g:1401:3: ( modifiers )? ( 'void' | type ) method_declaration
            	    {
            	    // mypackage/cs.g:1401:3: ( modifiers )?
            	    int alt292=2;
            	    switch ( input.LA(1) ) {
            	        case 73:
            	        case 77:
            	        case 78:
            	        case 79:
            	        case 80:
            	        case 81:
            	        case 82:
            	        case 83:
            	        case 84:
            	        case 85:
            	        case 86:
            	        case 87:
            	        case 88:
            	        case 89:
            	            {
            	            alt292=1;
            	            }
            	            break;
            	    }

            	    switch (alt292) {
            	        case 1 :
            	            // mypackage/cs.g:0:0: modifiers
            	            {
            	            pushFollow(FOLLOW_modifiers_in_method_declarations10883);
            	            modifiers1109=modifiers();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers1109.getTree());

            	            }
            	            break;

            	    }

            	    // mypackage/cs.g:1401:14: ( 'void' | type )
            	    int alt293=2;
            	    switch ( input.LA(1) ) {
            	    case 91:
            	        {
            	        switch ( input.LA(2) ) {
            	        case 109:
            	            {
            	            alt293=2;
            	            }
            	            break;
            	        case IDENTIFIER:
            	        case Real_literal:
            	        case NUMBER:
            	        case Hex_number:
            	        case Character_literal:
            	        case StringLITERAL:
            	        case Verbatim_String_literal:
            	        case TRUE:
            	        case FALSE:
            	        case NULL:
            	        case 74:
            	        case 141:
            	        case 142:
            	        case 144:
            	        case 145:
            	        case 146:
            	        case 147:
            	        case 148:
            	        case 149:
            	        case 150:
            	        case 151:
            	        case 152:
            	        case 153:
            	        case 154:
            	        case 155:
            	        case 156:
            	        case 157:
            	        case 159:
            	        case 160:
            	        case 161:
            	        case 163:
            	        case 166:
            	        case 167:
            	        case 168:
            	        case 169:
            	        case 170:
            	        case 171:
            	        case 172:
            	        case 173:
            	        case 174:
            	        case 175:
            	        case 176:
            	        case 177:
            	        case 179:
            	        case 186:
            	        case 187:
            	        case 204:
            	        case 205:
            	        case 206:
            	        case 207:
            	        case 208:
            	        case 209:
            	        case 210:
            	        case 211:
            	            {
            	            alt293=1;
            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 293, 1, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    case IDENTIFIER:
            	    case 74:
            	    case 141:
            	    case 142:
            	    case 144:
            	    case 145:
            	    case 146:
            	    case 147:
            	    case 148:
            	    case 149:
            	    case 150:
            	    case 151:
            	    case 152:
            	    case 153:
            	    case 154:
            	    case 155:
            	    case 156:
            	    case 157:
            	    case 159:
            	    case 160:
            	    case 161:
            	    case 163:
            	    case 166:
            	    case 167:
            	    case 168:
            	    case 169:
            	    case 170:
            	    case 171:
            	    case 172:
            	    case 173:
            	    case 174:
            	    case 175:
            	    case 176:
            	    case 177:
            	    case 179:
            	    case 186:
            	    case 187:
            	    case 204:
            	    case 205:
            	    case 206:
            	    case 207:
            	    case 208:
            	    case 209:
            	    case 210:
            	    case 211:
            	        {
            	        alt293=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 293, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt293) {
            	        case 1 :
            	            // mypackage/cs.g:1401:15: 'void'
            	            {
            	            string_literal1110=(Token)match(input,91,FOLLOW_91_in_method_declarations10887); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal1110_tree = (CommonTree)adaptor.create(string_literal1110);
            	            adaptor.addChild(root_0, string_literal1110_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // mypackage/cs.g:1401:24: type
            	            {
            	            pushFollow(FOLLOW_type_in_method_declarations10891);
            	            type1111=type();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, type1111.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_method_declaration_in_method_declarations10894);
            	    method_declaration1112=method_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration1112.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt294 >= 1 ) break loop294;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(294, input);
                        throw eee;
                }
                cnt294++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 317, method_declarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method_declarations"

    // $ANTLR start synpred13_cs
    public final void synpred13_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:86:2: ( 'partial' )
        // mypackage/cs.g:86:3: 'partial'
        {
        match(input,76,FOLLOW_76_in_synpred13_cs369); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_cs

    // $ANTLR start synpred45_cs
    public final void synpred45_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:133:15: ( member_name '(' )
        // mypackage/cs.g:133:16: member_name '('
        {
        pushFollow(FOLLOW_member_name_in_synpred45_cs767);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,97,FOLLOW_97_in_synpred45_cs771); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_cs

    // $ANTLR start synpred46_cs
    public final void synpred46_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:134:8: ( member_name '{' )
        // mypackage/cs.g:134:9: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred46_cs802);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,71,FOLLOW_71_in_synpred46_cs806); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_cs

    // $ANTLR start synpred47_cs
    public final void synpred47_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:135:8: ( member_name '.' 'this' )
        // mypackage/cs.g:135:9: member_name '.' 'this'
        {
        pushFollow(FOLLOW_member_name_in_synpred47_cs837);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred47_cs841); if (state.failed) return ;
        match(input,92,FOLLOW_92_in_synpred47_cs845); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_cs

    // $ANTLR start synpred49_cs
    public final void synpred49_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:137:11: ( field_declaration )
        // mypackage/cs.g:137:11: field_declaration
        {
        pushFollow(FOLLOW_field_declaration_in_synpred49_cs877);
        field_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_cs

    // $ANTLR start synpred57_cs
    public final void synpred57_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:152:2: ( 'this' brackets )
        // mypackage/cs.g:152:3: 'this' brackets
        {
        match(input,92,FOLLOW_92_in_synpred57_cs998); if (state.failed) return ;
        pushFollow(FOLLOW_brackets_in_synpred57_cs1003);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_cs

    // $ANTLR start synpred59_cs
    public final void synpred59_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:153:4: ( 'base' brackets )
        // mypackage/cs.g:153:5: 'base' brackets
        {
        match(input,94,FOLLOW_94_in_synpred59_cs1023); if (state.failed) return ;
        pushFollow(FOLLOW_brackets_in_synpred59_cs1027);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_cs

    // $ANTLR start synpred62_cs
    public final void synpred62_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:154:4: ( primary_expression_start ( primary_expression_part )* )
        // mypackage/cs.g:154:4: primary_expression_start ( primary_expression_part )*
        {
        pushFollow(FOLLOW_primary_expression_start_in_synpred62_cs1046);
        primary_expression_start();

        state._fsp--;
        if (state.failed) return ;
        // mypackage/cs.g:154:31: ( primary_expression_part )*
        loop297:
        do {
            int alt297=2;
            switch ( input.LA(1) ) {
            case DOT:
            case PTR:
            case 95:
            case 97:
                {
                alt297=1;
                }
                break;

            }

            switch (alt297) {
        	case 1 :
        	    // mypackage/cs.g:0:0: primary_expression_part
        	    {
        	    pushFollow(FOLLOW_primary_expression_part_in_synpred62_cs1050);
        	    primary_expression_part();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop297;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred62_cs

    // $ANTLR start synpred65_cs
    public final void synpred65_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:155:14: ( object_creation_expression ( '.' | '->' | '[' ) )
        // mypackage/cs.g:155:15: object_creation_expression ( '.' | '->' | '[' )
        {
        pushFollow(FOLLOW_object_creation_expression_in_synpred65_cs1063);
        object_creation_expression();

        state._fsp--;
        if (state.failed) return ;
        if ( (input.LA(1)>=DOT && input.LA(1)<=PTR)||input.LA(1)==95 ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred65_cs

    // $ANTLR start synpred67_cs
    public final void synpred67_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:159:7: ( delegate_creation_expression )
        // mypackage/cs.g:159:8: delegate_creation_expression
        {
        pushFollow(FOLLOW_delegate_creation_expression_in_synpred67_cs1111);
        delegate_creation_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred67_cs

    // $ANTLR start synpred68_cs
    public final void synpred68_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:160:7: ( object_creation_expression )
        // mypackage/cs.g:160:7: object_creation_expression
        {
        pushFollow(FOLLOW_object_creation_expression_in_synpred68_cs1124);
        object_creation_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_cs

    // $ANTLR start synpred75_cs
    public final void synpred75_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:171:4: ( identifier '<' )
        // mypackage/cs.g:171:5: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred75_cs1236);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,108,FOLLOW_108_in_synpred75_cs1241); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_cs

    // $ANTLR start synpred77_cs
    public final void synpred77_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:172:4: ( identifier ( '::' identifier )? )
        // mypackage/cs.g:172:4: identifier ( '::' identifier )?
        {
        pushFollow(FOLLOW_identifier_in_synpred77_cs1255);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        // mypackage/cs.g:172:15: ( '::' identifier )?
        int alt300=2;
        switch ( input.LA(1) ) {
            case 93:
                {
                alt300=1;
                }
                break;
        }

        switch (alt300) {
            case 1 :
                // mypackage/cs.g:172:16: '::' identifier
                {
                match(input,93,FOLLOW_93_in_synpred77_cs1258); if (state.failed) return ;
                pushFollow(FOLLOW_identifier_in_synpred77_cs1262);
                identifier();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred77_cs

    // $ANTLR start synpred91_cs
    public final void synpred91_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:209:4: ( '(' type ')' )
        // mypackage/cs.g:209:5: '(' type ')'
        {
        match(input,97,FOLLOW_97_in_synpred91_cs1493); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred91_cs1497);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred91_cs1501); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_cs

    // $ANTLR start synpred101_cs
    public final void synpred101_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:237:2: ( array_creation_expression )
        // mypackage/cs.g:237:3: array_creation_expression
        {
        pushFollow(FOLLOW_array_creation_expression_in_synpred101_cs1743);
        array_creation_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_cs

    // $ANTLR start synpred108_cs
    public final void synpred108_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:246:10: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) )
        // mypackage/cs.g:246:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
        {
        // mypackage/cs.g:246:10: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
        // mypackage/cs.g:246:11: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
        {
        pushFollow(FOLLOW_arguments_in_synpred108_cs1838);
        arguments();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_invocation_part_in_synpred108_cs1842);
        invocation_part();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred108_cs

    // $ANTLR start synpred131_cs
    public final void synpred131_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:317:20: ( unbound_type_name )
        // mypackage/cs.g:317:21: unbound_type_name
        {
        pushFollow(FOLLOW_unbound_type_name_in_synpred131_cs2353);
        unbound_type_name();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_cs

    // $ANTLR start synpred141_cs
    public final void synpred141_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:350:2: ( identifier '<' )
        // mypackage/cs.g:350:3: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred141_cs2546);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,108,FOLLOW_108_in_synpred141_cs2550); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_cs

    // $ANTLR start synpred144_cs
    public final void synpred144_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:361:4: ( identifier '<' )
        // mypackage/cs.g:361:5: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred144_cs2610);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,108,FOLLOW_108_in_synpred144_cs2615); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_cs

    // $ANTLR start synpred149_cs
    public final void synpred149_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:378:4: ( ( predefined_type | type_name ) rank_specifiers )
        // mypackage/cs.g:378:5: ( predefined_type | type_name ) rank_specifiers
        {
        // mypackage/cs.g:378:5: ( predefined_type | type_name )
        int alt315=2;
        switch ( input.LA(1) ) {
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 177:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
            {
            alt315=1;
            }
            break;
        case IDENTIFIER:
        case 74:
        case 141:
        case 142:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 159:
        case 160:
        case 161:
        case 163:
        case 166:
        case 167:
        case 168:
        case 179:
        case 186:
        case 187:
        case 204:
        case 211:
            {
            alt315=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 315, 0, input);

            throw nvae;
        }

        switch (alt315) {
            case 1 :
                // mypackage/cs.g:378:6: predefined_type
                {
                pushFollow(FOLLOW_predefined_type_in_synpred149_cs2708);
                predefined_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // mypackage/cs.g:378:24: type_name
                {
                pushFollow(FOLLOW_type_name_in_synpred149_cs2712);
                type_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_rank_specifiers_in_synpred149_cs2716);
        rank_specifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_cs

    // $ANTLR start synpred155_cs
    public final void synpred155_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:379:4: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
        // mypackage/cs.g:379:5: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
        {
        // mypackage/cs.g:379:5: ( predefined_type | type_name )
        int alt317=2;
        switch ( input.LA(1) ) {
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 177:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
            {
            alt317=1;
            }
            break;
        case IDENTIFIER:
        case 74:
        case 141:
        case 142:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 159:
        case 160:
        case 161:
        case 163:
        case 166:
        case 167:
        case 168:
        case 179:
        case 186:
        case 187:
        case 204:
        case 211:
            {
            alt317=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 317, 0, input);

            throw nvae;
        }

        switch (alt317) {
            case 1 :
                // mypackage/cs.g:379:6: predefined_type
                {
                pushFollow(FOLLOW_predefined_type_in_synpred155_cs2743);
                predefined_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // mypackage/cs.g:379:24: type_name
                {
                pushFollow(FOLLOW_type_name_in_synpred155_cs2747);
                type_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // mypackage/cs.g:379:36: ( ( '*' )+ | '?' )
        int alt319=2;
        switch ( input.LA(1) ) {
        case 109:
            {
            alt319=1;
            }
            break;
        case 110:
            {
            alt319=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 319, 0, input);

            throw nvae;
        }

        switch (alt319) {
            case 1 :
                // mypackage/cs.g:379:37: ( '*' )+
                {
                // mypackage/cs.g:379:37: ( '*' )+
                int cnt318=0;
                loop318:
                do {
                    int alt318=2;
                    switch ( input.LA(1) ) {
                    case 109:
                        {
                        alt318=1;
                        }
                        break;

                    }

                    switch (alt318) {
                	case 1 :
                	    // mypackage/cs.g:0:0: '*'
                	    {
                	    match(input,109,FOLLOW_109_in_synpred155_cs2752); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt318 >= 1 ) break loop318;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(318, input);
                            throw eee;
                    }
                    cnt318++;
                } while (true);


                }
                break;
            case 2 :
                // mypackage/cs.g:379:44: '?'
                {
                match(input,110,FOLLOW_110_in_synpred155_cs2757); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred155_cs

    // $ANTLR start synpred160_cs
    public final void synpred160_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:380:4: ( ( predefined_type | type_name ) )
        // mypackage/cs.g:380:4: ( predefined_type | type_name )
        {
        // mypackage/cs.g:380:4: ( predefined_type | type_name )
        int alt321=2;
        switch ( input.LA(1) ) {
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 177:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
            {
            alt321=1;
            }
            break;
        case IDENTIFIER:
        case 74:
        case 141:
        case 142:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 159:
        case 160:
        case 161:
        case 163:
        case 166:
        case 167:
        case 168:
        case 179:
        case 186:
        case 187:
        case 204:
        case 211:
            {
            alt321=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 321, 0, input);

            throw nvae;
        }

        switch (alt321) {
            case 1 :
                // mypackage/cs.g:380:5: predefined_type
                {
                pushFollow(FOLLOW_predefined_type_in_synpred160_cs2786);
                predefined_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // mypackage/cs.g:380:23: type_name
                {
                pushFollow(FOLLOW_type_name_in_synpred160_cs2790);
                type_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred160_cs

    // $ANTLR start synpred172_cs
    public final void synpred172_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:415:2: ( unary_expression assignment_operator )
        // mypackage/cs.g:415:3: unary_expression assignment_operator
        {
        pushFollow(FOLLOW_unary_expression_in_synpred172_cs2939);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_assignment_operator_in_synpred172_cs2943);
        assignment_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_cs

    // $ANTLR start synpred174_cs
    public final void synpred174_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:424:2: ( cast_expression )
        // mypackage/cs.g:424:3: cast_expression
        {
        pushFollow(FOLLOW_cast_expression_in_synpred174_cs3001);
        cast_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_cs

    // $ANTLR start synpred177_cs
    public final void synpred177_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:425:4: ( primary_or_array_creation_expression ( '++' )? ( '--' )? )
        // mypackage/cs.g:425:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
        {
        pushFollow(FOLLOW_primary_or_array_creation_expression_in_synpred177_cs3011);
        primary_or_array_creation_expression();

        state._fsp--;
        if (state.failed) return ;
        // mypackage/cs.g:425:43: ( '++' )?
        int alt329=2;
        switch ( input.LA(1) ) {
            case 111:
                {
                alt329=1;
                }
                break;
        }

        switch (alt329) {
            case 1 :
                // mypackage/cs.g:0:0: '++'
                {
                match(input,111,FOLLOW_111_in_synpred177_cs3015); if (state.failed) return ;

                }
                break;

        }

        // mypackage/cs.g:425:51: ( '--' )?
        int alt330=2;
        switch ( input.LA(1) ) {
            case 112:
                {
                alt330=1;
                }
                break;
        }

        switch (alt330) {
            case 1 :
                // mypackage/cs.g:0:0: '--'
                {
                match(input,112,FOLLOW_112_in_synpred177_cs3020); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred177_cs

    // $ANTLR start synpred195_cs
    public final void synpred195_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:450:2: ( anonymous_function_signature '=>' )
        // mypackage/cs.g:450:3: anonymous_function_signature '=>'
        {
        pushFollow(FOLLOW_anonymous_function_signature_in_synpred195_cs3217);
        anonymous_function_signature();

        state._fsp--;
        if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred195_cs3221); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_cs

    // $ANTLR start synpred196_cs
    public final void synpred196_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:451:4: ( query_expression )
        // mypackage/cs.g:451:5: query_expression
        {
        pushFollow(FOLLOW_query_expression_in_synpred196_cs3232);
        query_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_cs

    // $ANTLR start synpred225_cs
    public final void synpred225_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:515:50: ( 'into' )
        // mypackage/cs.g:515:51: 'into'
        {
        match(input,141,FOLLOW_141_in_synpred225_cs3655); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred225_cs

    // $ANTLR start synpred252_cs
    public final void synpred252_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:582:32: ( ',' identifier '=' )
        // mypackage/cs.g:582:33: ',' identifier '='
        {
        match(input,98,FOLLOW_98_in_synpred252_cs4157); if (state.failed) return ;
        pushFollow(FOLLOW_identifier_in_synpred252_cs4161);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,75,FOLLOW_75_in_synpred252_cs4165); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_cs

    // $ANTLR start synpred279_cs
    public final void synpred279_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:667:4: ( member_name '{' )
        // mypackage/cs.g:667:5: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred279_cs4718);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,71,FOLLOW_71_in_synpred279_cs4722); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_cs

    // $ANTLR start synpred337_cs
    public final void synpred337_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:777:14: ( member_name '(' )
        // mypackage/cs.g:777:15: member_name '('
        {
        pushFollow(FOLLOW_member_name_in_synpred337_cs5607);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,97,FOLLOW_97_in_synpred337_cs5611); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_cs

    // $ANTLR start synpred338_cs
    public final void synpred338_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:778:14: ( member_name '{' )
        // mypackage/cs.g:778:15: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred338_cs5632);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,71,FOLLOW_71_in_synpred338_cs5636); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_cs

    // $ANTLR start synpred371_cs
    public final void synpred371_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:830:11: ( member_name '(' )
        // mypackage/cs.g:830:12: member_name '('
        {
        pushFollow(FOLLOW_member_name_in_synpred371_cs6138);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,97,FOLLOW_97_in_synpred371_cs6142); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_cs

    // $ANTLR start synpred372_cs
    public final void synpred372_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:831:8: ( member_name '{' )
        // mypackage/cs.g:831:9: member_name '{'
        {
        pushFollow(FOLLOW_member_name_in_synpred372_cs6157);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,71,FOLLOW_71_in_synpred372_cs6161); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_cs

    // $ANTLR start synpred373_cs
    public final void synpred373_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:832:8: ( member_name '.' 'this' )
        // mypackage/cs.g:832:9: member_name '.' 'this'
        {
        pushFollow(FOLLOW_member_name_in_synpred373_cs6176);
        member_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred373_cs6180); if (state.failed) return ;
        match(input,92,FOLLOW_92_in_synpred373_cs6184); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_cs

    // $ANTLR start synpred375_cs
    public final void synpred375_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:834:11: ( field_declaration )
        // mypackage/cs.g:834:11: field_declaration
        {
        pushFollow(FOLLOW_field_declaration_in_synpred375_cs6215);
        field_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_cs

    // $ANTLR start synpred411_cs
    public final void synpred411_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:904:22: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) )
        // mypackage/cs.g:904:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
        {
        // mypackage/cs.g:904:22: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
        // mypackage/cs.g:904:23: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
        {
        pushFollow(FOLLOW_arguments_in_synpred411_cs6745);
        arguments();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_invocation_part_in_synpred411_cs6749);
        invocation_part();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred411_cs

    // $ANTLR start synpred414_cs
    public final void synpred414_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:908:4: ( identifier '<' )
        // mypackage/cs.g:908:5: identifier '<'
        {
        pushFollow(FOLLOW_identifier_in_synpred414_cs6781);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,108,FOLLOW_108_in_synpred414_cs6786); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_cs

    // $ANTLR start synpred420_cs
    public final void synpred420_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:921:2: ( declaration_statement )
        // mypackage/cs.g:921:3: declaration_statement
        {
        pushFollow(FOLLOW_declaration_statement_in_synpred420_cs6867);
        declaration_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_cs

    // $ANTLR start synpred421_cs
    public final void synpred421_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:922:4: ( identifier ':' )
        // mypackage/cs.g:922:5: identifier ':'
        {
        pushFollow(FOLLOW_identifier_in_synpred421_cs6878);
        identifier();

        state._fsp--;
        if (state.failed) return ;
        match(input,99,FOLLOW_99_in_synpred421_cs6882); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_cs

    // $ANTLR start synpred436_cs
    public final void synpred436_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:959:2: ( 'var' )
        // mypackage/cs.g:959:3: 'var'
        {
        match(input,186,FOLLOW_186_in_synpred436_cs7106); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_cs

    // $ANTLR start synpred437_cs
    public final void synpred437_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:960:4: ( 'dynamic' )
        // mypackage/cs.g:960:5: 'dynamic'
        {
        match(input,187,FOLLOW_187_in_synpred437_cs7117); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred437_cs

    // $ANTLR start synpred443_cs
    public final void synpred443_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:986:65: ( 'else' )
        // mypackage/cs.g:986:66: 'else'
        {
        match(input,189,FOLLOW_189_in_synpred443_cs7284); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred443_cs

    // $ANTLR start synpred454_cs
    public final void synpred454_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:1015:2: ( local_variable_declaration )
        // mypackage/cs.g:1015:3: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred454_cs7535);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred454_cs

    // $ANTLR start synpred470_cs
    public final void synpred470_cs_fragment() throws RecognitionException {   
        // mypackage/cs.g:1067:2: ( local_variable_declaration )
        // mypackage/cs.g:1067:3: local_variable_declaration
        {
        pushFollow(FOLLOW_local_variable_declaration_in_synpred470_cs7948);
        local_variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred470_cs

    // Delegated rules

    public final boolean synpred46_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred437_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred437_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred443_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred443_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred454_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred454_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred470_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred470_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_cs() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_cs_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA21 dfa21 = new DFA21(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA230 dfa230 = new DFA230(this);
    protected DFA229 dfa229 = new DFA229(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA241 dfa241 = new DFA241(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA259 dfa259 = new DFA259(this);
    protected DFA271 dfa271 = new DFA271(this);
    static final String DFA21_eotS =
        "\20\uffff";
    static final String DFA21_eofS =
        "\20\uffff";
    static final String DFA21_minS =
        "\1\16\4\uffff\1\16\1\uffff\1\16\10\uffff";
    static final String DFA21_maxS =
        "\1\u00d3\4\uffff\1\u00d3\1\uffff\1\u00d3\10\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\6\1\uffff\1\7\1\10\1\11\1\12"+
        "\1\13\1\15\1\5\1\14";
    static final String DFA21_specialS =
        "\20\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\7\15\uffff\1\12\55\uffff\1\7\1\uffff\1\3\15\uffff\1\1\1\5"+
            "\16\uffff\1\13\10\uffff\1\15\31\uffff\2\7\1\uffff\16\7\1\2\3"+
            "\7\1\uffff\1\7\1\10\1\uffff\3\7\11\6\1\11\1\7\1\uffff\1\4\1"+
            "\uffff\2\14\1\uffff\2\7\20\uffff\1\7\6\6\1\7",
            "",
            "",
            "",
            "",
            "\12\16\62\uffff\1\16\42\uffff\1\6\37\uffff\2\16\1\uffff\16"+
            "\16\1\uffff\3\16\1\uffff\1\16\2\uffff\14\16\1\uffff\1\16\6\uffff"+
            "\2\16\20\uffff\10\16",
            "",
            "\13\6\61\uffff\1\6\21\uffff\2\6\1\uffff\1\6\1\uffff\1\17\12"+
            "\uffff\3\6\36\uffff\2\6\1\uffff\16\6\1\uffff\3\6\1\uffff\1\6"+
            "\2\uffff\14\6\1\uffff\1\6\2\uffff\1\6\3\uffff\2\6\20\uffff\10"+
            "\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "124:2: ( 'const' type constant_declarators ';' -> ^( CLASSMEMBER 'const' ( attributes )? ( modifiers )? type constant_declarators ) | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | 'void' method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? 'void' method_declaration ) | type ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration -> ^( CONSTRUCTOR constructor_declaration ) | destructor_declaration )";
        }
    }
    static final String DFA20_eotS =
        "\12\uffff";
    static final String DFA20_eofS =
        "\12\uffff";
    static final String DFA20_minS =
        "\1\16\3\0\6\uffff";
    static final String DFA20_maxS =
        "\1\u00d3\3\0\6\uffff";
    static final String DFA20_acceptS =
        "\4\uffff\1\4\1\6\1\1\1\2\1\3\1\5";
    static final String DFA20_specialS =
        "\1\uffff\1\0\1\1\1\2\6\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\2\11\3\62\uffff\1\2\21\uffff\1\4\60\uffff\2\2\1\uffff\16"+
            "\2\1\uffff\3\2\1\uffff\1\2\2\uffff\3\2\11\1\1\uffff\1\2\2\uffff"+
            "\1\5\3\uffff\2\2\20\uffff\1\2\6\1\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "133:9: ( ( member_name '(' )=> method_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type method_declaration ) | ( member_name '{' )=> property_declaration -> ^( CLASSMETHOD ( attributes )? ( modifiers )? type property_declaration ) | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration -> ^( CLASSMEMBER ( attributes )? ( modifiers )? type field_declaration ) | operator_declaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_cs()) ) {s = 6;}

                        else if ( (synpred46_cs()) ) {s = 7;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_2 = input.LA(1);

                         
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_cs()) ) {s = 6;}

                        else if ( (synpred46_cs()) ) {s = 7;}

                        else if ( (synpred47_cs()) ) {s = 8;}

                        else if ( (synpred49_cs()) ) {s = 9;}

                         
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_cs()) ) {s = 6;}

                        else if ( (synpred46_cs()) ) {s = 7;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\20\uffff";
    static final String DFA27_eofS =
        "\20\uffff";
    static final String DFA27_minS =
        "\1\16\1\0\16\uffff";
    static final String DFA27_maxS =
        "\1\u00d3\1\0\16\uffff";
    static final String DFA27_acceptS =
        "\2\uffff\1\3\5\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\1\1\2";
    static final String DFA27_specialS =
        "\1\uffff\1\0\16\uffff}>";
    static final String[] DFA27_transitionS = {
            "\12\2\62\uffff\1\2\2\uffff\1\10\16\uffff\1\1\1\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\11\1\12\1\13\1\14\1\15\1\2\41\uffff\2\2\1\uffff"+
            "\16\2\1\uffff\3\2\1\uffff\1\2\2\uffff\14\2\1\uffff\1\2\6\uffff"+
            "\2\2\20\uffff\10\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "151:1: primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_cs()) ) {s = 14;}

                        else if ( (synpred59_cs()) ) {s = 15;}

                        else if ( (synpred62_cs()) ) {s = 2;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\12\uffff";
    static final String DFA29_eofS =
        "\12\uffff";
    static final String DFA29_minS =
        "\1\16\1\uffff\1\0\7\uffff";
    static final String DFA29_maxS =
        "\1\u00d3\1\uffff\1\0\7\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1\10\1\2\1\3";
    static final String DFA29_specialS =
        "\2\uffff\1\0\7\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\2\11\7\62\uffff\1\2\21\uffff\1\3\1\uffff\1\4\2\uffff\1\5"+
            "\11\uffff\1\6\41\uffff\2\2\1\uffff\16\2\1\uffff\3\2\1\uffff"+
            "\1\2\2\uffff\3\2\11\1\1\uffff\1\2\6\uffff\2\2\20\uffff\1\2\6"+
            "\1\1\2",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "169:1: primary_expression_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_cs()) ) {s = 8;}

                        else if ( (synpred77_cs()) ) {s = 9;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\30\uffff";
    static final String DFA38_eofS =
        "\30\uffff";
    static final String DFA38_minS =
        "\1\16\1\0\26\uffff";
    static final String DFA38_maxS =
        "\1\u00d3\1\0\26\uffff";
    static final String DFA38_acceptS =
        "\2\uffff\1\2\24\uffff\1\1";
    static final String DFA38_specialS =
        "\1\uffff\1\0\26\uffff}>";
    static final String[] DFA38_transitionS = {
            "\12\2\2\uffff\1\2\57\uffff\1\2\2\uffff\1\2\16\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\1\4\uffff\6\2\1\uffff\1\2\1\uffff\5\2\12\uffff"+
            "\1\2\16\uffff\2\2\1\uffff\16\2\1\uffff\3\2\1\uffff\1\2\2\uffff"+
            "\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff\10\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "209:3: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_1 = input.LA(1);

                         
                        int index38_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index38_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\17\uffff";
    static final String DFA46_eofS =
        "\17\uffff";
    static final String DFA46_minS =
        "\1\16\1\0\15\uffff";
    static final String DFA46_maxS =
        "\1\u00d3\1\0\15\uffff";
    static final String DFA46_acceptS =
        "\2\uffff\1\2\13\uffff\1\1";
    static final String DFA46_specialS =
        "\1\uffff\1\0\15\uffff}>";
    static final String[] DFA46_transitionS = {
            "\12\2\62\uffff\1\2\2\uffff\1\1\16\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\6\2\41\uffff\2\2\1\uffff\16\2\1\uffff\3\2\1\uffff"+
            "\1\2\2\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff\10\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "236:1: primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_cs()) ) {s = 14;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA50_eotS =
        "\5\uffff";
    static final String DFA50_eofS =
        "\1\2\3\uffff\1\2";
    static final String DFA50_minS =
        "\2\16\2\uffff\1\16";
    static final String DFA50_maxS =
        "\2\u00d3\2\uffff\1\u00d3";
    static final String DFA50_acceptS =
        "\2\uffff\1\1\1\2\1\uffff";
    static final String DFA50_specialS =
        "\5\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\2\11\uffff\2\3\2\2\6\uffff\2\2\43\uffff\2\2\1\uffff\2\2\23"+
            "\uffff\1\1\1\2\1\3\2\2\10\uffff\6\2\2\uffff\30\2\1\uffff\2\2"+
            "\1\uffff\16\2\1\uffff\3\2\1\uffff\1\2\2\uffff\3\2\12\uffff\1"+
            "\2\6\uffff\2\2\20\uffff\1\2\6\uffff\1\2",
            "\12\3\2\uffff\1\3\57\uffff\1\3\2\uffff\1\3\16\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\4\1\3\1\2\3\uffff\6\3\1\uffff\1\3\1\uffff\5\3"+
            "\12\uffff\1\3\16\uffff\2\3\1\uffff\16\3\1\uffff\3\3\1\uffff"+
            "\1\3\2\uffff\14\3\1\uffff\1\3\6\uffff\2\3\20\uffff\10\3",
            "",
            "",
            "\1\2\11\uffff\2\3\2\2\6\uffff\2\2\43\uffff\2\2\1\uffff\2\2"+
            "\23\uffff\1\1\1\2\1\3\2\2\10\uffff\6\2\2\uffff\30\2\1\uffff"+
            "\2\2\1\uffff\16\2\1\uffff\3\2\1\uffff\1\2\2\uffff\3\2\12\uffff"+
            "\1\2\6\uffff\2\2\20\uffff\1\2\6\uffff\1\2"
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "244:6: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )";
        }
    }
    static final String DFA71_eotS =
        "\16\uffff";
    static final String DFA71_eofS =
        "\16\uffff";
    static final String DFA71_minS =
        "\1\16\1\30\1\uffff\1\43\3\16\3\uffff\2\30\2\16";
    static final String DFA71_maxS =
        "\1\u00d3\1\156\1\uffff\1\155\3\u00d3\3\uffff\2\156\2\u00d3";
    static final String DFA71_acceptS =
        "\2\uffff\1\2\4\uffff\1\3\2\1\4\uffff";
    static final String DFA71_specialS =
        "\4\uffff\1\1\7\uffff\1\2\1\0}>";
    static final String[] DFA71_transitionS = {
            "\1\1\73\uffff\1\1\20\uffff\1\3\61\uffff\2\1\1\uffff\16\1\1\uffff"+
            "\3\1\1\uffff\1\1\2\uffff\3\1\11\2\1\uffff\1\1\6\uffff\2\1\20"+
            "\uffff\1\1\6\2\1\1",
            "\1\6\12\uffff\1\2\71\uffff\1\5\1\uffff\1\2\14\uffff\1\4\2\2",
            "",
            "\1\7\111\uffff\1\2",
            "\1\2\14\uffff\1\11\56\uffff\1\2\20\uffff\1\2\6\uffff\1\10\52"+
            "\uffff\2\2\1\uffff\16\2\1\uffff\3\2\1\uffff\1\2\2\uffff\14\2"+
            "\1\uffff\1\2\6\uffff\2\2\20\uffff\10\2",
            "\1\12\73\uffff\1\12\102\uffff\2\12\1\uffff\16\12\1\uffff\3"+
            "\12\1\uffff\1\12\2\uffff\3\12\12\uffff\1\12\6\uffff\2\12\20"+
            "\uffff\1\12\6\uffff\1\12",
            "\1\13\73\uffff\1\13\102\uffff\2\13\1\uffff\16\13\1\uffff\3"+
            "\13\1\uffff\1\13\2\uffff\3\13\12\uffff\1\13\6\uffff\2\13\20"+
            "\uffff\1\13\6\uffff\1\13",
            "",
            "",
            "",
            "\1\6\12\uffff\1\2\73\uffff\1\2\14\uffff\1\14\2\2",
            "\1\6\12\uffff\1\2\73\uffff\1\2\14\uffff\1\15\2\2",
            "\1\2\14\uffff\1\11\56\uffff\1\2\20\uffff\1\2\6\uffff\1\10\52"+
            "\uffff\2\2\1\uffff\16\2\1\uffff\3\2\1\uffff\1\2\2\uffff\14\2"+
            "\1\uffff\1\2\6\uffff\2\2\20\uffff\10\2",
            "\1\2\14\uffff\1\11\56\uffff\1\2\20\uffff\1\2\6\uffff\1\10\52"+
            "\uffff\2\2\1\uffff\16\2\1\uffff\3\2\1\uffff\1\2\2\uffff\14\2"+
            "\1\uffff\1\2\6\uffff\2\2\20\uffff\10\2"
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "317:19: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_13 = input.LA(1);

                         
                        int index71_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_13==IDENTIFIER||LA71_13==74||LA71_13==91||(LA71_13>=141 && LA71_13<=142)||(LA71_13>=144 && LA71_13<=157)||(LA71_13>=159 && LA71_13<=161)||LA71_13==163||(LA71_13>=166 && LA71_13<=177)||LA71_13==179||(LA71_13>=186 && LA71_13<=187)||(LA71_13>=204 && LA71_13<=211)) ) {s = 2;}

                        else if ( (LA71_13==98) && (synpred131_cs())) {s = 8;}

                        else if ( (LA71_13==GT) && (synpred131_cs())) {s = 9;}

                         
                        input.seek(index71_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_4 = input.LA(1);

                         
                        int index71_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_4==IDENTIFIER||LA71_4==74||LA71_4==91||(LA71_4>=141 && LA71_4<=142)||(LA71_4>=144 && LA71_4<=157)||(LA71_4>=159 && LA71_4<=161)||LA71_4==163||(LA71_4>=166 && LA71_4<=177)||LA71_4==179||(LA71_4>=186 && LA71_4<=187)||(LA71_4>=204 && LA71_4<=211)) ) {s = 2;}

                        else if ( (LA71_4==98) && (synpred131_cs())) {s = 8;}

                        else if ( (LA71_4==GT) && (synpred131_cs())) {s = 9;}

                         
                        input.seek(index71_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_12 = input.LA(1);

                         
                        int index71_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_12==IDENTIFIER||LA71_12==74||LA71_12==91||(LA71_12>=141 && LA71_12<=142)||(LA71_12>=144 && LA71_12<=157)||(LA71_12>=159 && LA71_12<=161)||LA71_12==163||(LA71_12>=166 && LA71_12<=177)||LA71_12==179||(LA71_12>=186 && LA71_12<=187)||(LA71_12>=204 && LA71_12<=211)) ) {s = 2;}

                        else if ( (LA71_12==98) && (synpred131_cs())) {s = 8;}

                        else if ( (LA71_12==GT) && (synpred131_cs())) {s = 9;}

                         
                        input.seek(index71_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA72_eotS =
        "\7\uffff";
    static final String DFA72_eofS =
        "\4\uffff\1\5\2\uffff";
    static final String DFA72_minS =
        "\1\30\1\33\1\uffff\1\33\1\30\2\uffff";
    static final String DFA72_maxS =
        "\1\154\1\142\1\uffff\1\142\1\43\2\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\2\2\uffff\1\3\1\1";
    static final String DFA72_specialS =
        "\7\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\2\123\uffff\1\1",
            "\1\4\106\uffff\1\3",
            "",
            "\1\4\106\uffff\1\3",
            "\1\6\12\uffff\1\5",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "()* loopback of 327:3: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*";
        }
    }
    static final String DFA101_eotS =
        "\31\uffff";
    static final String DFA101_eofS =
        "\31\uffff";
    static final String DFA101_minS =
        "\1\16\26\0\2\uffff";
    static final String DFA101_maxS =
        "\1\u00d3\26\0\2\uffff";
    static final String DFA101_acceptS =
        "\27\uffff\1\1\1\2";
    static final String DFA101_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\26\11\10\2\uffff\1\17\57\uffff\1\26\2\uffff\1\2\16\uffff"+
            "\1\3\1\uffff\1\6\2\uffff\1\1\4\uffff\1\11\1\12\1\13\1\14\1\15"+
            "\1\7\1\uffff\1\24\1\uffff\1\22\1\23\1\16\1\20\1\21\12\uffff"+
            "\1\25\16\uffff\1\26\1\5\1\uffff\16\26\1\uffff\3\26\1\uffff\1"+
            "\26\2\uffff\3\26\11\4\1\uffff\1\26\6\uffff\2\26\20\uffff\1\26"+
            "\6\4\1\26",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "414:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_1 = input.LA(1);

                         
                        int index101_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_2 = input.LA(1);

                         
                        int index101_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_3 = input.LA(1);

                         
                        int index101_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_4 = input.LA(1);

                         
                        int index101_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_5 = input.LA(1);

                         
                        int index101_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_6 = input.LA(1);

                         
                        int index101_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_7 = input.LA(1);

                         
                        int index101_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA101_8 = input.LA(1);

                         
                        int index101_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA101_9 = input.LA(1);

                         
                        int index101_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA101_10 = input.LA(1);

                         
                        int index101_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA101_11 = input.LA(1);

                         
                        int index101_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA101_12 = input.LA(1);

                         
                        int index101_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA101_13 = input.LA(1);

                         
                        int index101_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA101_14 = input.LA(1);

                         
                        int index101_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA101_15 = input.LA(1);

                         
                        int index101_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA101_16 = input.LA(1);

                         
                        int index101_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA101_17 = input.LA(1);

                         
                        int index101_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA101_18 = input.LA(1);

                         
                        int index101_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA101_19 = input.LA(1);

                         
                        int index101_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA101_20 = input.LA(1);

                         
                        int index101_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA101_21 = input.LA(1);

                         
                        int index101_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA101_22 = input.LA(1);

                         
                        int index101_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index101_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA105_eotS =
        "\27\uffff";
    static final String DFA105_eofS =
        "\27\uffff";
    static final String DFA105_minS =
        "\1\16\1\0\25\uffff";
    static final String DFA105_maxS =
        "\1\u00d3\1\0\25\uffff";
    static final String DFA105_acceptS =
        "\2\uffff\1\2\13\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\1";
    static final String DFA105_specialS =
        "\1\uffff\1\0\25\uffff}>";
    static final String[] DFA105_transitionS = {
            "\12\2\2\uffff\1\17\57\uffff\1\2\2\uffff\1\2\16\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\1\4\uffff\6\2\1\uffff\1\24\1\uffff\1\22\1\23"+
            "\1\16\1\20\1\21\12\uffff\1\25\16\uffff\2\2\1\uffff\16\2\1\uffff"+
            "\3\2\1\uffff\1\2\2\uffff\14\2\1\uffff\1\2\6\uffff\2\2\20\uffff"+
            "\10\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "422:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_cs()) ) {s = 22;}

                        else if ( (synpred177_cs()) ) {s = 2;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\31\uffff";
    static final String DFA107_eofS =
        "\31\uffff";
    static final String DFA107_minS =
        "\1\16\3\0\25\uffff";
    static final String DFA107_maxS =
        "\1\u00d3\3\0\25\uffff";
    static final String DFA107_acceptS =
        "\4\uffff\1\3\22\uffff\1\1\1\2";
    static final String DFA107_specialS =
        "\1\uffff\1\0\1\1\1\2\25\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\3\11\4\2\uffff\1\4\57\uffff\1\3\2\uffff\1\4\16\uffff\1\4"+
            "\1\uffff\1\4\2\uffff\1\1\4\uffff\6\4\1\uffff\1\4\1\uffff\5\4"+
            "\12\uffff\1\4\16\uffff\1\3\1\2\1\uffff\16\3\1\uffff\3\3\1\uffff"+
            "\1\3\2\uffff\3\3\11\4\1\uffff\1\3\6\uffff\2\3\20\uffff\1\3\6"+
            "\4\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "448:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA107_2 = input.LA(1);

                         
                        int index107_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_cs()) ) {s = 23;}

                        else if ( (synpred196_cs()) ) {s = 24;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index107_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA107_3 = input.LA(1);

                         
                        int index107_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_cs()) ) {s = 23;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index107_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA230_eotS =
        "\17\uffff";
    static final String DFA230_eofS =
        "\17\uffff";
    static final String DFA230_minS =
        "\1\16\5\uffff\1\16\1\uffff\1\16\6\uffff";
    static final String DFA230_maxS =
        "\1\u00d3\5\uffff\1\u00d3\1\uffff\1\u00d3\6\uffff";
    static final String DFA230_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\uffff\1\7\1\uffff\1\10\1\11\1\12"+
        "\1\13\1\6\1\14";
    static final String DFA230_specialS =
        "\17\uffff}>";
    static final String[] DFA230_transitionS = {
            "\1\10\15\uffff\1\12\55\uffff\1\10\1\uffff\1\3\15\uffff\1\1\1"+
            "\6\16\uffff\1\13\42\uffff\2\10\1\uffff\16\10\1\2\3\10\1\uffff"+
            "\1\10\1\5\1\uffff\3\10\11\7\1\11\1\10\1\uffff\1\4\1\uffff\2"+
            "\14\1\uffff\2\10\20\uffff\1\10\6\7\1\10",
            "",
            "",
            "",
            "",
            "",
            "\12\15\62\uffff\1\15\42\uffff\1\7\37\uffff\2\15\1\uffff\16"+
            "\15\1\uffff\3\15\1\uffff\1\15\2\uffff\14\15\1\uffff\1\15\6\uffff"+
            "\2\15\20\uffff\10\15",
            "",
            "\13\7\61\uffff\1\7\21\uffff\2\7\1\uffff\1\7\1\uffff\1\16\12"+
            "\uffff\3\7\36\uffff\2\7\1\uffff\16\7\1\uffff\3\7\1\uffff\1\7"+
            "\2\uffff\14\7\1\uffff\1\7\2\uffff\1\7\3\uffff\2\7\20\uffff\10"+
            "\7",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA230_eot = DFA.unpackEncodedString(DFA230_eotS);
    static final short[] DFA230_eof = DFA.unpackEncodedString(DFA230_eofS);
    static final char[] DFA230_min = DFA.unpackEncodedStringToUnsignedChars(DFA230_minS);
    static final char[] DFA230_max = DFA.unpackEncodedStringToUnsignedChars(DFA230_maxS);
    static final short[] DFA230_accept = DFA.unpackEncodedString(DFA230_acceptS);
    static final short[] DFA230_special = DFA.unpackEncodedString(DFA230_specialS);
    static final short[][] DFA230_transition;

    static {
        int numStates = DFA230_transitionS.length;
        DFA230_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA230_transition[i] = DFA.unpackEncodedString(DFA230_transitionS[i]);
        }
    }

    class DFA230 extends DFA {

        public DFA230(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 230;
            this.eot = DFA230_eot;
            this.eof = DFA230_eof;
            this.min = DFA230_min;
            this.max = DFA230_max;
            this.accept = DFA230_accept;
            this.special = DFA230_special;
            this.transition = DFA230_transition;
        }
        public String getDescription() {
            return "818:2: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | struct_declaration ) | interface_declaration -> ^( INTERFACE interface_declaration ) | class_declaration -> ^( CLASS class_declaration ) | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )";
        }
    }
    static final String DFA229_eotS =
        "\12\uffff";
    static final String DFA229_eofS =
        "\12\uffff";
    static final String DFA229_minS =
        "\1\16\3\0\6\uffff";
    static final String DFA229_maxS =
        "\1\u00d3\3\0\6\uffff";
    static final String DFA229_acceptS =
        "\4\uffff\1\4\1\6\1\1\1\2\1\3\1\5";
    static final String DFA229_specialS =
        "\1\uffff\1\0\1\1\1\2\6\uffff}>";
    static final String[] DFA229_transitionS = {
            "\1\2\11\3\62\uffff\1\2\21\uffff\1\4\60\uffff\2\2\1\uffff\16"+
            "\2\1\uffff\3\2\1\uffff\1\2\2\uffff\3\2\11\1\1\uffff\1\2\2\uffff"+
            "\1\5\3\uffff\2\2\20\uffff\1\2\6\1\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA229_eot = DFA.unpackEncodedString(DFA229_eotS);
    static final short[] DFA229_eof = DFA.unpackEncodedString(DFA229_eofS);
    static final char[] DFA229_min = DFA.unpackEncodedStringToUnsignedChars(DFA229_minS);
    static final char[] DFA229_max = DFA.unpackEncodedStringToUnsignedChars(DFA229_maxS);
    static final short[] DFA229_accept = DFA.unpackEncodedString(DFA229_acceptS);
    static final short[] DFA229_special = DFA.unpackEncodedString(DFA229_specialS);
    static final short[][] DFA229_transition;

    static {
        int numStates = DFA229_transitionS.length;
        DFA229_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA229_transition[i] = DFA.unpackEncodedString(DFA229_transitionS[i]);
        }
    }

    class DFA229 extends DFA {

        public DFA229(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 229;
            this.eot = DFA229_eot;
            this.eof = DFA229_eof;
            this.min = DFA229_min;
            this.max = DFA229_max;
            this.accept = DFA229_accept;
            this.special = DFA229_special;
            this.transition = DFA229_transition;
        }
        public String getDescription() {
            return "830:9: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA229_1 = input.LA(1);

                         
                        int index229_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_cs()) ) {s = 6;}

                        else if ( (synpred372_cs()) ) {s = 7;}

                         
                        input.seek(index229_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA229_2 = input.LA(1);

                         
                        int index229_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_cs()) ) {s = 6;}

                        else if ( (synpred372_cs()) ) {s = 7;}

                        else if ( (synpred373_cs()) ) {s = 8;}

                        else if ( (synpred375_cs()) ) {s = 9;}

                         
                        input.seek(index229_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA229_3 = input.LA(1);

                         
                        int index229_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_cs()) ) {s = 6;}

                        else if ( (synpred372_cs()) ) {s = 7;}

                         
                        input.seek(index229_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 229, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA233_eotS =
        "\20\uffff";
    static final String DFA233_eofS =
        "\20\uffff";
    static final String DFA233_minS =
        "\1\33\7\uffff\1\33\7\uffff";
    static final String DFA233_maxS =
        "\1\u0088\7\uffff\1\142\7\uffff";
    static final String DFA233_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\11\1\12\1\14\1\15"+
        "\1\16\1\10\1\13";
    static final String DFA233_specialS =
        "\20\uffff}>";
    static final String[] DFA233_transitionS = {
            "\1\10\120\uffff\1\13\1\1\17\uffff\1\14\1\4\1\2\1\3\1\7\1\15"+
            "\2\uffff\1\11\1\12\1\6\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16\106\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA233_eot = DFA.unpackEncodedString(DFA233_eotS);
    static final short[] DFA233_eof = DFA.unpackEncodedString(DFA233_eofS);
    static final char[] DFA233_min = DFA.unpackEncodedStringToUnsignedChars(DFA233_minS);
    static final char[] DFA233_max = DFA.unpackEncodedStringToUnsignedChars(DFA233_maxS);
    static final short[] DFA233_accept = DFA.unpackEncodedString(DFA233_acceptS);
    static final short[] DFA233_special = DFA.unpackEncodedString(DFA233_specialS);
    static final short[][] DFA233_transition;

    static {
        int numStates = DFA233_transitionS.length;
        DFA233_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA233_transition[i] = DFA.unpackEncodedString(DFA233_transitionS[i]);
        }
    }

    class DFA233 extends DFA {

        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = DFA233_eot;
            this.eof = DFA233_eof;
            this.min = DFA233_min;
            this.max = DFA233_max;
            this.accept = DFA233_accept;
            this.special = DFA233_special;
            this.transition = DFA233_transition;
        }
        public String getDescription() {
            return "870:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );";
        }
    }
    static final String DFA241_eotS =
        "\57\uffff";
    static final String DFA241_eofS =
        "\57\uffff";
    static final String DFA241_minS =
        "\1\6\4\0\24\uffff\1\0\23\uffff\1\0\1\uffff";
    static final String DFA241_maxS =
        "\1\u00d3\4\0\24\uffff\1\0\23\uffff\1\0\1\uffff";
    static final String DFA241_acceptS =
        "\5\uffff\2\1\1\3\46\uffff\1\2";
    static final String DFA241_specialS =
        "\1\0\1\1\1\2\1\3\1\4\24\uffff\1\5\23\uffff\1\6\1\uffff}>";
    static final String[] DFA241_transitionS = {
            "\1\7\7\uffff\1\55\11\7\2\uffff\1\7\2\uffff\1\7\4\uffff\1\7\44"+
            "\uffff\1\7\2\uffff\1\55\2\uffff\1\7\4\uffff\1\7\7\uffff\1\6"+
            "\1\5\1\7\1\uffff\1\7\2\uffff\1\7\4\uffff\6\7\1\uffff\1\7\1\uffff"+
            "\5\7\12\uffff\1\7\16\uffff\1\55\1\31\1\uffff\16\55\1\uffff\3"+
            "\55\1\7\1\55\2\uffff\3\55\11\3\1\uffff\1\55\5\uffff\1\7\1\1"+
            "\1\2\2\uffff\1\7\1\uffff\11\7\2\uffff\1\7\1\4\6\3\1\55",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA241_eot = DFA.unpackEncodedString(DFA241_eotS);
    static final short[] DFA241_eof = DFA.unpackEncodedString(DFA241_eofS);
    static final char[] DFA241_min = DFA.unpackEncodedStringToUnsignedChars(DFA241_minS);
    static final char[] DFA241_max = DFA.unpackEncodedStringToUnsignedChars(DFA241_maxS);
    static final short[] DFA241_accept = DFA.unpackEncodedString(DFA241_acceptS);
    static final short[] DFA241_special = DFA.unpackEncodedString(DFA241_specialS);
    static final short[][] DFA241_transition;

    static {
        int numStates = DFA241_transitionS.length;
        DFA241_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA241_transition[i] = DFA.unpackEncodedString(DFA241_transitionS[i]);
        }
    }

    class DFA241 extends DFA {

        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = DFA241_eot;
            this.eof = DFA241_eof;
            this.min = DFA241_min;
            this.max = DFA241_max;
            this.accept = DFA241_accept;
            this.special = DFA241_special;
            this.transition = DFA241_transition;
        }
        public String getDescription() {
            return "920:1: statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA241_0 = input.LA(1);

                         
                        int index241_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_0==186) ) {s = 1;}

                        else if ( (LA241_0==187) ) {s = 2;}

                        else if ( ((LA241_0>=169 && LA241_0<=177)||(LA241_0>=205 && LA241_0<=210)) ) {s = 3;}

                        else if ( (LA241_0==204) ) {s = 4;}

                        else if ( (LA241_0==91) && (synpred420_cs())) {s = 5;}

                        else if ( (LA241_0==90) && (synpred420_cs())) {s = 6;}

                        else if ( (LA241_0==USING||(LA241_0>=Real_literal && LA241_0<=NULL)||LA241_0==MINUS||LA241_0==IF||LA241_0==SEMI||LA241_0==71||LA241_0==77||LA241_0==82||LA241_0==92||LA241_0==94||LA241_0==97||(LA241_0>=102 && LA241_0<=107)||LA241_0==109||(LA241_0>=111 && LA241_0<=115)||LA241_0==126||LA241_0==162||LA241_0==185||LA241_0==190||(LA241_0>=192 && LA241_0<=200)||LA241_0==203) ) {s = 7;}

                        else if ( (LA241_0==142) ) {s = 25;}

                        else if ( (LA241_0==IDENTIFIER||LA241_0==74||LA241_0==141||(LA241_0>=144 && LA241_0<=157)||(LA241_0>=159 && LA241_0<=161)||LA241_0==163||(LA241_0>=166 && LA241_0<=168)||LA241_0==179||LA241_0==211) ) {s = 45;}

                         
                        input.seek(index241_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA241_1 = input.LA(1);

                         
                        int index241_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_cs()) ) {s = 6;}

                        else if ( (synpred421_cs()) ) {s = 46;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index241_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA241_2 = input.LA(1);

                         
                        int index241_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_cs()) ) {s = 6;}

                        else if ( (synpred421_cs()) ) {s = 46;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index241_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA241_3 = input.LA(1);

                         
                        int index241_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_cs()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index241_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA241_4 = input.LA(1);

                         
                        int index241_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_cs()) ) {s = 6;}

                        else if ( (synpred421_cs()) ) {s = 46;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index241_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA241_25 = input.LA(1);

                         
                        int index241_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_cs()) ) {s = 6;}

                        else if ( (synpred421_cs()) ) {s = 46;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index241_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA241_45 = input.LA(1);

                         
                        int index241_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred420_cs()) ) {s = 6;}

                        else if ( (synpred421_cs()) ) {s = 46;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index241_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 241, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA242_eotS =
        "\21\uffff";
    static final String DFA242_eofS =
        "\21\uffff";
    static final String DFA242_minS =
        "\1\6\5\uffff\2\42\2\uffff\1\30\6\uffff";
    static final String DFA242_maxS =
        "\1\u00d3\5\uffff\2\141\2\uffff\1\u00c4\6\uffff";
    static final String DFA242_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\2\uffff\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\6\1\7\1\12";
    static final String DFA242_specialS =
        "\21\uffff}>";
    static final String[] DFA242_transitionS = {
            "\1\11\7\uffff\12\15\2\uffff\1\15\2\uffff\1\2\4\uffff\1\1\44"+
            "\uffff\1\1\2\uffff\1\15\2\uffff\1\15\4\uffff\1\13\11\uffff\1"+
            "\15\1\uffff\1\15\2\uffff\1\15\4\uffff\1\15\1\6\1\7\3\15\1\uffff"+
            "\1\15\1\uffff\5\15\12\uffff\1\15\16\uffff\2\15\1\uffff\16\15"+
            "\1\uffff\3\15\1\4\1\15\2\uffff\14\15\1\uffff\1\15\5\uffff\1"+
            "\14\2\15\2\uffff\1\2\1\uffff\4\3\4\4\1\5\2\uffff\1\10\1\12\7"+
            "\15",
            "",
            "",
            "",
            "",
            "",
            "\1\16\44\uffff\1\16\31\uffff\1\15",
            "\1\17\44\uffff\1\17\31\uffff\1\15",
            "",
            "",
            "\4\15\6\uffff\1\15\50\uffff\1\15\21\uffff\1\15\1\uffff\1\15"+
            "\1\uffff\2\15\11\uffff\6\15\2\uffff\31\15\25\uffff\1\20\41\uffff"+
            "\1\20",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
    static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
    static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
    static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
    static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
    static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
    static final short[][] DFA242_transition;

    static {
        int numStates = DFA242_transitionS.length;
        DFA242_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
        }
    }

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;
        }
        public String getDescription() {
            return "925:1: embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );";
        }
    }
    static final String DFA259_eotS =
        "\32\uffff";
    static final String DFA259_eofS =
        "\32\uffff";
    static final String DFA259_minS =
        "\1\16\4\0\24\uffff\1\0";
    static final String DFA259_maxS =
        "\1\u00d3\4\0\24\uffff\1\0";
    static final String DFA259_acceptS =
        "\5\uffff\1\1\1\2\23\uffff";
    static final String DFA259_specialS =
        "\1\0\1\1\1\2\1\3\1\4\24\uffff\1\5}>";
    static final String[] DFA259_transitionS = {
            "\1\31\11\6\2\uffff\1\6\57\uffff\1\31\2\uffff\1\6\15\uffff\1"+
            "\5\1\6\1\uffff\1\6\2\uffff\1\6\4\uffff\6\6\1\uffff\1\6\1\uffff"+
            "\5\6\12\uffff\1\6\16\uffff\1\31\1\4\1\uffff\16\31\1\uffff\3"+
            "\31\1\uffff\1\31\2\uffff\3\31\11\3\1\uffff\1\31\6\uffff\1\1"+
            "\1\2\20\uffff\1\31\6\3\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA259_eot = DFA.unpackEncodedString(DFA259_eotS);
    static final short[] DFA259_eof = DFA.unpackEncodedString(DFA259_eofS);
    static final char[] DFA259_min = DFA.unpackEncodedStringToUnsignedChars(DFA259_minS);
    static final char[] DFA259_max = DFA.unpackEncodedStringToUnsignedChars(DFA259_maxS);
    static final short[] DFA259_accept = DFA.unpackEncodedString(DFA259_acceptS);
    static final short[] DFA259_special = DFA.unpackEncodedString(DFA259_specialS);
    static final short[][] DFA259_transition;

    static {
        int numStates = DFA259_transitionS.length;
        DFA259_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA259_transition[i] = DFA.unpackEncodedString(DFA259_transitionS[i]);
        }
    }

    class DFA259 extends DFA {

        public DFA259(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 259;
            this.eot = DFA259_eot;
            this.eof = DFA259_eof;
            this.min = DFA259_min;
            this.max = DFA259_max;
            this.accept = DFA259_accept;
            this.special = DFA259_special;
            this.transition = DFA259_transition;
        }
        public String getDescription() {
            return "1014:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA259_0 = input.LA(1);

                         
                        int index259_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_0==186) ) {s = 1;}

                        else if ( (LA259_0==187) ) {s = 2;}

                        else if ( ((LA259_0>=169 && LA259_0<=177)||(LA259_0>=205 && LA259_0<=210)) ) {s = 3;}

                        else if ( (LA259_0==142) ) {s = 4;}

                        else if ( (LA259_0==91) && (synpred454_cs())) {s = 5;}

                        else if ( ((LA259_0>=Real_literal && LA259_0<=NULL)||LA259_0==MINUS||LA259_0==77||LA259_0==92||LA259_0==94||LA259_0==97||(LA259_0>=102 && LA259_0<=107)||LA259_0==109||(LA259_0>=111 && LA259_0<=115)||LA259_0==126) ) {s = 6;}

                        else if ( (LA259_0==IDENTIFIER||LA259_0==74||LA259_0==141||(LA259_0>=144 && LA259_0<=157)||(LA259_0>=159 && LA259_0<=161)||LA259_0==163||(LA259_0>=166 && LA259_0<=168)||LA259_0==179||LA259_0==204||LA259_0==211) ) {s = 25;}

                         
                        input.seek(index259_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA259_1 = input.LA(1);

                         
                        int index259_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index259_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA259_2 = input.LA(1);

                         
                        int index259_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index259_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA259_3 = input.LA(1);

                         
                        int index259_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index259_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA259_4 = input.LA(1);

                         
                        int index259_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index259_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA259_25 = input.LA(1);

                         
                        int index259_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred454_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index259_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 259, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA271_eotS =
        "\32\uffff";
    static final String DFA271_eofS =
        "\32\uffff";
    static final String DFA271_minS =
        "\1\16\4\0\24\uffff\1\0";
    static final String DFA271_maxS =
        "\1\u00d3\4\0\24\uffff\1\0";
    static final String DFA271_acceptS =
        "\5\uffff\1\1\1\2\23\uffff";
    static final String DFA271_specialS =
        "\1\0\1\1\1\2\1\3\1\4\24\uffff\1\5}>";
    static final String[] DFA271_transitionS = {
            "\1\31\11\6\2\uffff\1\6\57\uffff\1\31\2\uffff\1\6\15\uffff\1"+
            "\5\1\6\1\uffff\1\6\2\uffff\1\6\4\uffff\6\6\1\uffff\1\6\1\uffff"+
            "\5\6\12\uffff\1\6\16\uffff\1\31\1\4\1\uffff\16\31\1\uffff\3"+
            "\31\1\uffff\1\31\2\uffff\3\31\11\3\1\uffff\1\31\6\uffff\1\1"+
            "\1\2\20\uffff\1\31\6\3\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA271_eot = DFA.unpackEncodedString(DFA271_eotS);
    static final short[] DFA271_eof = DFA.unpackEncodedString(DFA271_eofS);
    static final char[] DFA271_min = DFA.unpackEncodedStringToUnsignedChars(DFA271_minS);
    static final char[] DFA271_max = DFA.unpackEncodedStringToUnsignedChars(DFA271_maxS);
    static final short[] DFA271_accept = DFA.unpackEncodedString(DFA271_acceptS);
    static final short[] DFA271_special = DFA.unpackEncodedString(DFA271_specialS);
    static final short[][] DFA271_transition;

    static {
        int numStates = DFA271_transitionS.length;
        DFA271_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA271_transition[i] = DFA.unpackEncodedString(DFA271_transitionS[i]);
        }
    }

    class DFA271 extends DFA {

        public DFA271(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = DFA271_eot;
            this.eof = DFA271_eof;
            this.min = DFA271_min;
            this.max = DFA271_max;
            this.accept = DFA271_accept;
            this.special = DFA271_special;
            this.transition = DFA271_transition;
        }
        public String getDescription() {
            return "1066:1: resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA271_0 = input.LA(1);

                         
                        int index271_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA271_0==186) ) {s = 1;}

                        else if ( (LA271_0==187) ) {s = 2;}

                        else if ( ((LA271_0>=169 && LA271_0<=177)||(LA271_0>=205 && LA271_0<=210)) ) {s = 3;}

                        else if ( (LA271_0==142) ) {s = 4;}

                        else if ( (LA271_0==91) && (synpred470_cs())) {s = 5;}

                        else if ( ((LA271_0>=Real_literal && LA271_0<=NULL)||LA271_0==MINUS||LA271_0==77||LA271_0==92||LA271_0==94||LA271_0==97||(LA271_0>=102 && LA271_0<=107)||LA271_0==109||(LA271_0>=111 && LA271_0<=115)||LA271_0==126) ) {s = 6;}

                        else if ( (LA271_0==IDENTIFIER||LA271_0==74||LA271_0==141||(LA271_0>=144 && LA271_0<=157)||(LA271_0>=159 && LA271_0<=161)||LA271_0==163||(LA271_0>=166 && LA271_0<=168)||LA271_0==179||LA271_0==204||LA271_0==211) ) {s = 25;}

                         
                        input.seek(index271_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA271_1 = input.LA(1);

                         
                        int index271_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred470_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index271_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA271_2 = input.LA(1);

                         
                        int index271_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred470_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index271_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA271_3 = input.LA(1);

                         
                        int index271_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred470_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index271_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA271_4 = input.LA(1);

                         
                        int index271_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred470_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index271_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA271_25 = input.LA(1);

                         
                        int index271_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred470_cs()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index271_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 271, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_namespace_body_in_compilation_unit146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_namespace_declaration155 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_qualified_identifier_in_namespace_declaration159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_namespace_block_in_namespace_declaration163 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_SEMI_in_namespace_declaration167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_namespace_block176 = new BitSet(new long[]{0x0000000010000040L,0x0000040083FFF340L,0x0024001000000000L});
    public static final BitSet FOLLOW_namespace_body_in_namespace_block180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_namespace_block185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directives_in_namespace_body194 = new BitSet(new long[]{0x0000000010000042L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_using_directives_in_namespace_body199 = new BitSet(new long[]{0x0000000010000002L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_global_attributes_in_namespace_body204 = new BitSet(new long[]{0x0000000010000002L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_namespace_member_declarations_in_namespace_body209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_extern_alias_directive227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_extern_alias_directive231 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_extern_alias_directive235 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_extern_alias_directive238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_directive_in_using_directives246 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_using_alias_directive_in_using_directive255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_namespace_directive_in_using_directive260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_alias_directive269 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_using_alias_directive273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_using_alias_directive277 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive281 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_using_alias_directive285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_namespace_directive293 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_namespace_name_in_using_namespace_directive297 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_using_namespace_directive301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations316 = new BitSet(new long[]{0x0000000010000002L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_namespace_member_declaration330 = new BitSet(new long[]{0x0000000010000000L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_modifiers_in_namespace_member_declaration335 = new BitSet(new long[]{0x0000000010000000L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_type_declaration_in_namespace_member_declaration340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_type_declaration374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0024001000000000L});
    public static final BitSet FOLLOW_class_declaration_in_type_declaration379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_type_declaration396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_type_declaration406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_type_declaration432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_type_declaration445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_type_declaration450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_type_declaration462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_declaration_in_type_declaration467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_qualified_identifier476 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_DOT_in_qualified_identifier479 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_qualified_identifier481 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_namespace_name492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_modifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers592 = new BitSet(new long[]{0x0000000000000002L,0x0000000003FFE200L});
    public static final BitSet FOLLOW_attributes_in_class_member_declaration605 = new BitSet(new long[]{0x0000000010004000L,0x000804008FFFF640L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_modifiers_in_class_member_declaration609 = new BitSet(new long[]{0x0000000010004000L,0x000804008FFFF640L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_90_in_class_member_declaration617 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_class_member_declaration621 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_constant_declarators_in_class_member_declaration625 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_class_member_declaration629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_declaration_in_class_member_declaration653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_class_member_declaration660 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C2FFFDBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_method_declaration_in_class_member_declaration663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_class_member_declaration674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_class_member_declaration692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_class_member_declaration712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_class_member_declaration718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_class_member_declaration733 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_method_declaration_in_class_member_declaration737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_class_member_declaration758 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000010000400L,0x0C4BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_method_declaration_in_class_member_declaration776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_declaration_in_class_member_declaration811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_class_member_declaration850 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_class_member_declaration852 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_indexer_declaration_in_class_member_declaration854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declaration_in_class_member_declaration864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_class_member_declaration877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declaration_in_class_member_declaration910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_class_member_declaration926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_class_member_declaration943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_class_member_declaration949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_declaration_in_class_member_declaration956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declaration_in_class_member_declaration962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_class_member_declaration967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_destructor_declaration_in_class_member_declaration983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_primary_expression1008 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_brackets_in_primary_expression1012 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1016 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_92_in_primary_expression1032 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_brackets_in_primary_expression1036 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1040 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_primary_expression_start_in_primary_expression1046 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1050 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_77_in_primary_expression1056 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_object_creation_expression_in_primary_expression1084 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_primary_expression_part_in_primary_expression1088 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_delegate_creation_expression_in_primary_expression1116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_creation_expression_in_primary_expression1124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_object_creation_expression_in_primary_expression1132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sizeof_expression_in_primary_expression1145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_expression_in_primary_expression1156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_expression_in_primary_expression1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_value_expression_in_primary_expression1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_method_expression_in_primary_expression1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_primary_expression_start1218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_primary_expression_start1246 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_generic_argument_list_in_primary_expression_start1250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_primary_expression_start1255 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_primary_expression_start1258 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_primary_expression_start1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_primary_expression_start1269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_primary_expression_start1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paren_expression_in_primary_expression_start1280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_expression_in_primary_expression_start1285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary_expression_start1303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_identifier_in_primary_expression_part1314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_or_arguments_in_primary_expression_part1319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_operator_in_access_identifier1327 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_type_or_generic_in_access_identifier1331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_access_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_brackets_or_arguments1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_brackets_or_arguments1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_brackets1365 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC350002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_list_in_brackets1369 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_brackets1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_paren_expression1384 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_paren_expression1388 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_paren_expression1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_arguments1401 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFF250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_argument_list_in_arguments1405 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_argument_list1419 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_argument_list1422 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFF250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_argument_in_argument_list1424 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_argument_name_in_argument1434 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFF250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_argument_value_in_argument1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_value_in_argument1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_argument_name1450 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_argument_name1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_argument_value1462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ref_variable_reference_in_argument_value1468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_argument_value1474 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_variable_reference_in_argument_value1478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_ref_variable_reference1486 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_97_in_ref_variable_reference1508 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_ref_variable_reference1512 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_ref_variable_reference1516 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFE250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_ref_variable_reference_in_ref_variable_reference1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_ref_variable_reference1525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_ref_variable_reference1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variable_reference1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_rank_specifiers1579 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_rank_specifier1597 = new BitSet(new long[]{0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_dim_separators_in_rank_specifier1601 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_rank_specifier1606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_dim_separators1615 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_type_name_in_delegate_creation_expression1628 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_delegate_creation_expression1632 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_name_in_delegate_creation_expression1636 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_delegate_creation_expression1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_anonymous_object_initializer1660 = new BitSet(new long[]{0x0000000000004000L,0x0000000400000500L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer1664 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000100L});
    public static final BitSet FOLLOW_98_in_anonymous_object_initializer1669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_anonymous_object_initializer1674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list1682 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_member_declarator_list1686 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_member_declarator_in_member_declarator_list1688 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_identifier_in_member_declarator1700 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000800L});
    public static final BitSet FOLLOW_generic_argument_list_in_member_declarator1705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_member_declarator1715 = new BitSet(new long[]{0x0000000000FFC000L,0x00000FC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_primary_or_array_creation_expression_in_member_declarator1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_member_declarator1729 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_member_declarator1733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_creation_expression_in_primary_or_array_creation_expression1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_in_primary_or_array_creation_expression1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_array_creation_expression1764 = new BitSet(new long[]{0x0000000000004000L,0x0000000088000480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_array_creation_expression1772 = new BitSet(new long[]{0x0000000000004000L,0x0000000088000480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_95_in_array_creation_expression1777 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_list_in_array_creation_expression1781 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_array_creation_expression1785 = new BitSet(new long[]{0x0000000003004002L,0x0000000288000480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_rank_specifiers_in_array_creation_expression1797 = new BitSet(new long[]{0x0000000000004002L,0x0000000088000480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_array_creation_expression1838 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_invocation_part_in_array_creation_expression1842 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_invocation_part_in_array_creation_expression1854 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_arguments_in_array_creation_expression1860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression1882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_specifier_in_array_creation_expression1896 = new BitSet(new long[]{0x0000000000004000L,0x0000000088000480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_array_initializer_in_array_creation_expression1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_array_initializer1926 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC6D8002580L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_variable_initializer_list_in_array_initializer1930 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000100L});
    public static final BitSet FOLLOW_98_in_array_initializer1935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_array_initializer1940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list1948 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_variable_initializer_list1951 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC2D8002480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_initializer_list1953 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_expression_in_variable_initializer1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_variable_initializer1967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_sizeof_expression1975 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_sizeof_expression1979 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unmanaged_type_in_sizeof_expression1983 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_sizeof_expression1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_checked_expression1995 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_checked_expression1999 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_checked_expression2003 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_checked_expression2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_unchecked_expression2016 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_unchecked_expression2020 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_unchecked_expression2024 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_unchecked_expression2028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_default_value_expression2037 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_default_value_expression2041 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_default_value_expression2045 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_default_value_expression2049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_anonymous_method_expression2057 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression2061 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_anonymous_method_expression2066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_explicit_anonymous_function_signature2073 = new BitSet(new long[]{0x0000000800004000L,0x0000003008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2077 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_explicit_anonymous_function_signature2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2090 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_explicit_anonymous_function_parameter_list2095 = new BitSet(new long[]{0x0000000000004000L,0x0000003008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2099 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2110 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_explicit_anonymous_function_parameter2115 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_explicit_anonymous_function_parameter2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_anonymous_function_parameter_modifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_object_creation_expression2143 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_97_in_object_creation_expression2152 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFF250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_argument_list_in_object_creation_expression2156 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_object_creation_expression2161 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000080L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression2176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_object_or_collection_initializer2188 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC650002580L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_object_initializer_in_object_or_collection_initializer2192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer2199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_initializer_list_in_collection_initializer2209 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000100L});
    public static final BitSet FOLLOW_98_in_collection_initializer2213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_collection_initializer2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2227 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_element_initializer_list2231 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC650002580L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_element_initializer_in_element_initializer_list2233 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_non_assignment_expression_in_element_initializer2244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_element_initializer2250 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_list_in_element_initializer2254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_element_initializer2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_initializer_list_in_object_initializer2273 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000100L});
    public static final BitSet FOLLOW_98_in_object_initializer2278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_object_initializer2283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list2292 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_member_initializer_list2296 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_member_initializer_in_member_initializer_list2298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_member_initializer2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_member_initializer2312 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_initializer_value_in_member_initializer2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_initializer_value2325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_or_collection_initializer_in_initializer_value2331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_typeof_expression2343 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_typeof_expression2347 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unbound_type_name_in_typeof_expression2358 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_typeof_expression2369 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_91_in_typeof_expression2381 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_typeof_expression2386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbound_type_name_start_in_unbound_type_name2401 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2420 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name2424 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name2431 = new BitSet(new long[]{0x0000000001000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_unbound_type_name_start2451 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_unbound_type_name_start2454 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_unbound_type_name_start2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_unbound_type_name_part2465 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_unbound_type_name_part2469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_generic_dimension_specifier2477 = new BitSet(new long[]{0x0000000008000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_commas_in_generic_dimension_specifier2481 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_GT_in_generic_dimension_specifier2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_commas2495 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_namespace_or_type_name_in_type_name2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name2519 = new BitSet(new long[]{0x0000000001000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_namespace_or_type_name2524 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name2526 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_DOT_in_namespace_or_type_name2531 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_type_or_generic_in_namespace_or_type_name2535 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_identifier_in_type_or_generic2555 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_generic_argument_list_in_type_or_generic2559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_or_generic2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qid_start_in_qid2590 = new BitSet(new long[]{0x0000000003000002L});
    public static final BitSet FOLLOW_qid_part_in_qid2594 = new BitSet(new long[]{0x0000000003000002L});
    public static final BitSet FOLLOW_predefined_type_in_qid_start2604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_qid_start2620 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_generic_argument_list_in_qid_start2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_qid_start2631 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_qid_start2636 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_qid_start2640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_qid_start2647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_identifier_in_qid_part2661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_generic_argument_list2671 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_arguments_in_generic_argument_list2675 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_GT_in_generic_argument_list2679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_type_arguments2688 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_type_arguments2691 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_type_arguments2693 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_predefined_type_in_type2722 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_type_name_in_type2726 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_type2731 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_type2735 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_predefined_type_in_type2764 = new BitSet(new long[]{0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_type_name_in_type2768 = new BitSet(new long[]{0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_109_in_type2774 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_110_in_type2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_type2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_type2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_type2796 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_type2798 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_predefined_type_in_non_nullable_type2809 = new BitSet(new long[]{0x0000000000000002L,0x0000200080000000L});
    public static final BitSet FOLLOW_type_name_in_non_nullable_type2813 = new BitSet(new long[]{0x0000000000000002L,0x0000200080000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_non_nullable_type2822 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_non_nullable_type2826 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_non_nullable_type2835 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_91_in_non_nullable_type2847 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_non_nullable_type2851 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_type_in_non_array_type2862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_array_type2869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_unmanaged_type2876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_class_type2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_pointer_type2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_block2902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_block2907 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042580L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_statement_list_in_block2911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_block2916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_statement_list2923 = new BitSet(new long[]{0x0000000424FFC042L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_assignment_in_expression2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_assignment_expression_in_expression2954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_list2963 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_expression_list2967 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_expression_list2971 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_unary_expression_in_assignment2981 = new BitSet(new long[]{0x0000000008000000L,0x1FF0000000000800L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment2985 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_assignment2989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_or_array_creation_expression_in_unary_expression3011 = new BitSet(new long[]{0x0000000000000002L,0x0001800000000000L});
    public static final BitSet FOLLOW_111_in_unary_expression3015 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_unary_expression3020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_unary_expression3026 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression3030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_expression3036 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression3040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_unary_expression3046 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_unary_expression3056 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression3060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_increment_expression_in_unary_expression3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_decrement_expression_in_unary_expression3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointer_indirection_expression_in_unary_expression3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addressof_expression_in_unary_expression3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_cast_expression3093 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_cast_expression3097 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_cast_expression3101 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_assignment_operator3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_assignment_operator3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_assignment_operator3121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_assignment_operator3125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_assignment_operator3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_assignment_operator3133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_assignment_operator3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_assignment_operator3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_assignment_operator3145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_assignment_operator3149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignment_operator3153 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_assignment_operator3155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_pre_increment_expression3164 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_pre_increment_expression3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_pre_decrement_expression3177 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_pre_decrement_expression3181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_pointer_indirection_expression3189 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_pointer_indirection_expression3193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_addressof_expression3201 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_addressof_expression3205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_non_assignment_expression3226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_non_assignment_expression3237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_expression_in_non_assignment_expression3243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3257 = new BitSet(new long[]{0x0000000000000002L,0x8000200000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_multiplicative_expression3262 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_multiplicative_expression3272 = new BitSet(new long[]{0x0000000000000002L,0x8000200000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression3282 = new BitSet(new long[]{0x0000000004000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_set_in_additive_expression3285 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression3293 = new BitSet(new long[]{0x0000000004000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3304 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_shift_expression3308 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_GT_in_shift_expression3310 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_GT_in_shift_expression3312 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression3315 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3325 = new BitSet(new long[]{0x0000000008000002L,0x2000100000000000L,0x000000000000001CL});
    public static final BitSet FOLLOW_set_in_relational_expression3332 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression3342 = new BitSet(new long[]{0x0000000008000002L,0x2000100000000000L,0x000000000000001CL});
    public static final BitSet FOLLOW_set_in_relational_expression3351 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_non_nullable_type_in_relational_expression3359 = new BitSet(new long[]{0x0000000008000002L,0x2000100000000000L,0x000000000000001CL});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3373 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_set_in_equality_expression3380 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression3388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression3398 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_and_expression3401 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression3405 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression3415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_exclusive_or_expression3418 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression3422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression3432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_inclusive_or_expression3437 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression3441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression3451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_conditional_and_expression3456 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression3460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression3470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_conditional_or_expression3474 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression3478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression3489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_null_coalescing_expression3494 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression3498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_null_coalescing_expression_in_conditional_expression3508 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_110_in_conditional_expression3513 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_conditional_expression3517 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_conditional_expression3521 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_conditional_expression3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_signature_in_lambda_expression3545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_lambda_expression3549 = new BitSet(new long[]{0x0000000404FFC000L,0x400FAFC250002480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_anonymous_function_body_in_lambda_expression3553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_anonymous_function_signature3560 = new BitSet(new long[]{0x0000000800004000L,0x0000003208000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_anonymous_function_signature3563 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3569 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_anonymous_function_signature3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_anonymous_function_signature3578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3587 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_implicit_anonymous_function_parameter_list3592 = new BitSet(new long[]{0x0000000000004000L,0x0000000200000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3596 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_identifier_in_implicit_anonymous_function_parameter3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_anonymous_function_body3613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_anonymous_function_body3618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_clause_in_query_expression3630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000005994000L});
    public static final BitSet FOLLOW_query_body_in_query_expression3634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clauses_in_query_body3644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000005994000L});
    public static final BitSet FOLLOW_select_or_group_clause_in_query_body3649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_query_continuation_in_query_body3660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_query_continuation3670 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_query_continuation3674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000005994000L});
    public static final BitSet FOLLOW_query_body_in_query_continuation3678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_body_clause_in_query_body_clauses3685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004194000L});
    public static final BitSet FOLLOW_from_clause_in_query_body_clause3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_let_clause_in_query_body_clause3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_query_body_clause3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_query_body_clause3709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderby_clause_in_query_body_clause3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_from_clause3721 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_from_clause3725 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_from_clause3730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_from_clause3734 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_from_clause3738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_join_clause3746 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_join_clause3750 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_join_clause3755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_join_clause3759 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_join_clause3763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_join_clause3767 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_join_clause3771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_146_in_join_clause3775 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_join_clause3779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_join_clause3782 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_join_clause3784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_let_clause3794 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_let_clause3798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_let_clause3802 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_let_clause3806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_orderby_clause3813 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_ordering_list_in_orderby_clause3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordering_in_ordering_list3825 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_ordering_list3830 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_ordering_in_ordering_list3834 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_expression_in_ordering3844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_ordering_direction_in_ordering3849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ordering_direction0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_clause_in_select_or_group_clause3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_select_or_group_clause3876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_select_clause3884 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_select_clause3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_group_clause3896 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_group_clause3900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_group_clause3904 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_group_clause3908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_where_clause3916 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_booleanean_expression_in_where_clause3920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_booleanean_expression3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_in_global_attributes3940 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_global_attribute3950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute3954 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attribute_list_in_global_attribute3958 = new BitSet(new long[]{0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_98_in_global_attribute3962 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_global_attribute3967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier3976 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_global_attribute_target_specifier3980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_global_attribute_target0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_sections_in_attributes4002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_section_in_attribute_sections4011 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_attribute_section4021 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCFFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attribute_target_specifier_in_attribute_section4025 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attribute_list_in_attribute_section4030 = new BitSet(new long[]{0x0000000000000000L,0x0000000500000000L});
    public static final BitSet FOLLOW_98_in_attribute_section4034 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_attribute_section4039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_target_in_attribute_target_specifier4048 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_attribute_target_specifier4052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_attribute_target0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_in_attribute_list4094 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_attribute_list4097 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attribute_in_attribute_list4099 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_type_name_in_attribute4111 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_attribute_arguments_in_attribute4115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_attribute_arguments4126 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_RPAREN_in_attribute_arguments4131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_positional_argument_in_attribute_arguments4151 = new BitSet(new long[]{0x0000000800004000L,0x0000000400000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_named_argument_in_attribute_arguments4170 = new BitSet(new long[]{0x0000000800004000L,0x0000000400000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_98_in_attribute_arguments4186 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_positional_argument_in_attribute_arguments4188 = new BitSet(new long[]{0x0000000800004000L,0x0000000400000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_RPAREN_in_attribute_arguments4199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list4213 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_positional_argument_list4216 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_positional_argument_in_positional_argument_list4218 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_positional_argument4229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list4238 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_named_argument_list4241 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_named_argument_in_named_argument_list4243 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_identifier_in_named_argument4254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_named_argument4258 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attribute_argument_expression_in_named_argument4262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_attribute_argument_expression4271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_class_declaration4284 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_type_or_generic_in_class_declaration4287 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_class_base_in_class_declaration4291 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration4296 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_class_body_in_class_declaration4301 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_SEMI_in_class_declaration4305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_class_base4339 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_interface_type_list_in_class_base4343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interface_type_list4353 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_interface_type_list4356 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_interface_type_list4360 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_71_in_class_body4371 = new BitSet(new long[]{0x0000000010004000L,0x000804008FFFF740L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_class_member_declarations_in_class_body4375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_class_body4380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_member_declaration_in_class_member_declarations4387 = new BitSet(new long[]{0x0000000010004002L,0x000804008FFFF640L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_90_in_constant_declaration4398 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_constant_declaration4402 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_constant_declarators_in_constant_declaration4406 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_constant_declaration4410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators4418 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_constant_declarators4421 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_constant_declarator_in_constant_declarators4423 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_identifier_in_constant_declarator4433 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_constant_declarator4438 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_constant_expression_in_constant_declarator4442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constant_expression4452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarators_in_field_declaration4461 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_field_declaration4465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators4479 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_variable_declarators4482 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_variable_declarator_in_variable_declarators4486 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_type_name_in_variable_declarator4496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_variable_declarator4499 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC2D8002480L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_variable_initializer_in_variable_declarator4503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_in_method_declaration4517 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_method_body_in_method_declaration4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_method_header4538 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_method_header4541 = new BitSet(new long[]{0x0000000800004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_method_header4545 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_method_header4550 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header4554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_method_body4563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qid_in_member_name4571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_property_declaration4583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_property_declaration4587 = new BitSet(new long[]{0x0000000000000000L,0x000000008003C000L,0x0000006000000000L});
    public static final BitSet FOLLOW_accessor_declarations_in_property_declaration4591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_property_declaration4595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations4603 = new BitSet(new long[]{0x0000000000000000L,0x000000008003C000L,0x0000006000000000L});
    public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations4609 = new BitSet(new long[]{0x0000000000000002L,0x000000008003C000L,0x0000006000000000L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations4613 = new BitSet(new long[]{0x0000000000000002L,0x000000008003C000L,0x0000006000000000L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations4625 = new BitSet(new long[]{0x0000000000000002L,0x000000008003C000L,0x0000002000000000L});
    public static final BitSet FOLLOW_attributes_in_accessor_declarations4629 = new BitSet(new long[]{0x0000000000000002L,0x000000000003C000L,0x0000002000000000L});
    public static final BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration4644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_get_accessor_declaration4649 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_accessor_body_in_get_accessor_declaration4653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration4661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_set_accessor_declaration4666 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_accessor_body_in_set_accessor_declaration4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_accessor_modifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_accessor_body4698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_event_declaration4708 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_event_declaration4712 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_member_name_in_event_declaration4727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_event_declaration4731 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_event_accessor_declarations_in_event_declaration4735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_event_declaration4739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declarators_in_event_declaration4745 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_event_declaration4749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_event_modifiers4761 = new BitSet(new long[]{0x0000000000000002L,0x0000000003FFE200L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations4770 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations4777 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations4781 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations4807 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_attributes_in_event_accessor_declarations4811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_add_accessor_declaration4826 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_add_accessor_declaration4830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_remove_accessor_declaration4838 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_remove_accessor_declaration4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enum_declaration4854 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_enum_declaration4858 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L});
    public static final BitSet FOLLOW_enum_base_in_enum_declaration4862 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L});
    public static final BitSet FOLLOW_enum_body_in_enum_declaration4867 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_SEMI_in_enum_declaration4871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_enum_base4880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0003FE0000000000L});
    public static final BitSet FOLLOW_integral_type_in_enum_base4884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_enum_body4892 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000500L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_enum_member_declarations_in_enum_body4895 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000100L});
    public static final BitSet FOLLOW_98_in_enum_body4897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_enum_body4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations4912 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_enum_member_declarations4915 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations4917 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_attributes_in_enum_member_declaration4927 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_enum_member_declaration4932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_enum_member_declaration4937 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_enum_member_declaration4941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_integral_type0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_delegate_declaration4998 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_return_type_in_delegate_declaration5002 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_delegate_declaration5006 = new BitSet(new long[]{0x0000000000000000L,0x0000100200000000L});
    public static final BitSet FOLLOW_variant_generic_parameter_list_in_delegate_declaration5009 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_delegate_declaration5017 = new BitSet(new long[]{0x0000000800004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_delegate_declaration5021 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_delegate_declaration5026 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5030 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_delegate_declaration5035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_delegate_modifiers5043 = new BitSet(new long[]{0x0000000000000002L,0x0000000003FFE200L});
    public static final BitSet FOLLOW_108_in_variant_generic_parameter_list5053 = new BitSet(new long[]{0x0000000000004000L,0x0000001080000400L,0x0C0801CBBFFFE000L,0x0000000000081000L});
    public static final BitSet FOLLOW_variant_type_parameters_in_variant_generic_parameter_list5057 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_GT_in_variant_generic_parameter_list5061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters5069 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_variant_type_parameters5072 = new BitSet(new long[]{0x0000000000004000L,0x0000001080000400L,0x0C0801CBBFFFE000L,0x0000000000081000L});
    public static final BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters5074 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_attributes_in_variant_type_variable_name5084 = new BitSet(new long[]{0x0000000000004000L,0x0000001080000400L,0x0C0801CBBFFFE000L,0x0000000000081000L});
    public static final BitSet FOLLOW_variance_annotation_in_variant_type_variable_name5089 = new BitSet(new long[]{0x0000000000004000L,0x0000001080000400L,0x0C0801CBBFFFE000L,0x0000000000081000L});
    public static final BitSet FOLLOW_type_variable_name_in_variant_type_variable_name5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_variance_annotation0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5115 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_type_parameter_constraints_clauses5120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses5124 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_154_in_type_parameter_constraints_clause5134 = new BitSet(new long[]{0x0000000000004000L,0x0000001080000400L,0x0C0801CBBFFFE000L,0x0000000000081000L});
    public static final BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause5138 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_type_parameter_constraints_clause5142 = new BitSet(new long[]{0x0000000000004000L,0x0000000000002400L,0x0C0FFFDBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause5146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_type_parameter_constraint_list5209 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_type_parameter_constraint_list5220 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5224 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_type_parameter_constraint_list5231 = new BitSet(new long[]{0x0000000000004000L,0x0000000000002400L,0x0C0FFFDBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list5235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list5242 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_type_parameter_constraint_list5247 = new BitSet(new long[]{0x0000000000004000L,0x0000000000002400L,0x0C0FFFDBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list5251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list5270 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_secondary_constraint_list5273 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list5275 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_type_name_in_secondary_constraint5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_variable_name5295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_constructor_constraint5303 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_constructor_constraint5307 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_constraint5311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_return_type5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_return_type5325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formal_parameter_in_formal_parameter_list5332 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_formal_parameter_list5335 = new BitSet(new long[]{0x0000000000004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_formal_parameter_in_formal_parameter_list5337 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_attributes_in_formal_parameter5347 = new BitSet(new long[]{0x0000000000004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_fixed_parameter_in_formal_parameter5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_array_in_formal_parameter5357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_formal_parameter5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters5372 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_fixed_parameters5377 = new BitSet(new long[]{0x0000000000004000L,0x0000003018000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_fixed_parameter_in_fixed_parameters5381 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_parameter_modifier_in_fixed_parameter5392 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_fixed_parameter5397 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_fixed_parameter5401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_default_argument_in_fixed_parameter5405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_default_argument5415 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_default_argument5417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_parameter_modifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_parameter_array5440 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_parameter_array5444 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_parameter_array5448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_interface_declaration5458 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_interface_declaration5462 = new BitSet(new long[]{0x0000000000000000L,0x0000100800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_variant_generic_parameter_list_in_interface_declaration5466 = new BitSet(new long[]{0x0000000000000000L,0x0000100800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_interface_base_in_interface_declaration5469 = new BitSet(new long[]{0x0000000000000000L,0x0000100800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration5474 = new BitSet(new long[]{0x0000000000000000L,0x0000100800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_interface_body_in_interface_declaration5479 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_SEMI_in_interface_declaration5483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interface_modifiers5515 = new BitSet(new long[]{0x0000000000000002L,0x0000000003FFE200L});
    public static final BitSet FOLLOW_99_in_interface_base5528 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_interface_type_list_in_interface_base5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_interface_body5538 = new BitSet(new long[]{0x0000000000004000L,0x000000008BFFE700L,0x0C0BFFCBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_interface_member_declarations_in_interface_body5542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_interface_body5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations5563 = new BitSet(new long[]{0x0000000000004002L,0x000000008BFFE600L,0x0C0BFFCBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attributes_in_interface_member_declaration5572 = new BitSet(new long[]{0x0000000000004000L,0x000000000BFFE600L,0x0C0BFFCBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_modifiers_in_interface_member_declaration5578 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_91_in_interface_member_declaration5584 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration5588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_event_declaration_in_interface_member_declaration5594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interface_member_declaration5600 = new BitSet(new long[]{0x0000000000004000L,0x0000000010000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_property_declaration_in_interface_member_declaration5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_indexer_declaration_in_interface_member_declaration5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_interface_property_declaration5668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_interface_property_declaration5672 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_interface_accessor_declarations_in_interface_property_declaration5676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_interface_property_declaration5680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_interface_method_declaration5688 = new BitSet(new long[]{0x0000000000000000L,0x0000100200000000L});
    public static final BitSet FOLLOW_generic_argument_list_in_interface_method_declaration5692 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_interface_method_declaration5695 = new BitSet(new long[]{0x0000000800004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration5699 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_interface_method_declaration5704 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration5708 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_method_declaration5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_interface_event_declaration5754 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_interface_event_declaration5758 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_interface_event_declaration5762 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_event_declaration5766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_interface_indexer_declaration5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_interface_indexer_declaration5782 = new BitSet(new long[]{0x0000000000004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration5786 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_interface_indexer_declaration5790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_interface_indexer_declaration5794 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration5798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_interface_indexer_declaration5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations5810 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5819 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations5823 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations5835 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_attributes_in_interface_accessor_declarations5839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations5844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_interface_get_accessor_declaration5854 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_get_accessor_declaration5858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_interface_set_accessor_declaration5868 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_interface_set_accessor_declaration5872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_method_modifiers5882 = new BitSet(new long[]{0x0000000000000002L,0x0000000003FFE200L});
    public static final BitSet FOLLOW_178_in_struct_declaration5894 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_type_or_generic_in_struct_declaration5898 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_struct_interfaces_in_struct_declaration5902 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration5907 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000080L,0x0000000004000000L});
    public static final BitSet FOLLOW_struct_body_in_struct_declaration5912 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_SEMI_in_struct_declaration5916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_modifier_in_struct_modifiers5925 = new BitSet(new long[]{0x0000000000000002L,0x000000000007E000L});
    public static final BitSet FOLLOW_set_in_struct_modifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_struct_interfaces5962 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_interface_type_list_in_struct_interfaces5966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_struct_body5973 = new BitSet(new long[]{0x0000000010004000L,0x000004008FFFF740L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_struct_member_declarations_in_struct_body5977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_struct_body5982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations5989 = new BitSet(new long[]{0x0000000010004002L,0x000004008FFFF640L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attributes_in_struct_member_declaration5998 = new BitSet(new long[]{0x0000000010004000L,0x000004008FFFF640L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_modifiers_in_struct_member_declaration6005 = new BitSet(new long[]{0x0000000010004000L,0x000004008FFFF640L,0x0DAFFFDBFFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_90_in_struct_member_declaration6011 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_struct_member_declaration6015 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_constant_declarators_in_struct_member_declaration6019 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_struct_member_declaration6023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_event_declaration_in_struct_member_declaration6028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_struct_member_declaration6035 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C2FFFDBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration6038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_struct_member_declaration6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_struct_member_declaration6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_struct_member_declaration6085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_struct_member_declaration6092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_declaration_in_struct_member_declaration6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_struct_member_declaration6124 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration6128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_struct_member_declaration6133 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000010000400L,0x0C4BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_method_declaration_in_struct_member_declaration6147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_declaration_in_struct_member_declaration6166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_struct_member_declaration6189 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_struct_member_declaration6191 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_indexer_declaration_in_struct_member_declaration6193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declaration_in_struct_member_declaration6202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_struct_member_declaration6215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declaration_in_struct_member_declaration6233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_declaration_in_struct_member_declaration6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_struct_member_declaration6257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_declaration_in_struct_member_declaration6264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declaration_in_struct_member_declaration6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_struct_member_declaration6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexer_declarator_in_indexer_declaration6292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_indexer_declaration6296 = new BitSet(new long[]{0x0000000000000000L,0x000000008003C000L,0x0000006000000000L});
    public static final BitSet FOLLOW_accessor_declarations_in_indexer_declaration6300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_indexer_declaration6304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_indexer_declarator6314 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_indexer_declarator6318 = new BitSet(new long[]{0x0000000000004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_indexer_declarator6322 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_indexer_declarator6326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_declarator_in_operator_declaration6337 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_operator_body_in_operator_declaration6341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_operator_declarator6349 = new BitSet(new long[]{0x000000000C600000L,0xE00FB00000000000L,0x00000000000001E7L});
    public static final BitSet FOLLOW_set_in_operator_declarator6357 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_operator_declarator6367 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_operator_declarator6371 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_operator_declarator6375 = new BitSet(new long[]{0x0000000800000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator6378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator6382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_overloadable_unary_operator_in_operator_declarator6389 = new BitSet(new long[]{0x0000000800000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_unary_operator_declarator_in_operator_declarator6393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_overloadable_binary_operator_in_operator_declarator6399 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_binary_operator_declarator_in_operator_declarator6403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_unary_operator_declarator6415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_overloadable_unary_operator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_binary_operator_declarator6458 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_binary_operator_declarator6462 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_binary_operator_declarator6466 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_binary_operator_declarator6470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_overloadable_binary_operator6481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_overloadable_binary_operator6485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_overloadable_binary_operator6489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_overloadable_binary_operator6493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_overloadable_binary_operator6497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_overloadable_binary_operator6501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_overloadable_binary_operator6505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator6509 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator6511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_overloadable_binary_operator6515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_overloadable_binary_operator6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_overloadable_binary_operator6523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_overloadable_binary_operator6527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_overloadable_binary_operator6531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_overloadable_binary_operator6535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_operator_declarator_in_conversion_operator_declaration6545 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_operator_body_in_conversion_operator_declaration6549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_conversion_operator_declarator6557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_conversion_operator_declarator6566 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator6570 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_conversion_operator_declarator6574 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_conversion_operator_declarator6578 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_conversion_operator_declarator6582 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_conversion_operator_declarator6586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_operator_body6594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_constructor_declaration6604 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_constructor_body_in_constructor_declaration6608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_constructor_declarator6616 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_constructor_declarator6620 = new BitSet(new long[]{0x0000000800004000L,0x0000003098000400L,0x0C1BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_formal_parameter_list_in_constructor_declarator6624 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_declarator6629 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_constructor_initializer_in_constructor_declarator6633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_constructor_initializer6642 = new BitSet(new long[]{0x0000000000000000L,0x0000000050000000L});
    public static final BitSet FOLLOW_set_in_constructor_initializer6646 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_constructor_initializer6656 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFF250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_argument_list_in_constructor_initializer6660 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_constructor_initializer6665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_constructor_body6673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_destructor_declaration6689 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_destructor_declaration6692 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_destructor_declaration6696 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_destructor_declaration6700 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_destructor_body_in_destructor_declaration6705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_destructor_body6713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invocation_start_in_invocation_expression6723 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_arguments_in_invocation_expression6745 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_invocation_part_in_invocation_expression6749 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_invocation_part_in_invocation_expression6760 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_arguments_in_invocation_expression6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_invocation_start6774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_invocation_start6791 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_generic_argument_list_in_invocation_start6795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_invocation_start6800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_invocation_start6806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_invocation_start6811 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_invocation_start6816 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_invocation_start6820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_expression_in_invocation_start6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_identifier_in_invocation_part6850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_invocation_part6855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_statement6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_labeled_statement_in_statement6887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_embedded_statement_in_statement6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_embedded_statement6902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_embedded_statement6907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_embedded_statement6913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_embedded_statement6919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_statement_in_embedded_statement6926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checked_statement_in_embedded_statement6931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unchecked_statement_in_embedded_statement6936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_statement_in_embedded_statement6941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_statement_in_embedded_statement6946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_statement_in_embedded_statement6952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unsafe_statement_in_embedded_statement6958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_statement_in_embedded_statement6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_embedded_statement6968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_fixed_statement6978 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_fixed_statement6982 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_pointer_type_in_fixed_statement6986 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement6988 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_fixed_statement6992 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_fixed_statement6996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7004 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_fixed_pointer_declarators7009 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators7013 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_identifier_in_fixed_pointer_declarator7023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_fixed_pointer_declarator7027 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator7031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_fixed_pointer_initializer7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_unsafe_statement7048 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_unsafe_statement7052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_labeled_statement7059 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_labeled_statement7063 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_statement_in_labeled_statement7067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_declaration_statement7076 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_local_constant_declaration_in_declaration_statement7082 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_declaration_statement7085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_type_in_local_variable_declaration7093 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration7097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_local_variable_type7111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_local_variable_type7122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_local_variable_type7127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators7135 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_local_variable_declarators7138 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators7140 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_identifier_in_local_variable_declarator7150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_local_variable_declarator7153 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC2D8002480L,0x1C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator7157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_local_variable_initializer7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_initializer_in_local_variable_initializer7173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer7179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_stackalloc_initializer7186 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer7190 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_95_in_stackalloc_initializer7194 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_stackalloc_initializer7198 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_stackalloc_initializer7202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_local_constant_declaration7210 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_local_constant_declaration7214 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_constant_declarators_in_local_constant_declaration7218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_statement7226 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_expression_statement7230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement_expression7240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_selection_statement7249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_statement_in_selection_statement7254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement7264 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_if_statement7268 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_booleanean_expression_in_if_statement7272 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_if_statement7276 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_if_statement7280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_else_statement_in_if_statement7289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_else_statement7300 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_else_statement7304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_switch_statement7312 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_switch_statement7316 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_switch_statement7320 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_switch_statement7324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_switch_block_in_switch_statement7328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_switch_block7336 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000100L,0x8000000000000000L});
    public static final BitSet FOLLOW_switch_sections_in_switch_block7340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_switch_block7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_section_in_switch_sections7353 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_switch_labels_in_switch_section7362 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_statement_list_in_switch_section7366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_label_in_switch_labels7374 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_switch_label7384 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_constant_expression_in_switch_label7388 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_switch_label7392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_switch_label7399 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_switch_label7403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_statement_in_iteration_statement7412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_statement_in_iteration_statement7417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_statement_in_iteration_statement7422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_iteration_statement7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_while_statement7435 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_while_statement7439 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_booleanean_expression_in_while_statement7443 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_while_statement7447 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_while_statement7451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_do_statement7459 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_do_statement7463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_do_statement7467 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_do_statement7471 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_booleanean_expression_in_do_statement7475 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_do_statement7479 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_do_statement7483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_for_statement7491 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_for_statement7495 = new BitSet(new long[]{0x0000000404FFC000L,0x400FAFC258002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_for_initializer_in_for_statement7499 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_for_statement7504 = new BitSet(new long[]{0x0000000404FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_for_condition_in_for_statement7508 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_for_statement7513 = new BitSet(new long[]{0x0000000804FFC000L,0x400FAFC258002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_for_iterator_in_for_statement7517 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_for_statement7522 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_for_statement7526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_for_initializer7540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_initializer7545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanean_expression_in_for_condition7555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_list_in_for_iterator7563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list7571 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_statement_expression_list7574 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC258002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_statement_expression_in_statement_expression_list7576 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_195_in_foreach_statement7586 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_foreach_statement7590 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_local_variable_type_in_foreach_statement7594 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_foreach_statement7598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_foreach_statement7602 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_foreach_statement7606 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_foreach_statement7610 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_foreach_statement7614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_statement_in_jump_statement7622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_jump_statement7627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_jump_statement7632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_jump_statement7637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_statement_in_jump_statement7642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_break_statement7650 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_break_statement7654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_continue_statement7662 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_continue_statement7666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_goto_statement7674 = new BitSet(new long[]{0x0000000000004000L,0x0000020000000400L,0x8C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_goto_statement7680 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_191_in_goto_statement7688 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_constant_expression_in_goto_statement7692 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_105_in_goto_statement7700 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_goto_statement7705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_return_statement7713 = new BitSet(new long[]{0x0000000404FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_return_statement7717 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_return_statement7722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_throw_statement7730 = new BitSet(new long[]{0x0000000404FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_throw_statement7734 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_throw_statement7739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_try_statement7752 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_try_statement7756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_catch_clauses_in_try_statement7762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_finally_clause_in_try_statement7766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finally_clause_in_try_statement7778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_catch_clauses7787 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_specific_catch_clauses_in_catch_clauses7792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_catch_clause_in_catch_clauses7796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses7805 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_specific_catch_clauses7810 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses7815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_general_catch_clause_in_specific_catch_clauses7819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_97_in_specific_catch_clause7829 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_class_type_in_specific_catch_clause7833 = new BitSet(new long[]{0x0000000800004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_specific_catch_clause7837 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_specific_catch_clause7842 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_specific_catch_clause7846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_general_catch_clause7854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_finally_clause7862 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_finally_clause7866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_checked_statement7874 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_checked_statement7878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_unchecked_statement7886 = new BitSet(new long[]{0x0000000400000000L,0x0000000200000080L});
    public static final BitSet FOLLOW_block_in_unchecked_statement7890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_lock_statement7898 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_lock_statement7902 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_lock_statement7905 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_lock_statement7909 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_lock_statement7913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_using_statement7921 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_using_statement7925 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC258002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_resource_acquisition_in_using_statement7930 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_using_statement7934 = new BitSet(new long[]{0x0000000424FFC040L,0x400FAFC25C042480L,0x4E0BFFCFBFFF6000L,0x00000000000FF9FFL});
    public static final BitSet FOLLOW_embedded_statement_in_using_statement7939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_resource_acquisition7953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_resource_acquisition7958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_yield_statement7966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_162_in_yield_statement7971 = new BitSet(new long[]{0x0000000004FFC000L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_yield_statement7975 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_yield_statement7979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_yield_statement7994 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_yield_statement7998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_predefined_type0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_identifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_keyword0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_also_keyword0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_assignment_list10691 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_assignment_list10693 = new BitSet(new long[]{0x0000000004FFC002L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attributes_in_field_declarations10704 = new BitSet(new long[]{0x0000000000004000L,0x000000000BFFE600L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_modifiers_in_field_declarations10709 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_field_declarations10714 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_field_declaration_in_field_declarations10718 = new BitSet(new long[]{0x0000000000004002L,0x000000008BFFE600L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attributes_in_property_declaration_list10729 = new BitSet(new long[]{0x0000000000004000L,0x000000000BFFE600L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_modifiers_in_property_declaration_list10734 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_property_declaration_list10739 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_property_declaration_in_property_declaration_list10743 = new BitSet(new long[]{0x0000000000004002L,0x000000008BFFE600L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_constant_declaration_in_constant_declarations10753 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_literal_in_literals10761 = new BitSet(new long[]{0x0000000000FFC002L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_attributes_in_delegate_declaration_list10771 = new BitSet(new long[]{0x0000000010000000L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_modifiers_in_delegate_declaration_list10776 = new BitSet(new long[]{0x0000000010000000L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_delegate_declaration_in_delegate_declaration_list10781 = new BitSet(new long[]{0x0000000010000002L,0x0000040083FFF240L,0x0024001000000000L});
    public static final BitSet FOLLOW_local_variable_declaration_in_local_variable_declaration_list10792 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_local_variable_declaration_list10794 = new BitSet(new long[]{0x0000000000004002L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_local_variable_initializer_in_local_variable_initializer_list10805 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_local_variable_initializer_list10807 = new BitSet(new long[]{0x0000000004FFC002L,0x400FAFC2D8002480L,0x1C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_expression_in_expression_list_test10818 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_expression_list_test10820 = new BitSet(new long[]{0x0000000004FFC002L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression_list10831 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_unary_expression_list10833 = new BitSet(new long[]{0x0000000004FFC002L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_invocation_expression_in_invocation_expression_list10844 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_invocation_expression_list10846 = new BitSet(new long[]{0x0000000000004002L,0x0000080050000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_primary_expression_in_primary_expression_list10857 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_primary_expression_list10859 = new BitSet(new long[]{0x0000000000FFC002L,0x00000FC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_non_assignment_expression_in_non_assignment_expression_list10870 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_in_non_assignment_expression_list10872 = new BitSet(new long[]{0x0000000004FFC002L,0x400FAFC250002400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_modifiers_in_method_declarations10883 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_91_in_method_declarations10887 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_method_declarations10891 = new BitSet(new long[]{0x0000000000FFC000L,0x0000000000000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_method_declaration_in_method_declarations10894 = new BitSet(new long[]{0x0000000000004002L,0x000000000BFFE600L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_76_in_synpred13_cs369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred45_cs767 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_synpred45_cs771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred46_cs802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred46_cs806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred47_cs837 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_synpred47_cs841 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_synpred47_cs845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_synpred49_cs877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_synpred57_cs998 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_brackets_in_synpred57_cs1003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_synpred59_cs1023 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_brackets_in_synpred59_cs1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_expression_start_in_synpred62_cs1046 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_primary_expression_part_in_synpred62_cs1050 = new BitSet(new long[]{0x0000000003000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_object_creation_expression_in_synpred65_cs1063 = new BitSet(new long[]{0x0000000003000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_set_in_synpred65_cs1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delegate_creation_expression_in_synpred67_cs1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_creation_expression_in_synpred68_cs1124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred75_cs1236 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_synpred75_cs1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred77_cs1255 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_synpred77_cs1258 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_synpred77_cs1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_synpred91_cs1493 = new BitSet(new long[]{0x0000000000004000L,0x0000000008000400L,0x0C0BFFCBBFFF6000L,0x00000000000FF000L});
    public static final BitSet FOLLOW_type_in_synpred91_cs1497 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred91_cs1501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_creation_expression_in_synpred101_cs1743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred108_cs1838 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_invocation_part_in_synpred108_cs1842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbound_type_name_in_synpred131_cs2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred141_cs2546 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_synpred141_cs2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred144_cs2610 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_synpred144_cs2615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_synpred149_cs2708 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_type_name_in_synpred149_cs2712 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_rank_specifiers_in_synpred149_cs2716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_synpred155_cs2743 = new BitSet(new long[]{0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_type_name_in_synpred155_cs2747 = new BitSet(new long[]{0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_109_in_synpred155_cs2752 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_110_in_synpred155_cs2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predefined_type_in_synpred160_cs2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_synpred160_cs2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_synpred172_cs2939 = new BitSet(new long[]{0x0000000008000000L,0x1FF0000000000800L});
    public static final BitSet FOLLOW_assignment_operator_in_synpred172_cs2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_synpred174_cs3001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_or_array_creation_expression_in_synpred177_cs3011 = new BitSet(new long[]{0x0000000000000002L,0x0001800000000000L});
    public static final BitSet FOLLOW_111_in_synpred177_cs3015 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_synpred177_cs3020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anonymous_function_signature_in_synpred195_cs3217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred195_cs3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_expression_in_synpred196_cs3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_synpred225_cs3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_synpred252_cs4157 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000400L,0x0C0801CBBFFF6000L,0x0000000000081000L});
    public static final BitSet FOLLOW_identifier_in_synpred252_cs4161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_synpred252_cs4165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred279_cs4718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred279_cs4722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred337_cs5607 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_synpred337_cs5611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred338_cs5632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred338_cs5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred371_cs6138 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_synpred371_cs6142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred372_cs6157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred372_cs6161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_name_in_synpred373_cs6176 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_synpred373_cs6180 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_synpred373_cs6184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_synpred375_cs6215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred411_cs6745 = new BitSet(new long[]{0x0000000003000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_invocation_part_in_synpred411_cs6749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred414_cs6781 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_synpred414_cs6786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_synpred420_cs6867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred421_cs6878 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_synpred421_cs6882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_synpred436_cs7106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred437_cs7117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_synpred443_cs7284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred454_cs7535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_local_variable_declaration_in_synpred470_cs7948 = new BitSet(new long[]{0x0000000000000002L});

}