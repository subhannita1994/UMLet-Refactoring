
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
}

PARSER_BEGIN(CSharpParser)

import java.io.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class CSharpParser
{
   /**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int PRIVATE = 0x0004;
     public static final int ABSTRACT = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int FINAL = 0x0020;
     public static final int SYNCHRONIZED = 0x0040;
     public static final int NATIVE = 0x0080;
     public static final int TRANSIENT = 0x0100;
     public static final int VOLATILE = 0x0200;
     public static final int STRICTFP = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public boolean isFinal(int modifiers)
     {
       return (modifiers & FINAL) != 0;
     }

     public boolean isNative(int modifiers)
     {
       return (modifiers & NATIVE) != 0;
     }

     public boolean isStrictfp(int modifiers)
     {
       return (modifiers & STRICTFP) != 0;
     }

     public boolean isSynchronized(int modifiers)
     {
       return (modifiers & SYNCHRONIZED) != 0;
     }

     public boolean isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public boolean isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

   public CSharpParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    CSharpParser parser;
    if (args.length == 0) {
      System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
      parser = new CSharpParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new CSharpParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 1.1:  Usage is one of:");
      System.out.println("         java CSharpParser < inputfile");
      System.out.println("OR");
      System.out.println("         java CSharpParser inputfile");
      return;
    }
    try {
      parser.CompilationUnit();
      System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
    }
  }

}

PARSER_END(CSharpParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* LITERALS */

TOKEN :
{
  < Literal: "true"
    |        "false"
    |        <DecLiteral>
    |        <HexLiteral>
    |        <RealLiteral>
    |        <CharLiteral>
    |        <StringLiteral>
    |        "null">
|
  < DecLiteral: ["1"-"9"] (["0"-"9"])* >
|
  < HexLiteral: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < RealLiteral:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CharLiteral:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < StringLiteral:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


/* IDENTIFIERS */

TOKEN :
{
  < Identifier: (["@"])? <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
|
  < MemberName: ["."] <LETTER> (<LETTER>|<DIGIT>)* >
}       



/* Shared by multiple sections */

TOKEN :
{

<Block_or_Semi: <Block> | ";">
|
<Valid_ID: <Identifier>
       |  "this"
       |  "base"
       |  <Base_Type>>
|
<Qualified_ID: <Valid_ID> <Member_List>>
|
<Member_List: (<MemberName>)*>
|
<Semicolon_Opt: ";"> 
}


/* =========================================================================
 C.2.2 Types
 =========================================================================== */

// All date types in C# are objects. A distinction is made between different
// subtypes of objects, though. Some language constructs are restricted to
// one type or another.
TOKEN:
{
<Type: <Non_Array_Type>
         |  <Non_Array_Type> "*"
         |  <Non_Array_Type> <Rank_Specifiers>
         |  <Non_Array_Type> <Rank_Specifiers> "*">
|
<Pointer_Opt: "*">
|
<Non_Array_Type: <Qualified_ID>>
|

// The following defines built-in datatypes only. This is necessary for local
// variable declarations.

<Base_Type: <Other_Type>
         |  <Integral_Type>>
|
<Other_Type: "float"
         |  "double"
         |  "decimal"
         |  "bool"
         |  "void"
         |  "object"
         |  "string">
|

// Integral_Types are valid in enumeration declarations.
<Integral_Type: "sbyte"
         |  "byte"
         |  "short"
         |  "ushort"
         |  "int"
         |  "uint"
         |  "long"
         |  "ulong"
         |  "char">
|

// Rank_Specifiers are used to define the dimensions of arrays. The notation is odd.

<Rank_Specifiers_Opt: (<Rank_Specifier>)?>
|
<Rank_Specifiers: (<Rank_Specifier>)+>
|
<Rank_Specifier: "[" <Dim_Separators> "]">
|
<Dim_Separators: <Identifier> ",">
        
}


/*===========================================================================
  C.2.4 Expressions
  =========================================================================== */
TOKEN:
{
<Expression_Opt: (<Expression>)?>
|
<Expression_List: <Expression>
        |  <Expression> "," <Expression_List>>
|
<Expression: <Conditional_Exp> "=" <Expression>
        |  <Conditional_Exp> "+="  <Expression>
        |  <Conditional_Exp> "-="  <Expression>
        |  <Conditional_Exp> "*="  <Expression>
        |  <Conditional_Exp> "/="  <Expression>
        |  <Conditional_Exp> "^="  <Expression>
        |  <Conditional_Exp> "&="  <Expression>
        |  <Conditional_Exp> "|="  <Expression>
        |  <Conditional_Exp> "%="  <Expression>
        |  <Conditional_Exp> "<<=" <Expression>
        |  <Conditional_Exp> ">>=" <Expression>
        |  <Conditional_Exp>>
|
<Conditional_Exp: <Or_Exp> "?" <Or_Exp> ":" <Conditional_Exp>
        |  <Or_Exp>>
|
<Or_Exp: <Or_Exp> "||" <And_Exp>
        |  <And_Exp>>
|
<And_Exp: <And_Exp> "&&" <Logical_Or_Exp>
        |  <Logical_Or_Exp>>
|
<Logical_Or_Exp: <Logical_Or_Exp> "|" <Logical_XOr_Exp>
        |  <Logical_XOr_Exp>>
|
<Logical_XOr_Exp: <Logical_XOr_Exp> "^" <Logical_And_Exp>
        |  <Logical_And_Exp>>
|
<Logical_And_Exp: <Logical_And_Exp> "&" <Equality_Exp>
        |  <Equality_Exp> >
|
<Equality_Exp : <Equality_Exp> "==" <Compare_Exp>
        |  <Equality_Exp> "!=" <Compare_Exp>
        |  <Compare_Exp>>
|
<Compare_Exp: <Compare_Exp> "<"  <Shift_Exp>
        |  <Compare_Exp> ">"  <Shift_Exp>
        |  <Compare_Exp> "<=" <Shift_Exp>
        |  <Compare_Exp> ">=" <Shift_Exp>
        |  <Compare_Exp> "is" <Type>
        |  <Compare_Exp> "as" <Type>
        |  <Shift_Exp>>
|
<Shift_Exp: <Shift_Exp> "<<" <Add_Exp>
        |  <Shift_Exp> ">>" <Add_Exp>
        |  <Add_Exp>>
|
<Add_Exp: <Add_Exp> "+" <Mult_Exp>
        |  <Add_Exp> "-" <Mult_Exp>
        |  <Mult_Exp>>
|
<Mult_Exp: <Mult_Exp> "*" <Unary_Exp>
        |  <Mult_Exp> "/" <Unary_Exp>
        |  <Mult_Exp> "%" <Unary_Exp>
        |  <Unary_Exp>>
|
<Unary_Exp: "!"  <Unary_Exp>
        |  "~"  <Unary_Exp>
        |  "-"  <Unary_Exp>
        |  "++" <Unary_Exp>
        |  "--" <Unary_Exp>
        |  "(" <Expression> ")" <Object_Exp>     //Cast "expression" is required to avoid a conflict
        |  <Object_Exp>>
|
// Primary: x.y  f(x)  a[x]  x++  x--  new  typeof  checked  unchecked  ->
<Object_Exp: "delegate"  "(" <Formal_Param_List_Opt>  ")" <Block>    //New in 2.0
        |  <Primary_Array_Creation_Exp>
        |  <Method_Exp>>
|
<Primary_Array_Creation_Exp: "new" <Non_Array_Type> "[" <Expression_List> "]" <Rank_Specifiers_Opt> <Array_Initializer_Opt>
        |  "new" <Non_Array_Type> <Rank_Specifiers> <Array_Initializer>>
|
<Method_Exp: <Method_Exp> <Method>
        |  <Primary_Exp>>
|
<Primary_Exp: "typeof"    "(" <Type> ")"
        |  "sizeof"    "(" <Type> ")"
        |  "checked"   "(" <Expression> ")"
        |  "unchecked" "(" <Expression> ")"
        |  "new" <Non_Array_Type> "(" <Arg_List_Opt> ")"
        |  <Primary>
        |  "(" <Expression> ")">
|
<Primary: <Valid_ID>
        |  <Valid_ID> "(" <Arg_List_Opt> ")"
        |  <Literal>>
}


/* ===========================================================================
 Arguments
 =========================================================================== */

TOKEN:
{
<Arg_List_Opt: (<Arg_List>)?>
|
<Arg_List: <Arg_List> "," <Argument>
        |  <Argument>>
|
<Argument: <Expression>
        |  "ref" <Expression>
        |  "out" <Expression>>
}


/* ===========================================================================
 C.2.5 Statements
 =========================================================================== */

TOKEN:
{
<Stm_List: (<Statement>)+>
|

// This repetative productions below resolve the hanging-else problem by
// restricting the "if-then" statement to remove ambiguity. Two levels of
// statements are declared with the second, "restricted", group only used in
// the "then" clause of a "if-then-else" statement.
//
// The "restricted" group is completely identical the the first with one
// exception: only the "if-then-else" variant of the if statement is allowed.
// In other words, no "if" statements without "else" clauses can appear inside
// the "then" part of an "if-then-else" statement. Using this solution, the
// "else" will bind to the last "If" statement, and still allows chaining.

<Statement: <Identifier> ":"                     // label
        |  <Local_Var_Decl> ";"
        |  "if"       "(" <Expression> ")" <Statement>
        |  "if"       "(" <Expression> ")" <Then_Stm> "else" <Statement>
        |  "for"      "(" <For_Init_Opt> ";" <For_Condition_Opt> ";" <For_Iterator_Opt> ")" <Statement>
        |  "foreach"  "(" <Type> <Identifier> "in" <Expression> ")" <Statement>
        |  "while"    "(" <Expression> ")" <Statement>
        |  "lock"     "(" <Expression> ")" <Statement>
        |  "using"    "(" <Resource>   ")" <Statement>
        |  "fixed"    "("  <Type> <Fixed_Ptr_Decs> ")" <Statement>
        |  "delegate" "(" <Formal_Param_List_Opt>  ")" <Statement>
        |  <Normal_Stm>>
|
<Then_Stm: "if"       "(" <Expression> ")" <Then_Stm> "else" <Then_Stm>
        |  "for"      "(" <For_Init_Opt> ";" <For_Condition_Opt> ";" <For_Iterator_Opt> ")" <Then_Stm>
        |  "foreach"  "(" <Type> <Identifier> "in" <Expression> ")" <Then_Stm>
        |  "while"    "(" <Expression> ")" <Then_Stm>
        |  "lock"     "(" <Expression> ")" <Then_Stm>
        |  "using"    "(" <Resource>   ")" <Then_Stm>
        |  "fixed"    "("  <Type> <Fixed_Ptr_Decs>   ")" <Then_Stm>
        |  "delegate" "(" <Formal_Param_List_Opt> ")" <Then_Stm>
        |  <Normal_Stm>>
|
<Normal_Stm: "switch" "(" <Expression> ")" "{" <Switch_Sections_Opt> "}"
        |  "do" <Normal_Stm> "while" "(" <Expression> ")" ";"
        |  "try" <Block> <Catch_Clauses> <Finally_Clause_Opt>
        |  "checked" <Block>
        |  "unchecked" <Block>
        |  "unsafe" <Block>
        |  "break" ";"
        |  "continue" ";"
        |  "goto" <Identifier> ";"
        |  "goto" "case" <Expression> ";"
        |  "goto" "default" ";"
        |  "return" <Expression_Opt> ";"
        |  "throw" <Expression_Opt> ";"
        |  <Statement_Exp> ";"
        |  ";"
        |  <Block>>
|

<Block: "{" <Stm_List> "}"
        |  "{" "}" >
|
<Variable_Decs: <Variable_Declarator>
         |  <Variable_Decs> "," <Variable_Declarator>>
|
<Variable_Declarator: <Identifier>
         |  <Identifier> "=" <Variable_Initializer>>
|
<Variable_Initializer: <Expression>
         |  <Array_Initializer>
         |  "stackalloc" <Non_Array_Type> "[" <Non_Array_Type> "]">
|
<Constant_Declarators: <Constant_Declarator>
         |  <Constant_Declarators> "," <Constant_Declarator>>
|
<Constant_Declarator: <Identifier> "=" <Expression>>
}


/* ===========================================================================
 Switch Clauses
 =========================================================================== */

TOKEN:
{
<Switch_Sections_Opt: (<Switch_Sections_Opt> <Switch_Section>)? >
|
<Switch_Section: <Switch_Labels> <Stm_List> >
|
<Switch_Labels: <Switch_Label>
         |  <Switch_Labels> <Switch_Label> >
|
<Switch_Label: "case" <Expression> ":"
         |  "default" ":">
}


/* ===========================================================================
 For Clauses
 =========================================================================== */

TOKEN:
{
<For_Init_Opt: (<Local_Var_Decl>)?
         |  (<Statement_Exp_List>)?>
|
<For_Iterator_Opt: (<Statement_Exp_List>)?>
|
<For_Condition_Opt: (<Expression>)?>
|
<Statement_Exp_List: <Statement_Exp_List> "," <Statement_Exp>
         |  <Statement_Exp>>
}

/* ===========================================================================
 Catch_Clauses
 =========================================================================== */

TOKEN:
{
<Catch_Clauses: (<Catch_Clause> <Catch_Clauses>)?>
|
<Catch_Clause: "catch" "(" <Qualified_ID> <Identifier> ")" <Block>
         |  "catch" "(" <Qualified_ID> ")" <Block>
         |  "catch" <Block>>
|
<Finally_Clause_Opt: ("finally" <Block>)?>
}

/* ===========================================================================
 Using Clauses
 =========================================================================== */
TOKEN:
{
<Resource: <Local_Var_Decl>
         |  <Statement_Exp>>
}

// ===========================================================================
// Fixed Clauses
// ===========================================================================

TOKEN:
{
<Fixed_Ptr_Decs: <Fixed_Ptr_Dec>
         |  <Fixed_Ptr_Decs> "," <Fixed_Ptr_Dec>>
|
<Fixed_Ptr_Dec: <Identifier> "=" <Expression>>
}

// ===========================================================================
// Statement_Expressions & Local Variable Declaration
// ===========================================================================

// The complex productions below are able to avoid the shift-reduce error caused
// by declaring an array. The notation used by C# (and the rest of the C++
// family) prevents an array declaration to be distinguished from an array
// assignment statement until a number of characters are read.
//
// a.b.c[2] = "Test"
// a.b.c[] = new String[3]
//
// The system CANNOT make a decision between the two until it is reading the
// contents the [ ... ].
//
// As a result, the local variable declaration below contains the full notation
// for each of the C# methods at the same level as local variable declarations.
// Since the system does not have to reduce UNTIL it is within the [ ... ], no
// shift-reduce error will occur. Nasty, huh?

TOKEN:
{
<Local_Var_Decl: <Qualified_ID> <Rank_Specifiers> <Pointer_Opt> <Variable_Decs>
        |  <Qualified_ID> <Pointer_Opt> <Variable_Decs>>
|
<Statement_Exp: <Qualified_ID> "(" <Arg_List_Opt> ")"
        |  <Qualified_ID> "(" <Arg_List_Opt> ")"       <Methods_Opt> <Assign_Tail>
        |  <Qualified_ID> "[" <Expression_List> "]"    <Methods_Opt> <Assign_Tail>
        |  <Qualified_ID> "->" <Identifier>            <Methods_Opt> <Assign_Tail>
        |  <Qualified_ID> "++"                         <Methods_Opt> <Assign_Tail>
        |  <Qualified_ID> "--"                         <Methods_Opt> <Assign_Tail>
        |  <Qualified_ID>                                            <Assign_Tail>>
|
<Assign_Tail: "++"
        |  "--"
        |  "="   <Expression>
        |  "+="  <Expression>
        |  "-="  <Expression>
        |  "*="  <Expression>
        |  "/="  <Expression>
        |  "^="  <Expression>
        |  "&="  <Expression>
        |  "|="  <Expression>
        |  "%="  <Expression>
        |  "<<=" <Expression>
        |  ">>=" <Expression>>
|
<Methods_Opt: (<Methods_Opt> <Method>)?>
|
<Method: <MemberName>
         |  <MemberName> "(" <Arg_List_Opt> ")"
         |  "[" <Expression_List> "]"
         |  "->" <Identifier>
         |  "++"
         |  "--">
}


// ===========================================================================
// C.2.6 Namespaces
// ===========================================================================

TOKEN:
{
<Compilation_Unit: <Using_List> <Compilation_Items>>
|
<Using_List: (<Using_List> <Using_Directive>)?>
|
<Using_Directive: "using" <Identifier> "=" <Qualified_ID> ";"
        |  "using" <Qualified_ID> ";">
|
<Compilation_Items: (<Compilation_Items> <Compilation_Item>)*>
|
<Compilation_Item: <Namespace_Dec>
        |  <Namespace_Item>>
}

// ===========================================================================
// Namespace
// ===========================================================================

TOKEN:
{
<Namespace_Dec: <Attrib_Opt> "namespace" <Qualified_ID> "{" <Using_List> <Namespace_Items> "}" <Semicolon_Opt>>
|
<Namespace_Items: (<Namespace_Items> <Namespace_Item>)*>
|
<Namespace_Item: <Constant_Dec>
        |  <Field_Dec>
        |  <Method_Dec>
        |  <Property_Dec>
        |  <Type_Decl>>
|
<Type_Decl: <Class_Decl>
        |  <Struct_Decl>
        |  <Interface_Decl>
        |  <Enum_Decl>
        |  <Delegate_Decl>>
}

// =================================  Modifiers

TOKEN:
{
<Header: <Attrib_Opt> <Access_Opt> <Modifier_List_Opt>>
|
<Access_Opt: "private"
        |  "protected"
        |  "public"
        |  "internal"
        |  "">
|
<Modifier_List_Opt: <Modifier_List_Opt> <Modifier>
        |  "">
|
<Modifier: "abstract"
        |  "extern"
        |  "new"
        |  "override"
        |  "partial"
        |  "readonly"
        |  "sealed"
        |  "static"
        |  "unsafe"
        |  "virtual"
        |  "volatile">
}

// ===========================================================================
// C.2.7 Classes
// ===========================================================================

TOKEN:
{
<Class_Decl: <Header> "class" <Identifier> <Class_Base_Opt> "{" <Class_Item_Decs_Opt> "}" <Semicolon_Opt>>
|
<Class_Base_Opt: ":" <Class_Base_List>
        |  "">
|
<Class_Base_List: <Class_Base_List> "," <Non_Array_Type>
        |  <Non_Array_Type>>
|
<Class_Item_Decs_Opt: <Class_Item_Decs_Opt> <Class_Item>
        |  "">
|
<Class_Item: <Constant_Dec>
        |  <Field_Dec>
        |  <Method_Dec>
        |  <Property_Dec>
        |  <Event_Dec>
        |  <Indexer_Dec>
        |  <Operator_Dec>
        |  <Constructor_Dec>
        |  <Destructor_Dec>
        |  <Type_Decl>>
|
<Constant_Dec: <Header> "const" <Type> <Constant_Declarators> ";">
|
<Field_Dec: <Header> <Type> <Variable_Decs> ";">
|
<Method_Dec: <Header> <Type> <Qualified_ID> "(" <Formal_Param_List_Opt> ")" <Block_or_Semi>>
|
<Formal_Param_List_Opt: <Formal_Param_List>
        |  "">
|
<Formal_Param_List: <Formal_Param>
        |  <Formal_Param_List> "," <Formal_Param>>
|
<Formal_Param: <Attrib_Opt>        <Type> <Identifier>
        |  <Attrib_Opt> "ref"    <Type> <Identifier>
        |  <Attrib_Opt> "out"    <Type> <Identifier>
        |  <Attrib_Opt> "params" <Type> <Identifier>>
|
<Property_Dec: <Header> <Type> <Qualified_ID> "{" <Accessor_Dec> "}">
|
<Accessor_Dec: <Access_Opt> "get" <Block_or_Semi>
        |  <Access_Opt> "get" <Block_or_Semi> <Access_Opt> "set" <Block_or_Semi>
        |  <Access_Opt> "set" <Block_or_Semi>
        |  <Access_Opt> "set" <Block_or_Semi> <Access_Opt> "get" <Block_or_Semi>>
|
<Event_Dec: <Header> "event" <Type> <Variable_Decs> ";"
        |  <Header> "event" <Type> <Qualified_ID> "{" <Event_Accessor_Decs> "}">
|
<Event_Accessor_Decs: "add" <Block_or_Semi>
        |  "add" <Block_or_Semi> "remove" <Block_or_Semi>
        |  "remove" <Block_or_Semi>
        |  "remove" <Block_or_Semi> "add" <Block_or_Semi>>
|
<Indexer_Dec: <Header> <Type>  <Qualified_ID> "[" <Formal_Param_List> "]" "{" <Accessor_Dec>"}">
}

// ===========================================================================
// Operator_Declarations
// ===========================================================================

TOKEN:
{
<Operator_Dec: <Header> <Overload_Operator_Decl>   <Block_or_Semi>
        |  <Header> <Conversion_Operator_Decl> <Block_or_Semi>>
|
<Overload_Operator_Decl: <Type>   "operator" <Overload_Op> "(" <Type> <Identifier> ")"
        |  <Type>   "operator" <Overload_Op> "(" <Type> <Identifier> "," <Type> <Identifier> ")">
|
<Conversion_Operator_Decl: "implicit" "operator" <Type> "(" <Type> <Identifier> ")"
        |  "explicit" "operator" <Type> "(" <Type> <Identifier> ")">
|
<Overload_Op: "+"
        |  "-"
        |  "//"
        |  "~"
        |  "++"
        |  "--"
        |  "true"
        |  "false"
        |  "*"
        |  "/"
        |  "%"
        |  "&"
        |  "|"
        |  "^"
        |  "<<"
        |  ">>"
        |  "=="
        |  "//="
        |  ">"
        |  "<"
        |  ">="
        |  "<=">
}

// ===========================================================================
// Constructor / Destructor_Declarations
// ===========================================================================

TOKEN:
{
<Constructor_Dec: <Header> <Constructor_Declarator> <Block_or_Semi>>
|
<Constructor_Declarator: <Identifier> "(" <Formal_Param_List_Opt> ")" <Constructor_Init_Opt>>
|
<Constructor_Init_Opt: <Constructor_Init>
        |  "">
|
<Constructor_Init: ":" "base" "(" <Arg_List_Opt> ")"
        |  ":" "this" "(" <Arg_List_Opt> ")">
|
<Destructor_Dec: <Header> "~" <Identifier> "(" ")" <Block>>
}


// ===========================================================================
// C.2.8 Structs
// ===========================================================================

// Note: Structures have the SAME members as normal classes. As a result, the
//       <Class_Item_Decs_Opt> rule is used

TOKEN:
{
<Struct_Decl: <Header> "struct" <Identifier> <Class_Base_Opt> "{" <Class_Item_Decs_Opt>"}" <Semicolon_Opt>>       
}

// ===========================================================================
// C.2.9 Arrays
// ===========================================================================

TOKEN:
{
<Array_Initializer_Opt: (<Array_Initializer>)?>
|
<Array_Initializer: "{" <Variable_Initializer_List_Opt> "}"
        |  "{" <Variable_Initializer_List> "," "}">
|
<Variable_Initializer_List_Opt: (<Variable_Initializer_List>)?>
|
<Variable_Initializer_List: <Variable_Initializer>
        |  <Variable_Initializer_List> "," <Variable_Initializer>>
}

// ===========================================================================
// C.2.10 Interfaces
// ===========================================================================

TOKEN:
{
<Interface_Decl: <Header> "interface" <Identifier> <Interface_Base_Opt> "{" <Interface_Item_Decs_Opt> "}" <Semicolon_Opt>>
|
<Interface_Base_Opt: ":" <Class_Base_List>
        |  "">
|
<Interface_Item_Decs_Opt: <Interface_Item_Decs_Opt> <Interface_Item_Dec>
        |  "">
|
<Interface_Item_Dec: <Interface_Method_Dec>
        |  <Interface_Property_Dec>
        |  <Interface_Event_Dec>
        |  <Interface_Indexer_Dec>>
|
<Interface_Method_Dec: <Attrib_Opt> <New_Opt> <Type> <Identifier> "(" <Formal_Param_List_Opt> ")" <Interface_Empty_Body>>
|
<New_Opt: "NEW"
        |  "">
|
<Interface_Property_Dec: <Attrib_Opt> <New_Opt> <Type> <Identifier> "{" <Interface_Accessors> "}">
|
<Interface_Indexer_Dec: <Attrib_Opt> <New_Opt> <Type> "this" "[" <Formal_Param_List> "]"  "{" <Interface_Accessors> "}">
|
<Interface_Accessors: <Attrib_Opt> <Access_Opt> "get" <Interface_Empty_Body>
        |  <Attrib_Opt> <Access_Opt> "set" <Interface_Empty_Body>
        |  <Attrib_Opt> <Access_Opt> "get" <Interface_Empty_Body> <Attrib_Opt> <Access_Opt> "set" <Interface_Empty_Body>
        |  <Attrib_Opt> <Access_Opt> "set" <Interface_Empty_Body> <Attrib_Opt> <Access_Opt> "get" <Interface_Empty_Body>>
|
<Interface_Event_Dec: <Attrib_Opt> <New_Opt> "event" <Type> <Identifier> <Interface_Empty_Body>>
|
<Interface_Empty_Body: ";"
        |  "{" "}">
}


// ===========================================================================
// C.2.11 Enums
// ===========================================================================

TOKEN:
{
<Enum_Decl: <Header> "enum" <Identifier> <Enum_Base_Opt> <Enum_Body> <Semicolon_Opt>>
|
<Enum_Base_Opt: ":" <Integral_Type>
        |  "">
|
<Enum_Body: "{" <Enum_Item_Decs_Opt> "}"
        |  "{" <Enum_Item_Decs> "," "}">
|
<Enum_Item_Decs_Opt: <Enum_Item_Decs>
        |  "">
|
<Enum_Item_Decs: <Enum_Item_Dec>
        |  <Enum_Item_Decs> "," <Enum_Item_Dec>>
|
<Enum_Item_Dec: <Attrib_Opt> <Identifier>
        |  <Attrib_Opt> <Identifier> "=" <Expression>>
}


// ===========================================================================
// C.2.12 Delegates
// ===========================================================================
TOKEN:
{
<Delegate_Decl: <Header> "delegate" <Type> <Identifier> "(" <Formal_Param_List_Opt> ")" ";">
}

// ===========================================================================
// C.2.13 Attributes
// ===========================================================================
TOKEN:
{
<Attrib_Opt: <Attrib_Opt> <Attrib_Section>
        |  "">
|
<Attrib_Section: "[" <Attrib_Target_Spec_Opt> <Attrib_List> "]"
        |  "[" <Attrib_Target_Spec_Opt> <Attrib_List> "," "]">
|
<Attrib_Target_Spec_Opt: "assembly" ":"
        |  "field"    ":"
        |  "event"    ":"
        |  "method"   ":"
        |  "module"   ":"
        |  "param"    ":"
        |  "property" ":"
        |  "return"   ":"
        |  "type"     ":"
        |  "">
|
<Attrib_List: <Attribute>
        |  <Attrib_List> "," <Attribute>>
|
<Attribute: <Qualified_ID> "(" <Expression_List> ")"
        |  <Qualified_ID> "(" ")"
        |  <Qualified_ID>>
}