/*******************************************************************************
 * Copyright (c) 2001-2014 Yann-Gaël Guéhéneuc and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Yann-Gaël Guéhéneuc and others, see in file; API and its implementation
 ******************************************************************************/
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jun 12 09:32:02 EDT 2007
//----------------------------------------------------

package padl.creator.msefile;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;
import padl.creator.msefile.javacup.runtime.lr_parser;
import padl.creator.msefile.misc.Attribute;
import padl.creator.msefile.misc.Element;
import padl.creator.msefile.misc.Value;
import util.multilingual.MultilingualManager;

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MSEParser$actions {
	private final MSEParser parser;

	/** Constructor */
	CUP$MSEParser$actions(final MSEParser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final padl.creator.msefile.javacup.runtime.Symbol CUP$MSEParser$do_action(
		final int CUP$MSEParser$act_num,
		final padl.creator.msefile.javacup.runtime.lr_parser CUP$MSEParser$parser,
		final java.util.Stack CUP$MSEParser$stack,
		final int CUP$MSEParser$top) throws java.lang.Exception {
		/* Symbol object for return from actions */
		padl.creator.msefile.javacup.runtime.Symbol CUP$MSEParser$result;

		/* select the action based on the action number */
		switch (CUP$MSEParser$act_num) {
			/*. . . . . . . . . . . . . . . . . . . .*/
			case 41 : // uniqueID ::= INTEGER 
				{
					String RESULT = null;
					final String id =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("uniqueID ::= INTEGER");
					}
					RESULT = id;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							12/*uniqueID*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 40 : // primitiveName ::= NAME 
				{
					String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("primitiveName ::= NAME");
					}
					RESULT = name;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							14/*primitiveName*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 39 : // attributeName ::= NAME 
				{
					String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("attributeName ::= NAME (" + name
								+ ')');
					}
					RESULT = name;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							6/*attributeName*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 38 : // className ::= NAME 
				{
					String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("className ::= NAME");
					}
					RESULT = name;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							19/*className*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 37 : // typeName ::= NAME 
				{
					String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("typeName ::= NAME (" + name + ')');
					}
					RESULT = name;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							18/*typeName*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 36 : // expression ::= STRING 
				{
					String RESULT = null;
					final String string =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("expression ::= STRING (" + string
								+ ')');
					}
					RESULT = string;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							16/*expression*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 35 : // pathCommand ::= LPAREN PATH COLON className RPAREN 
				{
					String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err
							.println("pathCommand ::= LPAREN PATH className RPAREN");
					}
					RESULT = name;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							17/*pathCommand*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 4)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 34 : // valueCommand ::= LPAREN VALUE COLON expression RPAREN 
				{
					String RESULT = null;
					final String expr =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err
							.println("valueCommand ::= LPAREN VALUE expression RPAREN");
					}
					RESULT = expr;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							15/*valueCommand*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 4)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 33 : // primitiveCommand ::= LPAREN PRIMITIVE COLON primitiveName RPAREN 
				{
					String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err
							.println("primitiveCommand ::= LPAREN PRIMITIVE primitiveName RPAREN");
					}
					RESULT = name;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							13/*primitiveCommand*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 4)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 32 : // referenceCommand ::= LPAREN IDREF COLON uniqueID RPAREN 
				{
					String RESULT = null;
					final String id =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err
							.println("referenceCommand ::= LPAREN IDREF uniqueID RPAREN");
					}
					RESULT = id;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							11/*referenceCommand*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 4)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 31 : // uniqueIDCommand ::= LPAREN ID COLON uniqueID RPAREN 
				{
					String RESULT = null;
					final String id =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err
							.println("uniqueIDCommand ::= LPAREN ID uniqueID RPAREN");
					}
					RESULT = id;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							10/*uniqueIDCommand*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 4)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 30 : // primitive ::= STAR 
				{
					String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("*");
					}
					RESULT = "*";

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 29 : // primitive ::= PRIMITIVE 
				{
					String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("primitive");
					}
					RESULT = "primitive";

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 28 : // primitive ::= PATH 
				{
					String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("path");
					}
					RESULT = "path";

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 27 : // primitive ::= VALUE 
				{
					String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("value");
					}
					RESULT = "value";

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 26 : // primitive ::= ID 
				{
					String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("id");
					}
					RESULT = "id";

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 25 : // primitive ::= FALSE 
				{
					String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("FALSE");
					}
					RESULT = "false";

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 24 : // primitive ::= TRUE 
				{
					String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("TRUE");
					}
					RESULT = "true";

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 23 : // primitive ::= INTEGER 
				{
					String RESULT = null;
					final String integer =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("INTEGER (" + integer + ')');
					}
					RESULT = integer;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 22 : // primitive ::= STRING 
				{
					String RESULT = null;
					final String string =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("STRING (" + string + ')');
					}
					RESULT = string;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 21 : // primitive ::= NAME 
				{
					String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("NAME (" + name + ')');
					}
					RESULT = name;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							9/*primitive*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 20 : // valueNode ::= elementNode 
				{
					final String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= elementNode");
					}

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							7/*valueNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 19 : // valueNode ::= pathCommand 
				{
					final String RESULT = null;
					final String pc =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= pathCommand");
					}
					this.parser.values.add(new Value("path", pc));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							7/*valueNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 18 : // valueNode ::= valueCommand 
				{
					final String RESULT = null;
					final String vc =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= valueCommand");
					}
					this.parser.values.add(new Value("value", vc));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							7/*valueNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 17 : // valueNode ::= primitiveCommand 
				{
					final String RESULT = null;
					final String pc =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= primitiveCommand");
					}
					this.parser.values.add(new Value("primitiveCommand", pc));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							7/*valueNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 16 : // valueNode ::= referenceCommand 
				{
					final String RESULT = null;
					final String id =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= referenceCommand");
					}
					this.parser.values.add(new Value("idref", id));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							7/*valueNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 15 : // valueNode ::= primitive COLON 
				{
					final String RESULT = null;
					final String p =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= primitive COLON");
					}
					this.parser.values.add(new Value("primitive", p + ':'));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							7/*valueNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 1)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 14 : // valueNode ::= primitive 
				{
					final String RESULT = null;
					final String p =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 0)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= primitive");
					}
					this.parser.values.add(new Value("primitive", p));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							7/*valueNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 13 : // valueNodes ::= valueNode valueNodes 
				{
					final String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err
							.println("valueNodes ::= valueNode valueNodes");
					}

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							8/*valueNodes*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 1)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 12 : // valueNodes ::= valueNode 
				{
					final String RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("valueNodes ::= valueNode");
					}

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							8/*valueNodes*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 11 : // attributeNode ::= LPAREN attributeName uniqueIDCommand valueNodes RPAREN 
				{
					final String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 3)).value;
					final String id =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 2)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= primitive");
					}
					this.parser.values.add(new Value("id", id));
					final Value[] values = new Value[this.parser.values.size()];
					this.parser.values.toArray(values);
					this.parser.values.clear();
					this.parser.attributes.add(new Attribute(name, values));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							4/*attributeNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 4)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 10 : // attributeNode ::= LPAREN attributeName valueNodes RPAREN 
				{
					final String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 2)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= primitive");
					}
					final Value[] values = new Value[this.parser.values.size()];
					this.parser.values.toArray(values);
					this.parser.values.clear();
					this.parser.attributes.add(new Attribute(name, values));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							4/*attributeNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 3)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 9 : // attributeNode ::= LPAREN attributeName RPAREN 
				{
					final String RESULT = null;
					final String name =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err.println("valueNode ::= primitive");
					}
					this.parser.attributes.add(new Attribute(name));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							4/*attributeNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 2)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 8 : // attributeNodes ::= attributeNode attributeNodes 
				{
					final String RESULT = null;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							5/*attributeNodes*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 1)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 7 : // attributeNodes ::= attributeNode 
				{
					final String RESULT = null;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							5/*attributeNodes*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 6 : // elementNode ::= LPAREN typeName uniqueIDCommand RPAREN 
				{
					final String RESULT = null;
					final String type =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 2)).value;
					final String id =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;

					if (MSEParser.DEBUG) {
						System.err
							.println("LPAREN typeName uniqueIDCommand RPAREN");
					}
					this.parser.attributes.add(new Attribute(
						"id",
						new Value[] { new Value("primitive", id) }));
					final Attribute[] attributes =
						new Attribute[this.parser.attributes.size()];
					this.parser.attributes.toArray(attributes);
					this.parser.attributes.clear();
					this.parser.elements.add(new Element(type, attributes));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							2/*elementNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 3)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 5 : // elementNode ::= LPAREN typeName uniqueIDCommand attributeNodes RPAREN 
				{
					final String RESULT = null;
					final String type =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 3)).value;
					final String id =
						(String) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 2)).value;

					if (MSEParser.DEBUG) {
						System.err
							.println("LPAREN typeName uniqueIDCommand attributeNodes RPAREN");
					}
					this.parser.attributes.add(new Attribute(
						"id",
						new Value[] { new Value("primitive", id) }));
					final Attribute[] attributes =
						new Attribute[this.parser.attributes.size()];
					this.parser.attributes.toArray(attributes);
					this.parser.attributes.clear();
					this.parser.elements.add(new Element(type, attributes));

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							2/*elementNode*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 4)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 4 : // elementNodes ::= elementNode elementNodes 
				{
					final String RESULT = null;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							3/*elementNodes*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 1)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 3 : // elementNodes ::= elementNode 
				{
					final String RESULT = null;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							3/*elementNodes*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 2 : // root ::= LPAREN elementNodes RPAREN 
				{
					final Element[] RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("LPAREN elementNodes RPAREN");
					}

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							1/*root*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 2)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 1 : // $START ::= root EOF 
				{
					Object RESULT = null;
					final Element[] start_val =
						(Element[]) ((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
							.elementAt(CUP$MSEParser$top - 1)).value;
					RESULT = start_val;
					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							0/*$START*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 1)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				/* ACCEPT */
				CUP$MSEParser$parser.done_parsing();
				return CUP$MSEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 0 : // root ::= elementNode 
				{
					Element[] RESULT = null;

					if (MSEParser.DEBUG) {
						System.err.println("elementNode");
					}
					final Element[] elements =
						new Element[this.parser.elements.size()];
					this.parser.elements.toArray(elements);
					RESULT = elements;

					CUP$MSEParser$result =
						new padl.creator.msefile.javacup.runtime.Symbol(
							1/*root*/,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).left,
							((padl.creator.msefile.javacup.runtime.Symbol) CUP$MSEParser$stack
								.elementAt(CUP$MSEParser$top - 0)).right,
							RESULT);
				}
				return CUP$MSEParser$result;

				/* . . . . . .*/
			default :
				throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}

/** CUP v0.10k generated parser.
  * @version Tue Jun 12 09:32:02 EDT 2007
  */
public class MSEParser extends padl.creator.msefile.javacup.runtime.lr_parser {

	/** Production table. */
	protected static final short _production_table[][] =
		lr_parser
			.unpackFromStrings(new String[] { "\000\052\000\002\003\003\000\002\002\004\000\002\003"
					+ "\005\000\002\005\003\000\002\005\004\000\002\004\007"
					+ "\000\002\004\006\000\002\007\003\000\002\007\004\000"
					+ "\002\006\005\000\002\006\006\000\002\006\007\000\002"
					+ "\012\003\000\002\012\004\000\002\011\003\000\002\011"
					+ "\004\000\002\011\003\000\002\011\003\000\002\011\003"
					+ "\000\002\011\003\000\002\011\003\000\002\013\003\000"
					+ "\002\013\003\000\002\013\003\000\002\013\003\000\002"
					+ "\013\003\000\002\013\003\000\002\013\003\000\002\013"
					+ "\003\000\002\013\003\000\002\013\003\000\002\014\007"
					+ "\000\002\015\007\000\002\017\007\000\002\021\007\000"
					+ "\002\023\007\000\002\022\003\000\002\024\003\000\002"
					+ "\025\003\000\002\010\003\000\002\020\003\000\002\016"
					+ "\003" });

	/** Parse-action table. */
	protected static final short[][] _action_table =
		lr_parser
			.unpackFromStrings(new String[] { "\000\111\000\004\015\006\001\002\000\004\002\113\001"
					+ "\002\000\004\002\001\001\002\000\006\015\013\020\012"
					+ "\001\002\000\004\015\017\001\002\000\006\015\013\016"
					+ "\ufffe\001\002\000\004\016\014\001\002\000\004\015\uffdc"
					+ "\001\002\000\004\020\012\001\002\000\004\002\uffff\001"
					+ "\002\000\004\016\ufffd\001\002\000\006\015\030\016\026"
					+ "\001\002\000\004\005\020\001\002\000\004\004\021\001"
					+ "\002\000\004\021\022\001\002\000\004\016\uffd8\001\002"
					+ "\000\004\016\024\001\002\000\032\005\uffe2\007\uffe2\010"
					+ "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2"
					+ "\017\uffe2\020\uffe2\021\uffe2\001\002\000\004\016\112\001"
					+ "\002\000\034\002\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb"
					+ "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020"
					+ "\ufffb\021\ufffb\001\002\000\006\015\030\016\ufffa\001\002"
					+ "\000\004\020\032\001\002\000\032\005\047\007\042\010"
					+ "\041\011\057\012\045\013\055\014\040\015\046\016\036"
					+ "\017\050\020\043\021\056\001\002\000\032\005\uffda\007"
					+ "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda"
					+ "\016\uffda\017\uffda\020\uffda\021\uffda\001\002\000\030\005"
					+ "\047\007\042\010\041\011\057\012\045\013\055\014\040"
					+ "\015\105\017\050\020\043\021\056\001\002\000\032\005"
					+ "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef"
					+ "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\001\002\000"
					+ "\032\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed"
					+ "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\001"
					+ "\002\000\006\015\ufff8\016\ufff8\001\002\000\032\005\ufff1"
					+ "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015"
					+ "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\001\002\000\034"
					+ "\004\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013"
					+ "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3"
					+ "\001\002\000\034\004\uffe6\005\uffe6\007\uffe6\010\uffe6\011"
					+ "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6"
					+ "\020\uffe6\021\uffe6\001\002\000\034\004\uffe4\005\uffe4\007"
					+ "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4"
					+ "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\001\002\000\034\004"
					+ "\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec"
					+ "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\001"
					+ "\002\000\032\005\047\007\042\010\041\011\057\012\045"
					+ "\013\055\014\040\015\105\016\ufff5\017\050\020\043\021"
					+ "\056\001\002\000\034\004\uffe9\005\uffe9\007\uffe9\010\uffe9"
					+ "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017"
					+ "\uffe9\020\uffe9\021\uffe9\001\002\000\016\005\020\006\063"
					+ "\007\065\010\064\011\062\020\012\001\002\000\034\004"
					+ "\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7"
					+ "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\001"
					+ "\002\000\034\004\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb"
					+ "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020"
					+ "\uffeb\021\uffeb\001\002\000\034\004\061\005\ufff3\007\ufff3"
					+ "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016"
					+ "\ufff3\017\ufff3\020\ufff3\021\ufff3\001\002\000\004\016\060"
					+ "\001\002\000\032\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012"
					+ "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0"
					+ "\021\ufff0\001\002\000\032\005\uffee\007\uffee\010\uffee\011"
					+ "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee"
					+ "\020\uffee\021\uffee\001\002\000\034\004\uffe8\005\uffe8\007"
					+ "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8"
					+ "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\001\002\000\034\004"
					+ "\uffea\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea"
					+ "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\001"
					+ "\002\000\034\004\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5"
					+ "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020"
					+ "\uffe5\021\uffe5\001\002\000\006\015\ufff7\016\ufff7\001\002"
					+ "\000\032\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013"
					+ "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2"
					+ "\001\002\000\004\004\101\001\002\000\004\004\076\001"
					+ "\002\000\004\004\072\001\002\000\004\004\066\001\002"
					+ "\000\004\020\070\001\002\000\004\016\071\001\002\000"
					+ "\004\016\uffd9\001\002\000\032\005\uffe0\007\uffe0\010\uffe0"
					+ "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017"
					+ "\uffe0\020\uffe0\021\uffe0\001\002\000\004\017\073\001\002"
					+ "\000\004\016\uffdd\001\002\000\004\016\075\001\002\000"
					+ "\032\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf"
					+ "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\001"
					+ "\002\000\004\021\022\001\002\000\004\016\100\001\002"
					+ "\000\032\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013"
					+ "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1"
					+ "\001\002\000\004\020\103\001\002\000\004\016\104\001"
					+ "\002\000\004\016\uffdb\001\002\000\032\005\uffde\007\uffde"
					+ "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016"
					+ "\uffde\017\uffde\020\uffde\021\uffde\001\002\000\014\006\063"
					+ "\007\065\010\064\011\062\020\012\001\002\000\004\016"
					+ "\ufff4\001\002\000\004\016\110\001\002\000\006\015\ufff6"
					+ "\016\ufff6\001\002\000\004\016\ufff9\001\002\000\034\002"
					+ "\ufffc\005\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc"
					+ "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\001"
					+ "\002\000\004\002\000\001\002" });

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table =
		lr_parser
			.unpackFromStrings(new String[] { "\000\111\000\006\003\003\004\004\001\001\000\002\001"
					+ "\001\000\002\001\001\000\010\004\007\005\010\024\006"
					+ "\001\001\000\004\014\015\001\001\000\006\004\007\005"
					+ "\014\001\001\000\002\001\001\000\002\001\001\000\004"
					+ "\024\006\001\001\000\002\001\001\000\002\001\001\000"
					+ "\006\006\026\007\024\001\001\000\002\001\001\000\002"
					+ "\001\001\000\004\016\022\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\006\006\026\007\110\001\001\000\004\010"
					+ "\030\001\001\000\024\004\034\011\043\012\051\013\050"
					+ "\014\032\015\036\017\052\021\033\023\053\001\001\000"
					+ "\002\001\001\000\022\004\034\011\043\012\106\013\050"
					+ "\015\036\017\052\021\033\023\053\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\022\004\034\011\043\012\105\013\050"
					+ "\015\036\017\052\021\033\023\053\001\001\000\002\001"
					+ "\001\000\004\024\006\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\004\020\066\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\004\022\073\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\004\016\076\001\001\000\002\001\001\000\002\001\001"
					+ "\000\004\025\101\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\004\024\006\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001" });

	/** Instance of action encapsulation class. */
	protected CUP$MSEParser$actions action_obj;

	public static final boolean DEBUG = false;

	public static void main(final String args[]) throws Exception {
		new MSEParser(new MSELexer(new FileInputStream(""))).parse();
	}

	public List attributes = new ArrayList();

	public List elements = new ArrayList();

	public List values = new ArrayList();

	/** Default constructor. */
	public MSEParser() {
	}

	/** Constructor which sets the default scanner. */
	public MSEParser(final padl.creator.msefile.javacup.runtime.Scanner s) {
		super(s);
	}

	/** Access to parse-action table. */
	public short[][] action_table() {
		return MSEParser._action_table;
	}
	/** Invoke a user supplied parse action. */
	public padl.creator.msefile.javacup.runtime.Symbol do_action(
		final int act_num,
		final padl.creator.msefile.javacup.runtime.lr_parser parser,
		final java.util.Stack stack,
		final int top) throws java.lang.Exception {
		/* call code in generated class */
		return this.action_obj.CUP$MSEParser$do_action(
			act_num,
			parser,
			stack,
			top);
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		this.action_obj = new CUP$MSEParser$actions(this);
	}
	/** Access to production table. */
	public short[][] production_table() {
		return MSEParser._production_table;
	}

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return MSEParser._reduce_table;
	}
	public void report_error(
		final String message,
		final padl.creator.msefile.javacup.runtime.Symbol info) {
		((MSELexer) this.getScanner()).reportErrorMessage(message, info);
	}
	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}
	public void syntax_error(final padl.creator.msefile.javacup.runtime.Symbol current) {
		this.report_error(MultilingualManager.getString(
			"SYN_ERR",
			MSEParser.class,
			new Object[] { new Integer(current.sym) }), current);
	}

}
