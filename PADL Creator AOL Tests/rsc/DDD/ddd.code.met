
#Process file ../../code/ddd-3.0/ddd/ctrl.o.nu.met ... 


	METHOD string!length

		METRICS
			rep REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD length
			METHODID 174
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:length METHODID:174 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 174-length

__BEGIN_METHOD_CODE__

string::length()
{  return rep->len; }

__END_METHOD_CODE__


	METHOD string!empty

		METRICS
			rep REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD empty
			METHODID 175
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:empty METHODID:175 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 175-empty

__BEGIN_METHOD_CODE__

string::empty()
{ return rep->len == 0; }

__END_METHOD_CODE__


	METHOD string!chars

		METRICS
			rep REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD chars
			METHODID 173
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:chars METHODID:173 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 173-chars

__BEGIN_METHOD_CODE__

string::chars()
{ return &(rep->s[_ARGS_]); }

__END_METHOD_CODE__


	METHOD string!allocation

		METRICS
			rep REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD allocation
			METHODID 177
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:allocation METHODID:177 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 177-allocation

__BEGIN_METHOD_CODE__

string::allocation()
{ return rep->sz; }

__END_METHOD_CODE__


	METHOD subString!length

		METRICS
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD length
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:length METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-length

__BEGIN_METHOD_CODE__

subString::length()
{ return len; }

__END_METHOD_CODE__


	METHOD subString!empty

		METRICS
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD empty
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:empty METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 18-empty

__BEGIN_METHOD_CODE__

subString::empty()
{ return len == 0; }

__END_METHOD_CODE__


	METHOD subString!chars

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD chars
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:subString CLASSID:1 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:chars METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-chars

__BEGIN_METHOD_CODE__

subString::chars()
{ return &(S.rep->s[_ARGS_]); }

__END_METHOD_CODE__


	METHOD string!string

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD string
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:string METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-string

__BEGIN_METHOD_CODE__

string::string()
{}

__END_METHOD_CODE__


	METHOD string!string

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD string
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:string METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-string

__BEGIN_METHOD_CODE__

string::string(const string& x)
{}

__END_METHOD_CODE__


	METHOD string!string

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD string
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:string METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-string

__BEGIN_METHOD_CODE__

string::string(const char* t)
{}

__END_METHOD_CODE__


	METHOD string!string

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD string
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:string METHODID:13 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-string

__BEGIN_METHOD_CODE__

string::string(const char* t, int tlen)
{}

__END_METHOD_CODE__


	METHOD string!string

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD string
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:string METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-string

__BEGIN_METHOD_CODE__

string::string(const subString& y)
{}

__END_METHOD_CODE__


	METHOD string!string

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD string
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:string METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-string

__BEGIN_METHOD_CODE__

string::string(char c)
{}

__END_METHOD_CODE__


	METHOD subString!subString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD subString
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:subString METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-subString

__BEGIN_METHOD_CODE__

subString::subString(const subString& x)
{}

__END_METHOD_CODE__


	METHOD subString!subString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD subString
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:subString METHODID:1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-subString

__BEGIN_METHOD_CODE__

subString::subString(string& x, int first, int l)
{}

__END_METHOD_CODE__


	METHOD subString!subString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD subString
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:subString METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-subString

__BEGIN_METHOD_CODE__

subString::subString(const string& x, int first, int l)
{}

__END_METHOD_CODE__


	METHOD string!operator = 
		CALLS
		string_Scopy : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-operator_=

__BEGIN_METHOD_CODE__

string::operator = (const string& y)
{ 
    rep = string_Scopy(rep, y.rep); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator = 
		CALLS
		string_Salloc : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:18 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 18-operator_=

__BEGIN_METHOD_CODE__

string::operator = (const char* t)
{
    rep = string_Salloc(rep, t, -1, -1); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator = 
		CALLS
		string_Salloc : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:19 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-operator_=

__BEGIN_METHOD_CODE__

string::operator = (char* t)
{
    rep = string_Salloc(rep, t, -1, -1); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator = 
		CALLS
		string_Salloc : _SYSTEM_OR_USER_,
		chars : subString,
		length : subString,
		length : subString



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 21-operator_=

__BEGIN_METHOD_CODE__

string::operator = (const subString&  y)
{
    rep = string_Salloc(rep, y.chars(), y.length(), y.length()); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator = 
		CALLS
		string_Salloc : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 20-operator_=

__BEGIN_METHOD_CODE__

string::operator = (char c)
{
    rep = string_Salloc(rep, &c, 1, 1); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator = 
		CALLS
		frozen : _SYSTEM_OR_USER_,
		str : _SYSTEM_OR_USER_,
		string_Salloc : _SYSTEM_OR_USER_,
		pcount : _SYSTEM_OR_USER_,
		pcount : _SYSTEM_OR_USER_,
		freeze : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 3
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 5
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 0
			METHOD operator_=
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:3 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:1 DOTS:5 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:0 METHOD:operator_= METHODID:22 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 22-operator_=

__BEGIN_METHOD_CODE__

string::operator = (ostrstream& os)
{

     
    int frozen = os.frozen();


    const char *str = os.str();
    rep = string_Salloc(rep, str, os.pcount(), os.pcount());


    os.freeze(frozen);

    return *this;
}

__END_METHOD_CODE__


	METHOD string!string

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD string
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:string METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-string

__BEGIN_METHOD_CODE__

string::string(ostrstream& os)
{
    operator=(os);
}

__END_METHOD_CODE__


	METHOD subString!operator = 
		CALLS
		assign : subString



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-operator_=

__BEGIN_METHOD_CODE__

subString::operator = (const char* ys)
{
    assign(0, ys); return *this;
}

__END_METHOD_CODE__


	METHOD subString!operator = 
		CALLS
		assign : subString



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_=

__BEGIN_METHOD_CODE__

subString::operator = (char* ys)
{
    assign(0, ys); return *this;
}

__END_METHOD_CODE__


	METHOD subString!operator = 
		CALLS
		assign : subString



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:subString CLASSID:1 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-operator_=

__BEGIN_METHOD_CODE__

subString::operator = (char ch)
{
    assign(0, &ch, 1); return *this;
}

__END_METHOD_CODE__


	METHOD subString!operator = 
		CALLS
		assign : subString,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:subString CLASSID:1 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_=

__BEGIN_METHOD_CODE__

subString::operator = (const string& y)
{
    assign(y.rep, y.chars(), y.length()); return *this;
}

__END_METHOD_CODE__


	METHOD subString!operator = 
		CALLS
		assign : subString,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:subString CLASSID:1 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-operator_=

__BEGIN_METHOD_CODE__

subString::operator = (const subString& y)
{
    assign(y.S.rep, y.chars(), y.length()); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator += 
		CALLS
		cat : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_+=
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_+= METHODID:23 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-operator_+=

__BEGIN_METHOD_CODE__

string::operator += (const string& y)
{
    cat(*this, y, *this); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator += 
		CALLS
		cat : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_+=
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_+= METHODID:24 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-operator_+=

__BEGIN_METHOD_CODE__

string::operator += (const subString& y)
{
    cat(*this, y, *this); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator += 
		CALLS
		cat : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_+=
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_+= METHODID:25 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-operator_+=

__BEGIN_METHOD_CODE__

string::operator += (const char* y)
{
    cat(*this, y, *this); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator += 
		CALLS
		cat : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_+=
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_+= METHODID:26 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-operator_+=

__BEGIN_METHOD_CODE__

string::operator += (char* y)
{
    cat(*this, y, *this); return *this;
}

__END_METHOD_CODE__


	METHOD string!operator +=
		CALLS
		cat : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_+=
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_+= METHODID:27 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-operator_+=

__BEGIN_METHOD_CODE__

string::operator +=(char y)
{
    cat(*this, y, *this); return *this;
}

__END_METHOD_CODE__


	METHOD string!prepend
		CALLS
		string_Sprepend : _SYSTEM_OR_USER_,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD prepend
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:prepend METHODID:28 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 28-prepend

__BEGIN_METHOD_CODE__

string::prepend(const string& y)
{
    rep = string_Sprepend(rep, y.chars(), y.length()); return *this;
}

__END_METHOD_CODE__


	METHOD string!prepend
		CALLS
		string_Sprepend : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD prepend
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:prepend METHODID:30 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 30-prepend

__BEGIN_METHOD_CODE__

string::prepend(const char* y)
{
    rep = string_Sprepend(rep, y, -1); return *this;
}

__END_METHOD_CODE__


	METHOD string!prepend
		CALLS
		string_Sprepend : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD prepend
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:prepend METHODID:31 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 31-prepend

__BEGIN_METHOD_CODE__

string::prepend(char* y)
{
    rep = string_Sprepend(rep, y, -1); return *this;
}

__END_METHOD_CODE__


	METHOD string!prepend
		CALLS
		string_Sprepend : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD prepend
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:prepend METHODID:32 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 32-prepend

__BEGIN_METHOD_CODE__

string::prepend(char y)
{
    rep = string_Sprepend(rep, &y, 1); return *this;
}

__END_METHOD_CODE__


	METHOD string!prepend
		CALLS
		string_Sprepend : _SYSTEM_OR_USER_,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD prepend
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:prepend METHODID:29 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 29-prepend

__BEGIN_METHOD_CODE__

string::prepend(const subString& y)
{
    rep = string_Sprepend(rep, y.chars(), y.length());return *this;
}

__END_METHOD_CODE__


	METHOD string!reverse
		CALLS
		string_Sreverse : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD reverse
			METHODID 150
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:reverse METHODID:150 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 150-reverse

__BEGIN_METHOD_CODE__

string::reverse()
{
    rep = string_Sreverse(rep, rep);
}

__END_METHOD_CODE__


	METHOD string!upcase
		CALLS
		string_Supcase : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD upcase
			METHODID 151
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:upcase METHODID:151 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 151-upcase

__BEGIN_METHOD_CODE__

string::upcase()
{
    rep = string_Supcase(rep, rep);
}

__END_METHOD_CODE__


	METHOD string!downcase
		CALLS
		string_Sdowncase : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD downcase
			METHODID 152
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:downcase METHODID:152 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 152-downcase

__BEGIN_METHOD_CODE__

string::downcase()
{
    rep = string_Sdowncase(rep, rep);
}

__END_METHOD_CODE__


	METHOD string!capitalize
		CALLS
		string_Scapitalize : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD capitalize
			METHODID 153
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:capitalize METHODID:153 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 153-capitalize

__BEGIN_METHOD_CODE__

string::capitalize()
{
    rep = string_Scapitalize(rep, rep);
}

__END_METHOD_CODE__


	METHOD string!operator [] 

		METRICS
			rep REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD operator_[]
			METHODID 158
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:operator_[] METHODID:158 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 158-operator_[]

__BEGIN_METHOD_CODE__

string::operator [] (unsigned int i)
{



    return rep->s[_ARGS_];
}

__END_METHOD_CODE__


	METHOD string!operator [] 

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 157
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:157 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 157-operator_[]

__BEGIN_METHOD_CODE__

string::operator [] (int i)
{
    return string::operator [] ((unsigned int) i);
}

__END_METHOD_CODE__


	METHOD string!operator [] 

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 154
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:154 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 154-operator_[]

__BEGIN_METHOD_CODE__

string::operator [] (char i)
{
    return string::operator [] ((unsigned int) i);
}

__END_METHOD_CODE__


	METHOD string!operator [] 

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 155
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:155 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 155-operator_[]

__BEGIN_METHOD_CODE__

string::operator [] (short i)
{
    return string::operator [] ((unsigned int) i);
}

__END_METHOD_CODE__


	METHOD string!operator [] 

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 156
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:156 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 156-operator_[]

__BEGIN_METHOD_CODE__

string::operator [] (unsigned short i)
{
    return string::operator [] ((unsigned int) i);
}

__END_METHOD_CODE__


	METHOD string!operator [] 

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 159
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:159 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 159-operator_[]

__BEGIN_METHOD_CODE__

string::operator [] (long i)
{
    return string::operator [] ((unsigned int) i);
}

__END_METHOD_CODE__


	METHOD string!operator [] 

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 160
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:160 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 160-operator_[]

__BEGIN_METHOD_CODE__

string::operator [] (unsigned long i)
{
    return string::operator [] ((unsigned int) i);
}

__END_METHOD_CODE__


	METHOD string!elem

		METRICS
			rep REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD elem
			METHODID 168
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:elem METHODID:168 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 168-elem

__BEGIN_METHOD_CODE__

string::elem(int i)
{ 



    return rep->s[_ARGS_];
}

__END_METHOD_CODE__


	METHOD string!firstchar
		CALLS
		elem : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD firstchar
			METHODID 169
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:firstchar METHODID:169 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 169-firstchar

__BEGIN_METHOD_CODE__

string::firstchar()
{ 
    return elem(0);
}

__END_METHOD_CODE__


	METHOD string!lastchar
		CALLS
		elem : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD lastchar
			METHODID 170
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:lastchar METHODID:170 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 170-lastchar

__BEGIN_METHOD_CODE__

string::lastchar()
{ 
    return elem(length() - 1);
}

__END_METHOD_CODE__


	METHOD string!index
		CALLS
		search : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD index
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:index METHODID:33 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-index

__BEGIN_METHOD_CODE__

string::index(char c, int startpos)
{
    return search(startpos, length(), c);
}

__END_METHOD_CODE__


	METHOD string!index
		CALLS
		search : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD index
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:index METHODID:36 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-index

__BEGIN_METHOD_CODE__

string::index(const char* t, int startpos)
{   
    return search(startpos, length(), t);
}

__END_METHOD_CODE__


	METHOD string!index
		CALLS
		search : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD index
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:index METHODID:37 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-index

__BEGIN_METHOD_CODE__

string::index(char* t, int startpos)
{   
    return search(startpos, length(), t);
}

__END_METHOD_CODE__


	METHOD string!index
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD index
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:index METHODID:34 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-index

__BEGIN_METHOD_CODE__

string::index(const string& y, int startpos)
{   
    return search(startpos, length(), y.chars(), y.length());
}

__END_METHOD_CODE__


	METHOD string!index
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD index
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:index METHODID:35 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-index

__BEGIN_METHOD_CODE__

string::index(const subString& y, int startpos)
{   
    return search(startpos, length(), y.chars(), y.length());
}

__END_METHOD_CODE__


	METHOD string!index
		CALLS
		search : _SYSTEM_OR_USER_,
		chars : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD index
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:index METHODID:38 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-index

__BEGIN_METHOD_CODE__

string::index(const regex& r, int startpos)
{
    int unused;  return r.search(chars(), length(), unused, startpos);
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		search : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 39
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:39 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 39-contains

__BEGIN_METHOD_CODE__

string::contains(char c)
{
    return search(0, length(), c) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		search : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:42 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 42-contains

__BEGIN_METHOD_CODE__

string::contains(const char* t)
{   
    return search(0, length(), t) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		search : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:43 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 43-contains

__BEGIN_METHOD_CODE__

string::contains(char* t)
{   
    return search(0, length(), t) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:40 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-contains

__BEGIN_METHOD_CODE__

string::contains(const string& y)
{   
    return search(0, length(), y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:41 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 41-contains

__BEGIN_METHOD_CODE__

string::contains(const subString& y)
{   
    return search(0, length(), y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:45 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 45-contains

__BEGIN_METHOD_CODE__

string::contains(char c, int p)
{
    return match(p, length(), 0, &c, 1) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 48
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:48 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 48-contains

__BEGIN_METHOD_CODE__

string::contains(const char* t, int p)
{
    return match(p, length(), 0, t) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 49
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:49 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 49-contains

__BEGIN_METHOD_CODE__

string::contains(char* t, int p)
{
    return match(p, length(), 0, t) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		match : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:46 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 46-contains

__BEGIN_METHOD_CODE__

string::contains(const string& y, int p)
{
    return match(p, length(), 0, y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		match : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 47
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:47 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 47-contains

__BEGIN_METHOD_CODE__

string::contains(const subString& y, int p)
{
    return match(p, length(), 0, y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		search : _SYSTEM_OR_USER_,
		chars : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 44
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:44 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 44-contains

__BEGIN_METHOD_CODE__

string::contains(const regex& r)
{
    int unused;  return r.search(chars(), length(), unused, 0) >= 0;
}

__END_METHOD_CODE__


	METHOD string!contains
		CALLS
		match : _SYSTEM_OR_USER_,
		chars : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 50
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:50 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 50-contains

__BEGIN_METHOD_CODE__

string::contains(const regex& r, int p)
{
    return r.match(chars(), length(), p) >= 0;
}

__END_METHOD_CODE__


	METHOD string!matches
		CALLS
		match : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 53
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:53 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 53-matches

__BEGIN_METHOD_CODE__

string::matches(const subString& y, int p)
{
    return match(p, length(), 1, y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD string!matches
		CALLS
		match : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 52
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:52 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 52-matches

__BEGIN_METHOD_CODE__

string::matches(const string& y, int p)
{
    return match(p, length(), 1, y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD string!matches
		CALLS
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 54
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:54 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 54-matches

__BEGIN_METHOD_CODE__

string::matches(const char* t, int p)
{
    return match(p, length(), 1, t) >= 0;
}

__END_METHOD_CODE__


	METHOD string!matches
		CALLS
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 55
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:55 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 55-matches

__BEGIN_METHOD_CODE__

string::matches(char* t, int p)
{
    return match(p, length(), 1, t) >= 0;
}

__END_METHOD_CODE__


	METHOD string!matches
		CALLS
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 51
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:51 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 51-matches

__BEGIN_METHOD_CODE__

string::matches(char c, int p)
{
    return match(p, length(), 1, &c, 1) >= 0;
}

__END_METHOD_CODE__


	METHOD string!matches
		CALLS
		length : string,
		match : _SYSTEM_OR_USER_,
		chars : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 1
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD matches
			METHODID 56
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:1 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:matches METHODID:56 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:1 USEDVARS:0 
		;


#ID 56-matches

__BEGIN_METHOD_CODE__

string::matches(const regex& r, int p)
{
    int l = (p < 0)? -p : length() - p;
    return r.match(chars(), length(), p) == l;
}

__END_METHOD_CODE__


	METHOD subString!contains
		CALLS
		search : _SYSTEM_OR_USER_



		METRICS
			pos REFERRED 2 TIMES,
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:subString CLASSID:1 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 13-contains

__BEGIN_METHOD_CODE__

subString::contains(const char* t)
{   
    return S.search(pos, pos+len, t) >= 0;
}

__END_METHOD_CODE__


	METHOD subString!contains
		CALLS
		search : _SYSTEM_OR_USER_



		METRICS
			pos REFERRED 2 TIMES,
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:subString CLASSID:1 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 14-contains

__BEGIN_METHOD_CODE__

subString::contains(char* t)
{   
    return S.search(pos, pos+len, t) >= 0;
}

__END_METHOD_CODE__


	METHOD subString!contains
		CALLS
		search : _SYSTEM_OR_USER_,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			pos REFERRED 2 TIMES,
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 3
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:3 CLASS:subString CLASSID:1 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 11-contains

__BEGIN_METHOD_CODE__

subString::contains(const string& y)
{   
    return S.search(pos, pos+len, y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD subString!contains
		CALLS
		search : _SYSTEM_OR_USER_,
		chars : subString,
		length : subString



		METRICS
			pos REFERRED 2 TIMES,
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 3
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:3 CLASS:subString CLASSID:1 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 12-contains

__BEGIN_METHOD_CODE__

subString::contains(const subString&  y)
{   
    return S.search(pos, pos+len, y.chars(), y.length()) >= 0;
}

__END_METHOD_CODE__


	METHOD subString!contains
		CALLS
		search : _SYSTEM_OR_USER_



		METRICS
			pos REFERRED 2 TIMES,
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:subString CLASSID:1 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 10-contains

__BEGIN_METHOD_CODE__

subString::contains(char c)
{
    return S.search(pos, pos+len, 0, c) >= 0;
}

__END_METHOD_CODE__


	METHOD subString!contains
		CALLS
		search : _SYSTEM_OR_USER_,
		chars : subString



		METRICS
			len REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 2
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:2 CLASS:subString CLASSID:1 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-contains

__BEGIN_METHOD_CODE__

subString::contains(const regex& r)
{
    int unused;  return r.search(chars(), len, unused, 0) >= 0;
}

__END_METHOD_CODE__


	METHOD subString!matches
		CALLS
		unsigned : _SYSTEM_OR_USER_,
		match : _SYSTEM_OR_USER_,
		chars : subString



		METRICS
			len REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 3
			CLASS subString
			CLASSID 1
			CYCLO 1
			DOTS 1
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:3 CLASS:subString CLASSID:1 CYCLO:1 DOTS:1 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 16-matches

__BEGIN_METHOD_CODE__

subString::matches(const regex& r)
{
    return unsigned(r.match(chars(), len, 0)) == len;
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 141
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:string CLASSID:2 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:141 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 141-gsub

__BEGIN_METHOD_CODE__

string::gsub(const string& pat, const string& r)
{
    return _gsub(pat.chars(), pat.length(), r.chars(), r.length());
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string,
		chars : subString,
		length : subString,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 142
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:string CLASSID:2 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:142 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 142-gsub

__BEGIN_METHOD_CODE__

string::gsub(const subString&  pat, const string& r)
{
    return _gsub(pat.chars(), pat.length(), r.chars(), r.length());
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 149
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:149 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 149-gsub

__BEGIN_METHOD_CODE__

string::gsub(const regex& pat, const string& r)
{
    return _gsub(pat, r.chars(), r.length());
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 143
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:143 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 143-gsub

__BEGIN_METHOD_CODE__

string::gsub(const char* pat, const string& r)
{
    return _gsub(pat, -1, r.chars(), r.length());
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 146
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:146 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 146-gsub

__BEGIN_METHOD_CODE__

string::gsub(char* pat, const string& r)
{
    return _gsub(pat, -1, r.chars(), r.length());
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 144
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:144 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 144-gsub

__BEGIN_METHOD_CODE__

string::gsub(const char* pat, const char* r)
{
    return _gsub(pat, -1, r, -1);
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 145
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:145 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 145-gsub

__BEGIN_METHOD_CODE__

string::gsub(const char* pat, char* r)
{
    return _gsub(pat, -1, r, -1);
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 147
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:147 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 147-gsub

__BEGIN_METHOD_CODE__

string::gsub(char* pat, const char* r)
{
    return _gsub(pat, -1, r, -1);
}

__END_METHOD_CODE__


	METHOD string!gsub
		CALLS
		_gsub : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD gsub
			METHODID 148
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:gsub METHODID:148 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 148-gsub

__BEGIN_METHOD_CODE__

string::gsub(char* pat, char* r)
{
    return _gsub(pat, -1, r, -1);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD after
			METHODID 95
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:after METHODID:95 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 95-after

__BEGIN_METHOD_CODE__

string::after(char* t, int startpos)
{
    return after((const char *)t, startpos);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		at : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 67
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:at METHODID:67 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 67-at

__BEGIN_METHOD_CODE__

string::at(char* t, int startpos)
{
    return at((const char *)t, startpos);
}

__END_METHOD_CODE__


	METHOD string!before

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD before
			METHODID 74
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:before METHODID:74 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 74-before

__BEGIN_METHOD_CODE__

string::before(char* t, int startpos)
{
    return before((const char *)t, startpos);
}

__END_METHOD_CODE__


	METHOD string!del
		CALLS
		del : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD del
			METHODID 138
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:del METHODID:138 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 138-del

__BEGIN_METHOD_CODE__

string::del(char* t, int startpos)
{
    del((const char *)t, startpos);
}

__END_METHOD_CODE__


	METHOD string!freq
		CALLS
		freq : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD freq
			METHODID 61
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:freq METHODID:61 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 61-freq

__BEGIN_METHOD_CODE__

string::freq(char* t)
{
    return freq((const char *)t);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		from : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD from
			METHODID 88
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:from METHODID:88 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 88-from

__BEGIN_METHOD_CODE__

string::from(char* t, int startpos)
{
    return from((const char *)t, startpos);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		through : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD through
			METHODID 81
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:through METHODID:81 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 81-through

__BEGIN_METHOD_CODE__

string::through(char* t, int startpos)
{
    return through((const char *)t, startpos);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		at : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 62
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:at METHODID:62 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 62-at

__BEGIN_METHOD_CODE__

string::at(int pos, int len)
{
    return((string *)this)->at(pos, len);
}

__END_METHOD_CODE__


	METHOD string!operator
		CALLS
		operator : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD operator_
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:operator_ METHODID:-1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID -1-operator_

__BEGIN_METHOD_CODE__

string::operator()
{
    return((string *)this)->operator()(pos, len);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		at : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 64
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:at METHODID:64 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 64-at

__BEGIN_METHOD_CODE__

string::at(const string& x, int startpos)
{
    return((string *)this)->at(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		at : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 65
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:at METHODID:65 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 65-at

__BEGIN_METHOD_CODE__

string::at(const subString&  x, int startpos)
{
    return((string *)this)->at(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		at : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 66
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:at METHODID:66 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 66-at

__BEGIN_METHOD_CODE__

string::at(const char* t, int startpos)
{
    return((string *)this)->at(t, startpos);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		at : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 68
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:at METHODID:68 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 68-at

__BEGIN_METHOD_CODE__

string::at(char c, int startpos)
{
    return((string *)this)->at(c, startpos);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		at : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 69
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:at METHODID:69 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 69-at

__BEGIN_METHOD_CODE__

string::at(const regex& r, int startpos)
{
    return((string *)this)->at(r, startpos);
}

__END_METHOD_CODE__


	METHOD string!before

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD before
			METHODID 70
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:before METHODID:70 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 70-before

__BEGIN_METHOD_CODE__

string::before(int pos)
{
    return((string *)this)->before(pos);
}

__END_METHOD_CODE__


	METHOD string!before

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD before
			METHODID 71
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:before METHODID:71 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 71-before

__BEGIN_METHOD_CODE__

string::before(const string& x, int startpos)
{
    return((string *)this)->before(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!before

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD before
			METHODID 72
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:before METHODID:72 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 72-before

__BEGIN_METHOD_CODE__

string::before(const subString& x, int startpos)
{
    return((string *)this)->before(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!before

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD before
			METHODID 73
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:before METHODID:73 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 73-before

__BEGIN_METHOD_CODE__

string::before(const char* t, int startpos)
{
    return((string *)this)->before(t, startpos);
}

__END_METHOD_CODE__


	METHOD string!before

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD before
			METHODID 75
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:before METHODID:75 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 75-before

__BEGIN_METHOD_CODE__

string::before(char c, int startpos)
{
    return((string *)this)->before(c, startpos);
}

__END_METHOD_CODE__


	METHOD string!before

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD before
			METHODID 76
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:before METHODID:76 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 76-before

__BEGIN_METHOD_CODE__

string::before(const regex& r, int startpos)
{
    return((string *)this)->before(r, startpos);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		through : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD through
			METHODID 77
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:through METHODID:77 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 77-through

__BEGIN_METHOD_CODE__

string::through(int pos)
{
    return((string *)this)->through(pos);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		through : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD through
			METHODID 78
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:through METHODID:78 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 78-through

__BEGIN_METHOD_CODE__

string::through(const string& x, int startpos)
{
    return((string *)this)->through(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		through : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD through
			METHODID 79
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:through METHODID:79 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 79-through

__BEGIN_METHOD_CODE__

string::through(const subString& x, int startpos)
{
    return((string *)this)->through(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		through : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD through
			METHODID 80
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:through METHODID:80 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 80-through

__BEGIN_METHOD_CODE__

string::through(const char* t, int startpos)
{
    return((string *)this)->through(t, startpos);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		through : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD through
			METHODID 82
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:through METHODID:82 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 82-through

__BEGIN_METHOD_CODE__

string::through(char c, int startpos)
{
    return((string *)this)->through(c, startpos);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		through : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD through
			METHODID 83
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:through METHODID:83 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 83-through

__BEGIN_METHOD_CODE__

string::through(const regex& r, int startpos)
{
    return((string *)this)->through(r, startpos);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		from : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD from
			METHODID 84
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:from METHODID:84 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 84-from

__BEGIN_METHOD_CODE__

string::from(int pos)
{
    return((string *)this)->from(pos);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		from : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD from
			METHODID 85
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:from METHODID:85 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 85-from

__BEGIN_METHOD_CODE__

string::from(const string& x, int startpos)
{
    return((string *)this)->from(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		from : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD from
			METHODID 86
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:from METHODID:86 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 86-from

__BEGIN_METHOD_CODE__

string::from(const subString& x, int startpos)
{
    return((string *)this)->from(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		from : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD from
			METHODID 87
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:from METHODID:87 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 87-from

__BEGIN_METHOD_CODE__

string::from(const char* t, int startpos)
{
    return((string *)this)->from(t, startpos);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		from : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD from
			METHODID 89
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:from METHODID:89 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 89-from

__BEGIN_METHOD_CODE__

string::from(char c, int startpos)
{
    return((string *)this)->from(c, startpos);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		from : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD from
			METHODID 90
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:from METHODID:90 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 90-from

__BEGIN_METHOD_CODE__

string::from(const regex& r, int startpos)
{
    return((string *)this)->from(r, startpos);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD after
			METHODID 91
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:after METHODID:91 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 91-after

__BEGIN_METHOD_CODE__

string::after(int pos)
{
    return((string *)this)->after(pos);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD after
			METHODID 92
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:after METHODID:92 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 92-after

__BEGIN_METHOD_CODE__

string::after(const string& x, int startpos)
{
    return((string *)this)->after(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD after
			METHODID 93
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:after METHODID:93 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 93-after

__BEGIN_METHOD_CODE__

string::after(const subString& x, int startpos)
{
    return((string *)this)->after(x, startpos);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD after
			METHODID 94
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:after METHODID:94 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 94-after

__BEGIN_METHOD_CODE__

string::after(const char* t, int startpos)
{
    return((string *)this)->after(t, startpos);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD after
			METHODID 96
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:after METHODID:96 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 96-after

__BEGIN_METHOD_CODE__

string::after(char c, int startpos)
{
    return((string *)this)->after(c, startpos);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD after
			METHODID 97
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:after METHODID:97 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 97-after

__BEGIN_METHOD_CODE__

string::after(const regex& r, int startpos)
{
    return((string *)this)->after(r, startpos);
}

__END_METHOD_CODE__


	METHOD string!_substr
		CALLS
		length : string,
		subString : subString,
		subString : subString



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 1
			METHOD _substr
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:6 LT:1 METHOD:_substr METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-_substr

__BEGIN_METHOD_CODE__

string::_substr(int first, int l)
{
    if(first < 0 || (unsigned)(first + l) > length())
	return subString(_nilstring, 0, 0);
    else 
	return subString(*this, first, l);
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/ctrl.o.nu.met	  Methods Number  131
#===================================================================
#Process file ../../code/ddd-3.0/ddd/cwd.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/cook.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/hash.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/home.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/rxclass.o.nu.met ... 


	METHOD regex!regex

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS regex
			CLASSID 0
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD regex
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:regex CLASSID:0 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:regex METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-regex

__BEGIN_METHOD_CODE__

regex::regex(rxmatchproc p, void *d)
{



}

__END_METHOD_CODE__


	METHOD regex!search
		CALLS
		string : string,
		matcher : _SYSTEM_OR_USER_



		METRICS
			matcher REFERRED 2 TIMES,
			data REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 13
			AVVARLEN 5
			CALLEDN 2
			CLASS regex
			CLASSID 0
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 3
			GT 4
			IN 0
			INDR 0
			LE 0
			LOC 46
			LT 4
			METHOD search
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:13 AVVARLEN:5 CALLEDN:2 CLASS:regex CLASSID:0 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:3 GT:4 IN:0 INDR:0 LE:0 LOC:46 LT:4 METHOD:search METHODID:3 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:2 
		;


#ID 3-search

__BEGIN_METHOD_CODE__

regex::search(const char* s, int len, int& matchlen, int startpos)
{
    string substr;
    int direction = +1;

    if(startpos < 0)
    {
	startpos += len;
	direction = -1;
    }
    if(startpos < 0 || startpos > len)
	return -1;

    if(s[_ARGS_] != '\0')
    {
	substr = string(s, len);
	s = (char *)substr;
    }
     ;






    for(; startpos >= 0 && startpos < len; startpos += direction)
    {
	if(matcher != 0)
	{
	    matchlen = matcher(data, s, len, startpos);
	    if(matchlen >= 0)
		break;
	}


    }

    if(startpos < 0 || startpos >= len)
	return -1;

    int matchpos = startpos;




    return matchpos;
}

__END_METHOD_CODE__


	METHOD regex!match
		CALLS
		matcher : _SYSTEM_OR_USER_



		METRICS
			matcher REFERRED 2 TIMES,
			data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 5
			CALLEDN 1
			CLASS regex
			CLASSID 0
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD match
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:5 CALLEDN:1 CLASS:regex CLASSID:0 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:match METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-match

__BEGIN_METHOD_CODE__

regex::match(const char *s, int len, int pos)
{
    if(matcher != 0)
	return matcher(data, s, len, pos);




    return -1;
}

__END_METHOD_CODE__


	METHOD regex!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS regex
			CLASSID 0
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD OK
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:regex CLASSID:0 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:OK METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-OK

__BEGIN_METHOD_CODE__

regex::OK()
{



    return true;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/rxclass.o.nu.met	  Methods Number  4
#====================================================================
#Process file ../../code/ddd-3.0/ddd/sigName.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/strclass.o.nu.met ... 


	METHOD string!error
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 6
			METHOD error
			METHODID 178
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:6 METHOD:error METHODID:178 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 178-error

__BEGIN_METHOD_CODE__

string::error(const char* msg)
{
    cerr << _REMOVED_STR_ << msg << _REMOVED_STR_;
    abort();
}

__END_METHOD_CODE__


	METHOD string!operator const char*
		CALLS
		chars : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_char*
			METHODID 172
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_char* METHODID:172 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 172-operator_char*

__BEGIN_METHOD_CODE__

string::operator const char*()
{ 
    return(const char *)chars();
}

__END_METHOD_CODE__


	METHOD string!operator char*
		CALLS
		chars : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_char*
			METHODID 172
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_char* METHODID:172 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 172-operator_char*

__BEGIN_METHOD_CODE__

string::operator char*()
{ 
    return(char *)chars();
}

__END_METHOD_CODE__


	METHOD string!alloc
		CALLS
		string_Sresize : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 5
			LT 0
			METHOD alloc
			METHODID 176
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:5 LT:0 METHOD:alloc METHODID:176 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 176-alloc

__BEGIN_METHOD_CODE__

string::alloc(int newsize)
{
    unsigned short old_len = rep->len;
    rep = string_Sresize(rep, newsize);
    rep->len = old_len;
}

__END_METHOD_CODE__


	METHOD string!search
		CALLS
		chars : string



		METRICS
			ARRAYOP 3
			ASS 6
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 7
			DOTS 0
			EQTEST 2
			EXPRORCALL 10
			GE 2
			GT 3
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 1
			METHOD search
			METHODID 1
			MMINUS 2
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:6 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:7 DOTS:0 EQTEST:2 EXPRORCALL:10 GE:2 GT:3 IN:0 INDR:0 LE:0 LOC:18 LT:1 METHOD:search METHODID:1 MMINUS:2 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-search

__BEGIN_METHOD_CODE__

string::search(int start, int sl, char c)
{
    const char* s = chars();
    if(sl > 0)
    {
	if(start >= 0)
	{
	    const char* a = &(s[_ARGS_]);
	    const char* lasta = &(s[_ARGS_]);
	    while(a < lasta) if(*a++ == c) return --a - s;
	}
	else
	{
	    const char* a = &(s[_ARGS_]);
	    while(--a >= s) if(*a == c) return a - s;
	}
    }
    return -1;
}

__END_METHOD_CODE__


	METHOD string!search
		CALLS
		chars : string,
		slen : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 6
			ASS 16
			AVVARLEN 0
			CALLEDN 2
			CLASS string
			CLASSID 2
			CYCLO 10
			DOTS 0
			EQTEST 2
			EXPRORCALL 17
			GE 3
			GT 5
			IN 0
			INDR 0
			LE 1
			LOC 34
			LT 3
			METHOD search
			METHODID 0
			MMINUS 4
			OUT 0
			PARNUM 4
			PPLUS 4
			RETPOINT 3
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:16 AVVARLEN:0 CALLEDN:2 CLASS:string CLASSID:2 CYCLO:10 DOTS:0 EQTEST:2 EXPRORCALL:17 GE:3 GT:5 IN:0 INDR:0 LE:1 LOC:34 LT:3 METHOD:search METHODID:0 MMINUS:4 OUT:0 PARNUM:4 PPLUS:4 RETPOINT:3 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-search

__BEGIN_METHOD_CODE__

string::search(int start, int sl, const char* t, int tl)
{
    const char* s = chars();
    if(tl < 0) tl = slen(t);
    if(sl > 0 && tl > 0)
    {
	if(start >= 0)
	{
	    const char* lasts = &(s[_ARGS_]);
	    const char* lastt = &(t[_ARGS_]);
	    const char* p = &(s[_ARGS_]);

	    while(p <= lasts)
	    {
		const char* x = p++;
		const char* y = t;
		while(*x++ == *y++) if(y >= lastt) return --p - s;
	    }
	}
	else
	{
	    const char* firsts = &(s[_ARGS_]);
	    const char* lastt =  &(t[_ARGS_]);
	    const char* p = &(s[_ARGS_]); 

	    while(--p >= firsts)
	    {
		const char* x = p;
		const char* y = lastt;
		while(*x-- == *y--) if(y < t) return ++x - s;
	    }
	}
    }
    return -1;
}

__END_METHOD_CODE__


	METHOD string!match
		CALLS
		slen : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 9
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 8
			DOTS 0
			EQTEST 2
			EXPRORCALL 10
			GE 2
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 20
			LT 4
			METHOD match
			METHODID 2
			MMINUS 1
			OUT 0
			PARNUM 5
			PPLUS 2
			RETPOINT 5
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:9 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:8 DOTS:0 EQTEST:2 EXPRORCALL:10 GE:2 GT:2 IN:0 INDR:1 LE:0 LOC:20 LT:4 METHOD:match METHODID:2 MMINUS:1 OUT:0 PARNUM:5 PPLUS:2 RETPOINT:5 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-match

__BEGIN_METHOD_CODE__

string::match(int start, int sl, int exact, const char* t, int tl)
{
    if(tl < 0) tl = slen(t);

    if(start < 0)
    {
	start = sl + start - tl + 1;
	if(start < 0 || (exact && start != 0))
	    return -1;
    }
    else if(exact && sl - start != tl)
	return -1;

    if(sl == 0 || tl == 0 || sl - start < tl || start >= sl)
	return -1;

    int n = tl;
    const char* s = &(rep->s[_ARGS_]);
    while(--n >= 0) if(*s++ != *t++) return -1;
    return tl;
}

__END_METHOD_CODE__


	METHOD subString!assign
		CALLS
		slen : _SYSTEM_OR_USER_,
		string_Sresize : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		scopy : _SYSTEM_OR_USER_,
		string_DeleteRep : _SYSTEM_OR_USER_,
		unsigned : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		unsigned : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		scopy : _SYSTEM_OR_USER_,
		revcopy : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_



		METRICS
			pos REFERRED 2 TIMES,
			len REFERRED 8 TIMES,
			ARRAYOP 10
			ASS 8
			AVVARLEN 3
			CALLEDN 13
			CLASS subString
			CLASSID 1
			CYCLO 6
			DOTS 2
			EQTEST 3
			EXPRORCALL 28
			GE 1
			GT 1
			IN 0
			INDR 16
			LE 0
			LOC 31
			LT 2
			METHOD assign
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:10 ASS:8 AVVARLEN:3 CALLEDN:13 CLASS:subString CLASSID:1 CYCLO:6 DOTS:2 EQTEST:3 EXPRORCALL:28 GE:1 GT:1 IN:0 INDR:16 LE:0 LOC:31 LT:2 METHOD:assign METHODID:0 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:2 
		;


#ID 0-assign

__BEGIN_METHOD_CODE__

subString::assign(strRep* ysrc, const char* ys, int ylen)
{
    if(&S == &_nilstring) return;

    if(ylen < 0) ylen = slen(ys);
    strRep* targ = S.rep;
    unsigned sl = targ->len - len + ylen;

    if(ysrc == targ || sl >= targ->sz)
    {
	strRep* oldtarg = targ;
	targ = string_Sresize(0, sl);
	ncopy(oldtarg->s, targ->s, pos);
	ncopy(ys, &(targ->s[_ARGS_]), ylen);
	scopy(&(oldtarg->s[_ARGS_]), &(targ->s[_ARGS_]));
	string_DeleteRep(oldtarg);
    }
    else if(len == unsigned(ylen))
	ncopy(ys, &(targ->s[_ARGS_]), len);
    else if(unsigned(ylen) < len)
    {
	ncopy(ys, &(targ->s[_ARGS_]), ylen);
	scopy(&(targ->s[_ARGS_]), &(targ->s[_ARGS_]));
    }
    else
    {
	revcopy(&(targ->s[_ARGS_]), &(targ->s[_ARGS_]), targ->len-pos-len +1);
	ncopy(ys, &(targ->s[_ARGS_]), ylen);
    }
    targ->len = sl;
    S.rep = targ;
}

__END_METHOD_CODE__


	METHOD string!_gsub
		CALLS
		slen : _SYSTEM_OR_USER_,
		slen : _SYSTEM_OR_USER_,
		length : string,
		chars : string,
		search : string,
		string_Sresize : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		string_Sresize : _SYSTEM_OR_USER_,
		ncopy0 : _SYSTEM_OR_USER_,
		ncopy0 : _SYSTEM_OR_USER_,
		string_DeleteRep : _SYSTEM_OR_USER_,
		string_DeleteRep : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 6 TIMES,
			ARRAYOP 5
			ASS 31
			AVVARLEN 3
			CALLEDN 13
			CLASS string
			CLASSID 2
			CYCLO 11
			DOTS 0
			EQTEST 2
			EXPRORCALL 28
			GE 2
			GT 2
			IN 0
			INDR 11
			LE 3
			LOC 68
			LT 7
			METHOD _gsub
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 36
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:31 AVVARLEN:3 CALLEDN:13 CLASS:string CLASSID:2 CYCLO:11 DOTS:0 EQTEST:2 EXPRORCALL:28 GE:2 GT:2 IN:0 INDR:11 LE:3 LOC:68 LT:7 METHOD:_gsub METHODID:3 MMINUS:0 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:36 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-_gsub

__BEGIN_METHOD_CODE__

string::_gsub(const char* pat, int pl, const char* r, int rl)
{
    int nmatches = 0;
    if(pl < 0) pl = slen(pat);
    if(rl < 0) rl = slen(r);
    int sl = length();
    if(sl <= 0 || pl <= 0 || sl < pl)
	return nmatches;
  
    const char* s = chars();

     
    strRep* nrep = 0;
    int nsz = 0;
    char* x = 0;

    int si = 0;
    int xi = 0;
    int remaining = sl;

    while(remaining >= pl)
    {
	int pos = search(si, sl, pat, pl);
	if(pos < 0)
	    break;
	else
	{
	    ++nmatches;
	    int mustfit = xi + remaining + rl - pl;
	    if(mustfit >= nsz)
	    {
		if(nrep != 0) nrep->len = xi;
		nrep = string_Sresize(nrep, mustfit);
		nsz = nrep->sz;
		x = nrep->s;
	    }
	    pos -= si;
	    ncopy(&(s[_ARGS_]), &(x[_ARGS_]), pos);
	    ncopy(r, &(x[_ARGS_]), rl);
	    si += pos + pl;
	    remaining -= pos + pl;
	    xi += pos + rl;
	}
    }

    if(nrep == 0)
    {
	if(nmatches == 0)
	    return nmatches;
	else
	    nrep = string_Sresize(nrep, xi+remaining);
    }

    ncopy0(&(s[_ARGS_]), &(x[_ARGS_]), remaining);
    nrep->len = xi + remaining;

    if(nrep->len <= rep->sz)    
    {
	rep->len = nrep->len;
	ncopy0(nrep->s, rep->s, rep->len);
	string_DeleteRep(nrep);
    }
    else
    {
	string_DeleteRep(rep);
	rep = nrep;
    }
    return nmatches;
}

__END_METHOD_CODE__


	METHOD string!_gsub
		CALLS
		length : string,
		slen : _SYSTEM_OR_USER_,
		chars : string,
		search : _SYSTEM_OR_USER_,
		string_Sresize : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		ncopy : _SYSTEM_OR_USER_,
		string_Sresize : _SYSTEM_OR_USER_,
		ncopy0 : _SYSTEM_OR_USER_,
		ncopy0 : _SYSTEM_OR_USER_,
		string_DeleteRep : _SYSTEM_OR_USER_,
		string_DeleteRep : _SYSTEM_OR_USER_



		METRICS
			rep REFERRED 6 TIMES,
			ARRAYOP 5
			ASS 30
			AVVARLEN 3
			CALLEDN 12
			CLASS string
			CLASSID 2
			CYCLO 10
			DOTS 1
			EQTEST 2
			EXPRORCALL 26
			GE 1
			GT 2
			IN 0
			INDR 11
			LE 3
			LOC 70
			LT 5
			METHOD _gsub
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 36
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:30 AVVARLEN:3 CALLEDN:12 CLASS:string CLASSID:2 CYCLO:10 DOTS:1 EQTEST:2 EXPRORCALL:26 GE:1 GT:2 IN:0 INDR:11 LE:3 LOC:70 LT:5 METHOD:_gsub METHODID:4 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:36 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-_gsub

__BEGIN_METHOD_CODE__

string::_gsub(const regex& pat, const char* r, int rl)
{
    int nmatches = 0;
    int sl = length();
    if(sl <= 0)
	return nmatches;

    if(rl < 0) rl = slen(r);

    const char* s = chars();

    strRep* nrep = 0;
    int nsz = 0;

    char* x = 0;

    int si = 0;
    int xi = 0;
    int remaining = sl;
    int  pos, pl = 0;		 

    while(remaining > 0)
    {
	 
	pos = pat.search(s, sl, pl, si);
	if(pos < 0 || pl <= 0)
	    break;
	else
	{
	    ++nmatches;
	    int mustfit = xi + remaining + rl - pl;
	    if(mustfit >= nsz)
	    {
		if(nrep != 0) nrep->len = xi;
		nrep = string_Sresize(nrep, mustfit);
		x = nrep->s;
		nsz = nrep->sz;
	    }
	    pos -= si;
	    ncopy(&(s[_ARGS_]), &(x[_ARGS_]), pos);
	    ncopy(r, &(x[_ARGS_]), rl);
	    si += pos + pl;
	    remaining -= pos + pl;
	    xi += pos + rl;
	}
    }

    if(nrep == 0)
    {
	if(nmatches == 0)
	    return nmatches;
	else
	    nrep = string_Sresize(nrep, xi+remaining);
    }

    ncopy0(&(s[_ARGS_]), &(x[_ARGS_]), remaining);
    nrep->len = xi + remaining;

    if(nrep->len <= rep->sz)    
    {
	rep->len = nrep->len;
	ncopy0(nrep->s, rep->s, rep->len);
	string_DeleteRep(nrep);
    }
    else
    {
	string_DeleteRep(rep);
	rep = nrep;
    }
    return nmatches;
}

__END_METHOD_CODE__


	METHOD string!del
		CALLS
		length : string,
		length : string,
		ncopy0 : _SYSTEM_OR_USER_,
		length : string



		METRICS
			rep REFERRED 3 TIMES,
			ARRAYOP 2
			ASS 4
			AVVARLEN 3
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 1
			LOC 7
			LT 2
			METHOD del
			METHODID 134
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:4 AVVARLEN:3 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:1 IN:0 INDR:3 LE:1 LOC:7 LT:2 METHOD:del METHODID:134 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 134-del

__BEGIN_METHOD_CODE__

string::del(int pos, int len)
{
    if(pos < 0 || len <= 0 || (unsigned)(pos + len) > length()) return;
    int nlen = length() - len;
    int first = pos + len;
    ncopy0(&(rep->s[_ARGS_]), &(rep->s[_ARGS_]), length() - first);
    rep->len = nlen;
}

__END_METHOD_CODE__


	METHOD string!del
		CALLS
		search : _SYSTEM_OR_USER_,
		chars : string,
		length : string,
		del : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD del
			METHODID 140
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:del METHODID:140 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 140-del

__BEGIN_METHOD_CODE__

string::del(const regex& r, int startpos)
{
    int mlen;
    int first = r.search(chars(), length(), mlen, startpos);
    del(first, mlen);
}

__END_METHOD_CODE__


	METHOD string!del
		CALLS
		slen : _SYSTEM_OR_USER_,
		search : string,
		length : string,
		del : string



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD del
			METHODID 137
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:del METHODID:137 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 137-del

__BEGIN_METHOD_CODE__

string::del(const char* t, int startpos)
{
    int tlen = slen(t);
    int p = search(startpos, length(), t, tlen);
    del(p, tlen);
}

__END_METHOD_CODE__


	METHOD string!del
		CALLS
		del : string,
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD del
			METHODID 135
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:del METHODID:135 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 135-del

__BEGIN_METHOD_CODE__

string::del(const string& y, int startpos)
{
    del(search(startpos, length(), y.chars(), y.length()), y.length());
}

__END_METHOD_CODE__


	METHOD string!del
		CALLS
		del : string,
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD del
			METHODID 136
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:del METHODID:136 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 136-del

__BEGIN_METHOD_CODE__

string::del(const subString& y, int startpos)
{
    del(search(startpos, length(), y.chars(), y.length()), y.length());
}

__END_METHOD_CODE__


	METHOD string!del
		CALLS
		del : string,
		search : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD del
			METHODID 139
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:del METHODID:139 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 139-del

__BEGIN_METHOD_CODE__

string::del(char c, int startpos)
{
    del(search(startpos, length(), c), 1);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		_substr : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD at
			METHODID 62
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:at METHODID:62 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 62-at

__BEGIN_METHOD_CODE__

string::at(int first, int len)
{
    return _substr(first, len);
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD at
			METHODID 64
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:at METHODID:64 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 64-at

__BEGIN_METHOD_CODE__

string::at(const string& y, int startpos)
{
    int first = search(startpos, length(), y.chars(), y.length());
    return _substr(first,  y.length());
}

__END_METHOD_CODE__


	METHOD string!at
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD at
			METHODID 65
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:at METHODID:65 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 65-at

__BEGIN_METHOD_CODE__

string::at(const subString& y, int startpos)
{
    int first = search(startpos, length(), y.chars(), y.length());
    return _substr(first, y.length());
}

__END_METHOD_CODE__


	METHOD string!before
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD before
			METHODID 71
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:before METHODID:71 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 71-before

__BEGIN_METHOD_CODE__

string::before(const string& y, int startpos)
{
    int last = search(startpos, length(), y.chars(), y.length());
    return _substr(0, last);
}

__END_METHOD_CODE__


	METHOD string!before
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD before
			METHODID 72
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:before METHODID:72 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 72-before

__BEGIN_METHOD_CODE__

string::before(const subString& y, int startpos)
{
    int last = search(startpos, length(), y.chars(), y.length());
    return _substr(0, last);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 7
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD through
			METHODID 78
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:7 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:through METHODID:78 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 78-through

__BEGIN_METHOD_CODE__

string::through(const string& y, int startpos)
{
    int last = search(startpos, length(), y.chars(), y.length());
    if(last >= 0) last += y.length();
    return _substr(0, last);
}

__END_METHOD_CODE__


	METHOD string!through
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 7
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD through
			METHODID 79
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:7 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:through METHODID:79 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 79-through

__BEGIN_METHOD_CODE__

string::through(const subString& y, int startpos)
{
    int last = search(startpos, length(), y.chars(), y.length());
    if(last >= 0) last += y.length();
    return _substr(0, last);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS string
			CLASSID 2
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 8
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD after
			METHODID 92
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:string CLASSID:2 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:8 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:after METHODID:92 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 92-after

__BEGIN_METHOD_CODE__

string::after(const string& y, int startpos)
{
    int first = search(startpos, length(), y.chars(), y.length());
    if(first >= 0) first += y.length();
    return _substr(first, length() - first);
}

__END_METHOD_CODE__


	METHOD string!after
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS string
			CLASSID 2
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 8
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD after
			METHODID 93
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:string CLASSID:2 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:8 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:after METHODID:93 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 93-after

__BEGIN_METHOD_CODE__

string::after(const subString& y, int startpos)
{
    int first = search(startpos, length(), y.chars(), y.length());
    if(first >= 0) first += y.length();
    return _substr(first, length() - first);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD from
			METHODID 85
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:from METHODID:85 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 85-from

__BEGIN_METHOD_CODE__

string::from(const string& y, int startpos)
{
    int first = search(startpos, length(), y.chars(), y.length());
    return _substr(first, length() - first);
}

__END_METHOD_CODE__


	METHOD string!from
		CALLS
		search : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		_substr : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 6
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD from
			METHODID 86
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:6 CLASS:string CLASSID:2 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:from METHODID:86 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 86-from

__BEGIN_METHOD_CODE__

string::from(const subString& y, int startpos)
{
    int first = search(startpos, length(), y.chars(), y.length());
    return _substr(first, length() - first);
}

__END_METHOD_CODE__


	METHOD string!freq
		CALLS
		length : string,
		match : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 5
			CLASS string
			CLASSID 2
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 8
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 1
			METHOD freq
			METHODID 59
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:5 CLASS:string CLASSID:2 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:8 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:6 LT:1 METHOD:freq METHODID:59 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 59-freq

__BEGIN_METHOD_CODE__

string::freq(const subString& y)
{
    int found = 0;
    for(unsigned int i = 0; i < length(); i++) 
	if(match(i,length(),0,y.chars(), y.length())>= 0) found++;
    return(found);
}

__END_METHOD_CODE__


	METHOD string!freq
		CALLS
		length : string,
		match : string,
		length : string,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 5
			CLASS string
			CLASSID 2
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 8
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 1
			METHOD freq
			METHODID 58
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:5 CLASS:string CLASSID:2 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:8 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:6 LT:1 METHOD:freq METHODID:58 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 58-freq

__BEGIN_METHOD_CODE__

string::freq(const string& y)
{
    int found = 0;
    for(unsigned int i = 0; i < length(); i++) 
	if(match(i,length(),0,y.chars(),y.length()) >= 0) found++;
    return(found);
}

__END_METHOD_CODE__


	METHOD string!freq
		CALLS
		length : string,
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 1
			METHOD freq
			METHODID 60
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:6 LT:1 METHOD:freq METHODID:60 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 60-freq

__BEGIN_METHOD_CODE__

string::freq(const char* t)
{
    int found = 0;
    for(unsigned int i = 0; i < length(); i++) 
	if(match(i,length(),0,t) >= 0) found++;
    return(found);
}

__END_METHOD_CODE__


	METHOD string!freq
		CALLS
		length : string,
		match : string,
		length : string



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS string
			CLASSID 2
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 1
			METHOD freq
			METHODID 57
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:string CLASSID:2 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:6 LT:1 METHOD:freq METHODID:57 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 57-freq

__BEGIN_METHOD_CODE__

string::freq(char c)
{
    int found = 0;
    for(unsigned int i = 0; i < length(); i++) 
	if(match(i,length(),0,&c,1) >= 0) found++;
    return(found);
}

__END_METHOD_CODE__


	METHOD string!OK
		CALLS
		error : string



		METRICS
			rep REFERRED 4 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 3
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 7
			LT 0
			METHOD OK
			METHODID 179
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:3 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:7 LT:0 METHOD:OK METHODID:179 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 179-OK

__BEGIN_METHOD_CODE__

string::OK()
{
    if(rep == 0		      
	|| rep->len > rep->sz	      
	|| rep->s[_ARGS_] != '\0')  
	error(_REMOVED_STR_);
    return true;
}

__END_METHOD_CODE__


	METHOD subString!OK
		CALLS
		OK : _SYSTEM_OR_USER_,
		error : string



		METRICS
			pos REFERRED 1 TIMES,
			len REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 2
			CLASS subString
			CLASSID 1
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 1
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD OK
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:2 CLASS:subString CLASSID:1 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:1 GT:1 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:OK METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 20-OK

__BEGIN_METHOD_CODE__

subString::OK()
{
     
    if(!S.OK() || pos + len >= S.rep->len)
	S.error(_REMOVED_STR_);
    return true;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/strclass.o.nu.met	  Methods Number  33
#======================================================================
#Process file ../../code/ddd-3.0/ddd/tabs.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/SignalB.o.nu.met ... 


	METHOD SignalBlocker!SignalBlocker
		CALLS
		sigemptyset : _SYSTEM_OR_USER_,
		sigaddset : _SYSTEM_OR_USER_,
		sigprocmask : _SYSTEM_OR_USER_



		METRICS
			old_set REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 3
			CLASS SignalBlocker
			CLASSID 3
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD SignalBlocker
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:3 CLASS:SignalBlocker CLASSID:3 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:SignalBlocker METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-SignalBlocker

__BEGIN_METHOD_CODE__

SignalBlocker::SignalBlocker(int signum)
{

     
    sigset_t new_set;

    sigemptyset(&new_set);
    sigaddset(&new_set, signum);
    sigprocmask(0 , &new_set, &old_set);

}

__END_METHOD_CODE__


	METHOD SignalBlocker!SignalBlocker
		CALLS
		sigfillset : _SYSTEM_OR_USER_,
		sigprocmask : _SYSTEM_OR_USER_



		METRICS
			old_set REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 2
			CLASS SignalBlocker
			CLASSID 3
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD SignalBlocker
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:2 CLASS:SignalBlocker CLASSID:3 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:SignalBlocker METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-SignalBlocker

__BEGIN_METHOD_CODE__

SignalBlocker::SignalBlocker()
{

     
    sigset_t new_set;

    sigfillset(&new_set);
    sigprocmask(0 , &new_set, &old_set);

}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/SignalB.o.nu.met	  Methods Number  2
#====================================================================
#Process file ../../code/ddd-3.0/ddd/TypeInfo.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/UniqueId.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/MemCheck.o.nu.met ... 


	METHOD MemCheck!init
		CALLS
		init : _SYSTEM_OR_USER_,
		init : _SYSTEM_OR_USER_



		METRICS
			tics REFERRED 1 TIMES,
			freeBytes REFERRED 1 TIMES,
			allocBytes REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 7
			CALLEDN 2
			CLASS MemCheck
			CLASSID 6
			CYCLO 2
			DOTS 4
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD init
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:7 CALLEDN:2 CLASS:MemCheck CLASSID:6 CYCLO:2 DOTS:4 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:init METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:3 
		;


#ID 3-init

__BEGIN_METHOD_CODE__

MemCheck::init()
{
    if(freebase.s.magic != MAGIC)
    {
	freebase.init();
	allocbase.init();
	freep      = &freebase;
	allocp     = &allocbase;
	freeBytes  = 0;
	allocBytes = 0;
	tics       = 1;
    }
}

__END_METHOD_CODE__


	METHOD MemCheck!validate
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS MemCheck
			CLASSID 6
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 8
			METHOD validate
			METHODID 2
			MMINUS 0
			OUT 4
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:MemCheck CLASSID:6 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:8 METHOD:validate METHODID:2 MMINUS:0 OUT:4 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-validate

__BEGIN_METHOD_CODE__

MemCheck::validate(MemCheckHeader *p, char *src)
{
    if(p->s.magic != MAGIC)
    {
	cerr << src << _REMOVED_STR_ << (void *)p << _REMOVED_STR_;
	abort();
    }
}

__END_METHOD_CODE__


	METHOD MemCheck!alloc
		CALLS
		init : MemCheck,
		validate : MemCheck,
		validate : MemCheck,
		morecore : MemCheck



		METRICS
			tics REFERRED 1 TIMES,
			freeBytes REFERRED 1 TIMES,
			allocBytes REFERRED 1 TIMES,
			log REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 21
			AVVARLEN 6
			CALLEDN 6
			CLASS MemCheck
			CLASSID 6
			CYCLO 7
			DOTS 16
			EQTEST 3
			EXPRORCALL 16
			GE 1
			GT 1
			IN 0
			INDR 16
			LE 0
			LOC 64
			LT 16
			METHOD alloc
			METHODID 4
			MMINUS 0
			OUT 8
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 23
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:0 ASS:21 AVVARLEN:6 CALLEDN:6 CLASS:MemCheck CLASSID:6 CYCLO:7 DOTS:16 EQTEST:3 EXPRORCALL:16 GE:1 GT:1 IN:0 INDR:16 LE:0 LOC:64 LT:16 METHOD:alloc METHODID:4 MMINUS:0 OUT:8 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:23 TERNINSTR:0 USEDVARS:4 
		;


#ID 4-alloc

__BEGIN_METHOD_CODE__

MemCheck::alloc(unsigned nbytes)
{
    init();

    unsigned nunits =
	(nbytes + sizeof(MemCheckHeader) - 1) / sizeof(MemCheckHeader) + 1;

    MemCheckHeader *prevp = freep;
    validate(freep, _REMOVED_STR_);
    for(MemCheckHeader *p = freep->s.ptr; prevp = p, p = p->s.ptr)
    {
	validate(p, _REMOVED_STR_);
	
	if(p->s.size >= nunits)
	{
	     
	    if(p->s.size == nunits)
	    {
		 
		prevp->s.ptr = p->s.ptr;
	    }
	    else
	    {
		 

		p->s.size -= nunits;
		p += p->s.size;
		p->s.size = nunits;
	    }

	     
	    p->s.magic     = MAGIC;
	    p->s.requested = nbytes;
	    p->s.tic       = tics++;
	    
	     
	    p->s.ptr = allocp->s.ptr;
	    allocp->s.ptr = p;
	    allocp = p;

	     
	    allocBytes += nbytes;
	    freeBytes  -= nbytes;

	     
	    freep = prevp;

	     
	    void *ret = (void *)(p + 1);

	    if(log)
		clog << _REMOVED_STR_ << nbytes << _REMOVED_STR_
		     << _REMOVED_STR_ << p->s.tic << _REMOVED_STR_ << ret << _REMOVED_STR_;
	    
	    return ret;
	}

	if(p == freep)
	{
	     
	    if((p = morecore(nunits)) == 0)
		return 0;
	}
    }
}

__END_METHOD_CODE__


	METHOD MemCheck!morecore
		CALLS
		_free : MemCheck



		METRICS
			freeBytes REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 8
			AVVARLEN 9
			CALLEDN 3
			CLASS MemCheck
			CLASSID 6
			CYCLO 3
			DOTS 2
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 24
			LT 1
			METHOD morecore
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 1
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:9 CALLEDN:3 CLASS:MemCheck CLASSID:6 CYCLO:3 DOTS:2 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:24 LT:1 METHOD:morecore METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:1 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 0-morecore

__BEGIN_METHOD_CODE__

MemCheck::morecore(unsigned nunits)
{
    const unsigned NALLOC = 1024;
    
    if(nunits < NALLOC)
	nunits = NALLOC;

    unsigned nbytes = nunits * sizeof(MemCheckHeader);

    void *cp = ::malloc(nbytes);

    if(cp == 0)
	return 0;

    freeBytes += nbytes;

    MemCheckHeader *up = (MemCheckHeader *)cp;

     
    up->s.size  = nunits;
    up->s.magic = MAGIC;
    _free(up);
    
    return freep;
}

__END_METHOD_CODE__


	METHOD MemCheck!free
		CALLS
		init : MemCheck,
		validate : MemCheck,
		validate : MemCheck,
		validate : MemCheck,
		abort : _SYSTEM_OR_USER_,
		_free : MemCheck



		METRICS
			freeBytes REFERRED 1 TIMES,
			allocBytes REFERRED 1 TIMES,
			log REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 12
			AVVARLEN 7
			CALLEDN 6
			CLASS MemCheck
			CLASSID 6
			CYCLO 6
			DOTS 9
			EQTEST 2
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 47
			LT 23
			METHOD free
			METHODID 5
			MMINUS 0
			OUT 11
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 20
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:12 AVVARLEN:7 CALLEDN:6 CLASS:MemCheck CLASSID:6 CYCLO:6 DOTS:9 EQTEST:2 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:47 LT:23 METHOD:free METHODID:5 MMINUS:0 OUT:11 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:20 TERNINSTR:0 USEDVARS:3 
		;


#ID 5-free

__BEGIN_METHOD_CODE__

MemCheck::free(void *ap)
{
    init();

    MemCheckHeader *bp = (MemCheckHeader *)ap - 1;

    validate(bp, _REMOVED_STR_);

    if(log)
	clog << _REMOVED_STR_ << bp->s.requested << _REMOVED_STR_
	     << _REMOVED_STR_ << bp->s.tic << _REMOVED_STR_ << ap << _REMOVED_STR_;

     
    char *wipeout = (char *)ap;
    for(unsigned i = 0; i < bp->s.requested; i++)
	*wipeout++ = WIPEOUT;
    
     
    MemCheckHeader *prevp = allocp;
    validate(allocp, _REMOVED_STR_);
    
    for(MemCheckHeader *p = allocp->s.ptr; prevp = p, p = p->s.ptr)
    {
	validate(p, _REMOVED_STR_);
	
	if(p == bp)
	{
	    prevp->s.ptr = p->s.ptr;
	    allocp = prevp;
	    break;
	}
	
	if(p == allocp)
	{
	     
	    cerr << _REMOVED_STR_ << ap << _REMOVED_STR_;
	    abort();
	}
    }
    
     
    allocBytes -= bp->s.requested;
    freeBytes  += bp->s.requested;

     
    _free(bp);

}

__END_METHOD_CODE__


	METHOD MemCheck!_free
		CALLS
		validate : MemCheck



		METRICS
			ARRAYOP 0
			ASS 10
			AVVARLEN 0
			CALLEDN 1
			CLASS MemCheck
			CLASSID 6
			CYCLO 5
			DOTS 20
			EQTEST 2
			EXPRORCALL 7
			GE 1
			GT 3
			IN 0
			INDR 20
			LE 0
			LOC 31
			LT 2
			METHOD _free
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:0 CALLEDN:1 CLASS:MemCheck CLASSID:6 CYCLO:5 DOTS:20 EQTEST:2 EXPRORCALL:7 GE:1 GT:3 IN:0 INDR:20 LE:0 LOC:31 LT:2 METHOD:_free METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_free

__BEGIN_METHOD_CODE__

MemCheck::_free(MemCheckHeader *bp)
{
     
    MemCheckHeader *p;
    for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
    {
	validate(p, _REMOVED_STR_);
	
	if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
	    break;
    }

    if(bp + bp->s.size == p->s.ptr)
    {
	 
	bp->s.size += p->s.ptr->s.size;
	bp->s.ptr = p->s.ptr->s.ptr;
    }
    else
	bp->s.ptr = p->s.ptr;

    if(p + p->s.size == bp)
    {
	 
	p->s.size += bp->s.size;
	p->s.ptr = bp->s.ptr;
    }
    else
	p->s.ptr = bp;

    freep = p;
}

__END_METHOD_CODE__


	METHOD MemCheck!map
		CALLS
		init : MemCheck,
		validate : MemCheck



		METRICS
			freeBytes REFERRED 1 TIMES,
			allocBytes REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 6
			AVVARLEN 9
			CALLEDN 2
			CLASS MemCheck
			CLASSID 6
			CYCLO 7
			DOTS 6
			EQTEST 1
			EXPRORCALL 10
			GE 1
			GT 2
			IN 0
			INDR 6
			LE 0
			LOC 29
			LT 28
			METHOD map
			METHODID 6
			MMINUS 0
			OUT 14
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:6 AVVARLEN:9 CALLEDN:2 CLASS:MemCheck CLASSID:6 CYCLO:7 DOTS:6 EQTEST:1 EXPRORCALL:10 GE:1 GT:2 IN:0 INDR:6 LE:0 LOC:29 LT:28 METHOD:map METHODID:6 MMINUS:0 OUT:14 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:2 
		;


#ID 6-map

__BEGIN_METHOD_CODE__

MemCheck::map(ostream& os, unsigned start, char *prefix)
{
    init();

    unsigned found = 0;

    for(MemCheckHeader *p = allocp->s.ptr; p = p->s.ptr)
    {
	validate(p, _REMOVED_STR_);
	
	if(p->s.tic > 0 && p->s.tic >= start)
	{
	    if(prefix[_ARGS_] != '\0')
		os << prefix << _REMOVED_STR_;
	    os << p->s.requested << _REMOVED_STR_ << p->s.tic
	       << _REMOVED_STR_ << (void *)(p + 1) << _REMOVED_STR_;
	    found++;
	}
		
	if(p == allocp)
	    break;
    }

    if(found)
    {
	if(prefix[_ARGS_] != '\0')
	    os << prefix << _REMOVED_STR_;
	os << allocBytes << _REMOVED_STR_ << allocBytes + freeBytes << _REMOVED_STR_;
    }
}

__END_METHOD_CODE__


	METHOD MemCheck!OK
		CALLS
		init : MemCheck,
		validate : MemCheck



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS MemCheck
			CLASSID 6
			CYCLO 3
			DOTS 2
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 12
			LT 0
			METHOD OK
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:MemCheck CLASSID:6 CYCLO:3 DOTS:2 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:12 LT:0 METHOD:OK METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-OK

__BEGIN_METHOD_CODE__

MemCheck::OK()
{
    init();

    for(MemCheckHeader *p = allocp->s.ptr; p = p->s.ptr)
    {
	validate(p, _REMOVED_STR_);
	if(p == allocp)
	    break;
    }

    return 1;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/MemCheck.o.nu.met	  Methods Number  8
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/IntIntAA.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/StringA.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/StringSA.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/VoidArray.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/WidgetSA.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/Agent.o.nu.met ... 


	METHOD Agent!childStatusChange
		CALLS
		childStatusChange : AssocRec,
		signal : _SYSTEM_OR_USER_,
		SignalProc : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD childStatusChange
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:childStatusChange METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-childStatusChange

__BEGIN_METHOD_CODE__

Agent::childStatusChange(int sig)
{
     
    bool gotit = runningAgents.childStatusChange();

    if(gotit)
    {
	 
	signal(sig, SignalProc(Agent::childStatusChange));
    }
}

__END_METHOD_CODE__


	METHOD Agent!defaultHandler
		CALLS
		name : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 8
			METHOD defaultHandler
			METHODID 19
			MMINUS 0
			OUT 4
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:8 METHOD:defaultHandler METHODID:19 MMINUS:0 OUT:4 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-defaultHandler

__BEGIN_METHOD_CODE__

Agent::defaultHandler(Agent *source, void *, void *call_data)
{
    string msg = (char *)call_data;
    if(msg != _REMOVED_STR_)
	cerr << source->name() << _REMOVED_STR_ << msg << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD Agent!addDefaultHandler
		CALLS
		addHandler : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD addDefaultHandler
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:addDefaultHandler METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-addDefaultHandler

__BEGIN_METHOD_CODE__

Agent::addDefaultHandler(unsigned type)
{
    addHandler(type, defaultHandler);
}

__END_METHOD_CODE__


	METHOD Agent!setRunning
		CALLS
		activateIO : Agent,
		callHandlers : Agent,
		path : Agent



		METRICS
			_running REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 8
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD setRunning
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:8 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:setRunning METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-setRunning

__BEGIN_METHOD_CODE__

Agent::setRunning()
{
    bool was_running = _running;
    _running = true;







    runningAgents += this;
    activateIO();

    if(!was_running)
	callHandlers(Started, (char *)path());
}

__END_METHOD_CODE__


	METHOD Agent!unsetRunning
		CALLS
		callHandlers : Agent,
		path : Agent,
		deactivateIO : Agent



		METRICS
			_running REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 8
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD unsetRunning
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:8 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:unsetRunning METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-unsetRunning

__BEGIN_METHOD_CODE__

Agent::unsetRunning()
{
    if(_running)
	callHandlers(Stopped, (char *)path());

    deactivateIO();
    runningAgents -= this;
    _running = false;
}

__END_METHOD_CODE__


	METHOD Agent!Agent
		CALLS
		setRunning : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD Agent
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:Agent METHODID:37 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-Agent

__BEGIN_METHOD_CODE__

Agent::Agent(const Agent& c)
{
     
    setRunning();
}

__END_METHOD_CODE__


	METHOD Agent!restoreParentIO

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD restoreParentIO
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:restoreParentIO METHODID:21 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-restoreParentIO

__BEGIN_METHOD_CODE__

Agent::restoreParentIO()
{
     
}

__END_METHOD_CODE__


	METHOD Agent!start
		CALLS
		pid : Agent,
		startChildProcess : Agent,
		setRunning : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD start
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:start METHODID:40 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-start

__BEGIN_METHOD_CODE__

Agent::start()
{
     
    if(pid() >= 0)
	startChildProcess();
    else
	setRunning();
}

__END_METHOD_CODE__


	METHOD Agent!startChildProcess
		CALLS
		terminate : Agent,
		setupCommunication : Agent,
		raiseMsg : Agent,
		setupChildCommunication : Agent,
		raiseMsg : Agent,
		executeChild : Agent,
		pid : Agent,
		raiseIOMsg : Agent,
		setupParentCommunication : Agent,
		raiseMsg : Agent,
		setRunning : Agent



		METRICS
			_pid REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 4
			CALLEDN 11
			CLASS Agent
			CLASSID 17
			CYCLO 6
			DOTS 0
			EQTEST 2
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 37
			LT 0
			METHOD startChildProcess
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:4 CALLEDN:11 CLASS:Agent CLASSID:17 CYCLO:6 DOTS:0 EQTEST:2 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:37 LT:0 METHOD:startChildProcess METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-startChildProcess

__BEGIN_METHOD_CODE__

Agent::startChildProcess()
{
     
    terminate();

    if(setupCommunication())
    {
	raiseMsg(_REMOVED_STR_);
	return;
    }
    
    if((_pid = fork()) == 0)
    {
	if(setupChildCommunication())
	{
	    raiseMsg(_REMOVED_STR_);
	    exit(1 );
	}
	
	executeChild();
    }

    if(pid() == -1)
    {
	_pid = 0;
	raiseIOMsg(_REMOVED_STR_);
	return;
    }

    if(setupParentCommunication())
    {
	raiseMsg(_REMOVED_STR_);
	return;
    }

     
    setRunning();
}

__END_METHOD_CODE__


	METHOD Agent!setupCommunication
		CALLS
		pipe : _SYSTEM_OR_USER_,
		raiseIOMsg : Agent,
		pipe : _SYSTEM_OR_USER_,
		raiseIOMsg : Agent,
		pipe : _SYSTEM_OR_USER_,
		raiseIOMsg : Agent



		METRICS
			to_child REFERRED 1 TIMES,
			to_parent REFERRED 1 TIMES,
			to_parent_error REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 6
			CLASS Agent
			CLASSID 17
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 22
			LT 3
			METHOD setupCommunication
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:6 CLASS:Agent CLASSID:17 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:22 LT:3 METHOD:setupCommunication METHODID:24 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:3 
		;


#ID 24-setupCommunication

__BEGIN_METHOD_CODE__

Agent::setupCommunication()
{
     
    if(pipe(to_child) < 0)
    {
	raiseIOMsg(_REMOVED_STR_);
	return -1;
    }

    if(pipe(to_parent) < 0)
    {
	raiseIOMsg(_REMOVED_STR_);
	return -1;
    }

    if(pipe(to_parent_error) < 0)
    {
	raiseIOMsg(_REMOVED_STR_);
	return -1;
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD Agent!setupChildCommunication
		CALLS
		close : _SYSTEM_OR_USER_,
		close : _SYSTEM_OR_USER_,
		close : _SYSTEM_OR_USER_,
		dup2 : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		close : _SYSTEM_OR_USER_,
		dup2 : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		close : _SYSTEM_OR_USER_,
		dup2 : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		close : _SYSTEM_OR_USER_



		METRICS
			to_child REFERRED 3 TIMES,
			to_parent REFERRED 3 TIMES,
			to_parent_error REFERRED 3 TIMES,
			ARRAYOP 9
			ASS 0
			AVVARLEN 10
			CALLEDN 12
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 20
			LT 0
			METHOD setupChildCommunication
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:9 ASS:0 AVVARLEN:10 CALLEDN:12 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:20 LT:0 METHOD:setupChildCommunication METHODID:25 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:3 
		;


#ID 25-setupChildCommunication

__BEGIN_METHOD_CODE__

Agent::setupChildCommunication()
{
     
     
    close(to_child[_ARGS_]);
    close(to_parent[_ARGS_]);
    close(to_parent_error[_ARGS_]);

     
     
    dup2(to_child[_ARGS_], fileno(((_IO_FILE*)(&_IO_stdin_))  ));
    close(to_child[_ARGS_]);

    dup2(to_parent[_ARGS_], fileno(((_IO_FILE*)(&_IO_stdout_))  ));
    close(to_parent[_ARGS_]);

    dup2(to_parent_error[_ARGS_], fileno(((_IO_FILE*)(&_IO_stderr_))  ));
    close(to_parent_error[_ARGS_]);

    return 0;
}

__END_METHOD_CODE__


	METHOD Agent!setupParentCommunication
		CALLS
		close : _SYSTEM_OR_USER_,
		close : _SYSTEM_OR_USER_,
		close : _SYSTEM_OR_USER_,
		fdopen : _SYSTEM_OR_USER_,
		errorfp : Agent,
		raiseIOMsg : Agent,
		terminate : Agent,
		fdopen : _SYSTEM_OR_USER_,
		inputfp : Agent,
		raiseIOMsg : Agent,
		terminate : Agent,
		fdopen : _SYSTEM_OR_USER_,
		outputfp : Agent,
		raiseIOMsg : Agent,
		terminate : Agent



		METRICS
			_inputfp REFERRED 1 TIMES,
			_outputfp REFERRED 1 TIMES,
			_errorfp REFERRED 1 TIMES,
			to_child REFERRED 2 TIMES,
			to_parent REFERRED 2 TIMES,
			to_parent_error REFERRED 2 TIMES,
			ARRAYOP 6
			ASS 3
			AVVARLEN 9
			CALLEDN 15
			CLASS Agent
			CLASSID 17
			CYCLO 4
			DOTS 0
			EQTEST 3
			EXPRORCALL 18
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 34
			LT 0
			METHOD setupParentCommunication
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:6 ASS:3 AVVARLEN:9 CALLEDN:15 CLASS:Agent CLASSID:17 CYCLO:4 DOTS:0 EQTEST:3 EXPRORCALL:18 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:34 LT:0 METHOD:setupParentCommunication METHODID:26 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:6 
		;


#ID 26-setupParentCommunication

__BEGIN_METHOD_CODE__

Agent::setupParentCommunication()
{
     
    close(to_child[_ARGS_]);
    close(to_parent[_ARGS_]);
    close(to_parent_error[_ARGS_]);

     
     
    _errorfp = fdopen(to_parent_error[_ARGS_], _REMOVED_STR_);
    if(errorfp() == __null )
    {
	raiseIOMsg(_REMOVED_STR_);
	terminate();
	return -1;
    }

    _inputfp = fdopen(to_parent[_ARGS_], _REMOVED_STR_);
    if(inputfp() == __null )
    {
	raiseIOMsg(_REMOVED_STR_);
	terminate();
	return -1;
    }

    _outputfp = fdopen(to_child[_ARGS_], _REMOVED_STR_);
    if(outputfp() == __null )
    {
	raiseIOMsg(_REMOVED_STR_);
	terminate();
	return -1;
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD Agent!executeChild
		CALLS
		path : Agent,
		execl : _SYSTEM_OR_USER_,
		perror : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD executeChild
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:executeChild METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-executeChild

__BEGIN_METHOD_CODE__

Agent::executeChild()
{
     
    string exec_str = _REMOVED_STR_ + path();
    char *exec_cmd = exec_str;
    execl(_REMOVED_STR_, _REMOVED_STR_, _REMOVED_STR_, exec_cmd, (char *)0);

     
    perror(_REMOVED_STR_);
    _exit(1 );
}

__END_METHOD_CODE__


	METHOD Agent!running
		CALLS
		pid : Agent,
		SignalProc : _SYSTEM_OR_USER_,
		signal : _SYSTEM_OR_USER_,
		SignalProc : _SYSTEM_OR_USER_,
		SignalProc : _SYSTEM_OR_USER_,
		signal : _SYSTEM_OR_USER_,
		SignalProc : _SYSTEM_OR_USER_,
		SignalProc : _SYSTEM_OR_USER_,
		signal : _SYSTEM_OR_USER_,
		SignalProc : _SYSTEM_OR_USER_,
		waitpid : _SYSTEM_OR_USER_,
		pid : Agent,
		hasNewStatus : Agent,
		__errno_location : _SYSTEM_OR_USER_,
		abort : Agent,
		_raiseIOMsg : Agent,
		signal : _SYSTEM_OR_USER_,
		signal : _SYSTEM_OR_USER_,
		signal : _SYSTEM_OR_USER_



		METRICS
			_running REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 5
			AVVARLEN 8
			CALLEDN 19
			CLASS Agent
			CLASSID 17
			CYCLO 5
			DOTS 0
			EQTEST 1
			EXPRORCALL 31
			GE 1
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 36
			LT 1
			METHOD running
			METHODID 69
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:8 CALLEDN:19 CLASS:Agent CLASSID:17 CYCLO:5 DOTS:0 EQTEST:1 EXPRORCALL:31 GE:1 GT:2 IN:0 INDR:0 LE:0 LOC:36 LT:1 METHOD:running METHODID:69 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:1 
		;


#ID 69-running

__BEGIN_METHOD_CODE__

Agent::running()
{
    if(_running && pid() >= 0)
    {
	 
	SignalProc istat = SignalProc(signal(2 ,  SignalProc(((__sighandler_t) 1) )));
	SignalProc qstat = SignalProc(signal(3 , SignalProc(((__sighandler_t) 1) )));
	SignalProc hstat = SignalProc(signal(1 ,  SignalProc(((__sighandler_t) 1) )));

	 
	pid_t r;
	int status;
	if((r = waitpid(pid(), &status, 1 )) > 0)
	{
	     
	     ;
	    hasNewStatus(status);
	}
	else if(r < 0)
	{
	    if((*__errno_location())  == 10 )
	    {
		 
		abort();
	    }
	    else
		_raiseIOMsg(_REMOVED_STR_);
	}

         
	signal(2 ,  istat);
	signal(3 , qstat);
	signal(1 ,  hstat);
    }

    return _running;
}

__END_METHOD_CODE__


	METHOD Agent!hasNewStatus
		CALLS
		__extension__ : _SYSTEM_OR_USER_,
		abort : Agent



		METRICS
			_lastStatus REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 11
			CALLEDN 2
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 3
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD hasNewStatus
			METHODID 57
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:11 CALLEDN:2 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:3 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:hasNewStatus METHODID:57 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 57-hasNewStatus

__BEGIN_METHOD_CODE__

Agent::hasNewStatus(int state)
{
    _lastStatus = state;

    if((((  (*(int *) &(  state  ))   ) & 0x7f)  == 0)   || (__extension__({ int __status = ( (*(int *) &(  state  ))  );	! ((( __status ) & 0xff) == 0x7f)  && ! (((  __status  ) & 0x7f)  == 0) ; }))  )
    {
	 
	abort();
    }
}

__END_METHOD_CODE__


	METHOD Agent!terminate
		CALLS
		removeAllHandlers : Agent,
		addDefaultHandler : Agent,
		addDefaultHandler : Agent,
		running : Agent,
		restoreParentIO : Agent,
		abort : Agent,
		abort : Agent,
		pid : Agent,
		waitToTerminate : Agent,
		waitToTerminate : Agent,
		unsetRunning : Agent



		METRICS
			_beingTerminated REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 16
			CALLEDN 11
			CLASS Agent
			CLASSID 17
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 16
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 40
			LT 0
			METHOD terminate
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 2
			STMNT 12
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:16 CALLEDN:11 CLASS:Agent CLASSID:17 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:16 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:40 LT:0 METHOD:terminate METHODID:46 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:2 STMNT:12 TERNINSTR:0 USEDVARS:1 
		;


#ID 46-terminate

__BEGIN_METHOD_CODE__

Agent::terminate(bool onExit)
{
    if(onExit)
    {
	 
	removeAllHandlers();
	addDefaultHandler(Panic);
	addDefaultHandler(Died);
    }

    if(!running())
    {
	restoreParentIO();
	return;
    }

    _beingTerminated = true;
    if(onExit)
    {
	 
	Agent::abort();
    }
    else
    {
	 
	abort();
    }
    _beingTerminated = false;

    if(pid() >= 0)
    {
	 
	if(onExit)
	    Agent::waitToTerminate();
	else
	    waitToTerminate();
    }

     
    unsetRunning();
}

__END_METHOD_CODE__


	METHOD Agent!_kill
		CALLS
		running : Agent,
		pid : Agent,
		pid : Agent,
		raiseIOMsg : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS Agent
			CLASSID 17
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 1
			METHOD _kill
			METHODID 47
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:Agent CLASSID:17 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:9 LT:1 METHOD:_kill METHODID:47 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 47-_kill

__BEGIN_METHOD_CODE__

Agent::_kill(int sig)
{
    if(running() && pid() >= 0)
    {
	 

	if(kill(pid(), sig) < 0)
	    raiseIOMsg(_REMOVED_STR_);
    }
}

__END_METHOD_CODE__


	METHOD Agent!waitToTerminate
		CALLS
		running : Agent,
		terminateTimeOut : Agent,
		hangupTimeOut : Agent,
		killTimeOut : Agent,
		_kill : Agent,
		running : Agent,
		sleep : _SYSTEM_OR_USER_,
		raiseMsg : Agent,
		string : string,
		sigName : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 10
			CLASS Agent
			CLASSID 17
			CYCLO 8
			DOTS 0
			EQTEST 3
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 26
			LT 0
			METHOD waitToTerminate
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:10 CLASS:Agent CLASSID:17 CYCLO:8 DOTS:0 EQTEST:3 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:26 LT:0 METHOD:waitToTerminate METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-waitToTerminate

__BEGIN_METHOD_CODE__

Agent::waitToTerminate()
{
    int sig = 0;

    for(int seconds = 0; running(); seconds++)
    {
	sig = 0;

	if(seconds == terminateTimeOut())
	    sig = 15 ;

	if(seconds == hangupTimeOut())
	    sig = 1 ;

	if(seconds == killTimeOut())
	    sig = 9 ;

        if(sig)
	    _kill(sig);

        if(running())
	    sleep(1);
    }

    if(sig)
	raiseMsg(string(_REMOVED_STR_) + sigName(sig) + _REMOVED_STR_);
}

__END_METHOD_CODE__


	METHOD Agent!wait
		CALLS
		running : Agent,
		waitpid : _SYSTEM_OR_USER_,
		pid : Agent,
		hasNewStatus : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS Agent
			CLASSID 17
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD wait
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:Agent CLASSID:17 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:wait METHODID:45 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 45-wait

__BEGIN_METHOD_CODE__

Agent::wait()
{
    while(running())
    {
	int status;
	pid_t ret = waitpid(pid(), &status, 0);
	if(ret > 0)
	{
	     
	     ;
	    hasNewStatus(status);
	}
    }
}

__END_METHOD_CODE__


	METHOD Agent!closeChannel
		CALLS
		fclose : _SYSTEM_OR_USER_,
		inputfp : Agent,
		raiseIOMsg : Agent,
		errorfp : Agent,
		raiseIOMsg : Agent,
		outputfp : Agent,
		raiseIOMsg : Agent



		METRICS
			_inputfp REFERRED 1 TIMES,
			_outputfp REFERRED 1 TIMES,
			_errorfp REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 8
			CALLEDN 7
			CLASS Agent
			CLASSID 17
			CYCLO 8
			DOTS 0
			EQTEST 5
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 27
			LT 0
			METHOD closeChannel
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:8 CALLEDN:7 CLASS:Agent CLASSID:17 CYCLO:8 DOTS:0 EQTEST:5 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:27 LT:0 METHOD:closeChannel METHODID:28 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:3 
		;


#ID 28-closeChannel

__BEGIN_METHOD_CODE__

Agent::closeChannel(FILE *fp)
{
    if(fp == 0)
	return;

    bool err = (fclose(fp) == (-1) );

    if(fp == inputfp())
    {
	_inputfp = 0;
	if(err)
	    raiseIOMsg(_REMOVED_STR_);
    }

    if(fp == errorfp())
    {
	_errorfp = 0;
	if(err)
	    raiseIOMsg(_REMOVED_STR_);
    }

    if(fp == outputfp())
    {
	_outputfp = 0;
	if(err)
	    raiseIOMsg(_REMOVED_STR_);
    }
}

__END_METHOD_CODE__


	METHOD Agent!shutdown
		CALLS
		outputfp : Agent,
		outputfp : Agent,
		closeChannel : Agent,
		outputfp : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 2
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD shutdown
			METHODID 44
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:2 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:shutdown METHODID:44 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 44-shutdown

__BEGIN_METHOD_CODE__

Agent::shutdown()
{
     
    if(outputfp() == ((_IO_FILE*)(&_IO_stdout_))   || outputfp() == ((_IO_FILE*)(&_IO_stderr_))  )
	return;

     
    closeChannel(outputfp());
}

__END_METHOD_CODE__


	METHOD Agent!inputEOF
		CALLS
		running : Agent,
		callHandlers : Agent,
		inputfp : Agent,
		clearerr : _SYSTEM_OR_USER_,
		inputfp : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD inputEOF
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:inputEOF METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-inputEOF

__BEGIN_METHOD_CODE__

Agent::inputEOF()
{
     
    running();

     
    callHandlers(InputEOF);

     
    if(inputfp() != 0)
	clearerr(inputfp());
}

__END_METHOD_CODE__


	METHOD Agent!errorEOF
		CALLS
		running : Agent,
		callHandlers : Agent,
		errorfp : Agent,
		clearerr : _SYSTEM_OR_USER_,
		errorfp : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD errorEOF
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:errorEOF METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-errorEOF

__BEGIN_METHOD_CODE__

Agent::errorEOF()
{
     
    running();

     
    callHandlers(ErrorEOF);

     
    if(errorfp() != 0)
	clearerr(errorfp());
}

__END_METHOD_CODE__


	METHOD Agent!abort
		CALLS
		restoreParentIO : Agent,
		shutdown : Agent,
		closeChannel : Agent,
		inputfp : Agent,
		closeChannel : Agent,
		errorfp : Agent,
		unsetRunning : Agent,
		callHandlers : Agent,
		statusName : _SYSTEM_OR_USER_



		METRICS
			_beingTerminated REFERRED 1 TIMES,
			_lastStatus REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 13
			CALLEDN 9
			CLASS Agent
			CLASSID 17
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 0
			METHOD abort
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:13 CALLEDN:9 CLASS:Agent CLASSID:17 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:21 LT:0 METHOD:abort METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:2 
		;


#ID 18-abort

__BEGIN_METHOD_CODE__

Agent::abort()
{
    restoreParentIO();

     
    shutdown();
    closeChannel(inputfp());
    closeChannel(errorfp());

    if(!_beingTerminated)
    {
	 
	unsetRunning();
    }

    if(_lastStatus >= 0)
    {
	 
	callHandlers(Died, statusName(_lastStatus));
	_lastStatus = -1;
    }
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/Agent.o.nu.met	  Methods Number  24
#===================================================================
#Process file ../../code/ddd-3.0/ddd/AgentM.o.nu.met ... 


	METHOD AgentManager!operator += 
		CALLS
		sb : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 1
			CLASS AgentManager
			CLASSID 15
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 10
			LT 0
			METHOD operator_+=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:1 CLASS:AgentManager CLASSID:15 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:10 LT:0 METHOD:operator_+= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_+=

__BEGIN_METHOD_CODE__

AgentManager::operator += (Agent *key)
{
    for(Agent *c = first; c != 0; c = c->next)
	if(c == key)
	    return;

    SignalBlocker sb(17 );

    key->next = first;
    first     = key;
}

__END_METHOD_CODE__


	METHOD AgentManager!operator -= 
		CALLS
		sb : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 1
			CLASS AgentManager
			CLASSID 15
			CYCLO 4
			DOTS 0
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 19
			LT 0
			METHOD operator_-=
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:1 CLASS:AgentManager CLASSID:15 CYCLO:4 DOTS:0 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:19 LT:0 METHOD:operator_-= METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-operator_-=

__BEGIN_METHOD_CODE__

AgentManager::operator -= (Agent *key)
{
    Agent *prev = 0;
    for(Agent *c = first; c != 0; c = c->next)
    {
	if(c == key)
	{
	    SignalBlocker sb(17 );

	    if(prev == 0)
		first = c->next;
	    else
		prev->next = c->next;
	}
	else
	{
	    prev = c;
	}
    }
}

__END_METHOD_CODE__


	METHOD AgentManager!search
		CALLS
		pid : Agent



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS AgentManager
			CLASSID 15
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 7
			LT 0
			METHOD search
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:AgentManager CLASSID:15 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:7 LT:0 METHOD:search METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-search

__BEGIN_METHOD_CODE__

AgentManager::search(int pid)
{
    for(Agent *c = first; c != 0; c = c->next)
	if(pid == c->pid())
	    return c;

    return 0;
}

__END_METHOD_CODE__


	METHOD AgentManager!commit
		CALLS
		commit : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS AgentManager
			CLASSID 15
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 4
			LT 0
			METHOD commit
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:AgentManager CLASSID:15 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:4 LT:0 METHOD:commit METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-commit

__BEGIN_METHOD_CODE__

AgentManager::commit()
{
    for(Agent *c = first; c != 0; c = c->next)
	c->commit();
}

__END_METHOD_CODE__


	METHOD AgentManager!childStatusChange
		CALLS
		pid : Agent,
		waitpid : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 3
			CLASS AgentManager
			CLASSID 15
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 17
			LT 0
			METHOD childStatusChange
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:3 CLASS:AgentManager CLASSID:15 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:17 LT:0 METHOD:childStatusChange METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-childStatusChange

__BEGIN_METHOD_CODE__

AgentManager::childStatusChange()
{
    bool gotit = false;

    for(Agent *c = first; c != 0; c = c->next)
    {
	pid_t pid = c->pid();
	int status;

	if(pid > 0 && waitpid(pid, &status, 1 ) == pid)
	{
	    c->callHandlers(_Died, (void *)status);
	    gotit = true;
	}
    }

    return gotit;
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/AgentM.o.nu.met	  Methods Number  5
#===================================================================
#Process file ../../code/ddd-3.0/ddd/ChunkQueue.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/DataLength.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/HandlerL.o.nu.met ... 


	METHOD HandlerList!HandlerList

		METRICS
			_nTypes REFERRED 1 TIMES,
			*handlers REFERRED 1 TIMES,
			active REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 3
			AVVARLEN 7
			CALLEDN 0
			CLASS HandlerList
			CLASSID 16
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 1
			METHOD HandlerList
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:7 CALLEDN:0 CLASS:HandlerList CLASSID:16 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:1 METHOD:HandlerList METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:3 
		;


#ID 6-HandlerList

__BEGIN_METHOD_CODE__

HandlerList::HandlerList(unsigned n)
{
    for(unsigned type = 0; type < _nTypes; type++)
    {
	handlers[_ARGS_] = 0;
	active[_ARGS_]   = 0;
    }
}

__END_METHOD_CODE__


	METHOD HandlerList!HandlerList
		CALLS
		nTypes : HandlerList,
		add : HandlerList



		METRICS
			*handlers REFERRED 1 TIMES,
			active REFERRED 2 TIMES,
			ARRAYOP 3
			ASS 3
			AVVARLEN 7
			CALLEDN 2
			CLASS HandlerList
			CLASSID 16
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 1
			METHOD HandlerList
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:3 ASS:3 AVVARLEN:7 CALLEDN:2 CLASS:HandlerList CLASSID:16 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:1 METHOD:HandlerList METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:2 
		;


#ID 7-HandlerList

__BEGIN_METHOD_CODE__

HandlerList::HandlerList(const HandlerList& l)
{
    for(unsigned type = 0; type < nTypes(); type++)
    {
	handlers[_ARGS_] = 0;
	active[_ARGS_]   = l.active[_ARGS_];
    }

    add(l);
}

__END_METHOD_CODE__


	METHOD HandlerList!add
		CALLS
		HandlerRec : HandlerList



		METRICS
			proc REFERRED 1 TIMES,
			client_data REFERRED 1 TIMES,
			*handlers REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 1
			AVVARLEN 8
			CALLEDN 1
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD add
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:2 ASS:1 AVVARLEN:8 CALLEDN:1 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:add METHODID:10 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:3 
		;


#ID 10-add

__BEGIN_METHOD_CODE__

HandlerList::add(unsigned type, HandlerProc proc, void *client_data)
{
     ;

     
    handlers[_ARGS_] = new HandlerRec(proc, client_data, handlers[_ARGS_]);
}

__END_METHOD_CODE__


	METHOD HandlerList!processRemovals

		METRICS
			next REFERRED 7 TIMES,
			remove_me REFERRED 1 TIMES,
			*handlers REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 9
			AVVARLEN 7
			CALLEDN 0
			CLASS HandlerList
			CLASSID 16
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 23
			LT 0
			METHOD processRemovals
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:2 ASS:9 AVVARLEN:7 CALLEDN:0 CLASS:HandlerList CLASSID:16 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:23 LT:0 METHOD:processRemovals METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:3 
		;


#ID 4-processRemovals

__BEGIN_METHOD_CODE__

HandlerList::processRemovals(unsigned type)
{
     ;

    HandlerRec *prev = 0;
    HandlerRec *next = 0;
    for(HandlerRec *h = handlers[_ARGS_]; h != 0; h = next)
    {
	next = h->next;
	if(h->remove_me)
	{
	    if(prev == 0)
		handlers[_ARGS_] = next;
	    else
		prev->next = next;

	    delete h;
	}
	else
	{ 
	    prev = h;
	}
    }
}

__END_METHOD_CODE__


	METHOD HandlerList!remove
		CALLS
		processRemovals : HandlerList



		METRICS
			proc REFERRED 2 TIMES,
			client_data REFERRED 2 TIMES,
			next REFERRED 1 TIMES,
			remove_me REFERRED 1 TIMES,
			*handlers REFERRED 1 TIMES,
			active REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 4
			AVVARLEN 7
			CALLEDN 1
			CLASS HandlerList
			CLASSID 16
			CYCLO 4
			DOTS 0
			EQTEST 3
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 10
			LT 0
			METHOD remove
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:2 ASS:4 AVVARLEN:7 CALLEDN:1 CLASS:HandlerList CLASSID:16 CYCLO:4 DOTS:0 EQTEST:3 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:10 LT:0 METHOD:remove METHODID:12 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:6 
		;


#ID 12-remove

__BEGIN_METHOD_CODE__

HandlerList::remove(unsigned type,
			 HandlerProc proc,
			 void *client_data)
{
     ;

    for(HandlerRec *h = handlers[_ARGS_]; h != 0; h = h->next)
	if(proc == h->proc && client_data == h->client_data)
	    h->remove_me = true;

    if(active[_ARGS_] == 0)
	processRemovals(type);
}

__END_METHOD_CODE__


	METHOD HandlerList!removeAll
		CALLS
		processRemovals : HandlerList



		METRICS
			next REFERRED 1 TIMES,
			remove_me REFERRED 1 TIMES,
			*handlers REFERRED 1 TIMES,
			active REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 4
			AVVARLEN 7
			CALLEDN 1
			CLASS HandlerList
			CLASSID 16
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD removeAll
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:2 ASS:4 AVVARLEN:7 CALLEDN:1 CLASS:HandlerList CLASSID:16 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:removeAll METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:4 
		;


#ID 13-removeAll

__BEGIN_METHOD_CODE__

HandlerList::removeAll(unsigned type)
{
     ;

    for(HandlerRec *h = handlers[_ARGS_]; h != 0; h = h->next)
	h->remove_me = true;

    if(active[_ARGS_] == 0)
	processRemovals(type);
}

__END_METHOD_CODE__


	METHOD HandlerList!removeAll
		CALLS
		nTypes : HandlerList,
		removeAll : HandlerList



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS HandlerList
			CLASSID 16
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD removeAll
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:HandlerList CLASSID:16 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:removeAll METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-removeAll

__BEGIN_METHOD_CODE__

HandlerList::removeAll()
{
    for(unsigned type = 0; type < nTypes(); type++)
	removeAll(type);
}

__END_METHOD_CODE__


	METHOD HandlerList!call
		CALLS
		proc : _SYSTEM_OR_USER_,
		processRemovals : HandlerList



		METRICS
			proc REFERRED 1 TIMES,
			client_data REFERRED 1 TIMES,
			next REFERRED 1 TIMES,
			remove_me REFERRED 1 TIMES,
			*handlers REFERRED 1 TIMES,
			active REFERRED 2 TIMES,
			ARRAYOP 3
			ASS 3
			AVVARLEN 7
			CALLEDN 2
			CLASS HandlerList
			CLASSID 16
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 15
			LT 0
			METHOD call
			METHODID 15
			MMINUS 1
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:3 ASS:3 AVVARLEN:7 CALLEDN:2 CLASS:HandlerList CLASSID:16 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:15 LT:0 METHOD:call METHODID:15 MMINUS:1 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:6 
		;


#ID 15-call

__BEGIN_METHOD_CODE__

HandlerList::call(unsigned type,
		       void *const source, 
		       void *const call_data)
{
     ;

    active[_ARGS_]++;

    for(HandlerRec *h = handlers[_ARGS_]; h != 0; h = h->next)
    {
	if(!h->remove_me)
	    h->proc(source, h->client_data, call_data);
    }

     
    if(--active[_ARGS_] == 0)
	processRemovals(type);
}

__END_METHOD_CODE__


	METHOD HandlerList!compare
		CALLS
		compare : HandlerList,
		nTypes : HandlerList,
		nTypes : HandlerList,
		nTypes : HandlerList,
		compare : HandlerList,
		compare : HandlerList



		METRICS
			next REFERRED 2 TIMES,
			*handlers REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 10
			AVVARLEN 6
			CALLEDN 6
			CLASS HandlerList
			CLASSID 16
			CYCLO 7
			DOTS 2
			EQTEST 1
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 34
			LT 1
			METHOD compare
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 5
			SCOPEOP 2
			STMNT 14
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:10 AVVARLEN:6 CALLEDN:6 CLASS:HandlerList CLASSID:16 CYCLO:7 DOTS:2 EQTEST:1 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:34 LT:1 METHOD:compare METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:5 SCOPEOP:2 STMNT:14 TERNINSTR:0 USEDVARS:2 
		;


#ID 8-compare

__BEGIN_METHOD_CODE__

HandlerList::compare(const HandlerList& l)
{
     
    if(this == &l)
	return 0;

     
    int c = ::compare(nTypes(), l.nTypes());
    if(c)
	return c;

     
    for(unsigned t = 0; t < nTypes(); t++)
    {
	HandlerRec *r1 = handlers[_ARGS_];
	HandlerRec *r2 = l.handlers[_ARGS_];

	while(r1 != 0 && r2 != 0)
	{
	    c = compare(*r1, *r2);
	    if(c)
		return c;

	    r1 = r1->next;
	    r2 = r2->next;
	}

	 
	c = ::compare((void *)r1, (void *)r2);
	if(c)
	    return c;
    }

    return 0;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/HandlerL.o.nu.met	  Methods Number  9
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/LiterateA.o.nu.met ... 


	METHOD LiterateAgent!default_block_tty_input

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 33
			LT 0
			METHOD default_block_tty_input
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:33 LT:0 METHOD:default_block_tty_input METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-default_block_tty_input

__BEGIN_METHOD_CODE__

LiterateAgent::default_block_tty_input()
{




     

     
     
     
     
     
     
     
     
     
     
     
     

     
     
    return false;









}

__END_METHOD_CODE__


	METHOD LiterateAgent!readInput
		CALLS
		inputfp : Agent,
		_readInput : LiterateAgent



		METRICS
			activeIO REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 8
			CALLEDN 2
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD readInput
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:8 CALLEDN:2 CLASS:LiterateAgent CLASSID:20 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:readInput METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-readInput

__BEGIN_METHOD_CODE__

LiterateAgent::readInput(char*& data)
{
    data = _REMOVED_STR_;
    if(inputfp() == 0 || !activeIO)
	return -1;

    return _readInput(data);
}

__END_METHOD_CODE__


	METHOD LiterateAgent!readError
		CALLS
		errorfp : Agent,
		_readError : LiterateAgent



		METRICS
			activeIO REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 8
			CALLEDN 2
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD readError
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:8 CALLEDN:2 CLASS:LiterateAgent CLASSID:20 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:readError METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-readError

__BEGIN_METHOD_CODE__

LiterateAgent::readError(char*& data)
{
    data = _REMOVED_STR_;
    if(errorfp() == 0 || !activeIO)
	return -1;

    return _readError(data);
}

__END_METHOD_CODE__


	METHOD LiterateAgent!write
		CALLS
		outputfp : Agent,
		__errno_location : _SYSTEM_OR_USER_,
		write : LiterateAgent,
		fileno : _SYSTEM_OR_USER_,
		outputfp : Agent,
		s : _SYSTEM_OR_USER_,
		raiseIOMsg : Agent,
		sleep : _SYSTEM_OR_USER_,
		raiseIOMsg : Agent,
		dispatch : LiterateAgent,
		raiseMsg : Agent



		METRICS
			activeIO REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 8
			CALLEDN 11
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 6
			DOTS 0
			EQTEST 2
			EXPRORCALL 18
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 2
			LOC 42
			LT 8
			METHOD write
			METHODID 26
			MMINUS 0
			OUT 3
			PARNUM 2
			PPLUS 1
			RETPOINT 3
			SCOPEOP 1
			STMNT 18
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:8 CALLEDN:11 CLASS:LiterateAgent CLASSID:20 CYCLO:6 DOTS:0 EQTEST:2 EXPRORCALL:18 GE:0 GT:1 IN:0 INDR:0 LE:2 LOC:42 LT:8 METHOD:write METHODID:26 MMINUS:0 OUT:3 PARNUM:2 PPLUS:1 RETPOINT:3 SCOPEOP:1 STMNT:18 TERNINSTR:0 USEDVARS:1 
		;


#ID 26-write

__BEGIN_METHOD_CODE__

LiterateAgent::write(const char *data, int length)
{
    if(outputfp() == 0 || !activeIO)
	return -1;

    int failures = 0;

    while(length > 0)
    {
	(*__errno_location())  = 0;
	int nitems = ::write(fileno(outputfp()), data, length);

	if(nitems <= 0)
	{
	    if(nitems == 0 && ++failures <= 3)
	    {
		ostrstream os;
		os << _REMOVED_STR_ 
		   << failures << _REMOVED_STR_;
		string s(os);
		raiseIOMsg(s);
		sleep(1);
		continue;
	    }
	    else
	    {
		raiseIOMsg(_REMOVED_STR_);
		return -1;
	    }
	}

	 ;
	dispatch(Output, (char *)data, nitems);

	length -= nitems;
	data += nitems;
    }

    if(failures)
	raiseMsg(_REMOVED_STR_);

    return 0;
}

__END_METHOD_CODE__


	METHOD LiterateAgent!flush

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD flush
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:flush METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-flush

__BEGIN_METHOD_CODE__

LiterateAgent::flush()
{
     
    return 0;
}

__END_METHOD_CODE__


	METHOD LiterateAgent!_readNonBlocking
		CALLS
		fcntl : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		_raiseIOWarning : Agent,
		fcntl : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		_raiseIOWarning : Agent,
		fread : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		clearerr : _SYSTEM_OR_USER_,
		fcntl : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		_raiseIOWarning : Agent



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 14
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 6
			DOTS 0
			EQTEST 5
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 50
			LT 1
			METHOD _readNonBlocking
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:14 CLASS:LiterateAgent CLASSID:20 CYCLO:6 DOTS:0 EQTEST:5 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:50 LT:1 METHOD:_readNonBlocking METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-_readNonBlocking

__BEGIN_METHOD_CODE__

LiterateAgent::_readNonBlocking(char *buffer, int nelems, FILE *fp)
{
     
    SignalBlocker sb;


     
    int flags = fcntl(fileno(fp), 3 , 0);
    if(flags == -1)
	_raiseIOWarning(_REMOVED_STR_);
    if(fcntl(fileno(fp), 4 , flags | 04000 ) == -1)
	_raiseIOWarning(_REMOVED_STR_);


     
    int nitems = fread(buffer, sizeof(char), nelems, fp);

    if(nitems <= 0)
    {
	if(false

	|| (*__errno_location())  == 11 


	|| (*__errno_location())  == 11  

	)
	{
	     
	     
	     
	     
	     
	     
	    nitems = 0;

	     
	     
	    clearerr(fp);
	}
    }



     
    if(fcntl(fileno(fp), 4 , flags) == -1)
	_raiseIOWarning(_REMOVED_STR_);


    return nitems;
}

__END_METHOD_CODE__


	METHOD LiterateAgent!_read
		CALLS
		discard : ChunkQueue,
		blocking_tty : LiterateAgent,
		fgets : _SYSTEM_OR_USER_,
		append : ChunkQueue,
		strlen : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		clearerr : _SYSTEM_OR_USER_,
		length : ChunkQueue,
		_readNonBlocking : LiterateAgent,
		append : ChunkQueue,
		raiseIOMsg : Agent,
		data : ChunkQueue,
		length : ChunkQueue



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 14
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 6
			DOTS 6
			EQTEST 2
			EXPRORCALL 22
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 44
			LT 2
			METHOD _read
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:14 CLASS:LiterateAgent CLASSID:20 CYCLO:6 DOTS:6 EQTEST:2 EXPRORCALL:22 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:44 LT:2 METHOD:_read METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-_read

__BEGIN_METHOD_CODE__

LiterateAgent::_read(char*& data, FILE *fp)
{
    static ChunkQueue queue;

    queue.discard();
    char buffer[_ARGS_];
    
    if(blocking_tty(fp))
    {
	 
	 
	char *s = fgets(buffer, 8192   , fp);

	if(s != 0)
	    queue.append(buffer, strlen(buffer));
	else if(false

		 || (*__errno_location())  == 11 


		 || (*__errno_location())  == 11  

	    )
	{
	     
	     
	    clearerr(fp);
	}
    }
    else
    {
	 
	 
	int length = -1;
	while(queue.length() < 8192   
	       && (length = _readNonBlocking(buffer, 8192   , fp)) > 0)
	    queue.append(buffer, length);

	if(length < 0)
	    raiseIOMsg(_REMOVED_STR_);
    }

    data = queue.data();
    return queue.length();
}

__END_METHOD_CODE__


	METHOD LiterateAgent!_readInput
		CALLS
		_read : LiterateAgent,
		inputfp : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _readInput
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_readInput METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-_readInput

__BEGIN_METHOD_CODE__

LiterateAgent::_readInput(char*& data)
{
    return _read(data, inputfp());
}

__END_METHOD_CODE__


	METHOD LiterateAgent!_readError
		CALLS
		_read : LiterateAgent,
		errorfp : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _readError
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_readError METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-_readError

__BEGIN_METHOD_CODE__

LiterateAgent::_readError(char*& data)
{
    return _read(data, errorfp());
}

__END_METHOD_CODE__


	METHOD LiterateAgent!dispatch
		CALLS
		dl : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 3
			ASS 5
			AVVARLEN 0
			CALLEDN 2
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD dispatch
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:5 AVVARLEN:0 CALLEDN:2 CLASS:LiterateAgent CLASSID:20 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:dispatch METHODID:18 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-dispatch

__BEGIN_METHOD_CODE__

LiterateAgent::dispatch(int type, char *data, int length)
{
    char c = data[_ARGS_];
    if(c != '\0')
	data[_ARGS_] = '\0';

    DataLength dl(data, length);

     
    callHandlers(type, &dl);

    if(c != '\0')
	data[_ARGS_] = c;
}

__END_METHOD_CODE__


	METHOD LiterateAgent!outputReady
		CALLS
		callHandlers : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 1
			METHOD outputReady
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:3 LT:1 METHOD:outputReady METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-outputReady

__BEGIN_METHOD_CODE__

LiterateAgent::outputReady(AsyncAgent *c)
{
    dynamic_cast< LiterateAgent  *>(  c ) ->callHandlers(Ready);
}

__END_METHOD_CODE__


	METHOD LiterateAgent!inputReady
		CALLS
		readInput : LiterateAgent,
		dispatch : _SYSTEM_OR_USER_,
		inputfp : Agent,
		feof : _SYSTEM_OR_USER_,
		inputfp : Agent,
		inputEOF : Agent



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 6
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 2
			IN 0
			INDR 5
			LE 0
			LOC 13
			LT 1
			METHOD inputReady
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:6 CLASS:LiterateAgent CLASSID:20 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:10 GE:0 GT:2 IN:0 INDR:5 LE:0 LOC:13 LT:1 METHOD:inputReady METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-inputReady

__BEGIN_METHOD_CODE__

LiterateAgent::inputReady(AsyncAgent *c)
{
    char data[_ARGS_];
    char *datap = data;
    LiterateAgent *lc = dynamic_cast< LiterateAgent  *>(  c ) ;
    if(lc != 0)
    {
	int length = lc->readInput(datap);
	if(length > 0)
	    lc->dispatch(Input, datap, length);
	else if(length == 0 && lc->inputfp() != 0 && feof(lc->inputfp()))
	    lc->inputEOF();
    }
}

__END_METHOD_CODE__


	METHOD LiterateAgent!errorReady
		CALLS
		readError : LiterateAgent,
		dispatch : _SYSTEM_OR_USER_,
		errorfp : Agent,
		feof : _SYSTEM_OR_USER_,
		errorfp : Agent,
		errorEOF : Agent



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 6
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 2
			IN 0
			INDR 5
			LE 0
			LOC 13
			LT 1
			METHOD errorReady
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:6 CLASS:LiterateAgent CLASSID:20 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:10 GE:0 GT:2 IN:0 INDR:5 LE:0 LOC:13 LT:1 METHOD:errorReady METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-errorReady

__BEGIN_METHOD_CODE__

LiterateAgent::errorReady(AsyncAgent *c)
{
    char data[_ARGS_];
    char *datap = data;
    LiterateAgent *lc = dynamic_cast< LiterateAgent  *>(  c ) ;
    if(lc != 0)
    {
	int length = lc->readError(datap);
	if(length > 0)
	    lc->dispatch(Error, datap, length);
	else if(length == 0 && lc->errorfp() != 0 && feof(lc->errorfp()))
	    lc->errorEOF();
    }
}

__END_METHOD_CODE__


	METHOD LiterateAgent!readAndDispatchInput
		CALLS
		readInput : LiterateAgent,
		dispatch : LiterateAgent,
		inputfp : Agent,
		feof : _SYSTEM_OR_USER_,
		inputfp : Agent,
		clearerr : _SYSTEM_OR_USER_,
		inputfp : Agent,
		inputEOF : Agent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 8
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 11
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD readAndDispatchInput
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:8 CLASS:LiterateAgent CLASSID:20 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:11 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:readAndDispatchInput METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-readAndDispatchInput

__BEGIN_METHOD_CODE__

LiterateAgent::readAndDispatchInput(bool expectEOF)
{
    char *data;

    int length = readInput(data);
    if(length > 0)
    {
	dispatch(Input, data, length);
    }
    else if(length == 0 && inputfp() != 0 && feof(inputfp()))
    {
	if(expectEOF)
	    clearerr(inputfp());
	else
	    inputEOF();
    }
}

__END_METHOD_CODE__


	METHOD LiterateAgent!readAndDispatchError
		CALLS
		readError : LiterateAgent,
		dispatch : LiterateAgent,
		errorfp : Agent,
		feof : _SYSTEM_OR_USER_,
		errorfp : Agent,
		clearerr : _SYSTEM_OR_USER_,
		errorfp : Agent,
		errorEOF : Agent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 8
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 11
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD readAndDispatchError
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:8 CLASS:LiterateAgent CLASSID:20 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:11 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:readAndDispatchError METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-readAndDispatchError

__BEGIN_METHOD_CODE__

LiterateAgent::readAndDispatchError(bool expectEOF)
{
    char *data;

    int length = readError(data);
    if(length > 0)
    {
	dispatch(Error, data, length);
    }
    else if(length == 0 && errorfp() != 0 && feof(errorfp()))
    {
	if(expectEOF)
	    clearerr(errorfp());
	else
	    errorEOF();
    }
}

__END_METHOD_CODE__


	METHOD LiterateAgent!handlerChange
		CALLS
		_activateIO : LiterateAgent



		METRICS
			activeIO REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 1
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD handlerChange
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:1 CLASS:LiterateAgent CLASSID:20 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:handlerChange METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-handlerChange

__BEGIN_METHOD_CODE__

LiterateAgent::handlerChange()
{
    if(activeIO)
	_activateIO();
}

__END_METHOD_CODE__


	METHOD LiterateAgent!_activateIO
		CALLS
		setHandler : AsyncAgent,
		hasHandler : Agent,
		setHandler : AsyncAgent,
		setHandler : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD _activateIO
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:_activateIO METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:1 USEDVARS:0 
		;


#ID 0-_activateIO

__BEGIN_METHOD_CODE__

LiterateAgent::_activateIO()
{
     
     
    setHandler(OutputReady, hasHandler(Ready) ? outputReady : 0);
    setHandler(InputReady,  inputReady);
    setHandler(ErrorReady,  errorReady);
}

__END_METHOD_CODE__


	METHOD LiterateAgent!_deactivateIO
		CALLS
		setHandler : AsyncAgent,
		setHandler : AsyncAgent,
		setHandler : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD _deactivateIO
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:_deactivateIO METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_deactivateIO

__BEGIN_METHOD_CODE__

LiterateAgent::_deactivateIO()
{
    setHandler(OutputReady, 0);
    setHandler(InputReady,  0);
    setHandler(ErrorReady,  0);
}

__END_METHOD_CODE__


	METHOD LiterateAgent!start
		CALLS
		start : AsyncAgent,
		inputfp : Agent,
		blocking_tty : LiterateAgent,
		inputfp : Agent,
		readAndDispatchInput : LiterateAgent,
		errorfp : Agent,
		blocking_tty : LiterateAgent,
		errorfp : Agent,
		readAndDispatchError : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 9
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD start
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:9 CLASS:LiterateAgent CLASSID:20 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:start METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-start

__BEGIN_METHOD_CODE__

LiterateAgent::start()
{
    AsyncAgent::start();
    
     
    if(inputfp() != 0 && !blocking_tty(inputfp()))
	readAndDispatchInput(true);

    if(errorfp() != 0 && !blocking_tty(errorfp()))
	readAndDispatchError(true);
}

__END_METHOD_CODE__


	METHOD LiterateAgent!abort
		CALLS
		activateIO : LiterateAgent,
		readAndDispatchInput : LiterateAgent,
		readAndDispatchError : LiterateAgent,
		deactivateIO : LiterateAgent,
		abort : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD abort
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:abort METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-abort

__BEGIN_METHOD_CODE__

LiterateAgent::abort()
{
     
    activateIO();
    readAndDispatchInput(true);
    readAndDispatchError(true);

     
    deactivateIO();
    AsyncAgent::abort();
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/LiterateA.o.nu.met	  Methods Number  20
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/TimeOut.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/TTYAgent.o.nu.met ... 


	METHOD TTYAgent!open_tty
		CALLS
		open : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		_raiseIOWarning : Agent,
		string : string,
		open : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS TTYAgent
			CLASSID 21
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 10
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 25
			LT 0
			METHOD open_tty
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:TTYAgent CLASSID:21 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:10 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:25 LT:0 METHOD:open_tty METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-open_tty

__BEGIN_METHOD_CODE__

TTYAgent::open_tty(const char *tty, int flags)
{
    int fd = open(tty, flags);
    if(fd >= 0)
	return fd;

    if(false

	|| (*__errno_location())  == 11 


	|| (*__errno_location())  == 11  

	)
    {
	 
	 
	 
	 
	 
	_raiseIOWarning(string(tty) + _REMOVED_STR_);
	fd = open(tty, flags);
    }

    return fd;
}

__END_METHOD_CODE__


	METHOD TTYAgent!tty_ok
		CALLS
		access : _SYSTEM_OR_USER_,
		open_tty : TTYAgent,
		close : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS TTYAgent
			CLASSID 21
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 1
			METHOD tty_ok
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:TTYAgent CLASSID:21 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:1 METHOD:tty_ok METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-tty_ok

__BEGIN_METHOD_CODE__

TTYAgent::tty_ok(const char *tty)
{
    if(access(tty, 4  | 2 ) != 0)
	return false;		 

    int fd = open_tty(tty);
    if(fd < 0)
	return false;		 

    close(fd);
    return true;
}

__END_METHOD_CODE__


	METHOD TTYAgent!open_master
		CALLS
		stat : _SYSTEM_OR_USER_,
		open_tty : TTYAgent,
		ttyname : _SYSTEM_OR_USER_,
		tty_ok : TTYAgent,
		close : _SYSTEM_OR_USER_,
		stat : _SYSTEM_OR_USER_,
		string : string,
		string : string,
		open_tty : TTYAgent,
		chars : string,
		tty_ok : TTYAgent,
		close : _SYSTEM_OR_USER_,
		stat : _SYSTEM_OR_USER_,
		length : string,
		length : string,
		string : string,
		open_tty : TTYAgent,
		chars : string,
		tty_ok : TTYAgent,
		close : _SYSTEM_OR_USER_,
		length : string,
		length : string,
		string : string,
		open_tty : TTYAgent,
		chars : string,
		tty_ok : TTYAgent,
		close : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent



		METRICS
			master REFERRED 13 TIMES,
			push REFERRED 1 TIMES,
			ARRAYOP 5
			ASS 37
			AVVARLEN 5
			CALLEDN 32
			CLASS TTYAgent
			CLASSID 21
			CYCLO 19
			DOTS 8
			EQTEST 5
			EXPRORCALL 57
			GE 4
			GT 4
			IN 0
			INDR 0
			LE 0
			LOC 138
			LT 6
			METHOD open_master
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 6
			RETPOINT 0
			SCOPEOP 0
			STMNT 55
			TERNINSTR 1
			USEDVARS 2

#METRICS ARRAYOP:5 ASS:37 AVVARLEN:5 CALLEDN:32 CLASS:TTYAgent CLASSID:21 CYCLO:19 DOTS:8 EQTEST:5 EXPRORCALL:57 GE:4 GT:4 IN:0 INDR:0 LE:0 LOC:138 LT:6 METHOD:open_master METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:6 RETPOINT:0 SCOPEOP:0 STMNT:55 TERNINSTR:1 USEDVARS:2 
		;


#ID 0-open_master

__BEGIN_METHOD_CODE__

TTYAgent::open_master()
{
    char *line;
    stat sb;

     
    push = false;







    if(stat(_REMOVED_STR_, &sb) == 0)
    {
	 
	master = open_tty(_REMOVED_STR_);
	if(master >= 0)
	{
	    line = ttyname(master);
	    if(line != 0)
	    {
		if(tty_ok(line))
		{


		    _master_tty = line;
		    _slave_tty  = line;
		    return;

		}
	    }
	    close(master);
	}
    }




     
    if(stat(_REMOVED_STR_, &sb) == 0)
    {
	 



	int highpty = 128;

	for(int i = 0; i < highpty; i++)
	{
	    char nr[_ARGS_];
	    sprintf(nr, _REMOVED_STR_, i);
	    string pty = string(_REMOVED_STR_) + nr;
	    string tty = string(_REMOVED_STR_) + nr;
		
	    master = open_tty(pty.chars());
	    if(master >= 0)
	    {
		 
		if(!tty_ok(tty))
		{
		    close(master);
		    continue;
		}

		_master_tty = pty;
		_slave_tty  = tty;
		return;
	    }
	}
    }

    const string p1 = _REMOVED_STR_;
    const string p2 = _REMOVED_STR_;

    if(stat(_REMOVED_STR_, &sb) == 0 && ((( ( sb.st_mode ) ) & 0170000 ) == (  0040000  ))  )
    {
	 
	for(int i = 0; i < int(p1.length()); i++)
	    for(int j = 0; j < int(p2.length()); j++)
	    {
		string nr  = string(p1[_ARGS_]) + p2[_ARGS_];
		string pty = _REMOVED_STR_ + nr;
		string tty = _REMOVED_STR_ + nr;
		
		master = open_tty(pty.chars());
		if(master >= 0)
		{
		     
		    if(!tty_ok(tty))
		    {
			close(master);
			continue;
		    }

		    _master_tty = pty;
		    _slave_tty  = tty;
		    return;
		}
	    }
    }

     
     
     
    for(int k = 0; k < 2; k++)
    {
	string prefix = (k == 0 ? _REMOVED_STR_ : _REMOVED_STR_);

	for(int i = 0; i < int(p1.length()); i++)
	{
	    for(int j = 0; j < int(p2.length()); j++)
	    {
		string nr  = string(p1[_ARGS_]) + p2[_ARGS_];
		string pty = prefix + _REMOVED_STR_ + nr;
		string tty = prefix + _REMOVED_STR_ + nr;

		master = open_tty(pty.chars());
		if(master >= 0)
		{
		     
		    if(!tty_ok(tty))
		    {
			close(master);
			continue;
		    }

		    _master_tty = pty;
		    _slave_tty  = tty;
		    return;
		}
	    }
	}
    }

    _raiseIOMsg(_REMOVED_STR_);
    return;
}

__END_METHOD_CODE__


	METHOD TTYAgent!open_slave
		CALLS
		open_tty : TTYAgent,
		slave_tty : TTYAgent,
		chars : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		slave_tty : TTYAgent



		METRICS
			slave REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 5
			CALLEDN 5
			CLASS TTYAgent
			CLASSID 21
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 1
			METHOD open_slave
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:5 CALLEDN:5 CLASS:TTYAgent CLASSID:21 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:1 METHOD:open_slave METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-open_slave

__BEGIN_METHOD_CODE__

TTYAgent::open_slave()
{
    slave = open_tty(slave_tty().chars());
    if(slave < 0)
    {
	_raiseIOMsg(_REMOVED_STR_ + slave_tty());
	return;
    }







    return;
}

__END_METHOD_CODE__


	METHOD TTYAgent!setupCommunication
		CALLS
		open_master : TTYAgent



		METRICS
			master REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 1
			CLASS TTYAgent
			CLASSID 21
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 1
			METHOD setupCommunication
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:1 CLASS:TTYAgent CLASSID:21 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:1 METHOD:setupCommunication METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-setupCommunication

__BEGIN_METHOD_CODE__

TTYAgent::setupCommunication()
{
    open_master();
    if(master < 0)
	return -1;

    return 0;
}

__END_METHOD_CODE__


	METHOD TTYAgent!setupParentCommunication
		CALLS
		fcntl : _SYSTEM_OR_USER_,
		_raiseIOWarning : Agent,
		fcntl : _SYSTEM_OR_USER_,
		_raiseIOWarning : Agent,
		fdopen : _SYSTEM_OR_USER_,
		inputfp : Agent,
		raiseIOMsg : Agent,
		terminate : _SYSTEM_OR_USER_,
		setbuf : _SYSTEM_OR_USER_



		METRICS
			master REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 6
			CALLEDN 9
			CLASS TTYAgent
			CLASSID 21
			CYCLO 4
			DOTS 0
			EQTEST 3
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 52
			LT 0
			METHOD setupParentCommunication
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:6 CALLEDN:9 CLASS:TTYAgent CLASSID:21 CYCLO:4 DOTS:0 EQTEST:3 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:52 LT:0 METHOD:setupParentCommunication METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-setupParentCommunication

__BEGIN_METHOD_CODE__

TTYAgent::setupParentCommunication()
{










     
    int flags = fcntl(master, 3 , 0);
    if(flags == -1)
    {
	_raiseIOWarning(_REMOVED_STR_);
    }
    else
    {
	if(fcntl(master, 4 , flags | 04000 ) == -1)
	    _raiseIOWarning(_REMOVED_STR_);
    }

	
     
    _inputfp = fdopen(master, _REMOVED_STR_);
    if(inputfp() == __null )
    {
	raiseIOMsg(_REMOVED_STR_);
	terminate();
	return -1;
    }

    _outputfp = _inputfp;
    _errorfp  = __null ;


     
    setbuf(_outputfp, __null );











    return 0;
}

__END_METHOD_CODE__


	METHOD TTYAgent!setupChildCommunication
		CALLS
		close : _SYSTEM_OR_USER_,
		setsid : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		open_slave : TTYAgent,
		tcsetpgrp : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		tcgetattr : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		tcsetattr : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		dup2 : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		dup2 : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		dup2 : _SYSTEM_OR_USER_,
		_raiseIOMsg : Agent,
		close : _SYSTEM_OR_USER_,
		fcntl : _SYSTEM_OR_USER_,
		setbuf : _SYSTEM_OR_USER_



		METRICS
			master REFERRED 1 TIMES,
			slave REFERRED 10 TIMES,
			ARRAYOP 8
			ASS 23
			AVVARLEN 5
			CALLEDN 21
			CLASS TTYAgent
			CLASSID 21
			CYCLO 11
			DOTS 16
			EQTEST 0
			EXPRORCALL 34
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 126
			LT 9
			METHOD setupChildCommunication
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 38
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:8 ASS:23 AVVARLEN:5 CALLEDN:21 CLASS:TTYAgent CLASSID:21 CYCLO:11 DOTS:16 EQTEST:0 EXPRORCALL:34 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:126 LT:9 METHOD:setupChildCommunication METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:38 TERNINSTR:0 USEDVARS:2 
		;


#ID 3-setupChildCommunication

__BEGIN_METHOD_CODE__

TTYAgent::setupChildCommunication()
{
     
    close(master);

    int result = 0;
    pid_t pid = getpid();

     
     


    result = int(setsid());



    if(result < 0)
	_raiseIOMsg(_REMOVED_STR_);

    if(slave < 0)
    {
	 
	open_slave();
    }

    if(slave < 0)
	return -1;


     
    result = 0;

    result = tcsetpgrp(slave, pid);




    if(result < 0)
	_raiseIOMsg(_REMOVED_STR_);

     

     
    termios settings;
    result = tcgetattr(slave, &settings);
    if(result < 0)
	_raiseIOMsg(_REMOVED_STR_);
    else
    {

	settings.c_lflag |= 0000002 ;      


	settings.c_lflag &= ~0000010 ;       


	settings.c_lflag &= ~0000100 ;     


	settings.c_lflag |= 0000001 ;        


	settings.c_lflag &= ~0000400 ;     


	settings.c_lflag &= ~0000200 ;     


	settings.c_oflag &= ~0000001 ;      


	settings.c_oflag &= ~0000004 ;      





	settings.c_cc[_ARGS_] = '\004';    


	settings.c_cc[_ARGS_] = '\010';  


	settings.c_cc[_ARGS_] = '\003';   


	settings.c_cc[_ARGS_] = '\025';   


	settings.c_cc[_ARGS_] = '\034';   


	settings.c_cc[_ARGS_] = '\032';   


	settings.c_cc[_ARGS_] = '\022';  


	settings.c_cc[_ARGS_] = '\027';  

	result = tcsetattr(slave, 0 , &settings);
	if(result < 0)
	    _raiseIOMsg(_REMOVED_STR_);
    }



     
    if(dup2(slave, 0 ) < 0)
	_raiseIOMsg(_REMOVED_STR_);
    if(dup2(slave, 1 ) < 0)
	_raiseIOMsg(_REMOVED_STR_);
    if(dup2(slave, 2 ) < 0)
	_raiseIOMsg(_REMOVED_STR_);

    if(slave > 2 )
	close(slave);

     
    fcntl(1 , 4 , 02000 );
    setbuf(((_IO_FILE*)(&_IO_stdout_))  , __null );




    return 0;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/TTYAgent.o.nu.met	  Methods Number  7
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/converters.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/events.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/findParent.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/fileSBF.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/frame.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/longName.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/verify.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/Delay.o.nu.met ... 


	METHOD _Delay!hourglass_cursor
		CALLS
		XCreateBitmapFromData : _SYSTEM_OR_USER_,
		XCreateBitmapFromData : _SYSTEM_OR_USER_,
		XQueryColors : _SYSTEM_OR_USER_,
		XCreatePixmapCursor : _SYSTEM_OR_USER_



		METRICS
			widget REFERRED 2 TIMES,
			hourglass_cache REFERRED 4 TIMES,
			ARRAYOP 3
			ASS 15
			AVVARLEN 10
			CALLEDN 4
			CLASS _Delay
			CLASSID 25
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 45
			LT 0
			METHOD hourglass_cursor
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 18
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:3 ASS:15 AVVARLEN:10 CALLEDN:4 CLASS:_Delay CLASSID:25 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:45 LT:0 METHOD:hourglass_cursor METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:18 TERNINSTR:0 USEDVARS:2 
		;


#ID 3-hourglass_cursor

__BEGIN_METHOD_CODE__

_Delay::hourglass_cursor()
{
    if(hourglass_cache != 0)
	return hourglass_cache;

    Display *display = XtDisplay(widget);


    Screen *screen = XtScreen(widget);
    Window rootWindow = (( screen )->root) ;

    unsigned char *cursor_bits      = time16_bits;
    unsigned char *cursor_mask_bits = time16m_bits;
    unsigned int cursor_width       = 16 ;
    unsigned int cursor_height      = 16 ;
    unsigned int cursor_x_hot       = 7 ;
    unsigned int cursor_y_hot       = 7 ;




    Pixmap cursor_pixmap = 
	XCreateBitmapFromData(display, rootWindow, (char *)cursor_bits,
			      cursor_width, cursor_height);
    Pixmap cursor_mask_pixmap = 
	XCreateBitmapFromData(display, rootWindow, (char *)cursor_mask_bits,
			      cursor_width, cursor_height);
    
    XColor cursor_colors[_ARGS_];
    cursor_colors[_ARGS_].pixel = (( screen )->black_pixel) ;
    cursor_colors[_ARGS_].pixel = (( screen )->white_pixel) ;

    XQueryColors(display, (( screen )->cmap) , 
		 cursor_colors, 2);

    hourglass_cache = 
	XCreatePixmapCursor(display, cursor_pixmap, cursor_mask_pixmap,
			    cursor_colors, cursor_colors + 1, 
			    cursor_x_hot, cursor_y_hot);





    return hourglass_cache;
}

__END_METHOD_CODE__


	METHOD _Delay!_Delay
		CALLS
		XCreateFontCursor : _SYSTEM_OR_USER_,
		XDefineCursor : _SYSTEM_OR_USER_,
		hourglass_cursor : _Delay,
		XFlush : _SYSTEM_OR_USER_



		METRICS
			widget REFERRED 5 TIMES,
			old_cursor REFERRED 1 TIMES,
			current_cursor REFERRED 3 TIMES,
			ARRAYOP 1
			ASS 3
			AVVARLEN 10
			CALLEDN 4
			CLASS _Delay
			CLASSID 25
			CYCLO 4
			DOTS 0
			EQTEST 2
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 27
			LT 0
			METHOD _Delay
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 7
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:10 CALLEDN:4 CLASS:_Delay CLASSID:25 CYCLO:4 DOTS:0 EQTEST:2 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:27 LT:0 METHOD:_Delay METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:7 TERNINSTR:0 USEDVARS:3 
		;


#ID 4-_Delay

__BEGIN_METHOD_CODE__

_Delay::_Delay(Widget w)
{
    if(widget == 0)
	return;





    Display *display = XtDisplay(widget);

    if(current_cursor == 0)
    {
	 
	 
	current_cursor = XCreateFontCursor(display, 68 );
    }

    old_cursor = current_cursor;

    if(XtIsRealized(widget))
    {
	XDefineCursor(display, XtWindow(widget), hourglass_cursor());
	XFlush(display);
    }

    XtAddCallback(widget, ((char*)&XtStrings[_ARGS_]) , _Delay::DestroyCB, this);
}

__END_METHOD_CODE__


	METHOD _Delay!DestroyCB

		METRICS
			widget REFERRED 1 TIMES,
			old_cursor REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 8
			CALLEDN 0
			CLASS _Delay
			CLASSID 25
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 6
			LT 0
			METHOD DestroyCB
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:8 CALLEDN:0 CLASS:_Delay CLASSID:25 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:6 LT:0 METHOD:DestroyCB METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-DestroyCB

__BEGIN_METHOD_CODE__

_Delay::DestroyCB(Widget, XtPointer client_data, XtPointer)
{
    _Delay *delay = (_Delay *)client_data;

    delay->widget     = 0;
    delay->old_cursor = 0;
}

__END_METHOD_CODE__


	METHOD Delay!Delay
		CALLS
		size : DelayArray,
		_Delay : _Delay



		METRICS
			delay_count REFERRED 1 TIMES,
			_shells REFERRED 2 TIMES,
			delays REFERRED 2 TIMES,
			ARRAYOP 3
			ASS 2
			AVVARLEN 8
			CALLEDN 2
			CLASS Delay
			CLASSID 26
			CYCLO 4
			DOTS 1
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 1
			METHOD Delay
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:3 ASS:2 AVVARLEN:8 CALLEDN:2 CLASS:Delay CLASSID:26 CYCLO:4 DOTS:1 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:1 METHOD:Delay METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:3 
		;


#ID 1-Delay

__BEGIN_METHOD_CODE__

Delay::Delay(Widget w)
{
     ;

    if(delay_count++ == 0)
    {
	for(int i = 0; i < delays.size(); i++)
	{
	     ;
	    if(_shells[_ARGS_])
	    {



		delays[_ARGS_] = new _Delay(_shells[_ARGS_]);
	    }
	}
    }
}

__END_METHOD_CODE__


	METHOD Delay!DestroyCB
		CALLS
		size : WidgetArray



		METRICS
			_shells REFERRED 3 TIMES,
			delays REFERRED 3 TIMES,
			ARRAYOP 5
			ASS 3
			AVVARLEN 6
			CALLEDN 1
			CLASS Delay
			CLASSID 26
			CYCLO 4
			DOTS 1
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 1
			METHOD DestroyCB
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:5 ASS:3 AVVARLEN:6 CALLEDN:1 CLASS:Delay CLASSID:26 CYCLO:4 DOTS:1 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:1 METHOD:DestroyCB METHODID:0 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:2 
		;


#ID 0-DestroyCB

__BEGIN_METHOD_CODE__

Delay::DestroyCB(Widget widget, XtPointer, XtPointer)
{
     ;

     
    for(int i = 0; i < _shells.size(); i++)
	if(_shells[_ARGS_] == widget)
	{
	    _shells[_ARGS_] = 0;
	    if(delays[_ARGS_])
	    {
		delete delays[_ARGS_];
		delays[_ARGS_] = 0;
	    }




	}
}

__END_METHOD_CODE__


	METHOD Delay!register_shell
		CALLS
		size : WidgetArray,
		size : WidgetArray,
		_Delay : _Delay,
		size : WidgetArray,
		Widget : _SYSTEM_OR_USER_,
		shell_registered : _SYSTEM_OR_USER_



		METRICS
			delay_count REFERRED 1 TIMES,
			_shells REFERRED 7 TIMES,
			delays REFERRED 2 TIMES,
			ARRAYOP 5
			ASS 10
			AVVARLEN 8
			CALLEDN 6
			CLASS Delay
			CLASSID 26
			CYCLO 7
			DOTS 3
			EQTEST 2
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 37
			LT 2
			METHOD register_shell
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:5 ASS:10 AVVARLEN:8 CALLEDN:6 CLASS:Delay CLASSID:26 CYCLO:7 DOTS:3 EQTEST:2 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:37 LT:2 METHOD:register_shell METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:3 
		;


#ID 3-register_shell

__BEGIN_METHOD_CODE__

Delay::register_shell(Widget widget)
{
     ;

     
    int i;
    for(i = 0; i < _shells.size(); i++)
	if(_shells[_ARGS_] == widget)
	    return;

     
    for(i = 0; i < _shells.size() && _shells[_ARGS_] != 0; i++)
	;

    XtAddCallback(widget, ((char*)&XtStrings[_ARGS_]) , DestroyCB, XtPointer(0));

    _Delay *new_delay = 0;
    if(delay_count)
	new_delay = new _Delay(widget);

    if(i == _shells.size())
    {
	_shells += Widget(0);
	delays  += (_Delay *)0;
    }

     ;
    
    _shells[_ARGS_] = widget;
    delays[_ARGS_]  = new_delay;





    if(shell_registered != 0)
	shell_registered(widget);
}

__END_METHOD_CODE__

#==================================================================
#File  ../../code/ddd-3.0/ddd/Delay.o.nu.met	  Methods Number  6
#==================================================================
#Process file ../../code/ddd-3.0/ddd/DestroyCB.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/ExitCB.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/InitImage.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/MString.o.nu.met ... 


	METHOD MString!OK
		CALLS
		xmstring : MString,
		isEmpty : MString,
		length : MString,
		lineCount : MString



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS MString
			CLASSID 22
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD OK
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:MString CLASSID:22 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:OK METHODID:24 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-OK

__BEGIN_METHOD_CODE__

MString::OK()
{
    if(xmstring() == 0)
	return 1 ;		 

     
    (void) isEmpty();
    (void) length();
    (void) lineCount();

    return 1 ;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/MString.o.nu.met	  Methods Number  1
#====================================================================
#Process file ../../code/ddd-3.0/ddd/SpinBox.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/AlignBox.o.nu.met ... 


	METHOD AlignBox!drawAlign
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		extend : Box,
		extend : Box,
		extend : Box,
		nchildren : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		min : _SYSTEM_OR_USER_,
		draw : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion



		METRICS
			ARRAYOP 6
			ASS 14
			AVVARLEN 0
			CALLEDN 13
			CLASS AlignBox
			CLASSID 31
			CYCLO 3
			DOTS 2
			EQTEST 2
			EXPRORCALL 19
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 39
			LT 3
			METHOD drawAlign
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 6
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:14 AVVARLEN:0 CALLEDN:13 CLASS:AlignBox CLASSID:31 CYCLO:3 DOTS:2 EQTEST:2 EXPRORCALL:19 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:39 LT:3 METHOD:drawAlign METHODID:5 MMINUS:0 OUT:0 PARNUM:6 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:2 USEDVARS:0 
		;


#ID 5-drawAlign

__BEGIN_METHOD_CODE__

AlignBox::drawAlign(Widget w, 
			 const BoxRegion& r, 
			 const BoxRegion& exposed, 
			 GC gc,
			 bool context_selected, 
			 BoxDimension dimen)
{
    BoxSize space   = r.space();
    BoxPoint origin = r.origin();

     
    BoxCoordinate remainder = space[_ARGS_] - size(dimen);
    BoxCoordinate remainder_per_extend =
	(extend(dimen) == 0 || remainder < 0) ? 0 : remainder / extend(dimen);
    BoxCoordinate pixel_stuff =
	(extend(dimen) == 0 || remainder < 0) ? 0 : remainder % extend(dimen);

    BoxPoint child_origin = origin;
    BoxSize  child_space  = space;

    for(int i = 0; i < nchildren(); i++)
    {
	Box *child = (Box *)(*this)[_ARGS_];

	 
	child_space[_ARGS_] = child->size(dimen) + 
	    remainder_per_extend * child->extend(dimen);
	
	 
	if(pixel_stuff > 0)
	{
	    BoxCoordinate stuff = min(remainder_per_extend, pixel_stuff);
	    child_space[_ARGS_] += stuff;
	    pixel_stuff -= stuff;
	}

	 
	child->draw(w, 
		    BoxRegion(child_origin, child_space), 
		    exposed, gc, context_selected);

	 
	child_origin[_ARGS_] += child_space[_ARGS_];
    }
}

__END_METHOD_CODE__


	METHOD AlignBox!resize
		CALLS
		nchildren : _SYSTEM_OR_USER_,
		setSize : AlignBox,
		resize : Box,
		addSize : AlignBox,
		resize : Box



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 5
			CLASS AlignBox
			CLASSID 31
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 1
			METHOD resize
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:5 CLASS:AlignBox CLASSID:31 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:1 METHOD:resize METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-resize

__BEGIN_METHOD_CODE__

AlignBox::resize()
{
    for(int i = 0; i < nchildren(); i++)
    {
	Box* child = (*this)[_ARGS_];
	if(i == 0)
	    setSize(child->resize());
	else
	    addSize(child->resize());
    }
    return this;
}

__END_METHOD_CODE__


	METHOD HAlignBox!addSize
		CALLS
		thesize : Box,
		size : _SYSTEM_OR_USER_,
		theextend : Box,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		corner : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS HAlignBox
			CLASSID 32
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 1
			IN 0
			INDR 4
			LE 0
			LOC 8
			LT 0
			METHOD addSize
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:HAlignBox CLASSID:32 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:1 IN:0 INDR:4 LE:0 LOC:8 LT:0 METHOD:addSize METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-addSize

__BEGIN_METHOD_CODE__

HAlignBox::addSize(Box *b)
{
    thesize()   &= b->size();
    theextend() &= b->extend();

     
    if(b->size(X) > 0)
	_corner = b->corner();
}

__END_METHOD_CODE__


	METHOD HAlignBox!_print
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		extend : Box,
		extend : Box,
		extend : Box,
		nchildren : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		min : _SYSTEM_OR_USER_,
		_print : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion



		METRICS
			ARRAYOP 8
			ASS 16
			AVVARLEN 0
			CALLEDN 13
			CLASS HAlignBox
			CLASSID 32
			CYCLO 3
			DOTS 2
			EQTEST 2
			EXPRORCALL 19
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 2
			LOC 32
			LT 3
			METHOD _print
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 18
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:8 ASS:16 AVVARLEN:0 CALLEDN:13 CLASS:HAlignBox CLASSID:32 CYCLO:3 DOTS:2 EQTEST:2 EXPRORCALL:19 GE:0 GT:1 IN:0 INDR:3 LE:2 LOC:32 LT:3 METHOD:_print METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:18 TERNINSTR:2 USEDVARS:0 
		;


#ID 7-_print

__BEGIN_METHOD_CODE__

HAlignBox::_print(ostream& os, 
		       const BoxRegion& region, 
		       const BoxPrintGC& gc)
{
    int i;

    BoxSize space   = region.space();
    BoxPoint origin = region.origin();

    BoxCoordinate rem = space[_ARGS_] - size(X);
    BoxCoordinate perextend = 
	(extend(X) == 0 || rem <= 0) ? 0 : rem / extend(X);
    BoxCoordinate pixels = 
	(extend(X) == 0 || rem <= 0) ? 0 : rem % extend(X);
    
    BoxPoint child_origin = origin;
    BoxSize  child_space;

    for(i = 0; i < nchildren(); i++ ) {
	Box *child = (Box *)(*this)[_ARGS_];

	child_space[_ARGS_] = space[_ARGS_];
	child_space[_ARGS_] = child->size(X) + perextend * child->extend(X);
		
	if(pixels > 0) {
	    BoxCoordinate stuff = min(perextend, pixels);
	    child_space[_ARGS_] += stuff;
	    pixels -= stuff;
	}

	child->_print(os, BoxRegion(child_origin, child_space), gc);
	
	child_origin[_ARGS_] += child_space[_ARGS_];
    }
}

__END_METHOD_CODE__


	METHOD VAlignBox!addSize
		CALLS
		thesize : Box,
		size : _SYSTEM_OR_USER_,
		theextend : Box,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		corner : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		corner : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 4
			ASS 4
			AVVARLEN 0
			CALLEDN 10
			CLASS VAlignBox
			CLASSID 33
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 12
			GE 0
			GT 1
			IN 0
			INDR 7
			LE 0
			LOC 12
			LT 0
			METHOD addSize
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:4 AVVARLEN:0 CALLEDN:10 CLASS:VAlignBox CLASSID:33 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:12 GE:0 GT:1 IN:0 INDR:7 LE:0 LOC:12 LT:0 METHOD:addSize METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:1 USEDVARS:0 
		;


#ID 6-addSize

__BEGIN_METHOD_CODE__

VAlignBox::addSize(Box *b)
{
    thesize()   |= b->size();
    theextend() |= b->extend();

     
    if(b->size(Y) > 0)
    {
	_corner[_ARGS_] = b->corner()[_ARGS_];
	_corner[_ARGS_] = b->extend(X) ? 0 : 
	    size(X) - (b->size(X) - b->corner()[_ARGS_]);
    }
}

__END_METHOD_CODE__


	METHOD VAlignBox!_print
		CALLS
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		extend : Box,
		extend : Box,
		extend : Box,
		nchildren : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		min : _SYSTEM_OR_USER_,
		_print : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion



		METRICS
			ARRAYOP 8
			ASS 16
			AVVARLEN 0
			CALLEDN 13
			CLASS VAlignBox
			CLASSID 33
			CYCLO 3
			DOTS 2
			EQTEST 2
			EXPRORCALL 19
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 2
			LOC 37
			LT 3
			METHOD _print
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 18
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:8 ASS:16 AVVARLEN:0 CALLEDN:13 CLASS:VAlignBox CLASSID:33 CYCLO:3 DOTS:2 EQTEST:2 EXPRORCALL:19 GE:0 GT:1 IN:0 INDR:3 LE:2 LOC:37 LT:3 METHOD:_print METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:18 TERNINSTR:2 USEDVARS:0 
		;


#ID 7-_print

__BEGIN_METHOD_CODE__

VAlignBox::_print(ostream& os, 
		       const BoxRegion& region, 
		       const BoxPrintGC& gc)
{
    int i;







    BoxPoint origin = region.origin();
    BoxSize space = region.space();

    BoxCoordinate rem = space[_ARGS_] - size(Y);
    BoxCoordinate perextend = 
	(extend(Y) == 0 || rem <= 0) ? 0 : rem / extend(Y);
    BoxCoordinate pixels = 
	(extend(Y) == 0 || rem <= 0) ? 0 : rem % extend(Y);
    
    BoxPoint child_origin = origin;
    BoxSize  child_space;

    for(i = 0; i < nchildren(); i++ ) {
	Box *child = (Box *)(*this)[_ARGS_];

	child_space[_ARGS_] = space[_ARGS_];
	child_space[_ARGS_] = child->size(Y) + perextend * child->extend(Y);
	
	if(pixels > 0) {
	    BoxCoordinate stuff = min(perextend, pixels);
	    child_space[_ARGS_] += stuff;
	    pixels -= stuff;
	}

	child->_print(os, BoxRegion(child_origin, child_space), gc);
	child_origin[_ARGS_] += child_space[_ARGS_];
    }
}

__END_METHOD_CODE__


	METHOD UAlignBox!addSize
		CALLS
		thesize : Box,
		size : _SYSTEM_OR_USER_,
		theextend : Box,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		BoxSize : BoxSize,
		corner : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS UAlignBox
			CLASSID 34
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 1
			IN 0
			INDR 4
			LE 0
			LOC 8
			LT 0
			METHOD addSize
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:UAlignBox CLASSID:34 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:1 IN:0 INDR:4 LE:0 LOC:8 LT:0 METHOD:addSize METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-addSize

__BEGIN_METHOD_CODE__

UAlignBox::addSize(Box *b)
{
    thesize()   ^= b->size();
    theextend() ^= b->extend();

     
    if(b->size() > BoxSize(0, 0))
	_corner = b->corner();
}

__END_METHOD_CODE__


	METHOD UAlignBox!_draw
		CALLS
		nchildren : _SYSTEM_OR_USER_,
		draw : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS UAlignBox
			CLASSID 34
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 1
			METHOD _draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:UAlignBox CLASSID:34 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:8 LT:1 METHOD:_draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_draw

__BEGIN_METHOD_CODE__

UAlignBox::_draw(Widget w, 
		      const BoxRegion& r, 
		      const BoxRegion& exposed, 
		      GC gc,
		      bool context_selected)
{
     
    for(int i = 0; i < nchildren(); i++)
    {
	Box *child = (Box *)(*this)[_ARGS_];
	child->draw(w, r, exposed, gc, context_selected);
    }
}

__END_METHOD_CODE__


	METHOD UAlignBox!_print
		CALLS
		nchildren : _SYSTEM_OR_USER_,
		_print : UAlignBox



		METRICS
			ARRAYOP 1
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS UAlignBox
			CLASSID 34
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 1
			METHOD _print
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:UAlignBox CLASSID:34 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:1 METHOD:_print METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-_print

__BEGIN_METHOD_CODE__

UAlignBox::_print(ostream& os, 
		       const BoxRegion& region, 
		       const BoxPrintGC& gc)
{
    for(int i = 0; i < nchildren(); i++) {
	(*this)[_ARGS_]->_print(os, region, gc);
    }
}

__END_METHOD_CODE__


	METHOD TAlignBox!addSize
		CALLS
		thesize : Box,
		size : _SYSTEM_OR_USER_,
		theextend : Box,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		corner : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		max : DynArray,
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 4
			ASS 6
			AVVARLEN 0
			CALLEDN 9
			CLASS TAlignBox
			CLASSID 35
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 1
			GT 1
			IN 0
			INDR 6
			LE 0
			LOC 18
			LT 0
			METHOD addSize
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:6 AVVARLEN:0 CALLEDN:9 CLASS:TAlignBox CLASSID:35 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:1 GT:1 IN:0 INDR:6 LE:0 LOC:18 LT:0 METHOD:addSize METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-addSize

__BEGIN_METHOD_CODE__

TAlignBox::addSize(Box *b)
{
     
    thesize()   += (b->size() ^ _corner) - _corner;
    theextend() &= b->extend();

     
    if(b->size(X) >= _corner[_ARGS_])
    {
	 
	_corner = b->corner();  
    }
    else
    {
	 
	_corner[_ARGS_] -= b->size(X);
	_corner[_ARGS_]  = max(b->size(Y), _corner[_ARGS_]);
    }
}

__END_METHOD_CODE__


	METHOD TAlignBox!_draw
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		extend : Box,
		extend : Box,
		extend : Box,
		nchildren : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		min : _SYSTEM_OR_USER_,
		draw : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion,
		corner : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		corner : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 11
			ASS 17
			AVVARLEN 0
			CALLEDN 20
			CLASS TAlignBox
			CLASSID 35
			CYCLO 5
			DOTS 2
			EQTEST 4
			EXPRORCALL 30
			GE 0
			GT 1
			IN 0
			INDR 6
			LE 0
			LOC 45
			LT 3
			METHOD _draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:11 ASS:17 AVVARLEN:0 CALLEDN:20 CLASS:TAlignBox CLASSID:35 CYCLO:5 DOTS:2 EQTEST:4 EXPRORCALL:30 GE:0 GT:1 IN:0 INDR:6 LE:0 LOC:45 LT:3 METHOD:_draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:2 USEDVARS:0 
		;


#ID 0-_draw

__BEGIN_METHOD_CODE__

TAlignBox::_draw(Widget w, 
		      const BoxRegion& r, 
		      const BoxRegion& exposed, 
		      GC gc,
		      bool context_selected)
{
    BoxSize space   = r.space();
    BoxPoint origin = r.origin();

     
    if(extend(X) == 0)
	space[_ARGS_] = size(X);
    if(extend(Y) == 0)
	space[_ARGS_] = size(Y);

     
    BoxCoordinate remainder = space[_ARGS_] - size(X);
    BoxCoordinate remainder_per_extend = 
	(extend(X) == 0 || remainder < 0) ? 0 : remainder / extend(X);
    BoxCoordinate pixel_stuff = 
	(extend(X) == 0 || remainder < 0) ? 0 : remainder % extend(X);

    BoxPoint child_origin = origin;
    BoxSize  child_space  = space;

    for(int i = 0; i < nchildren(); i++)
    {
	Box *child = (Box *)(*this)[_ARGS_];

	 
	child_space[_ARGS_] = child->size(X) + 
	    remainder_per_extend * child->extend(X);
	
	 
	if(pixel_stuff > 0)
	{
	    BoxCoordinate stuff = min(remainder_per_extend, pixel_stuff);
	    child_space[_ARGS_] += stuff;
	    pixel_stuff -= stuff;
	}

	 
	child->draw(w, BoxRegion(child_origin, child_space), 
		    exposed, gc, context_selected);
	
	 
	child_origin[_ARGS_] += (child_space[_ARGS_] - child->corner()[_ARGS_]);
	child_origin[_ARGS_] += (child->size(Y) - child->corner()[_ARGS_]);
    }
}

__END_METHOD_CODE__


	METHOD TAlignBox!_print
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		extend : Box,
		extend : Box,
		extend : Box,
		nchildren : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		min : _SYSTEM_OR_USER_,
		_print : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion,
		corner : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		corner : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 11
			ASS 17
			AVVARLEN 0
			CALLEDN 20
			CLASS TAlignBox
			CLASSID 35
			CYCLO 5
			DOTS 2
			EQTEST 4
			EXPRORCALL 30
			GE 0
			GT 1
			IN 0
			INDR 6
			LE 0
			LOC 51
			LT 3
			METHOD _print
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:11 ASS:17 AVVARLEN:0 CALLEDN:20 CLASS:TAlignBox CLASSID:35 CYCLO:5 DOTS:2 EQTEST:4 EXPRORCALL:30 GE:0 GT:1 IN:0 INDR:6 LE:0 LOC:51 LT:3 METHOD:_print METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:2 USEDVARS:0 
		;


#ID 7-_print

__BEGIN_METHOD_CODE__

TAlignBox::_print(ostream& os, 
		       const BoxRegion& region, 
		       const BoxPrintGC& gc)
{
    BoxSize space   = region.space();
    BoxPoint origin = region.origin();

     
	
    if(extend(X) == 0)
	space[_ARGS_] = size(X);
    if(extend(Y) == 0)
	space[_ARGS_] = size(Y);
    
     

    BoxCoordinate remainder = space[_ARGS_] - size(X);
    BoxCoordinate remainder_per_extend = 
	(extend(X) == 0 || remainder < 0) ? 
	0 : remainder / extend(X);
    BoxCoordinate pixel_stuff = 
	(extend(X) == 0 || remainder < 0) ? 
	0 : remainder % extend(X);
    
    BoxPoint child_origin = origin;
    BoxSize  child_space  = space;

    for(int i = 0; i < nchildren(); i++) 	{
        Box *child = (Box *)(*this)[_ARGS_];

	 

	child_space[_ARGS_] = child->size(X) + 
	    remainder_per_extend * child->extend(X);
	
	 
	
	if(pixel_stuff > 0) {
	    BoxCoordinate stuff = 
		min(remainder_per_extend, pixel_stuff);
	    child_space[_ARGS_] += stuff;
	    pixel_stuff -= stuff;
	}

	 
	
	child->_print(os, BoxRegion(child_origin, child_space), gc);
	
	 

	child_origin[_ARGS_] += (child_space[_ARGS_] - child->corner()[_ARGS_]);
	child_origin[_ARGS_] += (child->size(Y) - child->corner()[_ARGS_]);
    }
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/AlignBox.o.nu.met	  Methods Number  12
#======================================================================
#Process file ../../code/ddd-3.0/ddd/ArcBox.o.nu.met ... 


	METHOD ArcBox!__draw
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		XDrawArc : _SYSTEM_OR_USER_



		METRICS
			_start REFERRED 3 TIMES,
			_length REFERRED 3 TIMES,
			ARRAYOP 22
			ASS 13
			AVVARLEN 6
			CALLEDN 4
			CLASS ArcBox
			CLASSID 43
			CYCLO 19
			DOTS 2
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 3
			IN 0
			INDR 0
			LE 0
			LOC 68
			LT 10
			METHOD __draw
			METHODID 0
			MMINUS 0
			OUT 5
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 28
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:22 ASS:13 AVVARLEN:6 CALLEDN:4 CLASS:ArcBox CLASSID:43 CYCLO:19 DOTS:2 EQTEST:0 EXPRORCALL:10 GE:0 GT:3 IN:0 INDR:0 LE:0 LOC:68 LT:10 METHOD:__draw METHODID:0 MMINUS:0 OUT:5 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:28 TERNINSTR:0 USEDVARS:2 
		;


#ID 0-__draw

__BEGIN_METHOD_CODE__

ArcBox::__draw(Widget w, 
		    const BoxRegion& r, 
		    const BoxRegion& , GC gc, 
		    bool)
{
    BoxSize space   = r.space();
    BoxPoint origin = r.origin();

     

     








    switch(_length) {
	case 360:    
	    break;

	case 180:    
	    switch(_start) {
		case 0:
		    space[_ARGS_] *= 2;
		    break;
		case 90:
		    space[_ARGS_] *= 2;
		    break;
		case 180:
		    origin[_ARGS_] -= space[_ARGS_];
		    space[_ARGS_] *= 2;
		    break;
		case 270:
		    origin[_ARGS_] -= space[_ARGS_];
		    space[_ARGS_] *= 2;
		    break;
		default:
		    cerr << _REMOVED_STR_;
	    }
	    break;

	case 90:     
	    switch(_start) {
		case 0:
		    origin[_ARGS_] -= space[_ARGS_];
		    break;
		case 90:
		    break;
		case 180:
		    origin[_ARGS_] -= space[_ARGS_];
		    break;
		case 270:
		    origin[_ARGS_] -= space[_ARGS_];
		    origin[_ARGS_] -= space[_ARGS_];
		    break;
		default:
		    cerr << _REMOVED_STR_;
	    }
	    space *= BoxPoint(2,2);
	    break;

	default:
	    cerr << _REMOVED_STR_;
    }

    if(space[_ARGS_] > 0 && space[_ARGS_] > 0 && _length > 0)
	XDrawArc(XtDisplay(w), XtWindow(w), gc, origin[_ARGS_], origin[_ARGS_],
	    space[_ARGS_], space[_ARGS_], _start << 6, _length << 6);  
}

__END_METHOD_CODE__


	METHOD ArcBox!dump

		METRICS
			_start REFERRED 1 TIMES,
			_length REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS ArcBox
			CLASSID 43
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 10
			METHOD dump
			METHODID 4
			MMINUS 0
			OUT 5
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:ArcBox CLASSID:43 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:10 METHOD:dump METHODID:4 MMINUS:0 OUT:5 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 4-dump

__BEGIN_METHOD_CODE__

ArcBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << _start << _REMOVED_STR_ << _length << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD ArcBox!_printFig
		CALLS
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		start : ArcBox,
		length : ArcBox,
		linethickness : LineBox



		METRICS
			ARRAYOP 345
			ASS 72
			AVVARLEN 0
			CALLEDN 5
			CLASS ArcBox
			CLASSID 43
			CYCLO 41
			DOTS 2
			EQTEST 1
			EXPRORCALL 58
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 235
			LT 331
			METHOD _printFig
			METHODID 2
			MMINUS 0
			OUT 165
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 162
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:345 ASS:72 AVVARLEN:0 CALLEDN:5 CLASS:ArcBox CLASSID:43 CYCLO:41 DOTS:2 EQTEST:1 EXPRORCALL:58 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:235 LT:331 METHOD:_printFig METHODID:2 MMINUS:0 OUT:165 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:162 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_printFig

__BEGIN_METHOD_CODE__

ArcBox::_printFig(ostream& os, 
		       const BoxRegion& region, 
		       const BoxPrintGC &)
{
    BoxPoint origin = region.origin() ;
    BoxPoint space = region.space();
    BoxDegrees s = start();
    BoxDegrees l = length() ;
    BoxCoordinate thickness = linethickness() ;
    BoxPoint points[_ARGS_] ;
    BoxCoordinate middle ;

    switch(l) {
    case 0:
    case 360:
    case 270:
	break ;
    case 180:
	switch(s) {
	case 0:
	    space[_ARGS_] *= 2;
	    break ;
	case 90:
	    space[_ARGS_] *= 2;
	    break;
	case 180:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    space[_ARGS_] *= 2;
	    break ;
	case 270:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    space[_ARGS_] *= 2;
	    break;
	default:
	    cerr << _REMOVED_STR_ ;
	}
	
	break ;
    case 90:
	switch(s) {
	case 0:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    break ;
	case 90:
	    break ;
	case 180:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    break ;
	case 270:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    origin[_ARGS_] -= space[_ARGS_] ;
	    break ;
	default:
	    cerr << _REMOVED_STR_ ;
	}
	space[_ARGS_] *= 2;
	space[_ARGS_] *= 2;
	break ;
    default:
	cerr << _REMOVED_STR_ ;
    }
    

    if(space[_ARGS_] < space[_ARGS_]) {
	middle = (int) ((float)space[_ARGS_]/2 * rad) ;
	
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 + middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 + middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2 + middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]  ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2 + middle;
	
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;
	
	while(l) {
	    switch(s) {
	    case 360:
	    case 0:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
	    case 270:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
	    case 180:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
	    case 90:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
		
	    default:
		cerr << _REMOVED_STR_;
	    }
	    l -= 90 ;
	    s = (s + 90) % 360 ;
	}
    } else  {
	middle = (int) ((float)space[_ARGS_]/2 * rad) ;
	int equal = (space[_ARGS_] == space[_ARGS_]) ;
	
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 + middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 + middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2 + middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]  ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2 + middle;
	
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_] - space[_ARGS_]/2;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;
	points[_ARGS_][_ARGS_] = origin[_ARGS_] + space[_ARGS_]/2 - middle ;

	while(l) {
	    switch(s) {
	    case 180:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		if(!equal)
		    (os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
	    case 270:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		if(!equal)
		    (os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
	    case 360:
	    case 0:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		if(!equal)
		    (os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
	    case 90:
		os << _REMOVED_STR_  ;
		os << thickness ;
		os << _REMOVED_STR_  ;
		if(!equal)
		    (os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		(os << points[_ARGS_][_ARGS_] << _REMOVED_STR_ << points[_ARGS_][_ARGS_] << _REMOVED_STR_)  ;
		os << _REMOVED_STR_ ;
		
		break;
		
	    default:
		cerr << _REMOVED_STR_;
	    }
	    l -= 90 ;
	    s = (s + 90) % 360 ;
	}
    }
}

__END_METHOD_CODE__


	METHOD ArcBox!_printPS
		CALLS
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		start : ArcBox,
		length : ArcBox,
		linethickness : LineBox



		METRICS
			ARRAYOP 24
			ASS 19
			AVVARLEN 0
			CALLEDN 5
			CLASS ArcBox
			CLASSID 43
			CYCLO 20
			DOTS 2
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 68
			LT 34
			METHOD _printPS
			METHODID 1
			MMINUS 0
			OUT 17
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 38
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:24 ASS:19 AVVARLEN:0 CALLEDN:5 CLASS:ArcBox CLASSID:43 CYCLO:20 DOTS:2 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:68 LT:34 METHOD:_printPS METHODID:1 MMINUS:0 OUT:17 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:38 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_printPS

__BEGIN_METHOD_CODE__

ArcBox::_printPS(ostream& os, 
		      const BoxRegion& region, 
		      const BoxPrintGC &)
{
    BoxPoint origin = region.origin() ;
    BoxPoint space = region.space();
    BoxDegrees s = start();
    BoxDegrees end;
    BoxDegrees l = length() ;
    BoxCoordinate thickness = linethickness() ;
    
    switch(l) {
    case 0:
    case 360:
    case 270:
	break ;
    case 180:
	switch(s) {
	case 0:
	    space[_ARGS_] *= 2;
	    break ;
	case 90:
	    space[_ARGS_] *= 2;
	    break;
	case 180:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    space[_ARGS_] *= 2;
	    break ;
	case 270:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    space[_ARGS_] *= 2;
	    break;
	default:
	    cerr << _REMOVED_STR_ ;
	}
	
	break ;
    case 90:
	switch(s) {
	case 0:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    break ;
	case 90:
	    break ;
	case 180:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    break ;
	case 270:
	    origin[_ARGS_] -= space[_ARGS_] ;
	    origin[_ARGS_] -= space[_ARGS_] ;
	    break ;
	default:
	    cerr << _REMOVED_STR_ ;
	}
	space[_ARGS_] *= 2;
	space[_ARGS_] *= 2;
	break ;
    default:
	cerr << _REMOVED_STR_ ;
    }
    
    end = (720 - s) % 360 ;
    s   = (720 - s - l) % 360 ;
    
    
    os << s << _REMOVED_STR_ << end << _REMOVED_STR_ ;
    os << space[_ARGS_]/2 << _REMOVED_STR_ << space[_ARGS_]/2 << _REMOVED_STR_;
    os << origin[_ARGS_] + space[_ARGS_]/2 << _REMOVED_STR_ << origin[_ARGS_] + space[_ARGS_]/2;
    os << _REMOVED_STR_ << thickness << _REMOVED_STR_;
    
}

__END_METHOD_CODE__


	METHOD ArcBox!_print
		CALLS
		isFig : _SYSTEM_OR_USER_,
		_printFig : ArcBox,
		isPostScript : _SYSTEM_OR_USER_,
		_printPS : ArcBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS ArcBox
			CLASSID 43
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD _print
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:ArcBox CLASSID:43 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:_print METHODID:8 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-_print

__BEGIN_METHOD_CODE__

ArcBox::_print(ostream& os, 
		    const BoxRegion& region, 
		    const BoxPrintGC& gc)
{
    if(gc.isFig()) {
	_printFig(os, region, gc);
    } else if(gc.isPostScript()) {
	_printPS(os, region, gc);
    }

}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/ArcBox.o.nu.met	  Methods Number  5
#===================================================================
#Process file ../../code/ddd-3.0/ddd/BinBox.o.nu.met ... 


	METHOD BinBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BinBox
			CLASSID 45
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 6
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BinBox CLASSID:45 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:6 METHOD:dump METHODID:1 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

BinBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << *_box << _REMOVED_STR_;
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/BinBox.o.nu.met	  Methods Number  1
#===================================================================
#Process file ../../code/ddd-3.0/ddd/Box.o.nu.met ... 


	METHOD Box!draw
		CALLS
		_draw : Box



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS Box
			CLASSID 29
			CYCLO 5
			DOTS 0
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 1
			LOC 18
			LT 7
			METHOD draw
			METHODID 26
			MMINUS 0
			OUT 3
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:Box CLASSID:29 CYCLO:5 DOTS:0 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:1 LOC:18 LT:7 METHOD:draw METHODID:26 MMINUS:0 OUT:3 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-draw

__BEGIN_METHOD_CODE__

Box::draw(Widget w, 
	       const BoxRegion& r, 
	       const BoxRegion& exposed, 
	       GC gc, 
	       bool context_selected)
{
     
    if(!(r <= exposed))
	return;

    if(false )
	cout << _REMOVED_STR_ << r;

     
    if(gc == 0)
	gc = (( XtScreen(w) )->default_gc) ;

     
    _draw(w, r, exposed, gc, context_selected);

    if(false )
	cout << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD Box!matches
		CALLS
		type : Box,
		type : _SYSTEM_OR_USER_,
		extend : Box,
		size : Box,
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS Box
			CLASSID 29
			CYCLO 4
			DOTS 2
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 10
			LT 1
			METHOD matches
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:Box CLASSID:29 CYCLO:4 DOTS:2 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:10 LT:1 METHOD:matches METHODID:7 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-matches

__BEGIN_METHOD_CODE__

Box::matches(const Box &b, const Box *)
{
    if(strcmp(type(), b.type()))
	return false;

    for(BoxDimension d = X; d <= Y; d++)
	if(extend(d) == 0 && size(d) != b.size(d))
	    return false;

    return true;
}

__END_METHOD_CODE__


	METHOD Box!operator == 
		CALLS
		flush : LiterateAgent,
		matchMe : Box,
		matches : Box,
		matchMe : _SYSTEM_OR_USER_,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS Box
			CLASSID 29
			CYCLO 4
			DOTS 4
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 24
			METHOD operator_==
			METHODID 31
			MMINUS 0
			OUT 12
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:Box CLASSID:29 CYCLO:4 DOTS:4 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:21 LT:24 METHOD:operator_== METHODID:31 MMINUS:0 OUT:12 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-operator_==

__BEGIN_METHOD_CODE__

Box::operator == (const Box &b)
{
    if(false )
    {
	cout << _REMOVED_STR_ << *this << _REMOVED_STR_ << b;
	cout.flush();
    }

    bool flag = (this == &b) || matchMe().matches(b.matchMe(), &b);

    if(false )
    {
	if(flag)
	    cout << _REMOVED_STR_ << *this << _REMOVED_STR_ << b;
	else
	    cout << _REMOVED_STR_ << *this << _REMOVED_STR_ << b;

	cout.flush();
    }
    
    return flag;
}

__END_METHOD_CODE__


	METHOD Box!tag
		CALLS
		TagBox : TagBox,
		unlink : Box



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD tag
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:tag METHODID:36 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-tag

__BEGIN_METHOD_CODE__

Box::tag(Data *dta, DataLink *dl)
{
    TagBox *ret = new TagBox(this, dta, dl);
    unlink();
    return ret;
}

__END_METHOD_CODE__


	METHOD Box!data
		CALLS
		findTag : Box,
		__data : TagBox



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS Box
			CLASSID 29
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD data
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:Box CLASSID:29 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:data METHODID:38 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-data

__BEGIN_METHOD_CODE__

Box::data(BoxPoint p)
{
    const TagBox *t = findTag(p);
    if(t == 0)
	return 0;
    return t->__data();
}

__END_METHOD_CODE__


	METHOD Box!selected
		CALLS
		findTag : Box,
		__selected : TagBox



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS Box
			CLASSID 29
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD selected
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:Box CLASSID:29 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:selected METHODID:40 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-selected

__BEGIN_METHOD_CODE__

Box::selected(BoxPoint p)
{
    const TagBox *t = findTag(p);
    if(t == 0)
	return false;
    return t->__selected();
}

__END_METHOD_CODE__

#================================================================
#File  ../../code/ddd-3.0/ddd/Box.o.nu.met	  Methods Number  6
#================================================================
#Process file ../../code/ddd-3.0/ddd/BoxD.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/BoxExtend.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/BoxRegion.o.nu.met ... 


	METHOD BoxRegion!operator & 
		CALLS
		nw_corner : _SYSTEM_OR_USER_,
		max : DynArray,
		origin : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		max : DynArray,
		origin : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		se_corner : _SYSTEM_OR_USER_,
		min : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		space : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		min : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		space : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion,
		BoxSize : BoxSize



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 20
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 6
			EQTEST 0
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD operator_&
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:20 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:6 EQTEST:0 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:operator_& METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-operator_&

__BEGIN_METHOD_CODE__

BoxRegion::operator & (const BoxRegion& r)
{
    BoxPoint nw_corner(max(origin(X), r.origin(X)),
		    max(origin(Y), r.origin(Y)));
    BoxPoint se_corner(min(origin(X) + space(X), r.origin(X) + r.space(X)),
		    min(origin(Y) + space(Y), r.origin(Y) + r.space(Y)));

    return BoxRegion(nw_corner, BoxSize(se_corner - nw_corner));
}

__END_METHOD_CODE__


	METHOD BoxRegion!operator | 
		CALLS
		nw_corner : _SYSTEM_OR_USER_,
		min : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		min : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		se_corner : _SYSTEM_OR_USER_,
		max : DynArray,
		origin : BoxRegion,
		space : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		max : DynArray,
		origin : BoxRegion,
		space : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion,
		BoxSize : BoxSize



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 20
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 6
			EQTEST 0
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD operator_|
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:20 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:6 EQTEST:0 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:operator_| METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-operator_|

__BEGIN_METHOD_CODE__

BoxRegion::operator | (const BoxRegion& r)
{
    BoxPoint nw_corner(min(origin(X), r.origin(X)),
		    min(origin(Y), r.origin(Y)));
    BoxPoint se_corner(max(origin(X) + space(X), r.origin(X) + r.space(X)),
		    max(origin(Y) + space(Y), r.origin(Y) + r.space(Y)));

    return BoxRegion(nw_corner, BoxSize(se_corner - nw_corner));
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/BoxRegion.o.nu.met	  Methods Number  2
#======================================================================
#Process file ../../code/ddd-3.0/ddd/BoxSize.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/ColorBox.o.nu.met ... 


	METHOD ColorBox!convert_color
		CALLS
		color_valid : ColorBox,
		color_failed : ColorBox,
		color_name : ColorBox,
		length : _SYSTEM_OR_USER_,
		color_name : ColorBox,




		METRICS
			_color REFERRED 2 TIMES,
			_color_valid REFERRED 1 TIMES,
			_color_failed REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 6
			AVVARLEN 10
			CALLEDN 6
			CLASS ColorBox
			CLASSID 50
			CYCLO 3
			DOTS 5
			EQTEST 0
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 18
			LT 0
			METHOD convert_color
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:2 ASS:6 AVVARLEN:10 CALLEDN:6 CLASS:ColorBox CLASSID:50 CYCLO:3 DOTS:5 EQTEST:0 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:18 LT:0 METHOD:convert_color METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:3 
		;


#ID 3-convert_color

__BEGIN_METHOD_CODE__

ColorBox::convert_color(Widget w)
{
    if(color_valid() || color_failed())
	return;

    XrmValue from, to;
    from.size = color_name().length();
    from.addr = (String)color_name();
    to.size   = sizeof(_color);
    to.addr   = (String)&_color;

    if(!XtConvertAndStore(w, ((char*)&XtStrings[_ARGS_]) , &from, ((char*)&XtStrings[_ARGS_]) , &to))
    {
	((ColorBox *)this)->_color_failed = true;
	return;
    }

    ((ColorBox *)this)->_color_valid = true;
}

__END_METHOD_CODE__


	METHOD ColorBox!_draw
		CALLS
		color_valid : ColorBox,
		convert_color : ColorBox,
		color_valid : ColorBox,
		color_draw : ColorBox,
		_draw : TransparentHatBox



		METRICS
			use_color REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 5
			CLASS ColorBox
			CLASSID 50
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 15
			LT 0
			METHOD _draw
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:5 CLASS:ColorBox CLASSID:50 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:15 LT:0 METHOD:_draw METHODID:1 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-_draw

__BEGIN_METHOD_CODE__

ColorBox::_draw(Widget w, 
		     const BoxRegion& region, 
		     const BoxRegion& exposed, 
		     GC gc,
		     bool context_selected)
{
    if(use_color && !color_valid())
	convert_color(w);

    if(use_color && color_valid())
    {
	 
	color_draw(w, region, exposed, gc, context_selected);
    }
    else
    {
	 
	TransparentHatBox::_draw(w, region, exposed, gc, context_selected);
    }
}

__END_METHOD_CODE__


	METHOD ForegroundColorBox!color_draw
		CALLS
		XGetGCValues : _SYSTEM_OR_USER_,
		XSetForeground : _SYSTEM_OR_USER_,
		color : ColorBox,
		_draw : TransparentHatBox,
		XSetForeground : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS ForegroundColorBox
			CLASSID 51
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 4
			METHOD color_draw
			METHODID 0
			MMINUS 0
			OUT 2
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:ForegroundColorBox CLASSID:51 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:4 METHOD:color_draw METHODID:0 MMINUS:0 OUT:2 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-color_draw

__BEGIN_METHOD_CODE__

ForegroundColorBox::color_draw(Widget w, 
				    const BoxRegion& region, 
				    const BoxRegion& exposed, 
				    GC gc,
				    bool context_selected)
{
    XGCValues gc_values;
    XGetGCValues(XtDisplay(w), gc, (1L<<3)  | (1L<<2) , &gc_values);

     
    XSetForeground(XtDisplay(w), gc, color());
    TransparentHatBox::_draw(w, region, exposed, gc, context_selected);
    XSetForeground(XtDisplay(w), gc, gc_values.foreground);
}

__END_METHOD_CODE__


	METHOD BackgroundColorBox!color_draw
		CALLS
		XGetGCValues : _SYSTEM_OR_USER_,
		space : BoxRegion,
		origin : BoxRegion,
		width : MString,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		XSetForeground : _SYSTEM_OR_USER_,
		color : ColorBox,
		XFillRectangle : _SYSTEM_OR_USER_,
		XSetForeground : _SYSTEM_OR_USER_,
		XSetBackground : _SYSTEM_OR_USER_,
		color : ColorBox,
		_draw : TransparentHatBox,
		XSetBackground : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 6
			ASS 3
			AVVARLEN 0
			CALLEDN 16
			CLASS BackgroundColorBox
			CLASSID 52
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 25
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 4
			METHOD color_draw
			METHODID 0
			MMINUS 0
			OUT 2
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 12
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:3 AVVARLEN:0 CALLEDN:16 CLASS:BackgroundColorBox CLASSID:52 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:25 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:23 LT:4 METHOD:color_draw METHODID:0 MMINUS:0 OUT:2 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:12 TERNINSTR:2 USEDVARS:0 
		;


#ID 0-color_draw

__BEGIN_METHOD_CODE__

BackgroundColorBox::color_draw(Widget w, 
				    const BoxRegion& region, 
				    const BoxRegion& exposed, 
				    GC gc,
				    bool context_selected)
{
    XGCValues gc_values;
    XGetGCValues(XtDisplay(w), gc, (1L<<3)  | (1L<<2) , &gc_values);

    BoxRegion r = region & exposed;

    BoxSize space   = r.space();
    BoxPoint origin = r.origin();

    BoxPoint width(extend(X) ? space[_ARGS_] : size(X),
		   extend(Y) ? space[_ARGS_] : size(Y));

     
    XSetForeground(XtDisplay(w), gc, color());
    XFillRectangle(XtDisplay(w), XtWindow(w), gc,
		   origin[_ARGS_], origin[_ARGS_], width[_ARGS_], width[_ARGS_]);
    XSetForeground(XtDisplay(w), gc, gc_values.foreground);

     
    XSetBackground(XtDisplay(w), gc, color());
    TransparentHatBox::_draw(w, region, exposed, gc, context_selected);
    XSetBackground(XtDisplay(w), gc, gc_values.background);
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/ColorBox.o.nu.met	  Methods Number  4
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/CompositeB.o.nu.met ... 


	METHOD CompositeBox!grow

		METRICS
			_size REFERRED 3 TIMES,
			_nchildren REFERRED 1 TIMES,
			ARRAYOP 4
			ASS 6
			AVVARLEN 7
			CALLEDN 0
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 1
			METHOD grow
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:6 AVVARLEN:7 CALLEDN:0 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:1 METHOD:grow METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:2 
		;


#ID 0-grow

__BEGIN_METHOD_CODE__

CompositeBox::grow()
{
    unsigned newSize = _size + _size / 2 + 1;
    Box **newBoxes = new Box* [_ARGS_];
    for(int i = 0; i < _nchildren; i++)
	newBoxes[_ARGS_] = boxes[_ARGS_];

    delete[] boxes;
    boxes = newBoxes;
    _size = newSize;
}

__END_METHOD_CODE__


	METHOD CompositeBox!newFont
		CALLS
		nchildren : CompositeBox,
		newFont : Box,
		resize : CompositeBox



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 1
			METHOD newFont
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:8 LT:1 METHOD:newFont METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-newFont

__BEGIN_METHOD_CODE__

CompositeBox::newFont(const string& font)
{
    for(int i = 0; i < nchildren(); i++)
    {
	Box* child = (*this)[_ARGS_];
	child->newFont(font);
    }
    resize();
}

__END_METHOD_CODE__


	METHOD CompositeBox!resize
		CALLS
		nchildren : CompositeBox,
		resize : Box



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 1
			METHOD resize
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:8 LT:1 METHOD:resize METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-resize

__BEGIN_METHOD_CODE__

CompositeBox::resize()
{
    for(int i = 0; i < nchildren(); i++)
    {
	Box* child = (*this)[_ARGS_];
	child->resize();
    }
    return this;
}

__END_METHOD_CODE__


	METHOD CompositeBox!str
		CALLS
		s : _SYSTEM_OR_USER_,
		nchildren : CompositeBox,
		str : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 1
			METHOD str
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:1 METHOD:str METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-str

__BEGIN_METHOD_CODE__

CompositeBox::str()
{
    string s(_REMOVED_STR_);
    for(int i = 0; i < nchildren(); i++)
    {
	const Box* child = (*this)[_ARGS_];
	s += child->str();
    }
    return s;
}

__END_METHOD_CODE__


	METHOD CompositeBox!findTag
		CALLS
		BoxPoint : BoxPoint,
		nchildren : CompositeBox,
		findTag : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 3
			CLASS CompositeBox
			CLASSID 30
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 11
			LT 1
			METHOD findTag
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:3 CLASS:CompositeBox CLASSID:30 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:11 LT:1 METHOD:findTag METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-findTag

__BEGIN_METHOD_CODE__

CompositeBox::findTag(const BoxPoint& p)
{
    if(p != BoxPoint(-1, -1))
	for(int i = 0; i < nchildren(); i++)
	{
	    const Box *child = (*this)[_ARGS_];
	    const TagBox *t = child->findTag(p);
	    if(t != 0)
		return t;    
	}
    return 0;  
}

__END_METHOD_CODE__


	METHOD CompositeBox!countMatchBoxes
		CALLS
		nchildren : CompositeBox,
		countMatchBoxes : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 1
			METHOD countMatchBoxes
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:1 METHOD:countMatchBoxes METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-countMatchBoxes

__BEGIN_METHOD_CODE__

CompositeBox::countMatchBoxes(int instances[])
{
    for(int i = 0; i < nchildren(); i++)
    {
	const Box *child = (*this)[_ARGS_];
	child->countMatchBoxes(instances);
    }
}

__END_METHOD_CODE__


	METHOD CompositeBox!matches
		CALLS
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		nchildren : CompositeBox,
		nchildren : _SYSTEM_OR_USER_,
		nchildren : CompositeBox



		METRICS
			ARRAYOP 2
			ASS 4
			AVVARLEN 0
			CALLEDN 6
			CLASS CompositeBox
			CLASSID 30
			CYCLO 5
			DOTS 1
			EQTEST 0
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 16
			LT 1
			METHOD matches
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 4
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:4 AVVARLEN:0 CALLEDN:6 CLASS:CompositeBox CLASSID:30 CYCLO:5 DOTS:1 EQTEST:0 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:16 LT:1 METHOD:matches METHODID:7 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:4 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-matches

__BEGIN_METHOD_CODE__

CompositeBox::matches(const Box &b, const Box *)
{
     
     
    if(strcmp(type(), b.type()))
	return false;

    CompositeBox *c = (CompositeBox *)&b;    
    if(nchildren() != c->nchildren())
	return false;

    for(int i = 0; i < nchildren(); i++)
	if(*((*this)[_ARGS_]) != *((*c)[_ARGS_]))
	    return false;

    return true;
}

__END_METHOD_CODE__


	METHOD CompositeBox!dumpComposite
		CALLS
		nchildren : CompositeBox



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS CompositeBox
			CLASSID 30
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 9
			METHOD dumpComposite
			METHODID 6
			MMINUS 0
			OUT 4
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:CompositeBox CLASSID:30 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:11 LT:9 METHOD:dumpComposite METHODID:6 MMINUS:0 OUT:4 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-dumpComposite

__BEGIN_METHOD_CODE__

CompositeBox::dumpComposite(ostream& s, 
				 char *sep, char *head, char *tail)
{
    s << head;
    for(int i = 0; i < nchildren(); i++)
    {
	const Box* child = (*this)[_ARGS_];
	if(i > 0)
	    s << sep;
	s << *child;
    }
    s << tail;
}

__END_METHOD_CODE__


	METHOD CompositeBox!OK

		METRICS
			_nchildren REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 10
			CALLEDN 0
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 1
			METHOD OK
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:10 CALLEDN:0 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:1 METHOD:OK METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 18-OK

__BEGIN_METHOD_CODE__

CompositeBox::OK()
{
     ;

    for(int i = 0; i < _nchildren; i++)
	 ;

    return true;
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/CompositeB.o.nu.met	  Methods Number  9
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/DiagBox.o.nu.met ... 


	METHOD DiagBox!_draw
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		XDrawLine : _SYSTEM_OR_USER_,
		XDrawLine : _SYSTEM_OR_USER_,
		StringBox : StringBox,
		size : _SYSTEM_OR_USER_,
		XClearArea : _SYSTEM_OR_USER_,
		draw : _SYSTEM_OR_USER_,
		BoxRegion : BoxRegion,




		METRICS
			ARRAYOP 16
			ASS 11
			AVVARLEN 0
			CALLEDN 10
			CLASS DiagBox
			CLASSID 55
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 18
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 33
			LT 6
			METHOD _draw
			METHODID 2
			MMINUS 0
			OUT 2
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:16 ASS:11 AVVARLEN:0 CALLEDN:10 CLASS:DiagBox CLASSID:55 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:18 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:33 LT:6 METHOD:_draw METHODID:2 MMINUS:0 OUT:2 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_draw

__BEGIN_METHOD_CODE__

DiagBox::_draw(Widget w, 
		    const BoxRegion& r, 
		    const BoxRegion& exposed, GC gc,
		    bool context_selected)
{
    const BoxSize space   = r.space();
    const BoxPoint origin = r.origin();

     
    BoxCoordinate i;
    for(i = 0; i < space[_ARGS_]; i += 10)
	XDrawLine(XtDisplay(w), XtWindow(w), gc,
	    origin[_ARGS_] + i, origin[_ARGS_], origin[_ARGS_] + i, origin[_ARGS_] + space[_ARGS_]);

    for(i = 0; i < space[_ARGS_]; i += 10)
	XDrawLine(XtDisplay(w), XtWindow(w), gc,
	    origin[_ARGS_], origin[_ARGS_] + i, origin[_ARGS_] + space[_ARGS_], origin[_ARGS_] + i);

     
    ostrstream oss;
    ostream& os = oss;
    os << space << '\0';
    string ss = oss;

     
    StringBox *s = new StringBox(ss);

    const BoxSize  stringSize = s->size();
    const BoxPoint stringOrigin = origin + space/2 - stringSize/2;

    XClearArea(XtDisplay(w), XtWindow(w), stringOrigin[_ARGS_], stringOrigin[_ARGS_],
	stringSize[_ARGS_], stringSize[_ARGS_], false);
    s->draw(w, BoxRegion(stringOrigin, stringSize), exposed,
	    gc, context_selected);

    s->unlink();
}

__END_METHOD_CODE__


	METHOD DiagBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DiagBox
			CLASSID 55
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DiagBox CLASSID:55 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:dump METHODID:1 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

DiagBox::dump(ostream& s)
{
    s << _REMOVED_STR_;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/DiagBox.o.nu.met	  Methods Number  2
#====================================================================
#Process file ../../code/ddd-3.0/ddd/DummyBox.o.nu.met ... 


	METHOD DummyBox!matches
		CALLS
		matches : ListBox



		METRICS
			matchesAll REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DummyBox
			CLASSID 57
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DummyBox CLASSID:57 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-matches

__BEGIN_METHOD_CODE__

DummyBox::matches(const Box& box, const Box *)
{
    return matchesAll || ListBox::matches(box);
}

__END_METHOD_CODE__


	METHOD DummyBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyBox
			CLASSID 57
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyBox CLASSID:57 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:dump METHODID:1 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

DummyBox::dump(ostream& s)
{
    s << _REMOVED_STR_;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/DummyBox.o.nu.met	  Methods Number  2
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/FixBox.o.nu.met ... 


	METHOD HFixBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HFixBox
			CLASSID 59
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 6
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HFixBox CLASSID:59 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:6 METHOD:dump METHODID:1 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

HFixBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << *_box << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD VFixBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VFixBox
			CLASSID 60
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 6
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VFixBox CLASSID:60 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:6 METHOD:dump METHODID:1 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

VFixBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << *_box << _REMOVED_STR_;
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/FixBox.o.nu.met	  Methods Number  2
#===================================================================
#Process file ../../code/ddd-3.0/ddd/FontTable.o.nu.met ... 


	METHOD FontTable!operator[]
		CALLS
		hash : _SYSTEM_OR_USER_,
		XLoadQueryFont : _SYSTEM_OR_USER_,
		XGetGCValues : _SYSTEM_OR_USER_,
		XQueryFont : _SYSTEM_OR_USER_,
		XLoadQueryFont : _SYSTEM_OR_USER_



		METRICS
			table REFERRED 12 TIMES,
			_display REFERRED 5 TIMES,
			ARRAYOP 13
			ASS 16
			AVVARLEN 6
			CALLEDN 5
			CLASS FontTable
			CLASSID 53
			CYCLO 9
			DOTS 13
			EQTEST 4
			EXPRORCALL 20
			GE 1
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 51
			LT 14
			METHOD operator_[]
			METHODID 4
			MMINUS 0
			OUT 7
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 17
			TERNINSTR 1
			USEDVARS 2

#METRICS ARRAYOP:13 ASS:16 AVVARLEN:6 CALLEDN:5 CLASS:FontTable CLASSID:53 CYCLO:9 DOTS:13 EQTEST:4 EXPRORCALL:20 GE:1 GT:1 IN:0 INDR:2 LE:0 LOC:51 LT:14 METHOD:operator_[] METHODID:4 MMINUS:0 OUT:7 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:17 TERNINSTR:1 USEDVARS:2 
		;


#ID 4-operator_[]

__BEGIN_METHOD_CODE__

FontTable::operator[](string& name)
{
    int i = hash(name);
    while(table[_ARGS_].font != 0 && name != table[_ARGS_].name)
    {
	 ;    
	i = (i >= 511 ) ? 0 : i + 1;
    }

    if(table[_ARGS_].font == 0 && name != table[_ARGS_].name)
    {
	 
	table[_ARGS_].name = name;
	table[_ARGS_].font = XLoadQueryFont(_display, name);

	if(table[_ARGS_].font == 0)
	{
	    cerr << _REMOVED_STR_ << name << _REMOVED_STR_;

	     
	    GC default_gc = 
		(( (&((_XPrivDisplay)  _display  )->screens[_ARGS_])   )->default_gc) ;
	    XGCValues gc_values;
	    if(XGetGCValues(_display, default_gc, (1L<<14) , &gc_values))
	    {
		const Font& font_id = gc_values.font;
		XFontStruct *font = XQueryFont(_display, font_id);
		if(font != 0)
		{
		    cerr << _REMOVED_STR_;
		    table[_ARGS_].font = font;
		}
	    }
	}

	if(table[_ARGS_].font == 0)
	{
	     
	    XFontStruct *font = XLoadQueryFont(_display, _REMOVED_STR_);
	    if(font != 0)
	    {
		cerr << _REMOVED_STR_;
		table[_ARGS_].font = font;
	    }
	}

	if(table[_ARGS_].font == 0)
	    cerr << _REMOVED_STR_;
    }

    return table[_ARGS_].font;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/FontTable.o.nu.met	  Methods Number  1
#======================================================================
#Process file ../../code/ddd-3.0/ddd/HatBox.o.nu.met ... 


	METHOD HatBox!_draw
		CALLS
		extend : Box,
		space : BoxRegion,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		space : BoxRegion,
		size : _SYSTEM_OR_USER_,
		draw : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS HatBox
			CLASSID 44
			CYCLO 3
			DOTS 2
			EQTEST 2
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 11
			LT 0
			METHOD _draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:HatBox CLASSID:44 CYCLO:3 DOTS:2 EQTEST:2 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:11 LT:0 METHOD:_draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_draw

__BEGIN_METHOD_CODE__

HatBox::_draw(Widget w, 
		   const BoxRegion& r, 
		   const BoxRegion& exposed, GC gc,
		   bool context_selected)
{
    BoxRegion sonRegion = r;

     
    if(extend(X) == 0)
	sonRegion.space(X) = size(X);
    if(extend(Y) == 0)
	sonRegion.space(Y) = size(Y);

    _box->draw(w, sonRegion, exposed, gc, context_selected);
}

__END_METHOD_CODE__


	METHOD HatBox!_print
		CALLS
		extend : Box,
		space : BoxRegion,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		space : BoxRegion,
		size : _SYSTEM_OR_USER_,
		_print : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS HatBox
			CLASSID 44
			CYCLO 3
			DOTS 2
			EQTEST 2
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 12
			LT 0
			METHOD _print
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:HatBox CLASSID:44 CYCLO:3 DOTS:2 EQTEST:2 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:12 LT:0 METHOD:_print METHODID:11 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-_print

__BEGIN_METHOD_CODE__

HatBox::_print(ostream& os, 
		    const BoxRegion& region, 
		    const BoxPrintGC& gc)
{
    BoxRegion sonRegion = region;

    if(extend(X) == 0) {
	sonRegion.space(X) = size(X) ;
    }
    if(extend(Y) == 0) {
	sonRegion.space(Y) = size(Y) ;
    }
	
    _box->_print(os, sonRegion, gc);
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/HatBox.o.nu.met	  Methods Number  2
#===================================================================
#Process file ../../code/ddd-3.0/ddd/LineBox.o.nu.met ... 


	METHOD LineBox!_draw
		CALLS
		XChangeGC : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		__draw : LineBox,
		BoxRegion : BoxRegion



		METRICS
			_linethickness REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 14
			CALLEDN 5
			CLASS LineBox
			CLASSID 42
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 4
			METHOD _draw
			METHODID 2
			MMINUS 0
			OUT 2
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:14 CALLEDN:5 CLASS:LineBox CLASSID:42 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:23 LT:4 METHOD:_draw METHODID:2 MMINUS:0 OUT:2 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-_draw

__BEGIN_METHOD_CODE__

LineBox::_draw(Widget w, 
		    const BoxRegion& r, 
		    const BoxRegion& exposed, 
		    GC gc,
		    bool context_selected)
{
    XGCValues gcvalues;

     
     
    gcvalues.line_width = _linethickness;
    gcvalues.cap_style = 3 ;
    XChangeGC(XtDisplay(w), gc, (1L<<4)  | (1L<<6) , &gcvalues);

     
     
    BoxPoint origin = r.origin();
    BoxSize space   = r.space();
    origin += _linethickness / 2;
    space  -= _linethickness;

     
    __draw(w, BoxRegion(origin, space), exposed, gc, context_selected);

     
     
     
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/LineBox.o.nu.met	  Methods Number  1
#====================================================================
#Process file ../../code/ddd-3.0/ddd/ListBox.o.nu.met ... 


	METHOD ListBox!_relast
		CALLS
		isEmpty : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_



		METRICS
			_last REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 5
			CALLEDN 2
			CLASS ListBox
			CLASSID 56
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 6
			LT 0
			METHOD _relast
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:5 CALLEDN:2 CLASS:ListBox CLASSID:56 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:6 LT:0 METHOD:_relast METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-_relast

__BEGIN_METHOD_CODE__

ListBox::_relast()
{
    const ListBox *l;
    for(l = this; !l->isEmpty(); l = l->tail())
	;
    _last = l;
}

__END_METHOD_CODE__


	METHOD ListBox!dump
		CALLS
		isEmpty : ListBox,
		head : ListBox,
		tail : ListBox,
		isEmpty : _SYSTEM_OR_USER_,
		isDummyBox : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 7
			CLASS ListBox
			CLASSID 56
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 37
			LT 22
			METHOD dump
			METHODID 12
			MMINUS 0
			OUT 11
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:7 CLASS:ListBox CLASSID:56 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:37 LT:22 METHOD:dump METHODID:12 MMINUS:0 OUT:11 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-dump

__BEGIN_METHOD_CODE__

ListBox::dump(ostream &s)
{
    if(VSEFlags::include_list_info)
    {
	 
	s << _REMOVED_STR_;
	if(!isEmpty())
	    s << *head() << _REMOVED_STR_ << *tail();
	s << _REMOVED_STR_;
    }
    else
    {
	 

	s << _REMOVED_STR_;

	const ListBox *list = this;
	while(list)
	{
	    if(list->isEmpty())
	    {
		if(list->isDummyBox())
		    s << _REMOVED_STR_ << *list;
		list = 0;
	    }
	    else
	    {
		if(list != this)
		    s << _REMOVED_STR_;

		s << *(list->head());
		list = list->tail();
	    }
	}

	 s << _REMOVED_STR_;
    }
}

__END_METHOD_CODE__


	METHOD ListBox!cons
		CALLS
		isEmpty : _SYSTEM_OR_USER_,
		isEmpty : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		_tail : ListBox,
		link : _SYSTEM_OR_USER_



		METRICS
			_last REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 5
			CALLEDN 7
			CLASS ListBox
			CLASSID 56
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 28
			LT 0
			METHOD cons
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:5 CALLEDN:7 CLASS:ListBox CLASSID:56 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:28 LT:0 METHOD:cons METHODID:26 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 26-cons

__BEGIN_METHOD_CODE__

ListBox::cons(ListBox *b)
{
     
     
     ;

    if(!b->isEmpty())
    {
	 
	const ListBox *t = this;
	ListBox *attach = 0;

	while(!t->isEmpty())
	{
	    attach = (ListBox *)t;
	    t = t->tail();
	}

	 ;

	attach->tail()->unlink();
	attach->_tail() = b->link();
	attach->_last = b->_last;

	return attach;
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD ListBox!uncons
		CALLS
		tail : _SYSTEM_OR_USER_,
		_tail : ListBox



		METRICS
			_last REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 5
			CALLEDN 3
			CLASS ListBox
			CLASSID 56
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 10
			LT 0
			METHOD uncons
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:5 CALLEDN:3 CLASS:ListBox CLASSID:56 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:10 LT:0 METHOD:uncons METHODID:27 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 27-uncons

__BEGIN_METHOD_CODE__

ListBox::uncons(ListBox *attach)
{
     
     

    if(attach)
    {
	attach->tail()->unlink();
	_last = (ListBox *)(attach->_tail() = new ListBox);
    }
}

__END_METHOD_CODE__


	METHOD ListBox!matches
		CALLS
		matches : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:21 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-matches

__BEGIN_METHOD_CODE__

ListBox::matches(const Box &b, const Box *)
{
    return CompositeBox::matches(b);
}

__END_METHOD_CODE__


	METHOD ListBox!tag
		CALLS
		isEmpty : ListBox,
		_head : ListBox,
		_head : ListBox,
		tag : ListBox,
		_tail : ListBox,
		_tail : ListBox,
		tag : ListBox



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 7
			CLASS ListBox
			CLASSID 56
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD tag
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:7 CLASS:ListBox CLASSID:56 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:tag METHODID:16 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-tag

__BEGIN_METHOD_CODE__

ListBox::tag(Data *d, DataLink *dl)
{
    if(!isEmpty())
    {
	 
	_head() = _head()->tag(d, dl);
	_tail() = _tail()->tag(d, dl);
    }

     
    return this;
}

__END_METHOD_CODE__


	METHOD ListBox!OK
		CALLS
		nchildren : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD OK
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:OK METHODID:25 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-OK

__BEGIN_METHOD_CODE__

ListBox::OK()
{
     ;

    if(nchildren() == 2)
    {
	 ;
    }

    return true;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/ListBox.o.nu.met	  Methods Number  7
#====================================================================
#Process file ../../code/ddd-3.0/ddd/MarkBox.o.nu.met ... 


	METHOD MarkBox!_draw
		CALLS
		extend : Box,
		space : BoxRegion,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		space : BoxRegion,
		size : _SYSTEM_OR_USER_,
		_draw : TransparentHatBox



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 7
			CLASS MarkBox
			CLASSID 47
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 14
			LT 0
			METHOD _draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:7 CLASS:MarkBox CLASSID:47 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:14 LT:0 METHOD:_draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_draw

__BEGIN_METHOD_CODE__

MarkBox::_draw(Widget w, 
		    const BoxRegion& r, 
		    const BoxRegion& exposed,
		    GC gc, 
		    bool context_selected)
{
    BoxRegion sonRegion = r;

    if(!extend(X))
	sonRegion.space(X) = size(X);
    if(!extend(Y))
	sonRegion.space(Y) = size(Y);

     
    ((MarkBox *)this)->_region = sonRegion;

     
    TransparentHatBox::_draw(w, r, exposed, gc, context_selected);
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/MarkBox.o.nu.met	  Methods Number  1
#====================================================================
#Process file ../../code/ddd-3.0/ddd/MatchBox.o.nu.met ... 


	METHOD MatchBox!matches
		CALLS
		matches : DummyBox,
		matchCallback : _SYSTEM_OR_USER_



		METRICS
			_data REFERRED 3 TIMES,
			matchCallback REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 9
			CALLEDN 2
			CLASS MatchBox
			CLASSID 61
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 14
			LT 0
			METHOD matches
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 4
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:9 CALLEDN:2 CLASS:MatchBox CLASSID:61 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:14 LT:0 METHOD:matches METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:4 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-matches

__BEGIN_METHOD_CODE__

MatchBox::matches(const Box &box, const Box *callbackArg)
{
    bool ret = matchesAll ||
	DummyBox::matches(box) &&
	    _data == ((MatchBox *)&box)->_data;  

    if(ret && matchCallback)
    {
	if(callbackArg == 0)
	    callbackArg = &box;
	matchCallback(_data, callbackArg);
    }

    return ret;
}

__END_METHOD_CODE__


	METHOD MatchBox!dump

		METRICS
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS MatchBox
			CLASSID 61
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 6
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:MatchBox CLASSID:61 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:6 METHOD:dump METHODID:1 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

MatchBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << _data << _REMOVED_STR_;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/MatchBox.o.nu.met	  Methods Number  2
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/PrimitiveB.o.nu.met ... 


	METHOD RuleBox!_draw
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		width : MString,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		XFillRectangle : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 6
			ASS 2
			AVVARLEN 0
			CALLEDN 8
			CLASS RuleBox
			CLASSID 37
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD _draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:2 AVVARLEN:0 CALLEDN:8 CLASS:RuleBox CLASSID:37 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:_draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:2 USEDVARS:0 
		;


#ID 0-_draw

__BEGIN_METHOD_CODE__

RuleBox::_draw(Widget w, 
		    const BoxRegion& r, 
		    const BoxRegion&, 
		    GC gc,
		    bool)
{
    BoxSize space   = r.space();
    BoxPoint origin = r.origin();

    BoxPoint width(extend(X) ? space[_ARGS_] : size(X),
		   extend(Y) ? space[_ARGS_] : size(Y));

    XFillRectangle(XtDisplay(w), XtWindow(w), gc, origin[_ARGS_], origin[_ARGS_],
	width[_ARGS_], width[_ARGS_]);
}

__END_METHOD_CODE__


	METHOD RuleBox!dump
		CALLS
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS RuleBox
			CLASSID 37
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 4
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:RuleBox CLASSID:37 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:4 METHOD:dump METHODID:2 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

RuleBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << size();
}

__END_METHOD_CODE__


	METHOD RuleBox!_print
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		extend : Box,
		size : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		isFig : _SYSTEM_OR_USER_,
		isFig : _SYSTEM_OR_USER_,
		isFig : _SYSTEM_OR_USER_,
		isPostScript : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 48
			ASS 3
			AVVARLEN 0
			CALLEDN 13
			CLASS RuleBox
			CLASSID 37
			CYCLO 6
			DOTS 6
			EQTEST 2
			EXPRORCALL 18
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 64
			LT 130
			METHOD _print
			METHODID 5
			MMINUS 0
			OUT 64
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 35
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:48 ASS:3 AVVARLEN:0 CALLEDN:13 CLASS:RuleBox CLASSID:37 CYCLO:6 DOTS:6 EQTEST:2 EXPRORCALL:18 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:64 LT:130 METHOD:_print METHODID:5 MMINUS:0 OUT:64 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:35 TERNINSTR:2 USEDVARS:0 
		;


#ID 5-_print

__BEGIN_METHOD_CODE__

RuleBox::_print(ostream& os, 
		     const BoxRegion& region, 
		     const BoxPrintGC& gc)
{
    BoxSize space = region.space();
    BoxPoint origin = region.origin();
    BoxPoint width ;
    
    width = BoxPoint( extend(X) ? space[_ARGS_] : size(X) ,
		       extend(Y) ? space[_ARGS_] : size(Y) );

    if(width == BoxPoint(0,1) || width == BoxPoint(1,0)) {
	return ;
    }
    if(width[_ARGS_] && width[_ARGS_] < 3 && gc.isFig()) {
	 
	 
	 
	
	os << _REMOVED_STR_  ;
	os << width[_ARGS_] << _REMOVED_STR_  ;
	os << origin[_ARGS_] + width[_ARGS_]/2 << _REMOVED_STR_ << origin[_ARGS_] ;
	os << _REMOVED_STR_ ;
	os << origin[_ARGS_] + width[_ARGS_]/2 << _REMOVED_STR_ ;
	os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_ ;
	os << _REMOVED_STR_ ;

    } else if(width[_ARGS_] && width[_ARGS_] < 3 && gc.isFig()) {
	 
	 
	 
	
	os << _REMOVED_STR_  ;
	os << width[_ARGS_] << _REMOVED_STR_  ;
	os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_]+width[_ARGS_]/2 ;
	os << _REMOVED_STR_ ;
	os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_ ;
	os << origin[_ARGS_] + width[_ARGS_]/2 << _REMOVED_STR_ ;
	os << _REMOVED_STR_ ;
	
    } else {
	 
	 
	 
	if(gc.isFig()) {
	    os << _REMOVED_STR_  ;
	    os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] << _REMOVED_STR_ ;
	    os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] ;
	    os << _REMOVED_STR_ ;
	    os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_ ;
	    os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_;
	    os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] + width[_ARGS_] ; 
	    os << _REMOVED_STR_ ;
	    os << origin[_ARGS_] << _REMOVED_STR_<< origin[_ARGS_] << _REMOVED_STR_ ;

	} else if(gc.isPostScript()) {

	    os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] << _REMOVED_STR_ ;
	    os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] ;
	    os << _REMOVED_STR_ ;
	    os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_ ;
	    os << origin[_ARGS_] + width[_ARGS_] << _REMOVED_STR_;
	    os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] + width[_ARGS_] ; 
	    os << _REMOVED_STR_ << _REMOVED_STR_ <<  region << _REMOVED_STR_;
	}
    }
}

__END_METHOD_CODE__


	METHOD FillBox!dump
		CALLS
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS FillBox
			CLASSID 39
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 4
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:FillBox CLASSID:39 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:4 METHOD:dump METHODID:1 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

FillBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << size();
}

__END_METHOD_CODE__


	METHOD SpaceBox!dump
		CALLS
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SpaceBox
			CLASSID 40
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 4
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SpaceBox CLASSID:40 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:4 METHOD:dump METHODID:1 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

SpaceBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << size();
}

__END_METHOD_CODE__


	METHOD SquareBox!dump
		CALLS
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SquareBox
			CLASSID 41
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SquareBox CLASSID:41 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:dump METHODID:1 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

SquareBox::dump(ostream& s)
{
    s << size(X);
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/PrimitiveB.o.nu.met	  Methods Number  6
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/SlopeBox.o.nu.met ... 


	METHOD FallBox!__draw
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		XDrawLine : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 6
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS FallBox
			CLASSID 64
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD __draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:FallBox CLASSID:64 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:__draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-__draw

__BEGIN_METHOD_CODE__

FallBox::__draw(Widget w, 
		     const BoxRegion& r, 
		     const BoxRegion&, 
		     GC gc,
		     bool)
{
    BoxSize space   = r.space();
    BoxPoint origin = r.origin();

    XDrawLine(XtDisplay(w), XtWindow(w), gc, origin[_ARGS_], origin[_ARGS_],
	origin[_ARGS_] + space[_ARGS_], origin[_ARGS_] + space[_ARGS_]);
}

__END_METHOD_CODE__


	METHOD FallBox!_print
		CALLS
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		isFig : _SYSTEM_OR_USER_,
		linethickness : LineBox,
		isPostScript : _SYSTEM_OR_USER_,
		linethickness : LineBox



		METRICS
			ARRAYOP 12
			ASS 2
			AVVARLEN 0
			CALLEDN 6
			CLASS FallBox
			CLASSID 64
			CYCLO 3
			DOTS 4
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 44
			METHOD _print
			METHODID 6
			MMINUS 0
			OUT 22
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:12 ASS:2 AVVARLEN:0 CALLEDN:6 CLASS:FallBox CLASSID:64 CYCLO:3 DOTS:4 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:44 METHOD:_print METHODID:6 MMINUS:0 OUT:22 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-_print

__BEGIN_METHOD_CODE__

FallBox::_print(ostream& os, 
		     const BoxRegion& region, 
		     const BoxPrintGC& gc)
{
    BoxPoint origin = region.origin() ;
    BoxPoint space = region.space();

    if(gc.isFig()) {
	os << _REMOVED_STR_  ;
	os << linethickness() << _REMOVED_STR_  ;
	os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] << _REMOVED_STR_ ;
	os << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ ;
	os << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ ;
	os << _REMOVED_STR_ ;
    } else if(gc.isPostScript()) {
	os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] << _REMOVED_STR_ ;
	os << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ ;
	os << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ ;
	os << linethickness() << _REMOVED_STR_;
    }
}

__END_METHOD_CODE__


	METHOD FallBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FallBox
			CLASSID 64
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FallBox CLASSID:64 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:dump METHODID:2 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

FallBox::dump(ostream& s)
{
    s << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD RiseBox!__draw
		CALLS
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		XDrawLine : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 6
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS RiseBox
			CLASSID 63
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD __draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:RiseBox CLASSID:63 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:__draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-__draw

__BEGIN_METHOD_CODE__

RiseBox::__draw(Widget w, 
		     const BoxRegion& r, 
		     const BoxRegion&, 
		     GC gc,
		     bool)
{
    BoxSize space   = r.space();
    BoxPoint origin = r.origin();

    XDrawLine(XtDisplay(w), XtWindow(w), gc, origin[_ARGS_], origin[_ARGS_] + space[_ARGS_],
	origin[_ARGS_] + space[_ARGS_], origin[_ARGS_]);
}

__END_METHOD_CODE__


	METHOD RiseBox!_print
		CALLS
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		isFig : _SYSTEM_OR_USER_,
		linethickness : LineBox,
		isPostScript : _SYSTEM_OR_USER_,
		linethickness : LineBox



		METRICS
			ARRAYOP 12
			ASS 2
			AVVARLEN 0
			CALLEDN 6
			CLASS RiseBox
			CLASSID 63
			CYCLO 3
			DOTS 4
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 44
			METHOD _print
			METHODID 6
			MMINUS 0
			OUT 22
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:12 ASS:2 AVVARLEN:0 CALLEDN:6 CLASS:RiseBox CLASSID:63 CYCLO:3 DOTS:4 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:44 METHOD:_print METHODID:6 MMINUS:0 OUT:22 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-_print

__BEGIN_METHOD_CODE__

RiseBox::_print(ostream& os, 
		     const BoxRegion& region, 
		     const BoxPrintGC& gc)
{
    BoxPoint origin = region.origin();
    BoxPoint space  = region.space();
	
    if(gc.isFig()) {
	os << _REMOVED_STR_  ;
	os << linethickness() << _REMOVED_STR_  ;
	os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ ;
	os << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] << _REMOVED_STR_ ;
	os << _REMOVED_STR_ ;
    } else if(gc.isPostScript()) {
	os << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ ;
	os << origin[_ARGS_] + space[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] << _REMOVED_STR_ ;
	os << linethickness() << _REMOVED_STR_;
    }
}

__END_METHOD_CODE__


	METHOD RiseBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RiseBox
			CLASSID 63
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RiseBox CLASSID:63 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:dump METHODID:2 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

RiseBox::dump(ostream& s)
{
    s << _REMOVED_STR_;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/SlopeBox.o.nu.met	  Methods Number  6
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/THatBox.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/TagBox.o.nu.met ... 


	METHOD TagBox!findTag
		CALLS
		BoxPoint : BoxPoint,
		findTag : HatBox



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS TagBox
			CLASSID 48
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 19
			LT 1
			METHOD findTag
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 4
			SCOPEOP 1
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:TagBox CLASSID:48 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:19 LT:1 METHOD:findTag METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:4 SCOPEOP:1 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-findTag

__BEGIN_METHOD_CODE__

TagBox::findTag(const BoxPoint& p)
{
     
    if(p == BoxPoint(-1, -1))
	return this;

    if(!(p <= _region))
    {
	 
	return 0;        
    }

     
    const TagBox *subbox = HatBox::findTag(p);

    if(subbox != 0)
	return subbox;   
    else
	return this;     
}

__END_METHOD_CODE__


	METHOD TagBox!_draw
		CALLS
		__selected : TagBox,
		_draw : MarkBox,
		XGetGCValues : _SYSTEM_OR_USER_,
		XSetFunction : _SYSTEM_OR_USER_,
		XFillRectangle : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		origin : BoxRegion,
		space : BoxRegion,
		space : BoxRegion,
		XSetFunction : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 10
			CLASS TagBox
			CLASSID 48
			CYCLO 2
			DOTS 5
			EQTEST 0
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 24
			LT 2
			METHOD _draw
			METHODID 1
			MMINUS 0
			OUT 1
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:10 CLASS:TagBox CLASSID:48 CYCLO:2 DOTS:5 EQTEST:0 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:24 LT:2 METHOD:_draw METHODID:1 MMINUS:0 OUT:1 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_draw

__BEGIN_METHOD_CODE__

TagBox::_draw(Widget w, 
		   const BoxRegion& r, 
		   const BoxRegion& exposed,
		   GC gc, 
		   bool context_selected)
{
     
    bool nodeSelected = __selected();
    MarkBox::_draw(w, r, exposed, gc, nodeSelected);

    if(context_selected != nodeSelected)
    {
	 
	 
	 

	BoxRegion clipRegion = exposed & r;     

	XGCValues gcvalues;
	XGetGCValues(XtDisplay(w), gc, (1L<<0) , &gcvalues);
	XSetFunction(XtDisplay(w), gc, 0xa );

	XFillRectangle(XtDisplay(w), XtWindow(w), gc,
	    clipRegion.origin(X), clipRegion.origin(Y),
	    clipRegion.space(X), clipRegion.space(Y));

	XSetFunction(XtDisplay(w), gc, gcvalues.function);
    }
}

__END_METHOD_CODE__


	METHOD TagBox!dump
		CALLS
		dump : MarkBox,
		flush : LiterateAgent,
		info : Box,
		selected : _SYSTEM_OR_USER_,
		flush : LiterateAgent



		METRICS
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 5
			CLASS TagBox
			CLASSID 48
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 22
			METHOD dump
			METHODID 3
			MMINUS 0
			OUT 11
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 2
			STMNT 8
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:5 CLASS:TagBox CLASSID:48 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:22 METHOD:dump METHODID:3 MMINUS:0 OUT:11 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:2 STMNT:8 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-dump

__BEGIN_METHOD_CODE__

TagBox::dump(ostream& s)
{
    MarkBox::dump(s);

    if(VSEFlags::include_tag_info)
    {
	s << _REMOVED_STR_ << _data << _REMOVED_STR_;
	s.flush();

	s << _REMOVED_STR_ << info() << _REMOVED_STR_ << _region << _REMOVED_STR_;

	if(selected())
	    s << _REMOVED_STR_;
	else
	    s << _REMOVED_STR_;

	s << _REMOVED_STR_;
	s.flush();
    }
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/TagBox.o.nu.met	  Methods Number  3
#===================================================================
#Process file ../../code/ddd-3.0/ddd/ArgNode.o.nu.met ... 


	METHOD VSLLib!parse
		CALLS
		VSLLib_parse : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD parse
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:parse METHODID:33 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-parse

__BEGIN_METHOD_CODE__

VSLLib::parse()
{
    return VSLLib_parse();
}

__END_METHOD_CODE__


	METHOD ArgNode!_eval
		CALLS
		link : _SYSTEM_OR_USER_,
		eval_error : VSLLib



		METRICS
			_id REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 3
			AVVARLEN 3
			CALLEDN 2
			CLASS ArgNode
			CLASSID 69
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 19
			LT 6
			METHOD _eval
			METHODID 6
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:3 CALLEDN:2 CLASS:ArgNode CLASSID:69 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:19 LT:6 METHOD:_eval METHODID:6 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-_eval

__BEGIN_METHOD_CODE__

ArgNode::_eval(ListBox *arglist)
{
    const Box *box = 0;

    if(arglist)
    {
	box = (*arglist)[_ARGS_];
	if(box)
	    box = ((Box *)box)->link();
    }

    if(box == 0)
    {
	ostrstream os;
	os << _REMOVED_STR_ << _id << _REMOVED_STR_;
	VSLLib::eval_error(os);
    }

    return box;
}

__END_METHOD_CODE__


	METHOD ArgNode!dump

		METRICS
			_id REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 4
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:4 METHOD:dump METHODID:2 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

ArgNode::dump(ostream& s)
{
    s << _REMOVED_STR_ << _id;
}

__END_METHOD_CODE__


	METHOD ArgNode!_dumpTree

		METRICS
			_id REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD _dumpTree
			METHODID 3
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:_dumpTree METHODID:3 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-_dumpTree

__BEGIN_METHOD_CODE__

ArgNode::_dumpTree(ostream& s)
{
    s << _id;
}

__END_METHOD_CODE__


	METHOD ArgNode!matches
		CALLS
		matches : VSLNode,
		matchCallback : _SYSTEM_OR_USER_



		METRICS
			_id REFERRED 3 TIMES,
			matchCallback REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 8
			CALLEDN 2
			CLASS ArgNode
			CLASSID 69
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 0
			METHOD matches
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:8 CALLEDN:2 CLASS:ArgNode CLASSID:69 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:10 LT:0 METHOD:matches METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 1-matches

__BEGIN_METHOD_CODE__

ArgNode::matches(const VSLNode &node)
{
    bool ret = matchesAll ||
	VSLNode::matches(node) &&
	    _id == ((ArgNode *)&node)->_id;  

    if(ret && matchCallback)
	matchCallback(_id, &node);

    return ret;
}

__END_METHOD_CODE__


	METHOD ArgNode!instantiateArgs
		CALLS
		dup : _SYSTEM_OR_USER_



		METRICS
			_id REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 4
			AVVARLEN 3
			CALLEDN 1
			CLASS ArgNode
			CLASSID 69
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 26
			LT 1
			METHOD instantiateArgs
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:3 CALLEDN:1 CLASS:ArgNode CLASSID:69 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:1 LE:0 LOC:26 LT:1 METHOD:instantiateArgs METHODID:7 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-instantiateArgs

__BEGIN_METHOD_CODE__

ArgNode::instantiateArgs(VSLDef *, VSLNode **node, VSLNode *values[],
    unsigned base, unsigned n)
{
     ;

     
    if(_id < base || _id >= base + n)
	return 0;

    VSLNode *source = values[_ARGS_];

    VSLNode *newNode = source->dup();
    *node = newNode;










     
    delete this;

    return 1;
}

__END_METHOD_CODE__


	METHOD ArgNode!countArgNodes

		METRICS
			_id REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 3
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 1
			METHOD countArgNodes
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:3 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:7 LT:1 METHOD:countArgNodes METHODID:8 MMINUS:0 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-countArgNodes

__BEGIN_METHOD_CODE__

ArgNode::countArgNodes(VSLDef *, int instances[],
    unsigned base, unsigned n)
{
     
    if(_id < base || _id >= base + n)
	return;

    instances[_ARGS_]++;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/ArgNode.o.nu.met	  Methods Number  7
#====================================================================
#Process file ../../code/ddd-3.0/ddd/BuiltinCN.o.nu.met ... 


	METHOD BuiltinCallNode!call
		CALLS
		hasSideEffects : VSLBuiltin,
		func : VSLBuiltin,
		func : _SYSTEM_OR_USER_



		METRICS
			_index REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 6
			CALLEDN 3
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 15
			LT 0
			METHOD call
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 2
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:6 CALLEDN:3 CLASS:BuiltinCallNode CLASSID:77 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:15 LT:0 METHOD:call METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:2 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-call

__BEGIN_METHOD_CODE__

BuiltinCallNode::call(Box *a)
{
     ;

     
     
    if(sideEffectsProhibited && VSLBuiltin::hasSideEffects(_index))
    {
	sideEffectsOccured = true;
	return 0;
    }

     
    BuiltinFunc func = VSLBuiltin::func(_index);
    return func((ListBox *)a);
}

__END_METHOD_CODE__


	METHOD BuiltinCallNode!foldOps
		CALLS
		foldOps : CallNode,
		isAssoc : VSLBuiltin,
		arg : _SYSTEM_OR_USER_,
		isListNode : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_,
		isBuiltinCallNode : BuiltinCallNode,
		head : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		isListNode : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		longname : VSLDef,
		flush : LiterateAgent,
		append : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		flush : LiterateAgent,
		arg : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		flush : LiterateAgent



		METRICS
			_index REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 11
			AVVARLEN 6
			CALLEDN 21
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 10
			DOTS 3
			EQTEST 0
			EXPRORCALL 33
			GE 0
			GT 0
			IN 0
			INDR 14
			LE 0
			LOC 66
			LT 18
			METHOD foldOps
			METHODID 8
			MMINUS 0
			OUT 9
			PARNUM 2
			PPLUS 1
			RETPOINT 7
			SCOPEOP 5
			STMNT 26
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:6 CALLEDN:21 CLASS:BuiltinCallNode CLASSID:77 CYCLO:10 DOTS:3 EQTEST:0 EXPRORCALL:33 GE:0 GT:0 IN:0 INDR:14 LE:0 LOC:66 LT:18 METHOD:foldOps METHODID:8 MMINUS:0 OUT:9 PARNUM:2 PPLUS:1 RETPOINT:7 SCOPEOP:5 STMNT:26 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-foldOps

__BEGIN_METHOD_CODE__

BuiltinCallNode::foldOps(VSLDef *cdef, VSLNode** node)
{
     ;
    int changes = 0;

     
    changes += CallNode::foldOps(cdef, node);

     
    if(!VSLBuiltin::isAssoc(_index))
	return changes;

     
    if(!arg()->isListNode())
	return changes;

    ListNode *args = (ListNode *)arg();  

     
    if(!args->head()->isBuiltinCallNode())
	return changes;

    BuiltinCallNode *callee = (BuiltinCallNode *)args->head();  

     
    if(_index != callee->_index)
	return changes;

     
    if(!callee->arg()->isListNode())
	return changes;

    ListNode *callArgs = (ListNode *)callee->arg();  

     
    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
	    << *this << '\n';
	cout.flush();
    }

    int err = callArgs->append(args->tail());
    if(err)
    {
	if(VSEFlags::show_optimize)
	{
	    cout << _REMOVED_STR_;
	    cout.flush();
	}
	return changes;
    }

    VSLNode *newArgs = callee->arg();
    callee->arg() = 0; args->tail() = 0; delete args;
    arg() = newArgs;

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << *this << '\n';
	cout.flush();
    }

    changes++;

    return changes;
}

__END_METHOD_CODE__


	METHOD BuiltinCallNode!foldConsts
		CALLS
		foldConsts : CallNode,
		isConst : _SYSTEM_OR_USER_,
		isAssoc : VSLBuiltin,
		arg : _SYSTEM_OR_USER_,
		isListNode : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		isListNode : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_,
		isConst : _SYSTEM_OR_USER_,
		isConst : _SYSTEM_OR_USER_,
		longname : VSLDef,
		flush : LiterateAgent,
		FixListNode : FixListNode,
		BuiltinCallNode : BuiltinCallNode,
		head : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		flush : LiterateAgent,
		foldConsts : CallNode



		METRICS
			_index REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 15
			AVVARLEN 6
			CALLEDN 24
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 7
			DOTS 2
			EQTEST 0
			EXPRORCALL 36
			GE 0
			GT 0
			IN 0
			INDR 15
			LE 0
			LOC 62
			LT 16
			METHOD foldConsts
			METHODID 9
			MMINUS 0
			OUT 8
			PARNUM 2
			PPLUS 1
			RETPOINT 3
			SCOPEOP 5
			STMNT 23
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:15 AVVARLEN:6 CALLEDN:24 CLASS:BuiltinCallNode CLASSID:77 CYCLO:7 DOTS:2 EQTEST:0 EXPRORCALL:36 GE:0 GT:0 IN:0 INDR:15 LE:0 LOC:62 LT:16 METHOD:foldConsts METHODID:9 MMINUS:0 OUT:8 PARNUM:2 PPLUS:1 RETPOINT:3 SCOPEOP:5 STMNT:23 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-foldConsts

__BEGIN_METHOD_CODE__

BuiltinCallNode::foldConsts(VSLDef *cdef, VSLNode** node)
{
     
    int changes = CallNode::foldConsts(cdef, node);

     
    if(*node != this || isConst())
	return changes;

     
    if(!VSLBuiltin::isAssoc(_index))
	return changes;

     
     
    for(VSLNode *a = arg();
	 a->isListNode() && ((ListNode *)a)->tail()->isListNode();
	 a = ((ListNode *)a)->tail())
    {
	ListNode *list = (ListNode *)a;
	ListNode *tail = (ListNode *)list->tail();

	VSLNode *arg1 = list->head();
	VSLNode *arg2 = tail->head();

	if(arg1->isConst() && arg2->isConst())
	{
	    if(VSEFlags::show_optimize)
	    {
		cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_
		    << *this << '\n';
		cout.flush();
	    }

	     
	     
	     

	     
	    ListNode *new_args = new FixListNode(arg1, arg2);
	    BuiltinCallNode *new_f = new BuiltinCallNode(_index, new_args);

	     
	    list->head() = new_f;
	    list->tail() = tail->tail();

	    tail->head() = 0; tail->tail() = 0; delete tail;

	    if(VSEFlags::show_optimize)
	    {
		cout << _REMOVED_STR_ << *this << '\n';
		cout.flush();
	    }

	    changes++;
	}
    }

     
    changes += CallNode::foldConsts(cdef, node);

    return changes;
}

__END_METHOD_CODE__


	METHOD BuiltinCallNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD OK
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:OK METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-OK

__BEGIN_METHOD_CODE__

BuiltinCallNode::OK()
{
     ;
    return true;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/BuiltinCN.o.nu.met	  Methods Number  4
#======================================================================
#Process file ../../code/ddd-3.0/ddd/CallNode.o.nu.met ... 


	METHOD CallNode!dump
		CALLS
		func_name : CallNode,
		isArgNode : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 11
			LT 12
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 6
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:11 LT:12 METHOD:dump METHODID:2 MMINUS:0 OUT:6 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

CallNode::dump(ostream& s)
{
    s << func_name();

    if(VSEFlags::include_list_info)
	s << *_arg;
    else
	if(_arg->isArgNode())
	    s << _REMOVED_STR_ << *_arg << _REMOVED_STR_;
	else
	    s << *_arg;
}

__END_METHOD_CODE__


	METHOD CallNode!_dumpTree
		CALLS
		func_name : CallNode,
		dumpTree : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 6
			METHOD _dumpTree
			METHODID 3
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:6 METHOD:_dumpTree METHODID:3 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-_dumpTree

__BEGIN_METHOD_CODE__

CallNode::_dumpTree(ostream& s)
{
    s << _REMOVED_STR_ << func_name() << _REMOVED_STR_;
    _arg->dumpTree(s);
}

__END_METHOD_CODE__


	METHOD CallNode!_eval
		CALLS
		eval : _SYSTEM_OR_USER_,
		call : CallNode,




		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS CallNode
			CLASSID 75
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 13
			LT 0
			METHOD _eval
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:CallNode CLASSID:75 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:13 LT:0 METHOD:_eval METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-_eval

__BEGIN_METHOD_CODE__

CallNode::_eval(ListBox *arglist)
{
     
    const Box *myarg = _arg->eval(arglist);
    if(myarg == 0)
	return 0;

     
    const Box *box = call((Box *)myarg);

    ((Box *)myarg)->unlink();

    return box;
}

__END_METHOD_CODE__


	METHOD CallNode!resolveDefs
		CALLS
		arg : CallNode,
		resolveDefs : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD resolveDefs
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:resolveDefs METHODID:14 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-resolveDefs

__BEGIN_METHOD_CODE__

CallNode::resolveDefs(VSLDef *cdef, bool complain_recursive)
{
    return arg()->resolveDefs(cdef, complain_recursive);
}

__END_METHOD_CODE__


	METHOD CallNode!resolveSynonyms
		CALLS
		arg : CallNode,
		resolveSynonyms : CallNode,
		arg : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD resolveSynonyms
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:resolveSynonyms METHODID:15 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-resolveSynonyms

__BEGIN_METHOD_CODE__

CallNode::resolveSynonyms(VSLDef *cdef, VSLNode **  )
{
     
    return arg()->resolveSynonyms(cdef, &arg());
}

__END_METHOD_CODE__


	METHOD CallNode!foldOps
		CALLS
		arg : CallNode,
		foldOps : CallNode,
		arg : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD foldOps
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:foldOps METHODID:16 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-foldOps

__BEGIN_METHOD_CODE__

CallNode::foldOps(VSLDef *cdef, VSLNode **  )
{
     
    return arg()->foldOps(cdef, &arg());
}

__END_METHOD_CODE__


	METHOD CallNode!inlineFuncs
		CALLS
		arg : CallNode,
		inlineFuncs : CallNode,
		arg : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD inlineFuncs
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:inlineFuncs METHODID:18 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-inlineFuncs

__BEGIN_METHOD_CODE__

CallNode::inlineFuncs(VSLDef *cdef, VSLNode **  )
{
     
    return arg()->inlineFuncs(cdef, &arg());
}

__END_METHOD_CODE__


	METHOD CallNode!instantiateArgs
		CALLS
		arg : CallNode,
		instantiateArgs : CallNode,
		arg : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD instantiateArgs
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:instantiateArgs METHODID:19 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-instantiateArgs

__BEGIN_METHOD_CODE__

CallNode::instantiateArgs(VSLDef *cdef, VSLNode **  ,
			      VSLNode *values[], unsigned base, unsigned n)
{
     
    return arg()->instantiateArgs(cdef, &arg(), values, base, n);
}

__END_METHOD_CODE__


	METHOD CallNode!countArgNodes
		CALLS
		arg : CallNode,
		countArgNodes : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD countArgNodes
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:countArgNodes METHODID:20 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-countArgNodes

__BEGIN_METHOD_CODE__

CallNode::countArgNodes(VSLDef *cdef, int instances[],
    unsigned base, unsigned n)
{
    arg()->countArgNodes(cdef, instances, base, n);
}

__END_METHOD_CODE__


	METHOD CallNode!compilePatterns
		CALLS
		arg : CallNode,
		compilePatterns : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD compilePatterns
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:compilePatterns METHODID:22 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-compilePatterns

__BEGIN_METHOD_CODE__

CallNode::compilePatterns(VSLDef *cdef)
{
    arg()->compilePatterns(cdef);
}

__END_METHOD_CODE__


	METHOD CallNode!uncompilePatterns
		CALLS
		arg : CallNode,
		uncompilePatterns : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD uncompilePatterns
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:uncompilePatterns METHODID:23 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-uncompilePatterns

__BEGIN_METHOD_CODE__

CallNode::uncompilePatterns(VSLDef *cdef)
{
    arg()->uncompilePatterns(cdef);
}

__END_METHOD_CODE__


	METHOD CallNode!countSelfReferences
		CALLS
		arg : CallNode,
		countSelfReferences : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD countSelfReferences
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:countSelfReferences METHODID:13 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-countSelfReferences

__BEGIN_METHOD_CODE__

CallNode::countSelfReferences(VSLDef *cdef, VSLDefList *deflist)
{
    return arg()->countSelfReferences(cdef, deflist);
}

__END_METHOD_CODE__


	METHOD CallNode!resolveName
		CALLS
		arg : CallNode,
		resolveName : CallNode,
		arg : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD resolveName
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:resolveName METHODID:24 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-resolveName

__BEGIN_METHOD_CODE__

CallNode::resolveName(VSLDef *cdef, VSLNode **  , string& name,
    unsigned id)
{
     
    return arg()->resolveName(cdef, &arg(), name, id);
}

__END_METHOD_CODE__


	METHOD CallNode!_resolveNames
		CALLS
		arg : CallNode,
		resolveNames : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD _resolveNames
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:_resolveNames METHODID:25 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-_resolveNames

__BEGIN_METHOD_CODE__

CallNode::_resolveNames(VSLDef *cdef, unsigned base)
{
    return arg()->resolveNames(cdef, base);
}

__END_METHOD_CODE__


	METHOD CallNode!_reBase
		CALLS
		arg : CallNode,
		reBase : VSLNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD _reBase
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:_reBase METHODID:21 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-_reBase

__BEGIN_METHOD_CODE__

CallNode::_reBase(VSLDef *cdef, unsigned newBase)
{
    return arg()->reBase(cdef, newBase);
}

__END_METHOD_CODE__


	METHOD CallNode!firstName
		CALLS
		arg : CallNode,
		firstName : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD firstName
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:firstName METHODID:26 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-firstName

__BEGIN_METHOD_CODE__

CallNode::firstName()
{
    return arg()->firstName();
}

__END_METHOD_CODE__


	METHOD CallNode!foldConsts
		CALLS
		arg : CallNode,
		foldConsts : CallNode,
		arg : CallNode,
		isConst : CallNode,
		eval : _SYSTEM_OR_USER_,
		longname : VSLDef,
		flush : LiterateAgent,
		ConstNode : ConstNode,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 9
			CLASS CallNode
			CLASSID 75
			CYCLO 5
			DOTS 2
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 50
			LT 16
			METHOD foldConsts
			METHODID 17
			MMINUS 0
			OUT 8
			PARNUM 2
			PPLUS 1
			RETPOINT 2
			SCOPEOP 2
			STMNT 17
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:9 CLASS:CallNode CLASSID:75 CYCLO:5 DOTS:2 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:50 LT:16 METHOD:foldConsts METHODID:17 MMINUS:0 OUT:8 PARNUM:2 PPLUS:1 RETPOINT:2 SCOPEOP:2 STMNT:17 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-foldConsts

__BEGIN_METHOD_CODE__

CallNode::foldConsts(VSLDef *cdef, VSLNode **node)
{
     ;
    int changes = 0;

     
    changes += arg()->foldConsts(cdef, &arg());

     
     
    if(!isConst())
	return changes;

     

    sideEffectsProhibited = true;
    sideEffectsOccured = false;

    const Box *result = eval(0);

    if(result)
    {
	 ;

	 
	if(VSEFlags::show_optimize)
	{
	    cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
		<< *this << '\n';
	    cout.flush();
	}

	 
	*node = new ConstNode((Box *)result);

	if(VSEFlags::show_optimize)
	{
	    cout << _REMOVED_STR_ << **node << _REMOVED_STR_;
	    cout.flush();
	}
	
	changes++;

	 
	delete this;
    }

    sideEffectsProhibited = false;

    return changes;
}

__END_METHOD_CODE__


	METHOD CallNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD OK
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:OK METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-OK

__BEGIN_METHOD_CODE__

CallNode::OK()
{
       ;

      return true;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/CallNode.o.nu.met	  Methods Number  18
#======================================================================
#Process file ../../code/ddd-3.0/ddd/ConstNode.o.nu.met ... 


	METHOD ConstNode!_eval
		CALLS
		link : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD _eval
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:_eval METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-_eval

__BEGIN_METHOD_CODE__

ConstNode::_eval(ListBox *)
{
    return _box->link();
}

__END_METHOD_CODE__


	METHOD ConstNode!dump
		CALLS
		id : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ConstNode
			CLASSID 79
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 6
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ConstNode CLASSID:79 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:6 METHOD:dump METHODID:1 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

ConstNode::dump(ostream& s)
{
    if(VSEFlags::include_const_info)
	s << *_box;
    else
	s << _REMOVED_STR_ << _box->id();
}

__END_METHOD_CODE__


	METHOD ConstNode!_dumpTree

		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 0
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 6
			METHOD _dumpTree
			METHODID 2
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 3
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:0 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:6 METHOD:_dumpTree METHODID:2 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:3 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_dumpTree

__BEGIN_METHOD_CODE__

ConstNode::_dumpTree(ostream& s)
{
    bool old = StringBox::quoted;
    StringBox::quoted = true;
    s << _REMOVED_STR_ << *_box << _REMOVED_STR_;
    StringBox::quoted = old;
}

__END_METHOD_CODE__


	METHOD ConstNode!isStraight
		CALLS
		isListBox : _SYSTEM_OR_USER_,
		isEmpty : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 4
			LT 0
			METHOD isStraight
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:4 LT:0 METHOD:isStraight METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-isStraight

__BEGIN_METHOD_CODE__

ConstNode::isStraight()
{
     
    return(_box->isListBox() && ((ListBox *)_box)->isEmpty());
}

__END_METHOD_CODE__


	METHOD ConstNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD OK
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:OK METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-OK

__BEGIN_METHOD_CODE__

ConstNode::OK()
{
     ;

    return true;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/ConstNode.o.nu.met	  Methods Number  5
#======================================================================
#Process file ../../code/ddd-3.0/ddd/DefCallN.o.nu.met ... 


	METHOD DefCallNode!DefCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD DefCallNode
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:DefCallNode METHODID:6 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-DefCallNode

__BEGIN_METHOD_CODE__

DefCallNode::DefCallNode(VSLDef *def, VSLNode *a, char *type)
{
    _deflist->references++;
}

__END_METHOD_CODE__


	METHOD DefCallNode!DefCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD DefCallNode
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:DefCallNode METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-DefCallNode

__BEGIN_METHOD_CODE__

DefCallNode::DefCallNode(VSLDefList *deflist, VSLNode *a, char *type)
{
    _deflist->references++;
}

__END_METHOD_CODE__


	METHOD DefCallNode!DefCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD DefCallNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:DefCallNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-DefCallNode

__BEGIN_METHOD_CODE__

DefCallNode::DefCallNode(const DefCallNode& node)
{
    _deflist->references++;
}

__END_METHOD_CODE__


	METHOD DefCallNode!call
		CALLS
		eval : _SYSTEM_OR_USER_,
		eval : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS DefCallNode
			CLASSID 76
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD call
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:DefCallNode CLASSID:76 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:call METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-call

__BEGIN_METHOD_CODE__

DefCallNode::call(Box *a)
{
    const Box *box;

     
    if(_def)
	box = _def->eval(a);
    else
	box = _deflist->eval(a);

    return box;
}

__END_METHOD_CODE__


	METHOD DefCallNode!func_name
		CALLS
		f_name : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD func_name
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:func_name METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-func_name

__BEGIN_METHOD_CODE__

DefCallNode::func_name()
{
    return(char *)_deflist->f_name();
}

__END_METHOD_CODE__


	METHOD DefCallNode!resolveDefs
		CALLS
		resolveDefs : CallNode,
		first : _SYSTEM_OR_USER_,
		listnext : VSLDef,
		matches : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		s : _SYSTEM_OR_USER_,
		eval_warning : VSLLib,
		string : string,
		eval_error : VSLLib,
		longname : VSLDef,
		longname : VSLDef,
		flush : LiterateAgent



		METRICS
			ARRAYOP 1
			ASS 18
			AVVARLEN 0
			CALLEDN 12
			CLASS DefCallNode
			CLASSID 76
			CYCLO 9
			DOTS 1
			EQTEST 5
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 65
			LT 18
			METHOD resolveDefs
			METHODID 10
			MMINUS 0
			OUT 9
			PARNUM 2
			PPLUS 1
			RETPOINT 3
			SCOPEOP 13
			STMNT 29
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:18 AVVARLEN:0 CALLEDN:12 CLASS:DefCallNode CLASSID:76 CYCLO:9 DOTS:1 EQTEST:5 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:65 LT:18 METHOD:resolveDefs METHODID:10 MMINUS:0 OUT:9 PARNUM:2 PPLUS:1 RETPOINT:3 SCOPEOP:13 STMNT:29 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-resolveDefs

__BEGIN_METHOD_CODE__

DefCallNode::resolveDefs(VSLDef *cdef, bool complain_recursive)
{
     
    int changes = CallNode::resolveDefs(cdef, complain_recursive);

    if(_def)                
	return changes;

     
    bool old_bothSidesCanMatch = VSLNode::bothSidesCanMatch;
    VSLNode::bothSidesCanMatch = true;

     
    bool old_ArgNodeMatchesAll = ArgNode::matchesAll;
    ArgNode::matchesAll = true;

     
    bool old_CallNodeMatchesAll = CallNode::matchesAll;
    CallNode::matchesAll = true;

    VSLDef *found = 0;
    VSLDef *def;
    for(def = _deflist->first(); def != 0; def = def->listnext())
	if(def->matches(arg()))
	    if(found == 0)
		found = def;         
	    else
	    {
		found = 0;           
		break;
	    }

    VSLNode::bothSidesCanMatch = old_bothSidesCanMatch;
    CallNode::matchesAll = old_CallNodeMatchesAll;
    ArgNode::matchesAll = old_ArgNodeMatchesAll;

    if(found == 0 && def == 0)
    {
	const int bufsize = 1000;
	char buffer[_ARGS_];
	ostrstream s(buffer, sizeof buffer);
	s << *this << '\0';

	VSLLib::eval_warning(_REMOVED_STR_ + string(buffer), 
			     cdef);
    }

    if(found == cdef && complain_recursive)
	VSLLib::eval_error(_REMOVED_STR_, cdef);

    if(found == 0)
	return changes;

     
    _def = found;

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
	    << *this << _REMOVED_STR_ << _def->longname() << _REMOVED_STR_;
	cout.flush();
    }

     
    return ++changes;
}

__END_METHOD_CODE__


	METHOD DefCallNode!resolveSynonyms
		CALLS
		resolveSynonyms : CallNode,
		expr : _SYSTEM_OR_USER_,
		isCallNode : _SYSTEM_OR_USER_,
		node_pattern : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		longname : VSLDef,
		flush : LiterateAgent,
		isDefCallNode : _SYSTEM_OR_USER_,
		isBuiltinCallNode : _SYSTEM_OR_USER_,
		BuiltinCallNode : BuiltinCallNode,
		arg : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 13
			AVVARLEN 0
			CALLEDN 13
			CLASS DefCallNode
			CLASSID 76
			CYCLO 8
			DOTS 2
			EQTEST 2
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 12
			LE 0
			LOC 79
			LT 16
			METHOD resolveSynonyms
			METHODID 11
			MMINUS 1
			OUT 8
			PARNUM 2
			PPLUS 3
			RETPOINT 4
			SCOPEOP 3
			STMNT 26
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:13 AVVARLEN:0 CALLEDN:13 CLASS:DefCallNode CLASSID:76 CYCLO:8 DOTS:2 EQTEST:2 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:12 LE:0 LOC:79 LT:16 METHOD:resolveSynonyms METHODID:11 MMINUS:1 OUT:8 PARNUM:2 PPLUS:3 RETPOINT:4 SCOPEOP:3 STMNT:26 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-resolveSynonyms

__BEGIN_METHOD_CODE__

DefCallNode::resolveSynonyms(VSLDef *cdef, VSLNode **node)
{
     ;

     
    int changes = CallNode::resolveSynonyms(cdef, node);

     
    if(_def == 0)
	return changes;

     
     

    VSLNode *syn = _def->expr();
    if(syn == 0 || !syn->isCallNode())
	return changes;

    CallNode *call_syn = (CallNode *)syn;    

     
     

    VSLNode *my_pattern = _def->node_pattern();
    VSLNode *his_pattern = call_syn->arg();
    if(*my_pattern != *his_pattern)
	return changes;

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
	    << *this << _REMOVED_STR_;
	cout.flush();
    }

    if(call_syn->isDefCallNode())
    {
	DefCallNode *defcall_syn = (DefCallNode *)call_syn;  

	 
	 

	 
	 

	defcall_syn->_deflist->references++;
	_deflist->references--;

	_def = defcall_syn->_def;
	_deflist = defcall_syn->_deflist;

	changes++;
    }
    else if(call_syn->isBuiltinCallNode())
    {
	BuiltinCallNode *builtin_syn = 
	    (BuiltinCallNode *)call_syn;  

	 
	 

	 
	 

	BuiltinCallNode *newNode = new BuiltinCallNode(*builtin_syn, arg());

	*node = newNode;
	arg() = 0; delete this;

	changes++;
    }

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << **node << _REMOVED_STR_;
	cout.flush();
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD DefCallNode!inlineFuncs
		CALLS
		inlineFuncs : CallNode,
		expr : _SYSTEM_OR_USER_,
		nodelist : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		nargs : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		countArgNodes : _SYSTEM_OR_USER_,
		nargs : _SYSTEM_OR_USER_,
		nargs : _SYSTEM_OR_USER_,
		eval_warning : VSLLib,
		nargs : _SYSTEM_OR_USER_,
		isConstNode : _SYSTEM_OR_USER_,
		isArgNode : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		dup : DefCallNode,
		instantiateArgs : _SYSTEM_OR_USER_,
		nargs : _SYSTEM_OR_USER_,
		reBase : VSLNode,
		longname : VSLDef,
		flush : LiterateAgent



		METRICS
			ARRAYOP 9
			ASS 13
			AVVARLEN 0
			CALLEDN 20
			CLASS DefCallNode
			CLASSID 76
			CYCLO 11
			DOTS 1
			EQTEST 4
			EXPRORCALL 30
			GE 0
			GT 2
			IN 0
			INDR 16
			LE 0
			LOC 88
			LT 21
			METHOD inlineFuncs
			METHODID 12
			MMINUS 0
			OUT 9
			PARNUM 2
			PPLUS 4
			RETPOINT 4
			SCOPEOP 3
			STMNT 32
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:9 ASS:13 AVVARLEN:0 CALLEDN:20 CLASS:DefCallNode CLASSID:76 CYCLO:11 DOTS:1 EQTEST:4 EXPRORCALL:30 GE:0 GT:2 IN:0 INDR:16 LE:0 LOC:88 LT:21 METHOD:inlineFuncs METHODID:12 MMINUS:0 OUT:9 PARNUM:2 PPLUS:4 RETPOINT:4 SCOPEOP:3 STMNT:32 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-inlineFuncs

__BEGIN_METHOD_CODE__

DefCallNode::inlineFuncs(VSLDef *cdef, VSLNode **node)
{
     ;
    int changes = 0;

     
    changes += CallNode::inlineFuncs(cdef, node);

     
    if(_def == 0 || _def->expr() == 0)
	return changes;

     
    VSLNode **values = _def->nodelist(arg());
    if(values == 0)
	return changes;

     
    int *instances = new int [_ARGS_];
    unsigned i;
    for(i = 0; i < _def->nargs(); i++)
	instances[_ARGS_] = 0;

     
    _def->expr()->countArgNodes(cdef, instances, 0, _def->nargs());

     
    bool fail = false;
    for(i = 0; i < _def->nargs(); i++)
	if(instances[_ARGS_] > 0 && values[_ARGS_] == 0)
	{
	    ostrstream os;
	    os << _REMOVED_STR_ << i;
	    VSLLib::eval_warning(os, _def);
	    fail = true;
	}

     
     
    for(i = 0; i < _def->nargs(); i++)
	if(values[_ARGS_] && instances[_ARGS_] > 1)
	{
	     
	     
	     

	    if(!values[_ARGS_]->isConstNode() && !values[_ARGS_]->isArgNode())
		fail = true;
	}

    delete[] instances;

    if(fail)
	return changes;
    
     

     
    VSLNode *body = _def->expr()->dup();

     
     
     
     

    body->instantiateArgs(cdef, &body, values, 0, _def->nargs());

     
     
     
     

    body->reBase(cdef, _base);


     
    *node = body;

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
	    << *this << _REMOVED_STR_ << **node << '\n';
	cout.flush();
    }

    delete this;

    return ++changes;
}

__END_METHOD_CODE__


	METHOD DefCallNode!countSelfReferences
		CALLS
		countSelfReferences : CallNode,
		longname : VSLDef,
		f_name : _SYSTEM_OR_USER_,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS DefCallNode
			CLASSID 76
			CYCLO 3
			DOTS 1
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 19
			LT 8
			METHOD countSelfReferences
			METHODID 9
			MMINUS 0
			OUT 4
			PARNUM 2
			PPLUS 2
			RETPOINT 1
			SCOPEOP 2
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:DefCallNode CLASSID:76 CYCLO:3 DOTS:1 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:19 LT:8 METHOD:countSelfReferences METHODID:9 MMINUS:0 OUT:4 PARNUM:2 PPLUS:2 RETPOINT:1 SCOPEOP:2 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-countSelfReferences

__BEGIN_METHOD_CODE__

DefCallNode::countSelfReferences(VSLDef *cdef, VSLDefList *deflist)
{
    int changes = CallNode::countSelfReferences(cdef, deflist);

    if(_deflist == deflist)
    {
	if(VSEFlags::show_optimize)
	{
	    cout << _REMOVED_STR_ << cdef->longname() 
		<< _REMOVED_STR_ 
		<< deflist->f_name();
	    cout.flush();
	}

	deflist->self_references++;
	changes++;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD DefCallNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD OK
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:OK METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-OK

__BEGIN_METHOD_CODE__

DefCallNode::OK()
{
     ;

    return true;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/DefCallN.o.nu.met	  Methods Number  10
#======================================================================
#Process file ../../code/ddd-3.0/ddd/LetNode.o.nu.met ... 


	METHOD LetNode!dump
		CALLS
		node_pattern : LetNode,
		args : LetNode,
		body : LetNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 12
			METHOD dump
			METHODID 6
			MMINUS 0
			OUT 6
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:12 METHOD:dump METHODID:6 MMINUS:0 OUT:6 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-dump

__BEGIN_METHOD_CODE__

LetNode::dump(ostream& s)
{
    s << _REMOVED_STR_ << *node_pattern() << _REMOVED_STR_  << *args() 
      << _REMOVED_STR_ << *body();
}

__END_METHOD_CODE__


	METHOD WhereNode!dump
		CALLS
		body : LetNode,
		node_pattern : _SYSTEM_OR_USER_,
		args : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS WhereNode
			CLASSID 88
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 10
			METHOD dump
			METHODID 0
			MMINUS 0
			OUT 5
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:WhereNode CLASSID:88 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:10 METHOD:dump METHODID:0 MMINUS:0 OUT:5 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-dump

__BEGIN_METHOD_CODE__

WhereNode::dump(ostream& s)
{
    s << *body() 
       << _REMOVED_STR_ << *node_pattern() << _REMOVED_STR_ << *args();
}

__END_METHOD_CODE__


	METHOD LetNode!_dumpTree
		CALLS
		node_pattern : LetNode,
		dumpTree : _SYSTEM_OR_USER_,
		args : LetNode,
		dumpTree : _SYSTEM_OR_USER_,
		body : LetNode,
		dumpTree : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 7
			LT 4
			METHOD _dumpTree
			METHODID 7
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:7 LT:4 METHOD:_dumpTree METHODID:7 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-_dumpTree

__BEGIN_METHOD_CODE__

LetNode::_dumpTree(ostream& s)
{
    node_pattern()->dumpTree(s);
    s << _REMOVED_STR_;
    args()->dumpTree(s);
    s << _REMOVED_STR_;
    body()->dumpTree(s);
}

__END_METHOD_CODE__


	METHOD LetNode!_eval
		CALLS
		args : LetNode,
		eval : _SYSTEM_OR_USER_,
		arglist : LetNode,
		isEmpty : _SYSTEM_OR_USER_,
		cons : ListBox,
		link : _SYSTEM_OR_USER_,
		body : LetNode,
		eval : _SYSTEM_OR_USER_,
		uncons : ListBox,
		eval_error : VSLLib,




		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 13
			CLASS LetNode
			CLASSID 87
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 37
			LT 0
			METHOD _eval
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:13 CLASS:LetNode CLASSID:87 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:37 LT:0 METHOD:_eval METHODID:28 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-_eval

__BEGIN_METHOD_CODE__

LetNode::_eval(ListBox *arglst)
{
    const Box *result = 0;

    if(arglst)
	 ;

     
    const Box *patternArgs = args()->eval(arglst);

     
    ListBox *moreArgs = arglist(patternArgs);

    if(moreArgs)
    {
	ListBox *attach = 0;

	 
	if(arglst && !(arglst->isEmpty()))
	{
	    attach = arglst->cons(moreArgs);
	    moreArgs->unlink();
	    moreArgs = (ListBox *)arglst->link();
	}

	result = body()->eval(moreArgs);
	moreArgs->unlink();

	 
	if(attach)
	    arglst->uncons(attach);
    }
    else
	VSLLib::eval_error(_REMOVED_STR_);

    ((Box *)patternArgs)->unlink();
    return result;
}

__END_METHOD_CODE__


	METHOD LetNode!domatch
		CALLS
		compilePatterns : LetNode



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 1
			CLASS LetNode
			CLASSID 87
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 0
			METHOD domatch
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 5
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:1 CLASS:LetNode CLASSID:87 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:21 LT:0 METHOD:domatch METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:5 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-domatch

__BEGIN_METHOD_CODE__

LetNode::domatch(const Box *a)
{
    bool ret = false;

     

    MatchBoxFunc oldCB = MatchBox::matchCallback;
    MatchBox::matchCallback = box_matches;

    MatchBox::matchesAll = true;

    if(_box_pattern == 0)
	compilePatterns(0);

    if(_box_pattern)
	ret = (*_box_pattern == *a);

    MatchBox::matchesAll = false;

    MatchBox::matchCallback = oldCB;
    return ret;
}

__END_METHOD_CODE__


	METHOD LetNode!domatch

		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD domatch
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 6
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:domatch METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:6 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-domatch

__BEGIN_METHOD_CODE__

LetNode::domatch(const VSLNode *a)
{
     

    ArgNodeFunc oldCB = ArgNode::matchCallback;
    ArgNode::matchCallback = node_matches;

    bool oldFlag = ArgNode::matchesAll;
    ArgNode::matchesAll = true;

    bool ret = (*_node_pattern == *a);

    ArgNode::matchCallback = oldCB;
    ArgNode::matchesAll = oldFlag;

    return ret;
}

__END_METHOD_CODE__


	METHOD LetNode!nodelist
		CALLS
		domatch : LetNode



		METRICS
			_nargs REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 3
			AVVARLEN 6
			CALLEDN 1
			CLASS LetNode
			CLASSID 87
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 1
			METHOD nodelist
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:6 CALLEDN:1 CLASS:LetNode CLASSID:87 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:1 METHOD:nodelist METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-nodelist

__BEGIN_METHOD_CODE__

LetNode::nodelist(const VSLNode *a)
{
    for(unsigned i = _base; i < _base + _nargs; i++)
	node_instances[_ARGS_] = 0;

    bool ok = domatch(a);
    if(!ok)
	return 0;

    return node_instances;
}

__END_METHOD_CODE__


	METHOD LetNode!arglist
		CALLS
		link : _SYSTEM_OR_USER_,
		domatch : LetNode



		METRICS
			_nargs REFERRED 2 TIMES,
			_straight REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 6
			AVVARLEN 7
			CALLEDN 2
			CLASS LetNode
			CLASSID 87
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 24
			LT 2
			METHOD arglist
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 1
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:6 AVVARLEN:7 CALLEDN:2 CLASS:LetNode CLASSID:87 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:24 LT:2 METHOD:arglist METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:1 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-arglist

__BEGIN_METHOD_CODE__

LetNode::arglist(const Box *a)
{
    if(_straight)
    {
	 ;
	return(ListBox *)((Box *)a)->link();
    }

    unsigned i;
    for(i = _base; i < _base + _nargs; i++)
	box_instances[_ARGS_] = 0;

    bool ok = domatch(a);
    if(!ok)
	return(ListBox *)0;

    ListBox *list = new ListBox;
    for(i = _base; i < _base + _nargs; i++)
    {
	 ;   
	(*list) += box_instances[_ARGS_];
    }

    return list;
}

__END_METHOD_CODE__


	METHOD LetNode!compilePatterns
		CALLS
		compilePatterns : CallNode,
		eval_error : VSLLib,
		uncompilePatterns : LetNode,
		MatchBox : MatchBox,
		node_pattern : LetNode,
		eval : _SYSTEM_OR_USER_,
		eval_error : VSLLib,
		countMatchBoxes : _SYSTEM_OR_USER_,
		eval_error : VSLLib,
		eval_error : VSLLib



		METRICS
			_nargs REFERRED 3 TIMES,
			being_compiled REFERRED 3 TIMES,
			ARRAYOP 5
			ASS 12
			AVVARLEN 10
			CALLEDN 12
			CLASS LetNode
			CLASSID 87
			CYCLO 8
			DOTS 0
			EQTEST 2
			EXPRORCALL 27
			GE 0
			GT 1
			IN 0
			INDR 7
			LE 0
			LOC 61
			LT 15
			METHOD compilePatterns
			METHODID 22
			MMINUS 0
			OUT 6
			PARNUM 1
			PPLUS 3
			RETPOINT 0
			SCOPEOP 5
			STMNT 31
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:5 ASS:12 AVVARLEN:10 CALLEDN:12 CLASS:LetNode CLASSID:87 CYCLO:8 DOTS:0 EQTEST:2 EXPRORCALL:27 GE:0 GT:1 IN:0 INDR:7 LE:0 LOC:61 LT:15 METHOD:compilePatterns METHODID:22 MMINUS:0 OUT:6 PARNUM:1 PPLUS:3 RETPOINT:0 SCOPEOP:5 STMNT:31 TERNINSTR:0 USEDVARS:2 
		;


#ID 22-compilePatterns

__BEGIN_METHOD_CODE__

LetNode::compilePatterns(VSLDef *cdef)
{
     
    CallNode::compilePatterns(cdef);

     
    if(being_compiled)
    {
	VSLLib::eval_error(_REMOVED_STR_, cdef);
	return;
    }

    uncompilePatterns(cdef);

     
    ListBox *list = new ListBox;
    unsigned i;
    for(i = 0; i < _base + _nargs; i++)
    {
	MatchBox *m = new MatchBox(i);
	(*list) += m;
	m->unlink();
    }

    ((LetNode *)this)->being_compiled = true;
    const Box *result = node_pattern()->eval(list);
    ((LetNode *)this)->being_compiled = false;

    list->unlink();

     
    if(result == 0)
	VSLLib::eval_error(_REMOVED_STR_, cdef);
    else
    {
	 
	int *instances = new int [_ARGS_];
	for(i = _base; i < _base + _nargs; i++)
	    instances[_ARGS_] = 0;
	result->countMatchBoxes(instances);

	for(i = _base; i < _base + _nargs; i++)
	{
	    if(instances[_ARGS_] == 0)
	    {
		ostrstream os;
		os << _REMOVED_STR_ << i << _REMOVED_STR_;
		VSLLib::eval_error(os);
	    }
	    if(instances[_ARGS_] > 1)
	    {
		ostrstream os;
		os << _REMOVED_STR_ << i 
		   << _REMOVED_STR_;
		VSLLib::eval_error(os);
	    }
	}
	delete[] instances;
    }

    ((LetNode *)this)->_box_pattern = (Box *)result;
}

__END_METHOD_CODE__


	METHOD LetNode!_resolveNames
		CALLS
		eval_warning : VSLLib,
		args : LetNode,
		resolveNames : _SYSTEM_OR_USER_,
		body : LetNode,
		resolveNames : _SYSTEM_OR_USER_,
		node_pattern : LetNode,
		firstName : _SYSTEM_OR_USER_,
		body : LetNode,
		resolveName : _SYSTEM_OR_USER_,
		body : LetNode,
		eval_warning : VSLLib,
		node_pattern : LetNode,
		resolveName : _SYSTEM_OR_USER_,
		node_pattern : LetNode,
		eval_error : VSLLib



		METRICS
			_nargs REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 10
			AVVARLEN 6
			CALLEDN 15
			CLASS LetNode
			CLASSID 87
			CYCLO 5
			DOTS 0
			EQTEST 2
			EXPRORCALL 20
			GE 0
			GT 1
			IN 0
			INDR 5
			LE 0
			LOC 38
			LT 0
			METHOD _resolveNames
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 1
			SCOPEOP 3
			STMNT 14
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:6 CALLEDN:15 CLASS:LetNode CLASSID:87 CYCLO:5 DOTS:0 EQTEST:2 EXPRORCALL:20 GE:0 GT:1 IN:0 INDR:5 LE:0 LOC:38 LT:0 METHOD:_resolveNames METHODID:24 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:1 SCOPEOP:3 STMNT:14 TERNINSTR:0 USEDVARS:1 
		;


#ID 24-_resolveNames

__BEGIN_METHOD_CODE__

LetNode::_resolveNames(VSLDef *cdef, unsigned base)
{
    if(_nargs == 0)
	VSLLib::eval_warning(_REMOVED_STR_, cdef);

     
     
     
    int changes = 0;
    
    changes += args()->resolveNames(cdef, base);
    changes += body()->resolveNames(cdef, base + _nargs);

     
     
    string s = _REMOVED_STR_;
    unsigned offset = 0;

    while((s = node_pattern()->firstName(), s) != _REMOVED_STR_)
    {
	 
	int ch = body()->resolveName(cdef, &body(), s, base + offset);
	if(ch == 0)
	    VSLLib::eval_warning(_REMOVED_STR_ + s + _REMOVED_STR_, cdef);
	changes += ch;

	 
	ch = node_pattern()->resolveName(cdef, &node_pattern(), s, 
	    base + offset);
	if(ch > 1)
	    VSLLib::eval_error(_REMOVED_STR_ + s + _REMOVED_STR_, cdef);

	offset++;
    }

     ;

    return changes;
}

__END_METHOD_CODE__


	METHOD LetNode!inlineFuncs
		CALLS
		inlineFuncs : CallNode,
		nodelist : LetNode,
		args : LetNode,
		body : LetNode,
		countArgNodes : _SYSTEM_OR_USER_,
		eval_warning : VSLLib,
		isConstNode : _SYSTEM_OR_USER_,
		isArgNode : _SYSTEM_OR_USER_,
		body : LetNode,
		dup : LetNode,
		instantiateArgs : _SYSTEM_OR_USER_,
		reBase : VSLNode,
		longname : VSLDef,
		flush : LiterateAgent



		METRICS
			_nargs REFERRED 5 TIMES,
			ARRAYOP 9
			ASS 13
			AVVARLEN 6
			CALLEDN 14
			CLASS LetNode
			CLASSID 87
			CYCLO 10
			DOTS 1
			EQTEST 2
			EXPRORCALL 23
			GE 0
			GT 2
			IN 0
			INDR 7
			LE 0
			LOC 85
			LT 21
			METHOD inlineFuncs
			METHODID 25
			MMINUS 0
			OUT 9
			PARNUM 2
			PPLUS 4
			RETPOINT 3
			SCOPEOP 3
			STMNT 31
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:9 ASS:13 AVVARLEN:6 CALLEDN:14 CLASS:LetNode CLASSID:87 CYCLO:10 DOTS:1 EQTEST:2 EXPRORCALL:23 GE:0 GT:2 IN:0 INDR:7 LE:0 LOC:85 LT:21 METHOD:inlineFuncs METHODID:25 MMINUS:0 OUT:9 PARNUM:2 PPLUS:4 RETPOINT:3 SCOPEOP:3 STMNT:31 TERNINSTR:0 USEDVARS:1 
		;


#ID 25-inlineFuncs

__BEGIN_METHOD_CODE__

LetNode::inlineFuncs(VSLDef *cdef, VSLNode **node)
{
     ;
    int changes = 0;

     
    changes += CallNode::inlineFuncs(cdef, node);

     
    VSLNode **values = nodelist(args());
    if(values == 0)
	return changes;

     
    int *instances = new int [_ARGS_];
    unsigned i;
    for(i = 0; i < _base + _nargs; i++)
	instances[_ARGS_] = 0;

     
    body()->countArgNodes(cdef, instances, _base, _nargs);

     
    bool fail = false;
    for(i = _base; i < _base + _nargs; i++)
	if(instances[_ARGS_] > 0 && values[_ARGS_] == 0)
	{
	    ostrstream os;
	    os << _REMOVED_STR_ << i;
	    VSLLib::eval_warning(os, cdef);
	    fail = true;
	}

     
     
    for(i = _base; i < _base + _nargs; i++)
	if(values[_ARGS_] && instances[_ARGS_] > 1)
	{
	     
	     
	     

	    if(!values[_ARGS_]->isConstNode() && !values[_ARGS_]->isArgNode())
		fail = true;
	}

    delete[] instances;

    if(fail)
	return changes;

     

     
    VSLNode *newbody = body()->dup();

     
     
     
     

    newbody->instantiateArgs(cdef, &newbody, values, _base, _nargs);


     
     
     
     

    newbody->reBase(cdef, _base);


     
    *node = newbody;

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_
	    << *this << _REMOVED_STR_ << **node << '\n';
	cout.flush();
    }

    delete this;

    return ++changes;
}

__END_METHOD_CODE__


	METHOD LetNode!_reBase
		CALLS
		args : LetNode,
		reBase : VSLNode,
		body : LetNode,
		reBase : VSLNode,
		ArgNode : ArgNode,
		longname : VSLDef,
		flush : LiterateAgent,
		body : LetNode,
		instantiateArgs : _SYSTEM_OR_USER_,
		body : LetNode,
		node_pattern : LetNode,
		instantiateArgs : _SYSTEM_OR_USER_,
		node_pattern : LetNode,
		flush : LiterateAgent,
		body : LetNode,
		reBase : VSLNode,
		compilePatterns : LetNode



		METRICS
			_nargs REFERRED 6 TIMES,
			ARRAYOP 5
			ASS 11
			AVVARLEN 6
			CALLEDN 17
			CLASS LetNode
			CLASSID 87
			CYCLO 9
			DOTS 2
			EQTEST 1
			EXPRORCALL 25
			GE 0
			GT 1
			IN 0
			INDR 6
			LE 0
			LOC 57
			LT 18
			METHOD _reBase
			METHODID 26
			MMINUS 0
			OUT 7
			PARNUM 2
			PPLUS 4
			RETPOINT 2
			SCOPEOP 2
			STMNT 27
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:11 AVVARLEN:6 CALLEDN:17 CLASS:LetNode CLASSID:87 CYCLO:9 DOTS:2 EQTEST:1 EXPRORCALL:25 GE:0 GT:1 IN:0 INDR:6 LE:0 LOC:57 LT:18 METHOD:_reBase METHODID:26 MMINUS:0 OUT:7 PARNUM:2 PPLUS:4 RETPOINT:2 SCOPEOP:2 STMNT:27 TERNINSTR:0 USEDVARS:1 
		;


#ID 26-_reBase

__BEGIN_METHOD_CODE__

LetNode::_reBase(VSLDef *cdef, unsigned newBase)
{
    int changes = 0;

     
    int offset = newBase - _base;

    if(offset == 0)
	return changes;

     
    args()->reBase(cdef, newBase);

     
     
    if(offset > 0)
	changes = body()->reBase(cdef, newBase + _nargs);

    VSLNode **argnodes = new VSLNode *[_ARGS_];
    unsigned i;
    for(i = 0; i < _base; i++)
	argnodes[_ARGS_] = 0;
    for(i = _base; i < _base + _nargs; i++)
	argnodes[_ARGS_] = new ArgNode(i + offset);

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ << *this;
	cout.flush();
    }

     
    body()->instantiateArgs(cdef, &body(), argnodes, _base, _nargs);

     
    node_pattern()->instantiateArgs(cdef, &node_pattern(), 
	argnodes, _base, _nargs);

    if(VSEFlags::show_optimize)
    {
	cout << _REMOVED_STR_ << *this << _REMOVED_STR_;
	cout.flush();
    }

    for(i = _base; i < _base + _nargs; i++)
	delete argnodes[_ARGS_];
    delete[] argnodes;

     
    if(offset < 0)
	changes = body()->reBase(cdef, newBase + _nargs);

     
    _base = newBase;
    compilePatterns(cdef);

    return ++changes;
}

__END_METHOD_CODE__


	METHOD LetNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD OK
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:OK METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-OK

__BEGIN_METHOD_CODE__

LetNode::OK()
{
    EmptyListNode empty;
     ;

    return true;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/LetNode.o.nu.met	  Methods Number  13
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/wm.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/VSLDef.o.nu.met ... 


	METHOD VSLDef!VSLDef

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLDef
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLDef METHODID:1 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-VSLDef

__BEGIN_METHOD_CODE__

VSLDef::VSLDef(VSLDefList* l, VSLNode *pattern, VSLNode *e, 
	       string filename, int lineno)
{}

__END_METHOD_CODE__


	METHOD VSLDef!VSLDef
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD VSLDef
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:VSLDef METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-VSLDef

__BEGIN_METHOD_CODE__

VSLDef::VSLDef(const VSLDef&)
{
     ;
    abort();
}

__END_METHOD_CODE__


	METHOD VSLDef!operator = 

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

VSLDef::operator = (const VSLDef&)
{
     ;
    return *this;
}

__END_METHOD_CODE__


	METHOD VSLDef!matches
		CALLS
		longname : VSLDef,
		flush : LiterateAgent,
		longname : VSLDef,
		longname : VSLDef,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 5
			CLASS VSLDef
			CLASSID 70
			CYCLO 4
			DOTS 2
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 32
			LT 24
			METHOD matches
			METHODID 23
			MMINUS 0
			OUT 12
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 8
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:5 CLASS:VSLDef CLASSID:70 CYCLO:4 DOTS:2 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:32 LT:24 METHOD:matches METHODID:23 MMINUS:0 OUT:12 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:8 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-matches

__BEGIN_METHOD_CODE__

VSLDef::matches(const VSLNode *arg)
{
     

    ArgNodeFunc oldCB = ArgNode::matchCallback;
    ArgNode::matchCallback = node_matches;

    bool oldFlag = ArgNode::matchesAll;
    ArgNode::matchesAll = true;
    
    if(VSEFlags::show_match_defs)
    {
	cout << _REMOVED_STR_ << longname() << _REMOVED_STR_ << *arg;
	cout.flush();
    }

    bool ret = (*_node_pattern == *arg);

    if(VSEFlags::show_match_defs)
    {
	if(ret)
	    cout << _REMOVED_STR_ << longname() << _REMOVED_STR_ << *arg;
	else
	    cout << _REMOVED_STR_ << longname() << _REMOVED_STR_ 
		<< *arg;
	cout.flush();
    }

    ArgNode::matchCallback = oldCB;
    ArgNode::matchesAll = oldFlag;

    return ret;
}

__END_METHOD_CODE__


	METHOD VSLDef!nodelist
		CALLS
		nargs : VSLDef,
		matches : VSLDef



		METRICS
			ARRAYOP 1
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLDef
			CLASSID 70
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 1
			METHOD nodelist
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:VSLDef CLASSID:70 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:1 METHOD:nodelist METHODID:25 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-nodelist

__BEGIN_METHOD_CODE__

VSLDef::nodelist(const VSLNode *arg)
{
    for(unsigned i = 0; i < nargs(); i++)
	node_instances[_ARGS_] = 0;

    bool ok = matches(arg);
    if(!ok)
	return 0;

    return node_instances;
}

__END_METHOD_CODE__


	METHOD VSLDef!matches
		CALLS
		longname : VSLDef,
		flush : LiterateAgent,
		compilePattern : VSLDef,
		longname : VSLDef,
		longname : VSLDef,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 6
			CLASS VSLDef
			CLASSID 70
			CYCLO 6
			DOTS 2
			EQTEST 2
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 37
			LT 24
			METHOD matches
			METHODID 22
			MMINUS 0
			OUT 12
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 7
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:6 CLASS:VSLDef CLASSID:70 CYCLO:6 DOTS:2 EQTEST:2 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:37 LT:24 METHOD:matches METHODID:22 MMINUS:0 OUT:12 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:7 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-matches

__BEGIN_METHOD_CODE__

VSLDef::matches(const Box *arg)
{
    bool ret = false;

     

    MatchBoxFunc oldCB = MatchBox::matchCallback;
    MatchBox::matchCallback = box_matches;

    MatchBox::matchesAll = true;

    if(VSEFlags::show_match_defs)
    {
	cout << _REMOVED_STR_ << longname() << _REMOVED_STR_ << *arg;
	cout.flush();
    }

    if(_box_pattern == 0)
	compilePattern();

    if(_box_pattern)
	ret = (*_box_pattern == *arg);

    if(VSEFlags::show_match_defs)
    {
	if(ret)
	    cout << _REMOVED_STR_ << longname() << _REMOVED_STR_ << *arg;
	else
	    cout << _REMOVED_STR_ << longname() << _REMOVED_STR_ 
		<< *arg;
	cout.flush();
    }

    MatchBox::matchesAll = false;

    MatchBox::matchCallback = oldCB;
    return ret;
}

__END_METHOD_CODE__


	METHOD VSLDef!compilePattern
		CALLS
		eval_error : VSLLib,
		uncompilePattern : VSLDef,
		nargs : VSLDef,
		MatchBox : MatchBox,
		eval : _SYSTEM_OR_USER_,
		eval_error : VSLLib,
		nargs : VSLDef,
		countMatchBoxes : _SYSTEM_OR_USER_,
		nargs : VSLDef,
		eval_error : VSLLib,
		eval_error : VSLLib



		METRICS
			being_compiled REFERRED 3 TIMES,
			ARRAYOP 5
			ASS 12
			AVVARLEN 14
			CALLEDN 13
			CLASS VSLDef
			CLASSID 70
			CYCLO 8
			DOTS 0
			EQTEST 2
			EXPRORCALL 28
			GE 0
			GT 1
			IN 0
			INDR 7
			LE 0
			LOC 60
			LT 15
			METHOD compilePattern
			METHODID 19
			MMINUS 0
			OUT 6
			PARNUM 0
			PPLUS 3
			RETPOINT 0
			SCOPEOP 4
			STMNT 30
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:12 AVVARLEN:14 CALLEDN:13 CLASS:VSLDef CLASSID:70 CYCLO:8 DOTS:0 EQTEST:2 EXPRORCALL:28 GE:0 GT:1 IN:0 INDR:7 LE:0 LOC:60 LT:15 METHOD:compilePattern METHODID:19 MMINUS:0 OUT:6 PARNUM:0 PPLUS:3 RETPOINT:0 SCOPEOP:4 STMNT:30 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-compilePattern

__BEGIN_METHOD_CODE__

VSLDef::compilePattern()
{
     
    if(being_compiled)
    {
	VSLLib::eval_error(_REMOVED_STR_, this);
	return;
    }

    uncompilePattern();

     
    ListBox *list = new ListBox;
    unsigned i;
    for(i = 0; i < nargs(); i++)
    {
	MatchBox *m = new MatchBox(i);
	(*list) += m;
	m->unlink();
    }

    ((VSLDef *)this)->being_compiled = true;
    const Box *result = _node_pattern->eval(list);
    ((VSLDef *)this)->being_compiled = false;

    list->unlink();


     
    if(result == 0)
	VSLLib::eval_error(_REMOVED_STR_, this);
    else
    {
	 
	int *instances = new int [_ARGS_];
	for(i = 0; i < nargs(); i++)
	    instances[_ARGS_] = 0;
	result->countMatchBoxes(instances);

	for(i = 0; i < nargs(); i++)
	{
	    if(instances[_ARGS_] == 0)
	    {
		ostrstream os;
		os << _REMOVED_STR_ << i 
		   << _REMOVED_STR_;
		VSLLib::eval_error(os, this);
	    }
	    if(instances[_ARGS_] > 1)
	    {
		ostrstream os;
		os << _REMOVED_STR_ << i 
		   << _REMOVED_STR_;
		VSLLib::eval_error(os, this);
	    }
	}
	delete[] instances;
    }

    ((VSLDef *)this)->_box_pattern = (Box *)result;
}

__END_METHOD_CODE__


	METHOD VSLDef!eval
		CALLS
		link : _SYSTEM_OR_USER_,
		longname : VSLDef,
		flush : LiterateAgent,
		arglist : VSLDef,
		eval : _SYSTEM_OR_USER_,
		eval_error : VSLLib,
		eval_error : VSLLib,
		eval_error : VSLLib,
		longname : VSLDef,
		flush : LiterateAgent,




		METRICS
			*backtrace REFERRED 5 TIMES,
			*backtrace_args REFERRED 3 TIMES,
			ARRAYOP 7
			ASS 12
			AVVARLEN 12
			CALLEDN 12
			CLASS VSLDef
			CLASSID 70
			CYCLO 10
			DOTS 2
			EQTEST 2
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 72
			LT 35
			METHOD eval
			METHODID 18
			MMINUS 1
			OUT 16
			PARNUM 1
			PPLUS 3
			RETPOINT 1
			SCOPEOP 6
			STMNT 32
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:7 ASS:12 AVVARLEN:12 CALLEDN:12 CLASS:VSLDef CLASSID:70 CYCLO:10 DOTS:2 EQTEST:2 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:72 LT:35 METHOD:eval METHODID:18 MMINUS:1 OUT:16 PARNUM:1 PPLUS:3 RETPOINT:1 SCOPEOP:6 STMNT:32 TERNINSTR:0 USEDVARS:2 
		;


#ID 18-eval

__BEGIN_METHOD_CODE__

VSLDef::eval(Box *arg)
{
    static int depth = 0;

     
    if(backtrace == 0)
    {
	backtrace = new const VSLDef *[_ARGS_];
	backtrace_args = new const Box *[_ARGS_];
    }

    backtrace[_ARGS_] = this;
    backtrace_args[_ARGS_] = arg->link();
    backtrace[_ARGS_] = 0;    

     
    if(VSEFlags::show_large_eval)
    {
	cout << _REMOVED_STR_ << depth << _REMOVED_STR_;
	for(int i = 0; i < depth; i++)
	    cout << _REMOVED_STR_;

	cout << longname() << *arg << _REMOVED_STR_;
	cout.flush();
    }

     
    const Box *box = 0;

    if(depth < VSEFlags::max_eval_nesting)
    {
	ListBox *myarglist = arglist(arg);

	if(myarglist)
	{
	    depth++;
	    if(_expr)
		box = _expr->eval(myarglist);
	    else
		VSLLib::eval_error(_REMOVED_STR_);
	    depth--;

	    myarglist->unlink();
	}
	else
	    VSLLib::eval_error(_REMOVED_STR_);
    }
    else
	VSLLib::eval_error(_REMOVED_STR_);

     
    if(VSEFlags::show_large_eval)
    {
	cout << _REMOVED_STR_ << depth << _REMOVED_STR_;
	for(int i = 0; i < depth; i++)
	    cout << _REMOVED_STR_;

	cout << longname() << *arg;

	if(box == 0)
	    cout << _REMOVED_STR_;
	else
	    cout << _REMOVED_STR_ << *box;

	cout.flush();
    }

     
    backtrace[_ARGS_] = 0;
    ((Box *)backtrace_args[_ARGS_])->unlink();

    return box;
}

__END_METHOD_CODE__


	METHOD VSLDef!arglist
		CALLS
		straight : VSLDef,
		link : _SYSTEM_OR_USER_,
		nargs : VSLDef,
		matches : VSLDef,
		nargs : VSLDef



		METRICS
			ARRAYOP 2
			ASS 6
			AVVARLEN 0
			CALLEDN 5
			CLASS VSLDef
			CLASSID 70
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 24
			LT 2
			METHOD arglist
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 1
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:6 AVVARLEN:0 CALLEDN:5 CLASS:VSLDef CLASSID:70 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:24 LT:2 METHOD:arglist METHODID:24 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:1 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-arglist

__BEGIN_METHOD_CODE__

VSLDef::arglist(const Box *arg)
{
    if(straight())
    {
	 ;
	return(ListBox *)((Box *)arg)->link();
    }

    unsigned i;
    for(i = 0; i < nargs(); i++)
	box_instances[_ARGS_] = 0;

    bool ok = matches(arg);
    if(!ok)
	return(ListBox *)0;

    ListBox *list = new ListBox;
    for(i = 0; i < nargs(); i++)
    {
	 ;   
	(*list) += box_instances[_ARGS_];
    }

    return list;
}

__END_METHOD_CODE__


	METHOD VSLDef!resolveNames
		CALLS
		expr : VSLDef,
		resolveNames : VSLDef,
		nargs : VSLDef,
		node_pattern : VSLDef,
		firstName : _SYSTEM_OR_USER_,
		expr : VSLDef,
		resolveName : _SYSTEM_OR_USER_,
		expr : VSLDef,
		eval_warning : VSLLib,
		node_pattern : VSLDef,
		resolveName : _SYSTEM_OR_USER_,
		node_pattern : VSLDef,
		eval_error : VSLLib,
		expr : VSLDef,
		firstName : _SYSTEM_OR_USER_,
		eval_error : VSLLib,
		expr : VSLDef,
		resolveName : _SYSTEM_OR_USER_,
		expr : VSLDef



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 19
			CLASS VSLDef
			CLASSID 70
			CYCLO 5
			DOTS 0
			EQTEST 1
			EXPRORCALL 25
			GE 0
			GT 1
			IN 0
			INDR 6
			LE 0
			LOC 36
			LT 0
			METHOD resolveNames
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 3
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:19 CLASS:VSLDef CLASSID:70 CYCLO:5 DOTS:0 EQTEST:1 EXPRORCALL:25 GE:0 GT:1 IN:0 INDR:6 LE:0 LOC:36 LT:0 METHOD:resolveNames METHODID:21 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:3 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-resolveNames

__BEGIN_METHOD_CODE__

VSLDef::resolveNames()
{
     
    int changes = expr()->resolveNames(this, nargs());

     
     
    string s = _REMOVED_STR_;
    unsigned offset = 0;

    while((s = node_pattern()->firstName(), s) != _REMOVED_STR_)
    {
	 
	int ch = expr()->resolveName(this, &expr(), s, offset);
	if(ch == 0)
	    VSLLib::eval_warning(_REMOVED_STR_ + s + _REMOVED_STR_, this);
	changes += ch;

	 
	ch = node_pattern()->resolveName(this, &node_pattern(), s, offset);
	if(ch > 1)
	    VSLLib::eval_error(_REMOVED_STR_ + s + _REMOVED_STR_, this);

	offset += ch;
    }

     ;

     
    while((s = expr()->firstName(), s) != _REMOVED_STR_)
    {
	VSLLib::eval_error(_REMOVED_STR_ + s + _REMOVED_STR_, this);
	expr()->resolveName(this, &expr(), s, 0);
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLDef!args
		CALLS
		func_name : _SYSTEM_OR_USER_,
		string : string,
		isArgNode : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS VSLDef
			CLASSID 70
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 14
			LT 8
			METHOD args
			METHODID 0
			MMINUS 0
			OUT 4
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:VSLDef CLASSID:70 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:14 LT:8 METHOD:args METHODID:0 MMINUS:0 OUT:4 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-args

__BEGIN_METHOD_CODE__

VSLDef::args()
{
     
    if((deflist->func_name())[_ARGS_] == '#')
	return string(_REMOVED_STR_);

    ostrstream os;

    if(_node_pattern->isArgNode())
	os << _REMOVED_STR_ << *_node_pattern << _REMOVED_STR_;
    else
	os << *_node_pattern;

    return os;
}

__END_METHOD_CODE__


	METHOD VSLDef!func_name
		CALLS
		func_name : _SYSTEM_OR_USER_,
		args : VSLDef



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD func_name
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:func_name METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-func_name

__BEGIN_METHOD_CODE__

VSLDef::func_name()
{
    return deflist->func_name() + args();
}

__END_METHOD_CODE__


	METHOD VSLDef!f_name
		CALLS
		f_name : _SYSTEM_OR_USER_,
		args : VSLDef



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD f_name
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:f_name METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-f_name

__BEGIN_METHOD_CODE__

VSLDef::f_name()
{
    return deflist->f_name() + args();
}

__END_METHOD_CODE__


	METHOD VSLDef!longname
		CALLS
		f_name : VSLDef



		METRICS
			_lineno REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 7
			CALLEDN 1
			CLASS VSLDef
			CLASSID 70
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 10
			METHOD longname
			METHODID 17
			MMINUS 0
			OUT 5
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:7 CALLEDN:1 CLASS:VSLDef CLASSID:70 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:10 METHOD:longname METHODID:17 MMINUS:0 OUT:5 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-longname

__BEGIN_METHOD_CODE__

VSLDef::longname()
{
    ostrstream os;
    ostream& s = os;
    
    if(_filename != _REMOVED_STR_)
	s << _filename << _REMOVED_STR_ << _lineno << _REMOVED_STR_;
    s << f_name();

    return os;
}

__END_METHOD_CODE__


	METHOD VSLDef!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD OK
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:OK METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-OK

__BEGIN_METHOD_CODE__

VSLDef::OK()
{
     
     ;
     ;

    return true;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/VSLDef.o.nu.met	  Methods Number  15
#====================================================================
#Process file ../../code/ddd-3.0/ddd/TestNode.o.nu.met ... 


	METHOD TestNode!dump
		CALLS
		test : TestNode,
		thetrue : TestNode,
		thefalse : TestNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 14
			METHOD dump
			METHODID 3
			MMINUS 0
			OUT 7
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:14 METHOD:dump METHODID:3 MMINUS:0 OUT:7 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dump

__BEGIN_METHOD_CODE__

TestNode::dump(ostream& s)
{
    s << _REMOVED_STR_    << *test()
      << _REMOVED_STR_ << *thetrue()
      << _REMOVED_STR_ << *thefalse()
      << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD TestNode!_dumpTree
		CALLS
		test : TestNode,
		dumpTree : _SYSTEM_OR_USER_,
		thetrue : TestNode,
		dumpTree : _SYSTEM_OR_USER_,
		thefalse : TestNode,
		dumpTree : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 7
			LT 4
			METHOD _dumpTree
			METHODID 4
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:7 LT:4 METHOD:_dumpTree METHODID:4 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-_dumpTree

__BEGIN_METHOD_CODE__

TestNode::_dumpTree(ostream& s)
{
    test()->dumpTree(s);
    s << _REMOVED_STR_;
    thetrue()->dumpTree(s);
    s << _REMOVED_STR_;
    thefalse()->dumpTree(s);
}

__END_METHOD_CODE__


	METHOD TestNode!_eval
		CALLS
		test : TestNode,
		eval : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		isValid : BoxSize,
		eval_error : VSLLib,
		thetrue : TestNode,
		eval : _SYSTEM_OR_USER_,
		thefalse : TestNode,
		eval : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 10
			CLASS TestNode
			CLASSID 90
			CYCLO 4
			DOTS 1
			EQTEST 1
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 21
			LT 0
			METHOD _eval
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 4
			SCOPEOP 1
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:10 CLASS:TestNode CLASSID:90 CYCLO:4 DOTS:1 EQTEST:1 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:21 LT:0 METHOD:_eval METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:4 SCOPEOP:1 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-_eval

__BEGIN_METHOD_CODE__

TestNode::_eval(ListBox *arglist)
{
     
    const Box *flagBox = test()->eval(arglist);
    if(flagBox == 0)
	return 0;

    BoxSize size = flagBox->size();
    ((Box *)flagBox)->unlink();

    if(!size.isValid())
    {
	VSLLib::eval_error(_REMOVED_STR_);
	return 0;
    }

     
    if(size != 0)
	return thetrue()->eval(arglist);
    else
	return thefalse()->eval(arglist);
}

__END_METHOD_CODE__


	METHOD TestNode!foldConsts
		CALLS
		test : TestNode,
		foldConsts : TestNode,
		test : TestNode,
		thetrue : TestNode,
		foldConsts : TestNode,
		thetrue : TestNode,
		thefalse : TestNode,
		foldConsts : TestNode,
		thefalse : TestNode,
		test : TestNode,
		isConst : _SYSTEM_OR_USER_,
		test : TestNode,
		eval : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		isValid : BoxSize,
		longname : VSLDef,
		flush : LiterateAgent,
		thetrue : TestNode,
		thetrue : TestNode,
		thefalse : TestNode,
		thefalse : TestNode,
		flush : LiterateAgent,
		eval_error : VSLLib



		METRICS
			ARRAYOP 0
			ASS 14
			AVVARLEN 0
			CALLEDN 24
			CLASS TestNode
			CLASSID 90
			CYCLO 7
			DOTS 3
			EQTEST 0
			EXPRORCALL 32
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 66
			LT 16
			METHOD foldConsts
			METHODID 17
			MMINUS 0
			OUT 8
			PARNUM 2
			PPLUS 1
			RETPOINT 2
			SCOPEOP 3
			STMNT 22
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:14 AVVARLEN:0 CALLEDN:24 CLASS:TestNode CLASSID:90 CYCLO:7 DOTS:3 EQTEST:0 EXPRORCALL:32 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:66 LT:16 METHOD:foldConsts METHODID:17 MMINUS:0 OUT:8 PARNUM:2 PPLUS:1 RETPOINT:2 SCOPEOP:3 STMNT:22 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-foldConsts

__BEGIN_METHOD_CODE__

TestNode::foldConsts(VSLDef *cdef, VSLNode **node)
{
    int changes = 0;

     
     
    changes += test()->foldConsts(cdef, &test());
    changes += thetrue()->foldConsts(cdef, &thetrue());
    changes += thefalse()->foldConsts(cdef, &thefalse());

     
    if(!test()->isConst())
	return changes;

     
     

     

    sideEffectsProhibited = true;
    sideEffectsOccured = false;

    const Box *flagBox = test()->eval(0);

    if(flagBox)
    {
	 ;

	BoxSize size = flagBox->size();
	((Box *)flagBox)->unlink();

	if(size.isValid())
	{
	     
	    if(VSEFlags::show_optimize)
	    {
		cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
		    << *this << '\n';
		cout.flush();
	    }

	     
	    if(size != 0)
		*node = thetrue(), thetrue() = 0;
	    else
		*node = thefalse(), thefalse() = 0;


	    if(VSEFlags::show_optimize)
	    {
		cout << _REMOVED_STR_ << **node << _REMOVED_STR_;
		cout.flush();
	    }
		
	    changes++;

	     
	    delete this;
	}
	else
	    VSLLib::eval_error(_REMOVED_STR_, cdef);
    }

    sideEffectsProhibited = false;

    return changes;
}

__END_METHOD_CODE__


	METHOD TestNode!resolveDefs
		CALLS
		test : TestNode,
		resolveDefs : TestNode,
		thetrue : TestNode,
		resolveDefs : TestNode,
		thefalse : TestNode,
		resolveDefs : TestNode



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 6
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 9
			LT 0
			METHOD resolveDefs
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:6 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:9 LT:0 METHOD:resolveDefs METHODID:18 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-resolveDefs

__BEGIN_METHOD_CODE__

TestNode::resolveDefs(VSLDef *cdef, bool complain_recursive)
{
    int changes = 0;

    changes += test()->resolveDefs(cdef, complain_recursive);
    changes += thetrue()->resolveDefs(cdef, false);
    changes += thefalse()->resolveDefs(cdef, false);

    return changes;
}

__END_METHOD_CODE__


	METHOD TestNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD OK
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:OK METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-OK

__BEGIN_METHOD_CODE__

TestNode::OK()
{
    EmptyListNode empty;
     ;
     ;

    return true;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/TestNode.o.nu.met	  Methods Number  6
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/TrueNode.o.nu.met ... 


	METHOD FixListNode!FixListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FixListNode
			CLASSID 86
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FixListNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FixListNode CLASSID:86 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FixListNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-FixListNode

__BEGIN_METHOD_CODE__

FixListNode::FixListNode(VSLNode *arg)
{}

__END_METHOD_CODE__


	METHOD FixListNode!FixListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FixListNode
			CLASSID 86
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FixListNode
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FixListNode CLASSID:86 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FixListNode METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-FixListNode

__BEGIN_METHOD_CODE__

FixListNode::FixListNode(VSLNode *arg1, VSLNode *arg2)
{}

__END_METHOD_CODE__


	METHOD FixListNode!FixListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FixListNode
			CLASSID 86
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FixListNode
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FixListNode CLASSID:86 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FixListNode METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-FixListNode

__BEGIN_METHOD_CODE__

FixListNode::FixListNode(VSLNode *arg1, VSLNode *arg2, VSLNode *arg3)
{}

__END_METHOD_CODE__


	METHOD FixListNode!FixListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FixListNode
			CLASSID 86
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FixListNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FixListNode CLASSID:86 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FixListNode METHODID:3 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-FixListNode

__BEGIN_METHOD_CODE__

FixListNode::FixListNode(VSLNode *arg1, VSLNode *arg2,
			 VSLNode *arg3, VSLNode *arg4)
{}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/TrueNode.o.nu.met	  Methods Number  4
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/VSEFlags.o.nu.met ... 


	METHOD VSEFlags!parse
		CALLS
		getDefaults : VSEFlags,
		_parse : VSEFlags,
		explain : VSEFlags



		METRICS
			ARRAYOP 2
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS VSEFlags
			CLASSID 49
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 14
			METHOD parse
			METHODID 4
			MMINUS 0
			OUT 7
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:VSEFlags CLASSID:49 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:14 METHOD:parse METHODID:4 MMINUS:0 OUT:7 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-parse

__BEGIN_METHOD_CODE__

VSEFlags::parse(int& argc, char**& argv, char *args)
{
     
    getDefaults(true);

     
    if(_parse(argc, argv, false))
    {
	cerr << argv[_ARGS_] << _REMOVED_STR_ << argv[_ARGS_] << _REMOVED_STR_
	     << args << _REMOVED_STR_ << explain();

	exit(1 );
    }
}

__END_METHOD_CODE__


	METHOD VSEFlags!parse_vsl
		CALLS
		getDefaults : VSEFlags,
		_parse : VSEFlags



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSEFlags
			CLASSID 49
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD parse_vsl
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSEFlags CLASSID:49 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:parse_vsl METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-parse_vsl

__BEGIN_METHOD_CODE__

VSEFlags::parse_vsl(int& argc, char**& argv)
{
     
    getDefaults(false);

    return _parse(argc, argv, true);
}

__END_METHOD_CODE__


	METHOD VSEFlags!_parse
		CALLS
		contains : string,
		del : string,
		after : string,
		index : string,
		index : string,
		after : string,
		index : string,
		atoi : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		through : string,
		after : string,
		contains : _SYSTEM_OR_USER_,
		through : string,
		after : string



		METRICS
			optionTable REFERRED 2 TIMES,
			show_flags REFERRED 1 TIMES,
			ARRAYOP 19
			ASS 27
			AVVARLEN 10
			CALLEDN 14
			CLASS VSEFlags
			CLASSID 49
			CYCLO 31
			DOTS 20
			EQTEST 8
			EXPRORCALL 42
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 138
			LT 35
			METHOD _parse
			METHODID 1
			MMINUS 0
			OUT 15
			PARNUM 3
			PPLUS 4
			RETPOINT 1
			SCOPEOP 0
			STMNT 48
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:19 ASS:27 AVVARLEN:10 CALLEDN:14 CLASS:VSEFlags CLASSID:49 CYCLO:31 DOTS:20 EQTEST:8 EXPRORCALL:42 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:138 LT:35 METHOD:_parse METHODID:1 MMINUS:0 OUT:15 PARNUM:3 PPLUS:4 RETPOINT:1 SCOPEOP:0 STMNT:48 TERNINSTR:0 USEDVARS:2 
		;


#ID 1-_parse

__BEGIN_METHOD_CODE__

VSEFlags::_parse(int& argc, char**& argv, bool vsl_prefix_required)
{
    int arg = 1;

    while(arg < argc)
    {
	int skip = 0;

	if(argv[_ARGS_] == 0)
	    break;                       

	if(argv[_ARGS_][_ARGS_] != '-')
	    break;			 

	if(argv[_ARGS_][_ARGS_] == '\0')
	    break;		         

	if(argv[_ARGS_][_ARGS_] == '-' && argv[_ARGS_][_ARGS_] == '\0')
	    break;                       

	string opt = argv[_ARGS_];          

	 
	bool no = false;
	if(opt.contains(_REMOVED_STR_))
	{
	    opt.del(_REMOVED_STR_);
	    no = true;
	}

	 
	string optName = opt;
	while(optName[_ARGS_] == '-')
	    optName = optName.after('-');

	 
	if(vsl_prefix_required)
	    if(optName.index(_REMOVED_STR_) != 0)
		break;

	 
	if(optName.index(_REMOVED_STR_) == 0)
	    optName = optName.after(_REMOVED_STR_);

	for(int nentry = 0; optionTable[_ARGS_].type != LAST; nentry++)
	{
	    VSEOptionTableEntry entry = optionTable[_ARGS_];
	    string entryName = entry.name;

	    if(entryName.index(optName) == 0)
	    {   
		 

		switch(entry.type)
		{
		    case TITLE:
			break;

		    case BOOLEAN:
		    {
			bool *boolptr = (bool *)entry.flag;
			if(boolptr)
			    *boolptr = !no;
			skip = 1;
			break;
		    }

		    case INT:
		    {
			if(arg + 1 < argc)
			{
			    int *intptr = (int *)entry.flag;
			    if(intptr)
				*intptr = atoi(argv[_ARGS_]);
			    skip = 2;
			}
			break;
		    }

		    case STRING:
		    {
			if(arg + 1 < argc)
			{
			    char **stringptr = (char **)entry.flag;
			    if(stringptr)
				*stringptr = argv[_ARGS_];
			    skip = 2;
			}
			break;
		    }

		    default:
			 
			 ;
			break;
		}

		if(show_flags)
		{
		     
		    cout << _REMOVED_STR_ << argv[_ARGS_] << _REMOVED_STR_;

		    if(no && entry.type == BOOLEAN)
		    {
			if(entryName.contains(_REMOVED_STR_))
			    cout << entryName.through(_REMOVED_STR_) << _REMOVED_STR_ 
				 << entryName.after(_REMOVED_STR_);
			else if(entryName.contains(_REMOVED_STR_))
			    cout << entryName.through(_REMOVED_STR_) << _REMOVED_STR_ 
				 << entryName.after(_REMOVED_STR_);
			else
			    cout << _REMOVED_STR_ << entryName;
		    }
		    else
			cout << entryName;

		    for(int i = 1; i < skip; i++)
			cout << _REMOVED_STR_ << argv[_ARGS_];
		    cout << _REMOVED_STR_;
		}
	    }
	}

	if(skip > 0)
	{
	     
	    for(int a = arg; a < argc; a++)
		argv[_ARGS_] = argv[_ARGS_];
	    argc -= skip;
	}
	else
	{
	     
	    arg++;
	}
    }

    return help;
}

__END_METHOD_CODE__


	METHOD VSEFlags!getDefaults
		CALLS
		fopen : _SYSTEM_OR_USER_,
		gethome : _SYSTEM_OR_USER_,
		prepend : string,
		fopen : _SYSTEM_OR_USER_,
		string : string,
		strcpy : _SYSTEM_OR_USER_,
		strtok : _SYSTEM_OR_USER_,
		strtok : _SYSTEM_OR_USER_,
		string : string,
		fopen : _SYSTEM_OR_USER_,
		fscanf : _SYSTEM_OR_USER_,
		strcpy : _SYSTEM_OR_USER_,
		strlen : _SYSTEM_OR_USER_,
		strcpy : _SYSTEM_OR_USER_,
		strlen : _SYSTEM_OR_USER_,
		_parse : VSEFlags,
		fclose : _SYSTEM_OR_USER_,
		perror : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 13
			ASS 25
			AVVARLEN 0
			CALLEDN 18
			CLASS VSEFlags
			CLASSID 49
			CYCLO 13
			DOTS 1
			EQTEST 5
			EXPRORCALL 44
			GE 2
			GT 3
			IN 0
			INDR 0
			LE 0
			LOC 77
			LT 11
			METHOD getDefaults
			METHODID 2
			MMINUS 0
			OUT 5
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 34
			TERNINSTR 2
			USEDVARS 0

#METRICS ARRAYOP:13 ASS:25 AVVARLEN:0 CALLEDN:18 CLASS:VSEFlags CLASSID:49 CYCLO:13 DOTS:1 EQTEST:5 EXPRORCALL:44 GE:2 GT:3 IN:0 INDR:0 LE:0 LOC:77 LT:11 METHOD:getDefaults METHODID:2 MMINUS:0 OUT:5 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:34 TERNINSTR:2 USEDVARS:0 
		;


#ID 2-getDefaults

__BEGIN_METHOD_CODE__

VSEFlags::getDefaults(bool warn)
{

    string filename = _REMOVED_STR_;
    FILE *fp = fopen(filename, _REMOVED_STR_);
    if(fp == __null )
    {
	string home = gethome();
	filename.prepend(home + _REMOVED_STR_);
	fp = fopen(filename, _REMOVED_STR_);

	if(fp == __null )
	{
	    static string path = 
		string(_REMOVED_STR_ ) +
		_REMOVED_STR_
		_REMOVED_STR_
		_REMOVED_STR_
		_REMOVED_STR_
		_REMOVED_STR_
		_REMOVED_STR_;

	    char buffer[_ARGS_];
	    strcpy(buffer, path);

	    for(char *p = strtok(buffer, _REMOVED_STR_); 
		 p != __null ; 
		 p = strtok(__null , _REMOVED_STR_))
	    {
		filename = string(p) + _REMOVED_STR_;

		fp = fopen(filename, _REMOVED_STR_);
		if(fp != __null )
		    break;
	    }

	    if(warn)
		cerr << _REMOVED_STR_;
	    return;
	}
    }

    static char *argv[_ARGS_];
    static char buf1[_ARGS_];
    static char buf2[_ARGS_];

    int nargs;
    do {
	nargs = fscanf(fp, _REMOVED_STR_, buf1, buf2);

	if(nargs > 0 && buf1[_ARGS_] == '-')
	{
	    argv[_ARGS_] = _REMOVED_STR_;
	    argv[_ARGS_] = _REMOVED_STR_;
	    argv[_ARGS_] = _REMOVED_STR_;
	    if(nargs >= 1)
	    {
		argv[_ARGS_] = (String)(( buf1 ) != __null  ? (strcpy(XtMalloc((unsigned)strlen( buf1 ) + 1),  buf1 )) : __null ) ;
		if(nargs >= 2)
		    argv[_ARGS_] = (String)(( buf2 ) != __null  ? (strcpy(XtMalloc((unsigned)strlen( buf2 ) + 1),  buf2 )) : __null ) ;
	    }
	    int myargc = nargs + 1;
	    char **myargv = argv;

	    _parse(myargc, myargv, false);

	    for(int i = 1; i < myargc; i++)
		if(myargv[_ARGS_][_ARGS_] == '-')
		    cerr << filename << _REMOVED_STR_ << myargv[_ARGS_] 
			 << _REMOVED_STR_;
	}
    } while(nargs != (-1) );

    if(fclose(fp) == (-1) )
	perror(filename);

    return;
}

__END_METHOD_CODE__


	METHOD VSEFlags!explain
		CALLS
		prepend : string,
		contains : string,
		through : string,
		after : string,
		contains : string,
		through : string,
		after : string,
		contains : string,
		through : string,
		after : string,
		prepend : string,
		string : string,
		string : string,
		length : string



		METRICS
			optionTable REFERRED 2 TIMES,
			ARRAYOP 5
			ASS 34
			AVVARLEN 11
			CALLEDN 14
			CLASS VSEFlags
			CLASSID 49
			CYCLO 18
			DOTS 21
			EQTEST 1
			EXPRORCALL 35
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 102
			LT 7
			METHOD explain
			METHODID 3
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 45
			TERNINSTR 1
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:34 AVVARLEN:11 CALLEDN:14 CLASS:VSEFlags CLASSID:49 CYCLO:18 DOTS:21 EQTEST:1 EXPRORCALL:35 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:102 LT:7 METHOD:explain METHODID:3 MMINUS:0 OUT:3 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:45 TERNINSTR:1 USEDVARS:1 
		;


#ID 3-explain

__BEGIN_METHOD_CODE__

VSEFlags::explain(bool vsl_prefix_required)
{
    help = false;    

    string s = _REMOVED_STR_;
    if(vsl_prefix_required)
	s = _REMOVED_STR_;

    for(int nentry = 0; optionTable[_ARGS_].type != LAST; nentry++)
    {
	VSEOptionTableEntry entry = optionTable[_ARGS_];

	if(entry.type == TITLE)
	{
	    s = s + _REMOVED_STR_ + entry.usage + _REMOVED_STR_;
	    continue;
	}

	string optName = entry.name;
	string optArg  = _REMOVED_STR_;
	string usage   = entry.usage;
	string deflt   = _REMOVED_STR_;

	if(vsl_prefix_required)
	    optName.prepend(_REMOVED_STR_);

	switch(entry.type) {
	    case BOOLEAN:
	    {
		bool *boolptr = (bool *)entry.flag;
		if(boolptr)
		{
		    if(*boolptr)
		    {
			if(optName.contains(_REMOVED_STR_))
			    optName = optName.through(_REMOVED_STR_) + _REMOVED_STR_ 
				 + optName.after(_REMOVED_STR_);
			else if(optName.contains(_REMOVED_STR_))
			    optName = optName.through(_REMOVED_STR_) + _REMOVED_STR_ 
				 + optName.after(_REMOVED_STR_);
			else if(optName.contains(_REMOVED_STR_))
			    optName = optName.through(_REMOVED_STR_) + _REMOVED_STR_ 
				 + optName.after(_REMOVED_STR_);
			else
			    optName = _REMOVED_STR_ + optName;

			usage[_ARGS_] = ((int) __ctype_tolower[(int) (  usage[_ARGS_]  )])  ;
			usage.prepend(_REMOVED_STR_);
		    }
		}
		break;
	    }

	    case INT:
	    {
		int *intptr = (int *)entry.flag;

		optArg = _REMOVED_STR_;
		usage += _REMOVED_STR_;

		if(intptr)
		{
		    ostrstream os;
		    os << _REMOVED_STR_ << *intptr << _REMOVED_STR_;
		    deflt = string(os);
		}
		break;
	    }

	    case STRING:
	    {
		char **stringptr = (char **)entry.flag;

		optArg = _REMOVED_STR_;
		usage += _REMOVED_STR_;

		if(stringptr)
		    deflt = string(_REMOVED_STR_) + *stringptr + _REMOVED_STR_;
		break;
	    }
	
	    default:
		 
		 ;
		break;
	}

	optName = _REMOVED_STR_ + optName + optArg + _REMOVED_STR_;
	while(optName.length() < 36)
	    optName += _REMOVED_STR_;
	s += optName;
	usage += deflt;
	s += usage;
	s += _REMOVED_STR_;
    }

    s += _REMOVED_STR_;
    s += (vsl_prefix_required ? _REMOVED_STR_ : _REMOVED_STR_);
    s += _REMOVED_STR_
	 _REMOVED_STR_;

    return s;
}

__END_METHOD_CODE__


	METHOD VSEFlags!optimize_mode

		METRICS
			optimize_resolveDefs REFERRED 1 TIMES,
			optimize_resolveSynonyms REFERRED 1 TIMES,
			optimize_foldOps REFERRED 1 TIMES,
			optimize_foldConsts REFERRED 1 TIMES,
			optimize_inlineFuncs REFERRED 1 TIMES,
			optimize_cleanup REFERRED 1 TIMES,
			max_optimize_loops REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 8
			AVVARLEN 19
			CALLEDN 0
			CLASS VSEFlags
			CLASSID 49
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 20
			LT 0
			METHOD optimize_mode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 7

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:19 CALLEDN:0 CLASS:VSEFlags CLASSID:49 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:20 LT:0 METHOD:optimize_mode METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:7 
		;


#ID 0-optimize_mode

__BEGIN_METHOD_CODE__

VSEFlags::optimize_mode()
{
    unsigned mode = 0;
    
    if(optimize_resolveDefs)
	mode |= ResolveDefs;
    if(optimize_resolveSynonyms)
	mode |= ResolveSynonyms;
    if(optimize_foldOps)
	mode |= FoldOps;
    if(optimize_foldConsts)
	mode |= FoldConsts;
    if(optimize_inlineFuncs)
	mode |= InlineFuncs;
    if(optimize_cleanup)
	mode |= Cleanup;

    mode |= max_optimize_loops;

    return mode;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/VSEFlags.o.nu.met	  Methods Number  6
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/VSLBuiltin.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/VSLErr.o.nu.met ... 


	METHOD VSLLib!echo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 4
			METHOD echo
			METHODID 40
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:4 METHOD:echo METHODID:40 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-echo

__BEGIN_METHOD_CODE__

VSLLib::echo(const string& msg)
{
    cerr << msg << '\n';
}

__END_METHOD_CODE__


	METHOD VSLLib!eval_echo
		CALLS
		echo : VSLLib,
		longname : VSLDef,
		echo : VSLLib,
		echo : VSLLib,
		echo : VSLLib,
		longname : VSLDef,
		echo : VSLLib,
		echo : VSLLib



		METRICS
			ARRAYOP 7
			ASS 7
			AVVARLEN 0
			CALLEDN 8
			CLASS VSLLib
			CLASSID 66
			CYCLO 7
			DOTS 0
			EQTEST 1
			EXPRORCALL 14
			GE 1
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 39
			LT 8
			METHOD eval_echo
			METHODID 44
			MMINUS 2
			OUT 4
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 8
			STMNT 18
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:7 ASS:7 AVVARLEN:0 CALLEDN:8 CLASS:VSLLib CLASSID:66 CYCLO:7 DOTS:0 EQTEST:1 EXPRORCALL:14 GE:1 GT:1 IN:0 INDR:2 LE:0 LOC:39 LT:8 METHOD:eval_echo METHODID:44 MMINUS:2 OUT:4 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:8 STMNT:18 TERNINSTR:0 USEDVARS:0 
		;


#ID 44-eval_echo

__BEGIN_METHOD_CODE__

VSLLib::eval_echo(const string& errmsg, const VSLDef *d)
{
    if(d == 0 && VSLDef::backtrace)
    {
	 
	for(int i = 0; VSLDef::backtrace[_ARGS_] != 0; i++)
	    d = VSLDef::backtrace[_ARGS_];
    }

     
    if(d)
	echo(d->longname() + _REMOVED_STR_ + errmsg);
    else
	echo(errmsg);


     
    if(VSLDef::backtrace && VSLDef::backtrace[_ARGS_])
    {
	static char line[] = _REMOVED_STR_;

	echo(line);
	echo(_REMOVED_STR_);

	int i;
	for(i = 0; VSLDef::backtrace[_ARGS_] != 0; i++)
	    ;

	for(i--; i >= 0; i--)
	{
	    ostrstream os;
	    os << i << _REMOVED_STR_ << VSLDef::backtrace[_ARGS_]->longname() 
	       << *VSLDef::backtrace_args[_ARGS_];

	    echo(os);
	}

	echo(line);
    }
}

__END_METHOD_CODE__


	METHOD VSLLib!eval_error
		CALLS
		eval_echo : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD eval_error
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:eval_error METHODID:45 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 45-eval_error

__BEGIN_METHOD_CODE__

VSLLib::eval_error(const string& errmsg, const VSLDef *d)
{
    eval_echo(errmsg, d);
}

__END_METHOD_CODE__


	METHOD VSLLib!eval_warning
		CALLS
		eval_echo : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD eval_warning
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:eval_warning METHODID:46 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 46-eval_warning

__BEGIN_METHOD_CODE__

VSLLib::eval_warning(const string& errmsg, const VSLDef *d)
{
    eval_echo(_REMOVED_STR_ + errmsg, d);
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/VSLErr.o.nu.met	  Methods Number  4
#===================================================================
#Process file ../../code/ddd-3.0/ddd/VSLNode.o.nu.met ... 


	METHOD VSLNode!dumpTree
		CALLS
		_dumpTree : VSLNode



		METRICS
			_type REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 5
			CALLEDN 1
			CLASS VSLNode
			CLASSID 67
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 11
			METHOD dumpTree
			METHODID 42
			MMINUS 1
			OUT 5
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:5 CALLEDN:1 CLASS:VSLNode CLASSID:67 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:11 METHOD:dumpTree METHODID:42 MMINUS:1 OUT:5 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 42-dumpTree

__BEGIN_METHOD_CODE__

VSLNode::dumpTree(ostream& s)
{
    static unsigned depth = 1;

    s << _REMOVED_STR_;
    for(unsigned i = 0; i < depth; i++)
	s << _REMOVED_STR_;

    depth++;
    s << _type << _REMOVED_STR_;
    _dumpTree(s);
    s << _REMOVED_STR_;
    depth--;
}

__END_METHOD_CODE__


	METHOD VSLNode!eval
		CALLS
		flush : LiterateAgent,
		_eval : VSLNode,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS VSLNode
			CLASSID 67
			CYCLO 6
			DOTS 2
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 29
			LT 24
			METHOD eval
			METHODID 8
			MMINUS 0
			OUT 12
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 2
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:VSLNode CLASSID:67 CYCLO:6 DOTS:2 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:29 LT:24 METHOD:eval METHODID:8 MMINUS:0 OUT:12 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:2 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-eval

__BEGIN_METHOD_CODE__

VSLNode::eval(ListBox *arglist)
{
    if(VSEFlags::show_tiny_eval)
    {
	cout << _REMOVED_STR_ << *this;
	if(arglist)
	    cout << _REMOVED_STR_ << *arglist;

	cout << _REMOVED_STR_;
	cout.flush();
    }

    const Box *box = _eval(arglist);

    if(VSEFlags::show_tiny_eval)
    {
	cout << _REMOVED_STR_ << *this;
	if(arglist)
	    cout << _REMOVED_STR_ << *arglist;

	if(box == 0)
	    cout << _REMOVED_STR_;
	else
	    cout << _REMOVED_STR_ << *box;

	cout.flush();
    }

    return box;
}

__END_METHOD_CODE__


	METHOD VSLNode!operator == 
		CALLS
		flush : LiterateAgent,
		matches : VSLNode,
		matches : _SYSTEM_OR_USER_,
		flush : LiterateAgent



		METRICS
			bothSidesCanMatch REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 17
			CALLEDN 4
			CLASS VSLNode
			CLASSID 67
			CYCLO 5
			DOTS 3
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 24
			LT 24
			METHOD operator_==
			METHODID 39
			MMINUS 0
			OUT 12
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 2
			STMNT 8
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:17 CALLEDN:4 CLASS:VSLNode CLASSID:67 CYCLO:5 DOTS:3 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:24 LT:24 METHOD:operator_== METHODID:39 MMINUS:0 OUT:12 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:2 STMNT:8 TERNINSTR:0 USEDVARS:1 
		;


#ID 39-operator_==

__BEGIN_METHOD_CODE__

VSLNode::operator == (const VSLNode &node)
{
    if(VSEFlags::show_match_nodes)
    {
	cout << _REMOVED_STR_ << *this << _REMOVED_STR_ << node;
	cout.flush();
    }

    bool flag = (this == &node) || matches(node);

    if(bothSidesCanMatch)
	flag = flag || node.matches(*this);

    if(VSEFlags::show_match_nodes)
    {
	if(flag)
	    cout << _REMOVED_STR_ << *this << _REMOVED_STR_ << node;
	else
	    cout << _REMOVED_STR_ << *this << _REMOVED_STR_ << node;
	
	cout.flush();
    }

    return flag;
}

__END_METHOD_CODE__


	METHOD VSLNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD OK
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:OK METHODID:41 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 41-OK

__BEGIN_METHOD_CODE__

VSLNode::OK()
{
     ;
    return true;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/VSLNode.o.nu.met	  Methods Number  4
#====================================================================
#Process file ../../code/ddd-3.0/ddd/VSLRead.o.nu.met ... 


	METHOD vslNameSet!reset

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS vslNameSet
			CLASSID 93
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD reset
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:vslNameSet CLASSID:93 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:reset METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-reset

__BEGIN_METHOD_CODE__

vslNameSet::reset()
{ 
    if(_next) 
	delete _next; 
    _next = 0; 
}

__END_METHOD_CODE__


	METHOD vslNameSet!add
		CALLS
		chars : AssocRec,
		add : _SYSTEM_OR_USER_,
		vslNameSet : vslNameSet



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS vslNameSet
			CLASSID 93
			CYCLO 3
			DOTS 1
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 0
			METHOD add
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:vslNameSet CLASSID:93 CYCLO:3 DOTS:1 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:10 LT:0 METHOD:add METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-add

__BEGIN_METHOD_CODE__

vslNameSet::add(const char *name)
{
    if(strcmp(_name.chars(), name) == 0)
	return -1;

    if(_next)
	return _next->add(name);

    _next = new vslNameSet(name);
    return 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!_call
		CALLS
		deflist : VSLLib,
		parse_error : VSLLib,
		DefCallNode : DefCallNode



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS VSLLib
			CLASSID 66
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD _call
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 1
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:VSLLib CLASSID:66 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:_call METHODID:12 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:1 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-_call

__BEGIN_METHOD_CODE__

VSLLib::_call(const string& func_name, VSLNode *arg)
{
     
    VSLDefList* def = deflist(func_name);
    if(def == 0)
    {
	VSLLib::parse_error(_REMOVED_STR_ + func_name + _REMOVED_STR_);
	delete arg;
	arg = 0;
    }

     
    if(def && arg)
	return new DefCallNode(def, arg);

    return 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		_call : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD call
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:call METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-call

__BEGIN_METHOD_CODE__

VSLLib::call(const string& name)
{
    return _call(name, new EmptyListNode);
}

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		_call : VSLLib,
		FixListNode : FixListNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD call
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:call METHODID:14 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-call

__BEGIN_METHOD_CODE__

VSLLib::call(const string& name, VSLNode *arg)
{
    if(arg)
	return _call(name, new FixListNode(arg));

    return 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		_call : VSLLib,
		FixListNode : FixListNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD call
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:call METHODID:15 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-call

__BEGIN_METHOD_CODE__

VSLLib::call(const string& name, VSLNode *arg1, VSLNode *arg2)
{
    if(arg1 && arg2)
	return _call(name, new FixListNode(arg1, arg2));

    return 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		_call : VSLLib,
		FixListNode : FixListNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD call
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:call METHODID:16 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-call

__BEGIN_METHOD_CODE__

VSLLib::call(const string& name, 
		      VSLNode *arg1, VSLNode *arg2, VSLNode *arg3)
{
    if(arg1 && arg2 && arg3)
	return _call(name, new FixListNode(arg1, arg2, arg3));

    return 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!read
		CALLS
		reset : _SYSTEM_OR_USER_,
		parse : VSLLib,
		flush : LiterateAgent,
		process : VSLLib



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 4
			CLASS VSLLib
			CLASSID 66
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 26
			LT 4
			METHOD read
			METHODID 32
			MMINUS 0
			OUT 2
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 2
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:4 CLASS:VSLLib CLASSID:66 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:26 LT:4 METHOD:read METHODID:32 MMINUS:0 OUT:2 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:2 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-read

__BEGIN_METHOD_CODE__

VSLLib::read(istream& s, unsigned optimizeMode)
{
    vsllib = this;

    vslstream = &s;
    vslfilename = _lib_name;

     
    vslnameSet.reset();
    pushback_ptr = pushback;
    parse();

    if(VSEFlags::verbose)
    {
	cout << _REMOVED_STR_;
	cout.flush();
    }

     
    process(optimizeMode);

    if(VSEFlags::verbose)
	cout << _REMOVED_STR_;

     
    return *this;
}

__END_METHOD_CODE__


	METHOD VSLLib!read
		CALLS
		flush : else,
		read : VSLLib



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 4
			DOTS 1
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 24
			LT 6
			METHOD read
			METHODID 31
			MMINUS 0
			OUT 3
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:4 DOTS:1 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:24 LT:6 METHOD:read METHODID:31 MMINUS:0 OUT:3 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-read

__BEGIN_METHOD_CODE__

VSLLib::read(const string& lib_name, unsigned optimizeMode)
{
    if(VSEFlags::verbose)
    {
	if(lib_name == _REMOVED_STR_)
	    cout << _REMOVED_STR_;
	else
	    cout << lib_name;
	cout << _REMOVED_STR_;
	cout.flush();
    }

    vslfilename = lib_name;

    switchreset();
    if(switchup(lib_name, 1 ) == 0)
    {
	 ;

	topstack = 0;
	read(*vslstream, optimizeMode);
    }

    return *this;
}

__END_METHOD_CODE__


	METHOD VSLLib!parse_echo
		CALLS
		echo : VSLLib



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 10
			METHOD parse_echo
			METHODID 41
			MMINUS 0
			OUT 5
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:10 METHOD:parse_echo METHODID:41 MMINUS:0 OUT:5 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 41-parse_echo

__BEGIN_METHOD_CODE__

VSLLib::parse_echo(const string& msg)
{
    ostrstream os;
    ostream& s = os;
    
    s << vslfilename << _REMOVED_STR_ << vsllinenumber << _REMOVED_STR_ << msg;
    echo(os);
}

__END_METHOD_CODE__


	METHOD VSLLib!parse_error
		CALLS
		parse_echo : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD parse_error
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:parse_error METHODID:42 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 42-parse_error

__BEGIN_METHOD_CODE__

VSLLib::parse_error(const string& errmsg)
{
    parse_echo(errmsg);
}

__END_METHOD_CODE__


	METHOD VSLLib!parse_warning
		CALLS
		parse_echo : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD parse_warning
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:parse_warning METHODID:43 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 43-parse_warning

__BEGIN_METHOD_CODE__

VSLLib::parse_warning(const string& errmsg)
{
    parse_echo(_REMOVED_STR_ + errmsg);
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/VSLRead.o.nu.met	  Methods Number  12
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/layout.o.nu.met ... 


	METHOD Layout!add_graph
		CALLS
		graphGet : Layout,
		graphNew : Layout



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD add_graph
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:add_graph METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-add_graph

__BEGIN_METHOD_CODE__

Layout::add_graph(char *g)
{
    GRAPH *graph;
    graph = graphGet(&tab,g);
    if(graph) {




	return;
    } else {
	graphNew(&tab,g);
    }
}

__END_METHOD_CODE__


	METHOD Layout!add_node
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		graphEnterNode : Layout,
		strlen : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 5
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 5
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 29
			LT 0
			METHOD add_node
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:5 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:5 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:29 LT:0 METHOD:add_node METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-add_node

__BEGIN_METHOD_CODE__

Layout::add_node(char *g, char *node)
{ 
    NODE *nd;
    GRAPH *graph;
    ID id;

    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }
    id.label = node;
     


    nd = graphGetNode(graph,&id,Regular);
    if(nd) {




	return ;
    }
     


    nd  = graphEnterNode(graph, &id, Regular);
    nd->attr.node.w = 10 * strlen(node);
    nd->attr.node.h = 30 ;
}

__END_METHOD_CODE__


	METHOD Layout!add_edge
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphInsertEdge : Layout



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 7
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 2
			EQTEST 1
			EXPRORCALL 22
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 34
			LT 0
			METHOD add_edge
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 18
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:7 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:2 EQTEST:1 EXPRORCALL:22 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:34 LT:0 METHOD:add_edge METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:18 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-add_edge

__BEGIN_METHOD_CODE__

Layout::add_edge(char *g, char *node1, char *node2)
{
    NODE *source;
    NODE *target;
    GRAPH *graph;
    ID id1;
    ID id2;

    id1.label = node1;
    id2.label = node2;

    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }
    source = graphGetNode(graph, &id1, Regular);
    if(!source) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,node1);
	exit(NOT_MEMBER);
    }
    target = graphGetNode(graph, &id2, Regular);
    if(!target) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,node2);
	exit(NOT_MEMBER);
    }
    if(source == target) {
	 


	source->loop = 1;
    } else {
	graphInsertEdge(graph, source,target);
    }
}

__END_METHOD_CODE__


	METHOD Layout!set_node_width
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 5
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 3
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 20
			LT 0
			METHOD set_node_width
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:5 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:3 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:20 LT:0 METHOD:set_node_width METHODID:3 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-set_node_width

__BEGIN_METHOD_CODE__

Layout::set_node_width(char *g, char *node, int width)
{
    NODE *nd;
    GRAPH *graph;
    ID id;

    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }
    id.label = node;
    nd = graphGetNode(graph, &id, Regular);
    if(!nd) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,
		 node, g);
	return ;
    }
    nd->attr.node.w = width;
}

__END_METHOD_CODE__


	METHOD Layout!set_node_height
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 4
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 3
			EQTEST 0
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 19
			LT 0
			METHOD set_node_height
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:4 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:3 EQTEST:0 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:19 LT:0 METHOD:set_node_height METHODID:4 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-set_node_height

__BEGIN_METHOD_CODE__

Layout::set_node_height(char *g, char *node, int height)
{
    NODE *nd;
    GRAPH *graph;
    ID id;

    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }
    id.label = node;
    nd = graphGetNode(graph, &id, Regular);
    if(!nd) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,
		 node, g);
	return ;
    }
    nd->attr.node.h = height;
}

__END_METHOD_CODE__


	METHOD Layout!set_node_position
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 5
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 1
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 21
			LT 0
			METHOD set_node_position
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:5 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:1 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:21 LT:0 METHOD:set_node_position METHODID:5 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-set_node_position

__BEGIN_METHOD_CODE__

Layout::set_node_position(char *g, char *node, int x, int y)
{
    NODE *nd;
    GRAPH *graph;
    ID id;

    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }
    id.label = node;
    nd = graphGetNode(graph, &id, Regular);
    if(!nd) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,
		 node, g);
	return ;
    }
    nd->oldx = x;
    nd->oldy = y;
}

__END_METHOD_CODE__


	METHOD Layout!add_edge_hint

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 2
			LT 0
			METHOD add_edge_hint
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:2 LT:0 METHOD:add_edge_hint METHODID:6 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-add_edge_hint

__BEGIN_METHOD_CODE__

Layout::add_edge_hint(char *, char *, char *, int, int)
{
}

__END_METHOD_CODE__


	METHOD Layout!remove_edge_hint

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 2
			LT 0
			METHOD remove_edge_hint
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:2 LT:0 METHOD:remove_edge_hint METHODID:7 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-remove_edge_hint

__BEGIN_METHOD_CODE__

Layout::remove_edge_hint(char *, char *, char *, int, int)
{
}

__END_METHOD_CODE__


	METHOD Layout!remove_edge
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphFindEdgeAtSource : Layout,
		fprintf : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		graphFindEdgeAtTarget : Layout,
		fprintf : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		levelsRemoveNode : Layout,
		graphRemoveNode : Layout,
		listRemoveEdge : Layout,
		listRemoveEdge : Layout



		METRICS
			ARRAYOP 0
			ASS 15
			AVVARLEN 0
			CALLEDN 16
			CLASS Layout
			CLASSID 94
			CYCLO 9
			DOTS 15
			EQTEST 3
			EXPRORCALL 46
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 83
			LT 0
			METHOD remove_edge
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 38
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:15 AVVARLEN:0 CALLEDN:16 CLASS:Layout CLASSID:94 CYCLO:9 DOTS:15 EQTEST:3 EXPRORCALL:46 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:83 LT:0 METHOD:remove_edge METHODID:8 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:38 TERNINSTR:1 USEDVARS:0 
		;


#ID 8-remove_edge

__BEGIN_METHOD_CODE__

Layout::remove_edge(char *g, char *node1, char *node2)
{
    GRAPH *graph;
    NODE *source;
    NODE *target;
    NODE *hint;
    NODE *tmp;
    EDGE *toTarget;
    EDGE *toSource;
    ID id1, id2, tmpid;
    int direction;		 

    id1.label = node1;
    id2.label = node2;

    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }

    source = graphGetNode(graph, &id1, Regular);
    if(!source) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,node1);
	return;
    }
    target = graphGetNode(graph, &id2, Regular);
    if(!target) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,node2);
	return;
    }

     



    toTarget = graphFindEdgeAtSource(source,target);
    if(!toTarget) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_, node1, node2);
	return ;
    }
    toSource = graphFindEdgeAtTarget(source,target);
    if(!toSource) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_, node1, node2);
	return;
    }

     







    hint = toTarget->node;
    if(hint->type == Hint && hint->attr.hint.up == source) {
	direction = 1 ;
    } else {
	direction = 0 ;
    }
    while(hint != target) {
	if(hint->level != NOLEVEL) {
	     


	    levelsRemoveNode(graph, hint, hint->level);
	}
	tmp = ( direction == 1  ? 
		hint->attr.hint.down : hint->attr.hint.up );
	tmpid.id = hint->attr.hint.id;
	graphRemoveNode(graph, &tmpid, Hint);
	hint = tmp;
    }

     


	
    listRemoveEdge(&source->attr.node.down, toTarget);
    listRemoveEdge(&target->attr.node.up, toSource);	
}

__END_METHOD_CODE__


	METHOD Layout!remove_node
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphGetNode : Layout,
		fprintf : _SYSTEM_OR_USER_,
		levelsRemoveNode : Layout,
		remove_edge : Layout,
		remove_edge : Layout,
		graphRemoveNode : Layout



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 8
			CLASS Layout
			CLASSID 94
			CYCLO 6
			DOTS 11
			EQTEST 0
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 44
			LT 0
			METHOD remove_node
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:8 CLASS:Layout CLASSID:94 CYCLO:6 DOTS:11 EQTEST:0 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:44 LT:0 METHOD:remove_node METHODID:9 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-remove_node

__BEGIN_METHOD_CODE__

Layout::remove_node(char *g, char *label)
{
    GRAPH *graph;
    NODE *node;
    EDGE *edge;
    ID id;

    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }
    id.label = label;
    node = graphGetNode(graph, &id, Regular);
    if(!node ) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_, label);
	exit(NOT_MEMBER);
    }
    if(node->level != NOLEVEL) {
	levelsRemoveNode(graph, node, node->level);
    }
     



    edge = node->attr.node.down.head ;
    while(edge) {
	remove_edge(g,label, edge->target->attr.node.label);
	edge = edge->next;
    }
	
     



    edge = node->attr.node.up.head ;
    while(edge) {
	remove_edge(g,edge->target->attr.node.label, label);
	edge = edge->next;
    }
     


    graphRemoveNode(graph, &id, Regular);
}

__END_METHOD_CODE__


	METHOD Layout!remove_graph
		CALLS
		graphRemove : Layout



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD remove_graph
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:remove_graph METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-remove_graph

__BEGIN_METHOD_CODE__

Layout::remove_graph(char *g)
{
    graphRemove(&tab,g);
}

__END_METHOD_CODE__


	METHOD Layout!layout
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		inc_layout : Layout,
		new_layout : Layout,
		dddOutput : Layout



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 17
			LT 0
			METHOD layout
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:17 LT:0 METHOD:layout METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-layout

__BEGIN_METHOD_CODE__

Layout::layout(char *g)
{
    GRAPH *graph;
	
    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }

    if(graph->layouted) {
	inc_layout(graph);
    } else {
	new_layout(graph);
    }
    dddOutput(graph);

}

__END_METHOD_CODE__


	METHOD Layout!dddDebug
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		inc_layout : Layout,
		new_layout : Layout,
		debugGraphXFig : Layout



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 16
			LT 0
			METHOD dddDebug
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:16 LT:0 METHOD:dddDebug METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-dddDebug

__BEGIN_METHOD_CODE__

Layout::dddDebug(char *g)
{
    GRAPH *graph;
	
    graph = graphGet(&tab,g);
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,g);
	return ;
    }

    if(graph->layouted) {
	inc_layout(graph);
    } else {
	new_layout(graph);
    }
    debugGraphXFig(graph);
}

__END_METHOD_CODE__


	METHOD Layout!inc_layout
		CALLS
		levelsEnterNodes : Layout,
		sortInsertHints : Layout,
		sortGraphUpperBary : Layout,
		sortGraphLowerBary : Layout,
		sortInitX : Layout,
		sortGraphDownX : Layout,
		sortGraphUpX : Layout,
		sortGraphUpX : Layout,
		sortGraphUpX : Layout,
		sortGraphDownX : Layout,
		sortGraphUpX : Layout,
		sortGraphVertical : Layout



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 12
			CLASS Layout
			CLASSID 94
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 35
			LT 2
			METHOD inc_layout
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:12 CLASS:Layout CLASSID:94 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:35 LT:2 METHOD:inc_layout METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-inc_layout

__BEGIN_METHOD_CODE__

Layout::inc_layout(GRAPH *graph)
{
    int i;

    levelsEnterNodes(graph,graph->pullup);
    sortInsertHints(graph);

    sortGraphUpperBary(graph);
    sortGraphLowerBary(graph);
    sortInitX(graph);

     



    if(graph->reverseflag) {
	for(i=0;i < graph->xiterations/2;i++) {
	    sortGraphDownX(graph);
	    sortGraphUpX(graph);
	}
	if(graph->xiterations % 2) {
	    sortGraphUpX(graph);
	}
    } else {
	
	for(i=0;i<graph->xiterations/2;i++) {
	    sortGraphUpX(graph);
	    sortGraphDownX(graph);
	}
	if(graph->xiterations % 2) {
	    sortGraphUpX(graph);
	}
    }

    sortGraphVertical(graph);
}

__END_METHOD_CODE__


	METHOD Layout!new_layout
		CALLS
		levelsEnterNodes : Layout,
		sortInsertHints : Layout,
		sortGraphLowerBary : Layout,
		sortGraphUpperBary : Layout,
		sortGraphLowerBary : Layout,
		sortGraphUpperBary : Layout,
		sortGraphLowerBary : Layout,
		sortInitX : Layout,
		sortGraphDownX : Layout,
		sortGraphUpX : Layout,
		sortGraphDownX : Layout,
		sortGraphUpperBary : Layout,
		sortGraphLowerBary : Layout,
		sortGraphUpperBary : Layout,
		sortGraphLowerBary : Layout,
		sortGraphUpperBary : Layout,
		sortInitX : Layout,
		sortGraphUpX : Layout,
		sortGraphDownX : Layout,
		sortGraphUpX : Layout,
		sortGraphVertical : Layout



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 21
			CLASS Layout
			CLASSID 94
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 28
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 54
			LT 2
			METHOD new_layout
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 27
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:21 CLASS:Layout CLASSID:94 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:28 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:54 LT:2 METHOD:new_layout METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:27 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-new_layout

__BEGIN_METHOD_CODE__

Layout::new_layout(GRAPH *graph)
{
    int i;

    graph->layouted = 1 ;

    levelsEnterNodes(graph,graph->pullup);
    sortInsertHints(graph);

     



    if(graph->reverseflag) {

	sortGraphLowerBary(graph);
	sortGraphUpperBary(graph);
	sortGraphLowerBary(graph);	
	sortGraphUpperBary(graph);
	if(graph->xiterations % 2) {
	    sortGraphLowerBary(graph);
	}

	sortInitX(graph);


	for(i=0;i < graph->xiterations/2;i++) {
	    sortGraphDownX(graph);
	    sortGraphUpX(graph);
	}
	if(graph->xiterations % 2) {
	    sortGraphDownX(graph);
	}
    } else {
	sortGraphUpperBary(graph);
	sortGraphLowerBary(graph);
	sortGraphUpperBary(graph);
	sortGraphLowerBary(graph);	
	if(graph->xiterations % 2) {
	    sortGraphUpperBary(graph);
	}

	sortInitX(graph);

	for(i=0;i<graph->xiterations/2;i++) {
	    sortGraphUpX(graph);
	    sortGraphDownX(graph);
	}
	if(graph->xiterations % 2) {
	    sortGraphUpX(graph);
	}
    }

    sortGraphVertical(graph);
}

__END_METHOD_CODE__


	METHOD Layout!dddOutput
		CALLS
		dddNodeOut : Layout



		METRICS
			ARRAYOP 1
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 12
			LT 1
			METHOD dddOutput
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:12 LT:1 METHOD:dddOutput METHODID:18 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-dddOutput

__BEGIN_METHOD_CODE__

Layout::dddOutput(GRAPH *graph)
{
    int i;
    NODE *node;
    
    for(i = 0; i < 809 ; i++) {
	node = graph->hashtab[_ARGS_];
	while(node) {
	    dddNodeOut(graph->label, node);
	    node = node->hashnext;
	}
    }
}

__END_METHOD_CODE__


	METHOD Layout!dddNodeOut
		CALLS
		node_callback : _SYSTEM_OR_USER_,
		hint_callback : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 10
			EQTEST 3
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 19
			LE 0
			LOC 19
			LT 0
			METHOD dddNodeOut
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:10 EQTEST:3 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:19 LE:0 LOC:19 LT:0 METHOD:dddNodeOut METHODID:19 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-dddNodeOut

__BEGIN_METHOD_CODE__

Layout::dddNodeOut(char *, NODE *node)
{
    if(node->x == node->oldx && node->y == node->oldy) {
	return;	 
    }

    if(node->type == Regular) {
	node_callback(node->attr.node.label,
			     node->x,
			     node->y);
    } else {
	hint_callback(node->attr.hint.source->attr.node.label,
			     node->attr.hint.target->attr.node.label,
			     node->x,
			     node->y);
    }
    node->oldx = node->x;
    node->oldy = node->y;
    node->layouted = 1 ;
}

__END_METHOD_CODE__


	METHOD Layout!debugNode

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 10
			DOTS 42
			EQTEST 5
			EXPRORCALL 28
			GE 0
			GT 0
			IN 0
			INDR 36
			LE 0
			LOC 55
			LT 0
			METHOD debugNode
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 24
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:10 DOTS:42 EQTEST:5 EXPRORCALL:28 GE:0 GT:0 IN:0 INDR:36 LE:0 LOC:55 LT:0 METHOD:debugNode METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:24 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-debugNode

__BEGIN_METHOD_CODE__

Layout::debugNode(NODE *node)
{
    EDGE *tmp;

    printf(_REMOVED_STR_,node->level, node->center,
	    node->x);
    if(node->type == Regular) {
	printf(_REMOVED_STR_,node->attr.node.label);
	printf(_REMOVED_STR_);
	tmp = node->attr.node.down.head ;
	while(tmp) {
	    if(tmp->node->type == Regular) {
		printf(_REMOVED_STR_,tmp->node->attr.node.label);
	    } else {
		printf(_REMOVED_STR_,tmp->node->attr.hint.id);
	    }
	    tmp=tmp->next;
	}
	printf(_REMOVED_STR_);
	printf(_REMOVED_STR_);
	tmp = node->attr.node.up.head ;
	while(tmp) {
	    if(tmp->node->type == Regular) {
		printf(_REMOVED_STR_,tmp->node->attr.node.label);
	    } else {
		printf(_REMOVED_STR_,tmp->node->attr.hint.id);
	    }
	    tmp=tmp->next;
	}
	printf(_REMOVED_STR_);
    } else {
	printf(_REMOVED_STR_,node->attr.hint.id);
	printf(_REMOVED_STR_);
	if(node->attr.hint.down) {
	    if(node->attr.hint.down->type == Regular) {
		printf(_REMOVED_STR_,node->attr.hint.down
			->attr.node.label);
	    } else {
		printf(_REMOVED_STR_,node->attr.hint.down
			->attr.hint.id);
	    }
	}
	printf(_REMOVED_STR_);
	printf(_REMOVED_STR_);
	if(node->attr.hint.up) {
	    if(node->attr.hint.up->type == Regular) {
		printf(_REMOVED_STR_,node->attr.hint.up
			->attr.node.label);
	    } else {
		printf(_REMOVED_STR_,node->attr.hint.up
			->attr.hint.id);
	    }
	}
	printf(_REMOVED_STR_);
    }
}

__END_METHOD_CODE__


	METHOD Layout!debugLevel
		CALLS
		debugNode : Layout



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 10
			LT 0
			METHOD debugLevel
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:10 LT:0 METHOD:debugLevel METHODID:21 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-debugLevel

__BEGIN_METHOD_CODE__

Layout::debugLevel(GRAPH *graph, int n)
{
    NODE **level = graph->level+n;
    NODE *node;

    node = *level ;
    while(node) {
	debugNode(node);
	node = node->right;
    }
}

__END_METHOD_CODE__


	METHOD Layout!debugAllLevel
		CALLS
		debugLevel : Layout



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 1
			METHOD debugAllLevel
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:8 LT:1 METHOD:debugAllLevel METHODID:22 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-debugAllLevel

__BEGIN_METHOD_CODE__

Layout::debugAllLevel(GRAPH *graph)
{
    int i;

    for( i = 0 ; i < graph->levels; i++) {
	printf(_REMOVED_STR_,i);
	debugLevel(graph,i);
    }
}

__END_METHOD_CODE__


	METHOD Layout!debugAllNodes
		CALLS
		debugNode : Layout



		METRICS
			ARRAYOP 2
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 14
			LT 1
			METHOD debugAllNodes
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:14 LT:1 METHOD:debugAllNodes METHODID:23 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-debugAllNodes

__BEGIN_METHOD_CODE__

Layout::debugAllNodes(GRAPH *graph)
{
    int i;
    NODE *node;

    for(i=0;i< 809 ;i++) {
	if(graph->hashtab[_ARGS_] ) {
	    node = graph->hashtab[_ARGS_] ;
	    while(node) {
		debugNode(node);
		node = node->hashnext;
	    }
	}
    }
}

__END_METHOD_CODE__


	METHOD Layout!debugNodeXFig
		CALLS
		debugEdgeXFig : Layout,
		debugEdgeXFig : Layout,
		debugEdgeXFig : Layout,
		debugEdgeXFig : Layout,
		debugEdgeXFig : Layout,
		debugEdgeXFig : Layout,
		debugEdgeXFig : Layout,
		debugEdgeXFig : Layout



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 8
			CLASS Layout
			CLASSID 94
			CYCLO 10
			DOTS 33
			EQTEST 8
			EXPRORCALL 27
			GE 0
			GT 0
			IN 0
			INDR 38
			LE 0
			LOC 64
			LT 0
			METHOD debugNodeXFig
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 25
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:8 CLASS:Layout CLASSID:94 CYCLO:10 DOTS:33 EQTEST:8 EXPRORCALL:27 GE:0 GT:0 IN:0 INDR:38 LE:0 LOC:64 LT:0 METHOD:debugNodeXFig METHODID:24 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:25 TERNINSTR:1 USEDVARS:0 
		;


#ID 24-debugNodeXFig

__BEGIN_METHOD_CODE__

Layout::debugNodeXFig(NODE *nd)
{
    EDGE *edge;
    int arrow;
    int w,h;

    if(nd->type == Regular) {

	w = nd->attr.node.w/2;
	h = nd->attr.node.h/2;

	printf( _REMOVED_STR_  );
	printf(_REMOVED_STR_,nd->x - w , nd->y - h);
	printf(_REMOVED_STR_,nd->x + w , nd->y - h);
	printf(_REMOVED_STR_,nd->x + w , nd->y + h);
	printf(_REMOVED_STR_,nd->x - w , nd->y + h);
	printf(_REMOVED_STR_,nd->x - w , nd->y - h);
	printf(_REMOVED_STR_);
	printf( _REMOVED_STR_  );
	printf(_REMOVED_STR_, nd->x, nd->y, nd->attr.node.label);

	 



	edge = nd->attr.node.down.head;
	while(edge) {
	    arrow = ( edge->arrow == Here ? 0  : 1 );
	    if(arrow == 0 ) {
		debugEdgeXFig(nd, edge->node, 0 ) ;
	    } else {
		if(edge->node->type == Regular) {
		    debugEdgeXFig(nd, edge->node, 1 );
		} else {
		    debugEdgeXFig(nd, edge->node,3 );
		}
	    }
	    edge = edge->next;
	}

    } else if(nd->attr.hint.down) {
	 


	if(nd->attr.hint.down->type == Regular) {
	    if(nd->attr.hint.target == nd->attr.hint.down) {
		debugEdgeXFig(nd, nd->attr.hint.down, 1 );
	    } else {
		debugEdgeXFig(nd, nd->attr.hint.down,3 );
	    }
	} else {
	}

	if(nd->attr.hint.down->type == Hint) {
	    debugEdgeXFig(nd, nd->attr.hint.down, 3 );
	} else {
	    if(nd->attr.hint.target == nd->attr.hint.down) {
		debugEdgeXFig(nd, nd->attr.hint.down, 1 );
	    } else {
		debugEdgeXFig(nd, nd->attr.hint.down,3 );
	    }
	}
			
    }
}

__END_METHOD_CODE__


	METHOD Layout!debugEdgeXFig

		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 8
			DOTS 4
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 27
			LT 0
			METHOD debugEdgeXFig
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:8 DOTS:4 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:27 LT:0 METHOD:debugEdgeXFig METHODID:25 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-debugEdgeXFig

__BEGIN_METHOD_CODE__

Layout::debugEdgeXFig(NODE *source, NODE *target, int arrow)
{
    int x1,y1,x2,y2;

    x1 = source->x ;
    y1 = source->y ;
    if(source->type == Regular ) {
	y1 += source->attr.node.h/2;
    }
    x2 = target->x ;
    y2 = target->y ;
    if(target->type == Regular ) {
	y2 -= target->attr.node.h/2;
    }
    switch(arrow) {
    case 1 :
	printf(_REMOVED_STR_ );
	break;
    case 0 :
	printf(_REMOVED_STR_ );
	break;
    case 3 :
    default:
	printf(_REMOVED_STR_ );
	break;
    }
    printf(_REMOVED_STR_,x1,y1,x2,y2);
}

__END_METHOD_CODE__


	METHOD Layout!debugGraphXFig
		CALLS
		debugNodeXFig : Layout



		METRICS
			ARRAYOP 1
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 14
			LT 1
			METHOD debugGraphXFig
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:14 LT:1 METHOD:debugGraphXFig METHODID:26 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-debugGraphXFig

__BEGIN_METHOD_CODE__

Layout::debugGraphXFig(GRAPH *graph)
{
    NODE *node;
    int i;

    printf(_REMOVED_STR_ );
    for( i = 0 ; i < 809 ; i++) {
	node = graph->hashtab[_ARGS_];
	while(node) {
	    debugNodeXFig(node);
	    node = node->hashnext;
	}
    }
	
}

__END_METHOD_CODE__


	METHOD Layout!listInit

		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 5
			LT 0
			METHOD listInit
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:5 LT:0 METHOD:listInit METHODID:27 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-listInit

__BEGIN_METHOD_CODE__

Layout::listInit(EDGELIST *list)
{
    list->head = (EDGE*) __null ;
    list->tail = (EDGE*) __null ;
    list->length = 0;
}

__END_METHOD_CODE__


	METHOD Layout!listInsertEdge
		CALLS
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 3
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 36
			LT 0
			METHOD listInsertEdge
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:3 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:36 LT:0 METHOD:listInsertEdge METHODID:28 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-listInsertEdge

__BEGIN_METHOD_CODE__

Layout::listInsertEdge(EDGELIST *list, NODE *node)
{
    EDGE *edge;
    EDGE *tail;

     


    edge = (EDGE*) malloc(sizeof(EDGE));
    if(!edge) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(MEMORY_ERROR);
    }
     


    edge->next = (EDGE*) __null ;
    edge->prev = (EDGE*) __null ;

    tail = list->head;
    list->head = edge;
    edge->next = tail;
    if(!tail) {
	list->tail = edge;
    } else {
	tail->prev = edge;
    }
	
     


    edge->node = node;

    list->length++;

    return edge;
}

__END_METHOD_CODE__


	METHOD Layout!listRemoveEdge
		CALLS
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 21
			LE 0
			LOC 28
			LT 0
			METHOD listRemoveEdge
			METHODID 29
			MMINUS 1
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:21 LE:0 LOC:28 LT:0 METHOD:listRemoveEdge METHODID:29 MMINUS:1 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-listRemoveEdge

__BEGIN_METHOD_CODE__

Layout::listRemoveEdge(EDGELIST *list, EDGE *edge)
{
    if(edge->prev && edge->next) {
	 
	edge->next->prev = edge->prev ;
	edge->prev->next = edge->next ;
    } else {
	if(!edge->next) {
	     
	    list->tail = edge->prev;
	    if(edge->prev) {
		edge->prev->next = (EDGE*) __null ;
	    }
	}
	if(!edge->prev) {
	     
	    list->head = edge->next ;
	    if(edge->next) {
		edge->next->prev = (EDGE*) __null ;
	    }
	}
    }
    free((char*)edge);
     


    list->length-- ;

}

__END_METHOD_CODE__


	METHOD Layout!listFindNode
		CALLS
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 14
			LT 0
			METHOD listFindNode
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:14 LT:0 METHOD:listFindNode METHODID:30 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-listFindNode

__BEGIN_METHOD_CODE__

Layout::listFindNode(EDGELIST *list, NODE *node)
{
    EDGE *edge;
	
    edge = list->head;
    while(edge && edge->node != node) {
	edge = edge->next;
    }
    if(!edge) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(NOT_MEMBER);
    }
	
    return edge;
}

__END_METHOD_CODE__


	METHOD Layout!listFindTarget
		CALLS
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 14
			LT 0
			METHOD listFindTarget
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:14 LT:0 METHOD:listFindTarget METHODID:31 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-listFindTarget

__BEGIN_METHOD_CODE__

Layout::listFindTarget(EDGELIST *list, NODE *target)
{
    EDGE *edge;
	
    edge = list->head;
    while(edge && edge->target != target) {
	edge = edge->next;
    }
    if(!edge) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	edge = (EDGE*) __null ;
    }
	
    return edge;
}

__END_METHOD_CODE__


	METHOD Layout!listRemove
		CALLS
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 13
			LT 0
			METHOD listRemove
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:13 LT:0 METHOD:listRemove METHODID:32 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-listRemove

__BEGIN_METHOD_CODE__

Layout::listRemove(EDGELIST *list)
{
    EDGE *edge;
    EDGE *tmp;
	
    edge = list->head;
    while(edge) {
	tmp = edge->next;
	free((char*) edge);
	edge = tmp;
    }
    list->head = (EDGE*) __null ;
    list->tail = (EDGE*) __null ;
}

__END_METHOD_CODE__


	METHOD Layout!nodeInit
		CALLS
		strlen : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		strcpy : _SYSTEM_OR_USER_,
		listInit : Layout,
		listInit : Layout



		METRICS
			ARRAYOP 0
			ASS 23
			AVVARLEN 0
			CALLEDN 6
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 24
			EQTEST 1
			EXPRORCALL 22
			GE 0
			GT 0
			IN 0
			INDR 30
			LE 0
			LOC 41
			LT 0
			METHOD nodeInit
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 28
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:23 AVVARLEN:0 CALLEDN:6 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:24 EQTEST:1 EXPRORCALL:22 GE:0 GT:0 IN:0 INDR:30 LE:0 LOC:41 LT:0 METHOD:nodeInit METHODID:33 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:28 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-nodeInit

__BEGIN_METHOD_CODE__

Layout::nodeInit(NODE* node, ID *id , NODETYPE type)
{
    node->x = 0;
    node->y = 0;
    node->oldx = NOPOSITION;
    node->oldy = NOPOSITION;
    node->layouted = 0 ;
    node->level = NOLEVEL;
    node->center = 0;
    node->index = 0 ;
    node->loop = 0;
    node->mark = (NODE*) __null ;
	
    node->left = (NODE*) __null ;
    node->right = (NODE*) __null ;

    node->hashnext = (NODE*) __null ;
    node->hashprev = (NODE*) __null ;
	
    node->type = type;

    if( type == Regular ) {
	node->attr.node.label = (char*) malloc(strlen(id->label)+5);
	if(!node->attr.node.label) {
	    fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	    exit(MEMORY_ERROR);
	}
	strcpy(node->attr.node.label, id->label);

	node->attr.node.w = 0;
	node->attr.node.h = 0;
	listInit(&node->attr.node.up);
	listInit(&node->attr.node.down);
    } else {
	node->attr.hint.id = id->id ;
	node->attr.hint.up = (NODE*) __null ;
	node->attr.hint.down = (NODE*) __null ;
	node->attr.hint.source = (NODE*) __null ;
	node->attr.hint.target = (NODE*) __null ;
    }
		
}

__END_METHOD_CODE__


	METHOD Layout!nodeRemove
		CALLS
		free : MemCheck,
		listRemove : Layout,
		listRemove : Layout,
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 6
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 9
			LT 0
			METHOD nodeRemove
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:6 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:9 LT:0 METHOD:nodeRemove METHODID:34 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-nodeRemove

__BEGIN_METHOD_CODE__

Layout::nodeRemove(NODE *node)
{
    if(node->type == Regular) {
	free(node->attr.node.label);
	listRemove(&node->attr.node.up);
	listRemove(&node->attr.node.down);
    }
	
    free((char*)node);
}

__END_METHOD_CODE__


	METHOD Layout!graphInit
		CALLS
		strlen : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		strcpy : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 13
			AVVARLEN 0
			CALLEDN 4
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 14
			LE 0
			LOC 26
			LT 1
			METHOD graphInit
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:13 AVVARLEN:0 CALLEDN:4 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:14 LE:0 LOC:26 LT:1 METHOD:graphInit METHODID:35 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-graphInit

__BEGIN_METHOD_CODE__

Layout::graphInit(GRAPH *graph, char *label)
{
    int i;
	
    graph->label = (char *)malloc(strlen(label)+1);
    if(!graph->label) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
    }
    strcpy(graph->label, label);
    graph->hashnext = (GRAPH*) __null ;
    graph->hashprev = (GRAPH*) __null ;

    graph->minxdist    = MINXDIST ;
    graph->minydist    = MINYDIST;
    graph->xiterations = XITERATIONS;
    graph->reverseflag = REVERSE ;
    graph->pullup      = PULLUP;

    graph->levels = 0;
    graph->level = (NODE**) __null ;

    graph->layouted = 0  ; 	 

    for( i = 0; i < 809 ; i++) {
	graph->hashtab[_ARGS_] = (NODE*) __null ;
    }
}

__END_METHOD_CODE__


	METHOD Layout!graphEnterNode
		CALLS
		fprintf : _SYSTEM_OR_USER_,
		nodeInit : Layout,
		graphHashStr : Layout



		METRICS
			ARRAYOP 2
			ASS 8
			AVVARLEN 0
			CALLEDN 5
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 4
			EQTEST 1
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 32
			LT 0
			METHOD graphEnterNode
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:8 AVVARLEN:0 CALLEDN:5 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:4 EQTEST:1 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:32 LT:0 METHOD:graphEnterNode METHODID:36 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-graphEnterNode

__BEGIN_METHOD_CODE__

Layout::graphEnterNode(GRAPH *graph, ID *id, NODETYPE type)
{
    NODE *node;
    NODE *tail;
    int pos;

    node = (NODE*) malloc(sizeof(NODE)) ;
    if(!node) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  , _REMOVED_STR_);
	exit(MEMORY_ERROR);
    }
    nodeInit(node,id,type);

     



	
    if(type == Regular) {
	pos = graphHashStr(node->attr.node.label, 809 );
    } else {
	pos =  node->attr.hint.id % 809 ;
    }
    tail = graph->hashtab[_ARGS_] ;
    graph->hashtab[_ARGS_] = node;
    node->hashnext = tail ;
    node->hashprev = (NODE*) __null ;
    if(node->hashnext) {
	node->hashnext->hashprev = node;
    }
	
    return node;
}

__END_METHOD_CODE__


	METHOD Layout!graphGetNode
		CALLS
		graphHashStr : Layout,




		METRICS
			ARRAYOP 2
			ASS 12
			AVVARLEN 0
			CALLEDN 2
			CLASS Layout
			CLASSID 94
			CYCLO 6
			DOTS 4
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 12
			LE 0
			LOC 47
			LT 0
			METHOD graphGetNode
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:12 AVVARLEN:0 CALLEDN:2 CLASS:Layout CLASSID:94 CYCLO:6 DOTS:4 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:12 LE:0 LOC:47 LT:0 METHOD:graphGetNode METHODID:37 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-graphGetNode

__BEGIN_METHOD_CODE__

Layout::graphGetNode(GRAPH *graph, ID *id, NODETYPE type)
{
    int pos;
    int found = 0  ;
    NODE *node;

     


    if(type == Regular) {
	pos = graphHashStr(id->label, 809 );
	node = graph->hashtab[_ARGS_];

	 


	while(node && !found) {
	    if(node->type != Regular 
		||  strcmp(node->attr.node.label,id->label)) {
		node = node->hashnext;
	    } else {
		found = 1 ;
	    }
	} 

    } else {
	pos =  id->id % 809 ;
	node = graph->hashtab[_ARGS_];

	 



	while(node && !found) {
	    if(node->type != Hint 
		||  node->attr.hint.id != id->id) {
		node = node->hashnext;
	    } else {
		found = 1 ;
	    }
	} 
    }

     


    return node;
}

__END_METHOD_CODE__


	METHOD Layout!graphRemoveNode
		CALLS
		graphHashStr : Layout,
		fprintf : _SYSTEM_OR_USER_,
		nodeRemove : Layout



		METRICS
			ARRAYOP 3
			ASS 12
			AVVARLEN 0
			CALLEDN 4
			CLASS Layout
			CLASSID 94
			CYCLO 9
			DOTS 4
			EQTEST 1
			EXPRORCALL 18
			GE 0
			GT 0
			IN 0
			INDR 28
			LE 0
			LOC 59
			LT 0
			METHOD graphRemoveNode
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:12 AVVARLEN:0 CALLEDN:4 CLASS:Layout CLASSID:94 CYCLO:9 DOTS:4 EQTEST:1 EXPRORCALL:18 GE:0 GT:0 IN:0 INDR:28 LE:0 LOC:59 LT:0 METHOD:graphRemoveNode METHODID:38 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-graphRemoveNode

__BEGIN_METHOD_CODE__

Layout::graphRemoveNode(GRAPH *graph, ID *id, NODETYPE type)
{
    int pos;
    NODE *node;

     


    if(type == Regular) {
	pos = graphHashStr(id->label, 809 );
	node = graph->hashtab[_ARGS_];

	 


	while(node && strcmp(node->attr.node.label,id->label)) {
	    node = node->hashnext;
	}

    } else {
	pos =  id->id % 809 ;
	node = graph->hashtab[_ARGS_];

	 


	while(node && node->attr.hint.id != id->id) {
	    node = node->hashnext;
	}
    }

     



    if(!node) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(NOT_MEMBER);
    }

     



    if(node->hashprev && node->hashprev) {
	node->hashprev->hashnext = node->hashnext;
	node->hashnext->hashprev = node->hashprev;
    } else {
	if(!node->hashprev) {
	    graph->hashtab[_ARGS_] = node->hashnext;
	    if(node->hashnext) {
		node->hashnext->hashprev = (NODE*) __null ;
	    }
	}
	if(!node->hashnext && node->hashprev) {
	    node->hashprev->hashnext = (NODE*) __null ;
	}
    }
    nodeRemove(node);
}

__END_METHOD_CODE__


	METHOD Layout!graphCreateLevels
		CALLS
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 3
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 20
			LT 1
			METHOD graphCreateLevels
			METHODID 39
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:3 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:20 LT:1 METHOD:graphCreateLevels METHODID:39 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 39-graphCreateLevels

__BEGIN_METHOD_CODE__

Layout::graphCreateLevels(GRAPH *graph, int n)
{
    NODE **nodeptr;
    int i;

    graph->levels = n;
    graph->level = (NODE **) malloc(sizeof(NODE*) * n);
    if(!graph->level) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(MEMORY_ERROR);
    }
	
     



    nodeptr = graph->level ;
    for( i = 0 ; i < n ; i++ ) {
	*(nodeptr++) = (NODE*) __null ;
    }
}

__END_METHOD_CODE__


	METHOD Layout!graphRemoveLevels
		CALLS
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 5
			LT 0
			METHOD graphRemoveLevels
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:5 LT:0 METHOD:graphRemoveLevels METHODID:40 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-graphRemoveLevels

__BEGIN_METHOD_CODE__

Layout::graphRemoveLevels(GRAPH *graph)
{
    free( (char*) graph->level);
    graph->level = (NODE**) __null ;
    graph->levels = 0;
}

__END_METHOD_CODE__


	METHOD Layout!graphAddLevels
		CALLS
		fprintf : _SYSTEM_OR_USER_,
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 4
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 18
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 32
			LT 2
			METHOD graphAddLevels
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:4 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:18 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:32 LT:2 METHOD:graphAddLevels METHODID:41 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 41-graphAddLevels

__BEGIN_METHOD_CODE__

Layout::graphAddLevels(GRAPH *graph, int n)
{
    NODE **newtab;
    int i;
	

     


    newtab = (NODE**) malloc(sizeof(NODE*) * (graph->levels + n));
    if(!newtab) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(MEMORY_ERROR);
    }
     


    for(i=0 ; i < graph->levels; i++) {
	*(newtab+i) = *(graph->level);
    }
     


    for(i=graph->levels; i < graph->levels+n; i++) {
	*(newtab+i) = (NODE*) __null ;
    }
     


    graph->levels += n;
    free((char*) graph->level);
    graph->level = newtab;
}

__END_METHOD_CODE__


	METHOD Layout!graphInsertEdge
		CALLS
		fprintf : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		graphFindEdgeAtSource : Layout,
		fprintf : _SYSTEM_OR_USER_,
		listInsertEdge : Layout,
		listInsertEdge : Layout



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 6
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 4
			EQTEST 0
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 30
			LT 0
			METHOD graphInsertEdge
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:6 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:4 EQTEST:0 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:30 LT:0 METHOD:graphInsertEdge METHODID:42 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:0 
		;


#ID 42-graphInsertEdge

__BEGIN_METHOD_CODE__

Layout::graphInsertEdge(GRAPH *, NODE *source, NODE *target)
{
    EDGE *from;
    EDGE *to;

    if(source->type != Regular) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(NODE_TYPE);
    }
    if(target->type != Regular) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(NODE_TYPE);
    }
	
    to = graphFindEdgeAtSource(source,target) ;
    if(to) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	return;
    }

    from = listInsertEdge(&source->attr.node.down, target);
    from->arrow = Other;
    from->target = target;
    from->node = target;

    to = listInsertEdge(&target->attr.node.up, source);
    to->arrow = Here;
    to->target = source;
    to->node = source;

}

__END_METHOD_CODE__


	METHOD Layout!graphInvertEdge
		CALLS
		fprintf : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		listFindTarget : Layout,
		listFindTarget : Layout,
		fprintf : _SYSTEM_OR_USER_,
		listRemoveEdge : Layout,
		listRemoveEdge : Layout,
		listInsertEdge : Layout,
		listInsertEdge : Layout



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 9
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 16
			EQTEST 1
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 15
			LE 0
			LOC 34
			LT 0
			METHOD graphInvertEdge
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 18
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:9 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:16 EQTEST:1 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:15 LE:0 LOC:34 LT:0 METHOD:graphInvertEdge METHODID:43 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:18 TERNINSTR:1 USEDVARS:0 
		;


#ID 43-graphInvertEdge

__BEGIN_METHOD_CODE__

Layout::graphInvertEdge(NODE *source, NODE *target)
{
    EDGE *to, *from;
    EDGEARROW srcarrow;


    if(source->type != Regular || target->type != Regular) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(INTERNAL);
    }
    fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_, 
	     source->attr.node.label, target->attr.node.label);
    to = listFindTarget(&source->attr.node.down,target);
    from = listFindTarget(&target->attr.node.up,source);
    if(!to || !from) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(NO_EDGE);
    }
    srcarrow = to->arrow;

     


    listRemoveEdge(&source->attr.node.down, to);
    listRemoveEdge(&target->attr.node.up,from);
     


    to = listInsertEdge(&source->attr.node.up, target);
    to->target = target;
    to->arrow = srcarrow;
    from = listInsertEdge(&target->attr.node.down, source);
    from->target = source;
    from->arrow = ( srcarrow == Here ? Other : Here );
}

__END_METHOD_CODE__


	METHOD Layout!graphNewNodeID

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD graphNewNodeID
			METHODID 44
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:graphNewNodeID METHODID:44 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 44-graphNewNodeID

__BEGIN_METHOD_CODE__

Layout::graphNewNodeID()
{
    int counter = 1000 ;

    return counter++ ;
}

__END_METHOD_CODE__


	METHOD Layout!graphInsertHint
		CALLS
		graphNewNodeID : Layout,
		graphEnterNode : Layout,
		listFindNode : Layout,
		listFindNode : Layout



		METRICS
			ARRAYOP 0
			ASS 21
			AVVARLEN 0
			CALLEDN 4
			CLASS Layout
			CLASSID 94
			CYCLO 6
			DOTS 37
			EQTEST 5
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 25
			LE 0
			LOC 55
			LT 0
			METHOD graphInsertHint
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 23
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:21 AVVARLEN:0 CALLEDN:4 CLASS:Layout CLASSID:94 CYCLO:6 DOTS:37 EQTEST:5 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:25 LE:0 LOC:55 LT:0 METHOD:graphInsertHint METHODID:45 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:23 TERNINSTR:0 USEDVARS:0 
		;


#ID 45-graphInsertHint

__BEGIN_METHOD_CODE__

Layout::graphInsertHint(GRAPH *graph, NODE *source, NODE* target)
{
    ID id;
    NODE *hint = 0;
    EDGE *toTarget = 0;
    EDGE *toSource = 0;

     



    id.id = graphNewNodeID();
    hint = graphEnterNode(graph,&id, Hint);
    if(source->type == Regular) {
	 


	toTarget = listFindNode(&source->attr.node.down, target);
	toTarget->node = hint;
    } else {
	source->attr.hint.down = hint;
    }

    if(target->type == Regular) {
	 


	toSource = listFindNode(&target->attr.node.up, source);
	toSource->node = hint;
    } else {
	target->attr.hint.up = hint;
    }

    hint->attr.hint.up = source;
    hint->attr.hint.down = target;

     


	
    if(source->type == Hint) {
	hint->attr.hint.source = source->attr.hint.source;
	hint->attr.hint.target = source->attr.hint.target;
    } else if(target->type == Hint) {
	hint->attr.hint.source = target->attr.hint.source;
	hint->attr.hint.target = target->attr.hint.target;
    } else if(toTarget->arrow == Other){
	hint->attr.hint.source = source;
	hint->attr.hint.target = target;
    } else {
	hint->attr.hint.source = target;
	hint->attr.hint.target = source;
    }

    return hint;
}

__END_METHOD_CODE__


	METHOD Layout!graphFindEdgeAtSource

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 6
			EQTEST 4
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 16
			LT 0
			METHOD graphFindEdgeAtSource
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:6 EQTEST:4 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:16 LT:0 METHOD:graphFindEdgeAtSource METHODID:46 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 46-graphFindEdgeAtSource

__BEGIN_METHOD_CODE__

Layout::graphFindEdgeAtSource(NODE *source, NODE *target)
{
    EDGE *edge;
	
    edge = source->attr.node.down.head ;
    while(edge && !(edge->target == target && edge->arrow == Other)){
	edge = edge->next;
    }
    if(!edge) {
	edge = source->attr.node.up.head ;
	while(edge && !(edge->target == target && 
			 edge->arrow == Other )) {
	    edge = edge->next;
	}
    }
    return edge;
}

__END_METHOD_CODE__


	METHOD Layout!graphFindEdgeAtTarget

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 6
			EQTEST 4
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 16
			LT 0
			METHOD graphFindEdgeAtTarget
			METHODID 47
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:6 EQTEST:4 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:16 LT:0 METHOD:graphFindEdgeAtTarget METHODID:47 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 47-graphFindEdgeAtTarget

__BEGIN_METHOD_CODE__

Layout::graphFindEdgeAtTarget(NODE *source, NODE *target)
{
    EDGE *edge;
	
    edge = target->attr.node.up.head ;
    while(edge && !(edge->target == source && edge->arrow == Here)){
	edge = edge->next;
    }
    if(!edge) {
	edge = target->attr.node.down.head ;
	while(edge && !(edge->target == source && 
			 edge->arrow == Here )) {
	    edge = edge->next;
	}
    }
    return edge;
}

__END_METHOD_CODE__


	METHOD Layout!graphResetLevels

		METRICS
			ARRAYOP 1
			ASS 6
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 15
			LT 1
			METHOD graphResetLevels
			METHODID 48
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:6 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:15 LT:1 METHOD:graphResetLevels METHODID:48 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 48-graphResetLevels

__BEGIN_METHOD_CODE__

Layout::graphResetLevels(GRAPH *graph)
{
    int i;
    NODE *node;

    for(i = 0 ; i < 809 ; i++) {
	node = graph->hashtab[_ARGS_];
	while(node) {
	    node->level = NOLEVEL;
	    node->left = (NODE*) __null ;
	    node->right = (NODE*) __null ;

	    node = node->hashnext;
	}
    }
}

__END_METHOD_CODE__


	METHOD Layout!graphHashStr

		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 2
			IN 1
			INDR 0
			LE 0
			LOC 13
			LT 2
			METHOD graphHashStr
			METHODID 49
			MMINUS 0
			OUT 1
			PARNUM 2
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:2 IN:1 INDR:0 LE:0 LOC:13 LT:2 METHOD:graphHashStr METHODID:49 MMINUS:0 OUT:1 PARNUM:2 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 49-graphHashStr

__BEGIN_METHOD_CODE__

Layout::graphHashStr(char *str, int prime)
{
    char *p;
    unsigned h = 0, g;
	
    for(p=str; *p != '\0'; p++ ) {
	h = ( h << 4) + (*p);
	if((g = h & 0xf0000000)) {
	    h = h ^ (g >> 24);
	    h = h ^ g;
	}
    }
    return h % prime;
}

__END_METHOD_CODE__


	METHOD Layout!graphGet
		CALLS
		graphHashStr : Layout,




		METRICS
			ARRAYOP 1
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 14
			LT 0
			METHOD graphGet
			METHODID 50
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:14 LT:0 METHOD:graphGet METHODID:50 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 50-graphGet

__BEGIN_METHOD_CODE__

Layout::graphGet(GRAPHTAB *tab, char *label)
{
    int pos;
    GRAPH *graph;

    pos = graphHashStr(label, 41 );
     


    graph = (*tab)[_ARGS_];
    while(graph && strcmp(graph->label, label)) {
	graph = graph->hashnext;
    }
    return graph;
}

__END_METHOD_CODE__


	METHOD Layout!graphNew
		CALLS
		graphGet : Layout,
		fprintf : _SYSTEM_OR_USER_,
		fprintf : _SYSTEM_OR_USER_,
		graphInit : Layout,
		graphHashStr : Layout



		METRICS
			ARRAYOP 3
			ASS 9
			AVVARLEN 0
			CALLEDN 7
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 26
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 40
			LT 0
			METHOD graphNew
			METHODID 51
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 18
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:9 AVVARLEN:0 CALLEDN:7 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:26 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:40 LT:0 METHOD:graphNew METHODID:51 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:18 TERNINSTR:0 USEDVARS:0 
		;


#ID 51-graphNew

__BEGIN_METHOD_CODE__

Layout::graphNew(GRAPHTAB *tab,char *label)
{
    GRAPH *graph;
    GRAPH *tail;
    int pos;

     


    graph = graphGet(tab, label);
    if(graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,label);
	return(GRAPH*) __null ;
    }
		
    graph = (GRAPH*) malloc(sizeof(GRAPH));
    if(!graph) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(MEMORY_ERROR);
    }
    graphInit(graph,label);
	
     


    pos = graphHashStr(label, 41 );

    if((*tab)[_ARGS_]) {
	tail = ((*tab)[_ARGS_])->hashnext;
    } else {
	tail = (GRAPH*) __null ;
    }
    (*tab)[_ARGS_] = graph;
    graph->hashnext = tail;
    graph->hashprev = (GRAPH*) __null ;
    if(graph->hashnext) {
	graph->hashnext->hashprev = graph;
    }
	
    return graph;
}

__END_METHOD_CODE__


	METHOD Layout!graphRemove
		CALLS
		graphHashStr : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphRemoveLevels : Layout,
		nodeRemove : Layout,
		free : MemCheck,
		free : MemCheck



		METRICS
			ARRAYOP 3
			ASS 12
			AVVARLEN 0
			CALLEDN 7
			CLASS Layout
			CLASSID 94
			CYCLO 9
			DOTS 0
			EQTEST 0
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 22
			LE 0
			LOC 52
			LT 1
			METHOD graphRemove
			METHODID 52
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 24
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:12 AVVARLEN:0 CALLEDN:7 CLASS:Layout CLASSID:94 CYCLO:9 DOTS:0 EQTEST:0 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:22 LE:0 LOC:52 LT:1 METHOD:graphRemove METHODID:52 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:24 TERNINSTR:0 USEDVARS:0 
		;


#ID 52-graphRemove

__BEGIN_METHOD_CODE__

Layout::graphRemove(GRAPHTAB *tab, char *label)
{
    int pos;
    int i;
    GRAPH *graph;
    NODE *nextnode;
    NODE *node;

    pos = graphHashStr(label, 41 );
     


    graph = (*tab)[_ARGS_];
    while(graph && strcmp(graph->label, label)) {
	graph = graph->hashnext;
    }
    if(!graph) {
	 


	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_,label);
	return;
    }
     


    if(graph->hashprev && graph->hashprev) {
	graph->hashprev->hashnext = graph->hashnext;
	graph->hashnext->hashprev = graph->hashprev;
    } else {
	if(!graph->hashprev) {
	    (*tab)[_ARGS_] = graph->hashnext;
	    if(graph->hashnext) {
		graph->hashnext->hashprev = (GRAPH*) __null ;
	    }
	}
	if(!graph->hashnext && graph->hashprev) {
	    graph->hashprev->hashnext = (GRAPH*) __null ;
	}
    }

    graphRemoveLevels(graph);  
    for(i=0; i < 809 ; i++) {
	node = graph->hashtab[_ARGS_];
	while(node) {
	    nextnode = node->hashnext;
	    nodeRemove(node);
	    node = nextnode;
	}
    }
    free(graph->label);
    free((char*) graph);
}

__END_METHOD_CODE__


	METHOD Layout!graphTabInit

		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 1
			METHOD graphTabInit
			METHODID 53
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:1 METHOD:graphTabInit METHODID:53 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 53-graphTabInit

__BEGIN_METHOD_CODE__

Layout::graphTabInit(GRAPHTAB *tab)
{
    int i;
	
    for(i=0 ; i < 41 ; i++) {
	(*tab)[_ARGS_] = (GRAPH*) __null ;
    }
}

__END_METHOD_CODE__


	METHOD Layout!levelsInsertNode
		CALLS
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 1
			IN 0
			INDR 9
			LE 0
			LOC 28
			LT 0
			METHOD levelsInsertNode
			METHODID 54
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:1 IN:0 INDR:9 LE:0 LOC:28 LT:0 METHOD:levelsInsertNode METHODID:54 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 54-levelsInsertNode

__BEGIN_METHOD_CODE__

Layout::levelsInsertNode(GRAPH *graph, NODE *node, int n)
{
    NODE **level;

    if(n > graph->levels || !graph->level) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(LEVEL_ERROR);
    }

    if(!node->right && !node->left) {

	 


	
	level = graph->level+n ;
	node->right = *level;
	node->left = (NODE*) __null ;
	if(*level) {
	    (*level)->left = node;
	}
	*level = node;
	node->level = n;
    }

     


}

__END_METHOD_CODE__


	METHOD Layout!levelsRemoveNode

		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 11
			LE 0
			LOC 14
			LT 0
			METHOD levelsRemoveNode
			METHODID 55
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:11 LE:0 LOC:14 LT:0 METHOD:levelsRemoveNode METHODID:55 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 55-levelsRemoveNode

__BEGIN_METHOD_CODE__

Layout::levelsRemoveNode(GRAPH *graph, NODE *node, int n)
{
    NODE **level = graph->level+n;

    if(!node->left) {
	*level = node->right;
    } else {
	node->left->right = node->right;
    }

    if(node->right) {
	node->right->left = node->left;
    }
    node->level = NOLEVEL ;
}

__END_METHOD_CODE__


	METHOD Layout!levelsEnterNodes
		CALLS
		sortApplyLevel : Layout,
		fprintf : _SYSTEM_OR_USER_,
		graphCreateLevels : Layout,
		graphAddLevels : Layout,
		levelsInsertNode : Layout,
		sortPullupNodes : Layout



		METRICS
			ARRAYOP 1
			ASS 4
			AVVARLEN 0
			CALLEDN 6
			CLASS Layout
			CLASSID 94
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 17
			GE 0
			GT 1
			IN 0
			INDR 7
			LE 0
			LOC 48
			LT 1
			METHOD levelsEnterNodes
			METHODID 56
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:0 CALLEDN:6 CLASS:Layout CLASSID:94 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:17 GE:0 GT:1 IN:0 INDR:7 LE:0 LOC:48 LT:1 METHOD:levelsEnterNodes METHODID:56 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 56-levelsEnterNodes

__BEGIN_METHOD_CODE__

Layout::levelsEnterNodes(GRAPH *graph, int pullup)
{
    int levels;
    int i;
    NODE *node;

    levels = sortApplyLevel(graph); 	 

     


    if(!levels) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(INTERNAL);
    }
    if(!graph->level) {
	 


	graphCreateLevels(graph, levels);
    } else {
	 


	if(levels > graph->levels) {
	    graphAddLevels(graph, levels - graph->levels);
	}
    }
    for( i = 0 ; i < 809  ; i++ ) {
	node = graph->hashtab[_ARGS_] ;
	while(node) {
	     


	    if(!node->layouted) {
		 



		levelsInsertNode(graph,node, node->level);
	    }
	    node = node->hashnext;
			
	}
    }
    if(pullup) {
	sortPullupNodes(graph); 		 
    }
}

__END_METHOD_CODE__


	METHOD Layout!levelsIndex

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD levelsIndex
			METHODID 57
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:levelsIndex METHODID:57 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 57-levelsIndex

__BEGIN_METHOD_CODE__

Layout::levelsIndex(NODE **level)
{
    int i = 1;
    NODE *node;

    node = *level ;
    while(node) {
	node->index = i;
	i++;
	node = node->right;
    }
}

__END_METHOD_CODE__


	METHOD Layout!levelsLength

		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 11
			LT 0
			METHOD levelsLength
			METHODID 58
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:11 LT:0 METHOD:levelsLength METHODID:58 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 58-levelsLength

__BEGIN_METHOD_CODE__

Layout::levelsLength(NODE **level)
{
    NODE *node;
    int len = 0;

    node = *level;
    while(node) {
	len++;
	node = node->right;
    }
    return len;
}

__END_METHOD_CODE__


	METHOD Layout!sortApplyLevel
		CALLS
		distance : Layout



		METRICS
			ARRAYOP 1
			ASS 7
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 1
			IN 0
			INDR 4
			LE 0
			LOC 20
			LT 1
			METHOD sortApplyLevel
			METHODID 59
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 1
			SCOPEOP 0
			STMNT 12
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:7 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:1 IN:0 INDR:4 LE:0 LOC:20 LT:1 METHOD:sortApplyLevel METHODID:59 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:1 SCOPEOP:0 STMNT:12 TERNINSTR:1 USEDVARS:0 
		;


#ID 59-sortApplyLevel

__BEGIN_METHOD_CODE__

Layout::sortApplyLevel(GRAPH *graph)
{
    int level ;
    int maxlevel = 0;
    NODE *node;
    int i;

    for(i=0; i < 809 ; i++) {
	node = graph->hashtab[_ARGS_];
	while(node) {
	    if(node->level == NOLEVEL) {
		level = distance(node,node);
	    } else {
		level = node->level;
	    }
	    maxlevel = ( level > maxlevel ? level : maxlevel );
	    node = node->hashnext;
	}
    }
    return ++maxlevel;
}

__END_METHOD_CODE__


	METHOD Layout!sortPullupNodes
		CALLS
		minimumLevel : Layout,
		levelsRemoveNode : Layout,
		levelsInsertNode : Layout



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 3
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 31
			LT 1
			METHOD sortPullupNodes
			METHODID 60
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:3 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:31 LT:1 METHOD:sortPullupNodes METHODID:60 MMINUS:1 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 60-sortPullupNodes

__BEGIN_METHOD_CODE__

Layout::sortPullupNodes(GRAPH *graph)
{
    NODE **level;
    NODE *node;
    NODE *rightnode;
    int newlevel ;
	
    if(graph->levels < 2) {
	return ;
    }
    level = graph->level+(graph->levels-1);
    do {
	level--;
	node = *level;
		
	while(node) {
	    newlevel = minimumLevel(node) - 1;
	    rightnode = node->right;
	    if(newlevel != node->level) {
		 


		levelsRemoveNode(graph, node, node->level);
		node->left = (NODE*) __null ;
		node->right = (NODE*) __null ;
		levelsInsertNode(graph, node, newlevel);
	    }
	    node = rightnode;
	}
		
    } while( level != graph->level);
}

__END_METHOD_CODE__


	METHOD Layout!minimumLevel
		CALLS
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 3
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 22
			LT 1
			METHOD minimumLevel
			METHODID 61
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:3 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:22 LT:1 METHOD:minimumLevel METHODID:61 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:1 USEDVARS:0 
		;


#ID 61-minimumLevel

__BEGIN_METHOD_CODE__

Layout::minimumLevel(NODE *node)
{
    EDGE *edge;
    int min = 1000 ;
    int tmp;

    if(node->type != Regular) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(NOT_REGULAR);
    }
	
    edge = node->attr.node.up.head ;
    if(edge) {
	while(edge) {
	    tmp = edge->target->level;
	    min = ( tmp < min ? tmp : min);
	    edge = edge->next;
	}
	return min;
    } else {
	return node->level + 1;
    }
}

__END_METHOD_CODE__


	METHOD Layout!distance
		CALLS
		graphInvertEdge : Layout,
		distance : Layout,
		fprintf : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 15
			AVVARLEN 0
			CALLEDN 3
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 3
			EQTEST 2
			EXPRORCALL 12
			GE 0
			GT 1
			IN 0
			INDR 15
			LE 0
			LOC 49
			LT 0
			METHOD distance
			METHODID 62
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 20
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:15 AVVARLEN:0 CALLEDN:3 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:3 EQTEST:2 EXPRORCALL:12 GE:0 GT:1 IN:0 INDR:15 LE:0 LOC:49 LT:0 METHOD:distance METHODID:62 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:20 TERNINSTR:1 USEDVARS:0 
		;


#ID 62-distance

__BEGIN_METHOD_CODE__

Layout::distance(NODE *node, NODE *origin)
{
    int dist = 0;
    int maxdist = 0;
    EDGE *edge;
    EDGE *tmpedge;

    node->mark = origin;
     


    if(node->type == Regular) {
	edge = node->attr.node.down.head ;
	while(edge) {
	    if(edge->node->level != NOLEVEL) {
		dist = 1 + edge->node->level;
		edge = edge->next;
	    } else if( edge->node->mark == origin ) {
		 









		dist = 0;
		tmpedge = edge->next;
		graphInvertEdge(node,edge->node);
		edge = tmpedge;
	    } else {
		tmpedge = edge->next;
		dist = 1 + distance(edge->node, origin);
		edge = tmpedge;
	    }
	    maxdist = (dist > maxdist ? dist : maxdist);
	}
    }
    else {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(INTERNAL);
    }
     


    node->level = maxdist;
    return maxdist;
}

__END_METHOD_CODE__


	METHOD Layout!sortInsertHints
		CALLS
		sortCheckNode : Layout



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 15
			LT 1
			METHOD sortInsertHints
			METHODID 63
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:15 LT:1 METHOD:sortInsertHints METHODID:63 MMINUS:1 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 63-sortInsertHints

__BEGIN_METHOD_CODE__

Layout::sortInsertHints(GRAPH *graph)
{
    NODE *node;
    NODE **level;
    int i;

    level = graph->level+(graph->levels-1);
    for( i = 0 ; i < graph->levels ; i++ ) {
	node = *level;
	while(node) {
	    sortCheckNode(graph,node);
	    node = node->right;
	}
	level--;
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortCheckNode
		CALLS
		graphInsertHint : Layout,
		levelsInsertNode : Layout,
		graphInsertHint : Layout,
		levelsInsertNode : Layout



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 4
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 9
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 13
			LE 0
			LOC 30
			LT 2
			METHOD sortCheckNode
			METHODID 64
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:4 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:9 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:13 LE:0 LOC:30 LT:2 METHOD:sortCheckNode METHODID:64 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 64-sortCheckNode

__BEGIN_METHOD_CODE__

Layout::sortCheckNode(GRAPH *graph, NODE *node)
{
    EDGE *edge;
    NODE *des;
    NODE *hint;

    if(node->type == Regular) {
	edge = node->attr.node.down.head ;
	while(edge) {
	    des = edge->node;
	    if(des->level < node->level-1) {
		 


		hint = graphInsertHint(graph,node, des);
		levelsInsertNode(graph, hint, node->level-1);
	    }
	    edge = edge->next;
	}
    } else {
	if( node->attr.hint.down
	     && node->attr.hint.down->level < node->level-1 ) {
	     


	    hint = graphInsertHint(graph,node, 
				    node->attr.hint.down);
	    levelsInsertNode(graph, hint, node->level-1);
	}
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortNodeUpperBary

		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 10
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 25
			LT 0
			METHOD sortNodeUpperBary
			METHODID 65
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:10 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:25 LT:0 METHOD:sortNodeUpperBary METHODID:65 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 65-sortNodeUpperBary

__BEGIN_METHOD_CODE__

Layout::sortNodeUpperBary(NODE *node)
{
    int sum = 0;
    int count = 0;
    EDGE *upnode;

    if(node->type == Hint) {
	if(node->attr.hint.up) {
	    return(node->attr.hint.up->index * 10);
	} else {
	    return 0;
	}
    } else {
	if(node->attr.node.up.length == 0) {
	    return 0;
	} else {
	    upnode = node->attr.node.up.head;
	    while(upnode) {
		sum += upnode->node->index;
		count++;
		upnode=upnode->next;
	    }
	    return( (sum * 10) / count );
	}
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortNodeLowerBary

		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 10
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 25
			LT 0
			METHOD sortNodeLowerBary
			METHODID 66
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:10 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:25 LT:0 METHOD:sortNodeLowerBary METHODID:66 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 66-sortNodeLowerBary

__BEGIN_METHOD_CODE__

Layout::sortNodeLowerBary(NODE *node)
{
    int sum = 0;
    int count = 0;
    EDGE *downnode;

    if(node->type == Hint) {
	if(node->attr.hint.down) {
	    return(node->attr.hint.down->index * 10);
	} else {
	    return 0;
	}
    } else {
	if(node->attr.node.down.length == 0) {
	    return 0;
	} else {
	    downnode = node->attr.node.down.head;
	    while(downnode) {
		sum += downnode->node->index;
		count++;
		downnode=downnode->next;
	    }
	    return( (sum * 10) / count );
	}
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortGraphUpperBary
		CALLS
		levelsIndex : Layout,
		sortNodeUpperBary : Layout,
		sortByCenter : Layout



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 3
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 27
			LT 1
			METHOD sortGraphUpperBary
			METHODID 67
			MMINUS 2
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:3 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:27 LT:1 METHOD:sortGraphUpperBary METHODID:67 MMINUS:2 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 67-sortGraphUpperBary

__BEGIN_METHOD_CODE__

Layout::sortGraphUpperBary(GRAPH *graph)
{
    NODE **uplevel;
    NODE **level;
    NODE *node;

    if(graph->levels < 2) {
	 
	return;
    }

    uplevel = graph->level+(graph->levels-1) ;
    level = uplevel;

    do {
	level--;
	levelsIndex(uplevel);
	node = *level;
	while(node) {
	    node->center = sortNodeUpperBary(node);
	    node = node->right;
	}
	sortByCenter(level);
	uplevel--;
		
    } while(level != graph->level);

}

__END_METHOD_CODE__


	METHOD Layout!sortGraphLowerBary
		CALLS
		levelsIndex : Layout,
		sortNodeLowerBary : Layout,
		sortByCenter : Layout



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 3
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 28
			LT 1
			METHOD sortGraphLowerBary
			METHODID 68
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:3 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:28 LT:1 METHOD:sortGraphLowerBary METHODID:68 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 68-sortGraphLowerBary

__BEGIN_METHOD_CODE__

Layout::sortGraphLowerBary(GRAPH *graph)
{
    NODE **downlevel;
    NODE **toplevel;
    NODE **level;
    NODE *node;

    if(graph->levels < 2) {
	 
	return;
    }

    toplevel = graph->level+(graph->levels-1);
    downlevel = graph->level ;
    level = downlevel;

    do {
	level++;
	levelsIndex(downlevel);
	node = *level;
	while(node) {
	    node->center = sortNodeLowerBary(node);
	    node = node->right;
	}
	sortByCenter(level);
	downlevel++;
		
    } while(level != toplevel);
}

__END_METHOD_CODE__


	METHOD Layout!sortByCenter
		CALLS
		levelsLength : Layout,
		fprintf : _SYSTEM_OR_USER_,
		qsort : _SYSTEM_OR_USER_,
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 13
			AVVARLEN 0
			CALLEDN 7
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 28
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 48
			LT 2
			METHOD sortByCenter
			METHODID 69
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 24
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:13 AVVARLEN:0 CALLEDN:7 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:28 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:48 LT:2 METHOD:sortByCenter METHODID:69 MMINUS:0 OUT:0 PARNUM:1 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:24 TERNINSTR:0 USEDVARS:0 
		;


#ID 69-sortByCenter

__BEGIN_METHOD_CODE__

Layout::sortByCenter(NODE **level)
{
    NODE **index;
    NODE **tmp;
    NODE *node;
    int len = levelsLength(level);
    int i;
	
    if(len < 2) {
	return;
    }
	
    index = (NODE**) malloc(sizeof(NODE*) * len);
    if(!index) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(MEMORY_ERROR);
    }

     
	
    tmp = index;
    node = *level;
    while(node) {
	*(tmp++) = node;
	node = node->right;
    }

     

    qsort( (char*) index , len, sizeof(NODE*), 
	    (QuicksortCompareProc)sortCmpCenters );

     



    tmp = index;
    *level = *tmp;
    (*level)->left = (NODE*) __null ;

    for(i=1 ; i < len ; i++) {
	(*tmp)->right = *(tmp+1);
	(*(tmp+1))->left = *tmp;
	tmp++;
    }
    (*tmp)->right = (NODE*) __null ;

    free( (char*) index);
}

__END_METHOD_CODE__


	METHOD Layout!sortCmpCenters
		CALLS
		compare_callback : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 8
			EQTEST 3
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 21
			LT 0
			METHOD sortCmpCenters
			METHODID 71
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:8 EQTEST:3 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:21 LT:0 METHOD:sortCmpCenters METHODID:71 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 71-sortCmpCenters

__BEGIN_METHOD_CODE__

Layout::sortCmpCenters(NODE **_n1, NODE **_n2)
{	
    NODE *n1 = *_n1;
    NODE *n2 = *_n2;

     
    int ret = n1->center - n2->center;
    if(ret != 0 || compare_callback == 0)
	return ret;

     
    while(n1 && n1->type == Hint)
	n1 = n1->attr.hint.target;
    while(n2 && n2->type == Hint)
	n2 = n2->attr.hint.target;
     ;

    char *label1 = n1->attr.node.label;
    char *label2 = n2->attr.node.label;

    return compare_callback(label1, label2);
}

__END_METHOD_CODE__


	METHOD Layout!sortInitX

		METRICS
			ARRAYOP 0
			ASS 10
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 4
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 26
			LT 1
			METHOD sortInitX
			METHODID 72
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:4 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:26 LT:1 METHOD:sortInitX METHODID:72 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 72-sortInitX

__BEGIN_METHOD_CODE__

Layout::sortInitX(GRAPH *graph)
{
    NODE **level = graph->level;
    NODE *node;
    int x;
    int nodex;
    int i;
	
    for(i=0; i < graph->levels; i++) {
	node = *level;
	x = 0;
	while(node) {
	    if(node->type == Regular) {
		nodex = x + node->attr.node.w / 2;
	    } else {
		nodex = x ;
	    }
	    node->x = nodex;
	    x += graph->minxdist ;
	    if(node->type == Regular) {
		x +=  node->attr.node.w ;
	    } 
	    node = node->right;
	}
	level++;
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortGraphUpX
		CALLS
		sortLevelUpX : Layout



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 17
			LT 1
			METHOD sortGraphUpX
			METHODID 73
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:17 LT:1 METHOD:sortGraphUpX METHODID:73 MMINUS:1 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 73-sortGraphUpX

__BEGIN_METHOD_CODE__

Layout::sortGraphUpX(GRAPH *graph)
{
    NODE **level;

    if(graph->levels < 2) {
	 
	return;
    }

    level = graph->level+(graph->levels-1) ;

    do {
	level--;
	sortLevelUpX(level, graph->minxdist);
		
    } while(level != graph->level);
	
}

__END_METHOD_CODE__


	METHOD Layout!sortGraphDownX
		CALLS
		sortLevelDownX : Layout



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 16
			LT 1
			METHOD sortGraphDownX
			METHODID 74
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:16 LT:1 METHOD:sortGraphDownX METHODID:74 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 74-sortGraphDownX

__BEGIN_METHOD_CODE__

Layout::sortGraphDownX(GRAPH *graph)
{
    NODE **level;
    NODE **toplevel = graph->level+(graph->levels-1);

    if(graph->levels < 2) {
	 
	return;
    }

    level = graph->level;

    do {
	level++;
	sortLevelDownX(level, graph->minxdist);
    } while(level != toplevel);
}

__END_METHOD_CODE__


	METHOD Layout!sortLevelUpX
		CALLS
		levelsLength : Layout,
		fprintf : _SYSTEM_OR_USER_,
		qsort : _SYSTEM_OR_USER_,
		sortAvrgUpperX : Layout,
		sortMove : Layout,
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 9
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 40
			LT 0
			METHOD sortLevelUpX
			METHODID 75
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:9 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:40 LT:0 METHOD:sortLevelUpX METHODID:75 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:0 
		;


#ID 75-sortLevelUpX

__BEGIN_METHOD_CODE__

Layout::sortLevelUpX(NODE **level, int dist)
{
    NODE **index;
    NODE **tmp;
    NODE *node;

    int len = levelsLength(level);
    int newx;

    index = (NODE**) malloc(sizeof(NODE*) * (len+1));
    if(!index) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(MEMORY_ERROR);
    }

     
	
    tmp = index;
    node = *level;
    while(node) {
	*(tmp++) = node;
	node = node->right;
    }
    *tmp = (NODE*) __null ;

     



    qsort( (char*)index, len, sizeof(NODE*), 
	    (QuicksortCompareProc)sortCmpUpperPrio);

    tmp = index;
    while(*tmp) {
	newx = sortAvrgUpperX(*tmp) ;
	sortMove(*tmp, newx, dist);
	tmp++;
    }

    free( (char*) index);
}

__END_METHOD_CODE__


	METHOD Layout!sortLevelDownX
		CALLS
		levelsLength : Layout,
		fprintf : _SYSTEM_OR_USER_,
		qsort : _SYSTEM_OR_USER_,
		sortAvrgLowerX : Layout,
		sortMove : Layout,
		free : MemCheck



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 9
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 40
			LT 0
			METHOD sortLevelDownX
			METHODID 76
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:9 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:40 LT:0 METHOD:sortLevelDownX METHODID:76 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:0 
		;


#ID 76-sortLevelDownX

__BEGIN_METHOD_CODE__

Layout::sortLevelDownX(NODE **level, int dist)
{
    NODE **index;
    NODE **tmp;
    NODE *node;

    int len = levelsLength(level);
    int newx;

    index = (NODE**) malloc(sizeof(NODE*) * (len+1));
    if(!index) {
	fprintf(((_IO_FILE*)(&_IO_stderr_))  ,_REMOVED_STR_);
	exit(MEMORY_ERROR);
    }

     
	
    tmp = index;
    node = *level;
    while(node) {
	*(tmp++) = node;
	node = node->right;
    }
    *tmp = (NODE*) __null ;

     



    qsort( (char*)index, len, sizeof(NODE*), 
	    (QuicksortCompareProc)sortCmpLowerPrio);

    tmp = index;
    while(*tmp) {
	newx = sortAvrgLowerX(*tmp) ;
	sortMove(*tmp, newx, dist);
	tmp++;
    }

    free( (char*) index);
}

__END_METHOD_CODE__


	METHOD Layout!sortLeftSpace

		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 6
			EQTEST 3
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 11
			LE 0
			LOC 22
			LT 0
			METHOD sortLeftSpace
			METHODID 77
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:6 EQTEST:3 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:11 LE:0 LOC:22 LT:0 METHOD:sortLeftSpace METHODID:77 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 77-sortLeftSpace

__BEGIN_METHOD_CODE__

Layout::sortLeftSpace(NODE *node, int dist)
{
    int space = 0;
    NODE *left;
	
    left = node->left;
    while(left) {
	space += node->x - left->x - dist;
	if(node->type == Regular) {
	    space -= node->attr.node.w / 2;
	}
	if(left->type == Regular) {
	    space -= left->attr.node.w / 2;
	}
	node = left;
	left = left->left;
    }
    space += node->x ;
    if(node->type == Regular) {
	space -= node->attr.node.w / 2;
    }
    return space;
}

__END_METHOD_CODE__


	METHOD Layout!sortMoveLeft

		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 4
			EQTEST 2
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 11
			LE 0
			LOC 23
			LT 1
			METHOD sortMoveLeft
			METHODID 78
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:4 EQTEST:2 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:11 LE:0 LOC:23 LT:1 METHOD:sortMoveLeft METHODID:78 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 78-sortMoveLeft

__BEGIN_METHOD_CODE__

Layout::sortMoveLeft(NODE *node, int newx, int dist)
{
    int maxleftx = 0;
    int ready    = 0;

    do {
	node->x = newx;
	if(node->left) {
	    maxleftx = newx - dist;
	    if(node->type == Regular) {
		maxleftx -= node->attr.node.w / 2;
	    }
	    if(node->left->type == Regular) {
		maxleftx -= node->left->attr.node.w / 2;
	    }
	    ready = ( node->left->x < maxleftx );
			
	}
	node = node->left;			
	newx = maxleftx;

    } while(node && !ready) ;
	
}

__END_METHOD_CODE__


	METHOD Layout!sortMoveRight

		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 4
			EQTEST 2
			EXPRORCALL 6
			GE 0
			GT 1
			IN 0
			INDR 12
			LE 0
			LOC 23
			LT 0
			METHOD sortMoveRight
			METHODID 79
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:4 EQTEST:2 EXPRORCALL:6 GE:0 GT:1 IN:0 INDR:12 LE:0 LOC:23 LT:0 METHOD:sortMoveRight METHODID:79 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 79-sortMoveRight

__BEGIN_METHOD_CODE__

Layout::sortMoveRight(NODE *node, int newx, int mindist)
{
    int minrightx = 0;
    int ready     = 0;

    do {
	node->x = newx;

	if(node->right) {
	    minrightx = newx + mindist ;
	    if(node->type == Regular) {
		minrightx += node->attr.node.w /2;
	    }
	    if(node->right->type == Regular) {
		minrightx += node->right->attr.node.w /2;
	    }
	}
	ready =  !(node->right) ||  (node->right->x > minrightx );

	node = node->right;
	newx = minrightx;

    } while(!ready) ;
}

__END_METHOD_CODE__


	METHOD Layout!sortMove
		CALLS
		sortLeftSpace : Layout,
		sortMoveLeft : Layout,
		sortMoveRight : Layout



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 3
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 17
			LT 1
			METHOD sortMove
			METHODID 80
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:3 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:17 LT:1 METHOD:sortMove METHODID:80 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 80-sortMove

__BEGIN_METHOD_CODE__

Layout::sortMove(NODE *node, int newx, int mindist)
{
    int leftspace;
    int oldx;
    int move;

    oldx = node->x;
    if(newx < oldx) {
	move = oldx - newx;
	leftspace = sortLeftSpace(node, mindist);
	if( move > leftspace ) {
	    newx = oldx - leftspace;
	}
	sortMoveLeft(node,newx,mindist);
    } else if(newx > oldx) {
	sortMoveRight(node,newx,mindist);
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortAvrgUpperX

		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 7
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 23
			LT 0
			METHOD sortAvrgUpperX
			METHODID 81
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:7 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:23 LT:0 METHOD:sortAvrgUpperX METHODID:81 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 81-sortAvrgUpperX

__BEGIN_METHOD_CODE__

Layout::sortAvrgUpperX(NODE *node)
{
    EDGE *edge;
    int sumx = 0;
    int count = 0;

    if(node->type == Regular) {
	edge = node->attr.node.up.head ;
	while(edge) {
	    sumx += edge->node->x;
	    count++;
	    edge = edge->next;
	}
    } else if(node->attr.hint.up) {
	sumx = node->attr.hint.up->x;
	count = 1;
    }
	
    if(count) {
	return(sumx / count);
    } else {
	return((node->x * 3) / 4);
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortAvrgLowerX

		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 5
			DOTS 7
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 23
			LT 0
			METHOD sortAvrgLowerX
			METHODID 82
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:5 DOTS:7 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:23 LT:0 METHOD:sortAvrgLowerX METHODID:82 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 82-sortAvrgLowerX

__BEGIN_METHOD_CODE__

Layout::sortAvrgLowerX(NODE *node)
{
    EDGE *edge;
    int sumx = 0;
    int count = 0;

    if(node->type == Regular) {
	edge = node->attr.node.down.head ;
	while(edge) {
	    sumx += edge->node->x;
	    count++;
	    edge = edge->next;
	}
    } else if(node->attr.hint.down) {
	sumx = node->attr.hint.down->x;
	count = 1;
    }
	
    if(count) {
	return(sumx / count);
    } else {
	return((node->x * 3) / 4);
    }
}

__END_METHOD_CODE__


	METHOD Layout!sortCmpUpperPrio

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 6
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 16
			LT 0
			METHOD sortCmpUpperPrio
			METHODID 83
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:6 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:16 LT:0 METHOD:sortCmpUpperPrio METHODID:83 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 83-sortCmpUpperPrio

__BEGIN_METHOD_CODE__

Layout::sortCmpUpperPrio(NODE **fst, NODE **snd)
{
    int fstprio, sndprio;

    if( (*fst)->type == Hint ) {
	fstprio = HINTPRIO;
    } else {
	fstprio = (*fst)->attr.node.up.length ;
    }
    if( (*snd)->type == Hint ) {
	sndprio = HINTPRIO;
    } else {
	sndprio = (*snd)->attr.node.up.length ;
    }

    return(fstprio - sndprio);
}

__END_METHOD_CODE__


	METHOD Layout!sortCmpLowerPrio

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 6
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 16
			LT 0
			METHOD sortCmpLowerPrio
			METHODID 84
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:6 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:16 LT:0 METHOD:sortCmpLowerPrio METHODID:84 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 84-sortCmpLowerPrio

__BEGIN_METHOD_CODE__

Layout::sortCmpLowerPrio(NODE **fst, NODE **snd)
{
    int fstprio, sndprio;

    if( (*fst)->type == Hint ) {
	fstprio = HINTPRIO;
    } else {
	fstprio = (*fst)->attr.node.down.length ;
    }
    if( (*snd)->type == Hint ) {
	sndprio = HINTPRIO;
    } else {
	sndprio = (*snd)->attr.node.down.length ;
    }

    return(fstprio - sndprio);
}

__END_METHOD_CODE__


	METHOD Layout!sortLevelVertical

		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 0
			CLASS Layout
			CLASSID 94
			CYCLO 4
			DOTS 4
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 6
			LE 0
			LOC 34
			LT 0
			METHOD sortLevelVertical
			METHODID 85
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:0 CLASS:Layout CLASSID:94 CYCLO:4 DOTS:4 EQTEST:1 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:6 LE:0 LOC:34 LT:0 METHOD:sortLevelVertical METHODID:85 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 85-sortLevelVertical

__BEGIN_METHOD_CODE__

Layout::sortLevelVertical(NODE **level, int miny, int minydist)
{
    int length = 0 ;
    int maxheight = 0;
    int newy;
    NODE *node;

     



    node = *level;
    while(node) {
	if(node->type == Regular && 
	    node->attr.node.h > maxheight) {
	    maxheight = node->attr.node.h;
	}
	length++;
	node = node->right;
    }
     



	
    newy = miny + minydist + maxheight / 2 + (length * maxheight) / 5;

    node = *level;
    while(node) {
	node->y = newy;
	node = node->right;
    }

    return newy + maxheight / 2;
}

__END_METHOD_CODE__


	METHOD Layout!sortGraphVertical
		CALLS
		sortLevelVertical : Layout



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 1
			CLASS Layout
			CLASSID 94
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 16
			LT 1
			METHOD sortGraphVertical
			METHODID 86
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:1 CLASS:Layout CLASSID:94 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:16 LT:1 METHOD:sortGraphVertical METHODID:86 MMINUS:1 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 86-sortGraphVertical

__BEGIN_METHOD_CODE__

Layout::sortGraphVertical(GRAPH *graph)
{
    int y = (- graph->minydist) + 1;  
    NODE **level;
    int i;
	
    if(!graph->levels) {
	 
	return;
    }

    level = graph->level+(graph->levels-1);
    for(i = 0; i < graph->levels; i++) {
	y = sortLevelVertical(level,y, graph->minydist);
	level-- ;
    } 
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/layout.o.nu.met	  Methods Number  83
#====================================================================
#Process file ../../code/ddd-3.0/ddd/BoxGraphN.o.nu.met ... 


	METHOD GraphNode!nextFrom

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 4
			LT 0
			METHOD nextFrom
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:4 LT:0 METHOD:nextFrom METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:1 USEDVARS:0 
		;


#ID 13-nextFrom

__BEGIN_METHOD_CODE__

GraphNode::nextFrom(GraphEdge *ref)
{
     ;
    return ref->_nextFrom == _firstFrom ? 0 : ref->_nextFrom;
}

__END_METHOD_CODE__


	METHOD GraphNode!nextTo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 4
			LT 0
			METHOD nextTo
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:4 LT:0 METHOD:nextTo METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:1 USEDVARS:0 
		;


#ID 15-nextTo

__BEGIN_METHOD_CODE__

GraphNode::nextTo(GraphEdge *ref)
{
     ;
    return ref->_nextTo == _firstTo ? 0 : ref->_nextTo;
}

__END_METHOD_CODE__


	METHOD BoxGraphNode!forceDraw
		CALLS
		exposed : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxSize : BoxSize,
		selected : _SYSTEM_OR_USER_,
		highlight : BoxGraphNode,
		box : BoxGraphNode,
		draw : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		highlightRegion : BoxGraphNode,
		XFillRectangle : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		origin : BoxRegion,
		space : BoxRegion,
		space : BoxRegion,
		highlight : BoxGraphNode,
		draw : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		box : BoxGraphNode,
		draw : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		box : BoxGraphNode,
		draw : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 23
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 4
			DOTS 9
			EQTEST 0
			EXPRORCALL 28
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 1
			LOC 35
			LT 1
			METHOD forceDraw
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 6
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:23 CLASS:BoxGraphNode CLASSID:99 CYCLO:4 DOTS:9 EQTEST:0 EXPRORCALL:28 GE:0 GT:0 IN:0 INDR:4 LE:1 LOC:35 LT:1 METHOD:forceDraw METHODID:1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:6 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-forceDraw

__BEGIN_METHOD_CODE__

BoxGraphNode::forceDraw(Widget w, 
			     const BoxRegion&  ,
			     const GraphGC& gc)
{
     
     
     
    static BoxRegion exposed(BoxPoint(0, 0), BoxSize(2147483647  , 2147483647  ));

    if(selected() && highlight())
    {
	box()->draw(w, region(gc), exposed, gc.nodeGC, false);

	bool use_color = ColorBox::use_color;
	ColorBox::use_color = false;
	BoxRegion r = highlightRegion(gc);

	if(r <= exposed)
	{
	    XFillRectangle(XtDisplay(w), XtWindow(w), gc.clearGC,
			   r.origin(X), r.origin(Y),
			   r.space(X), r.space(Y));
	    highlight()->draw(w, r, r, gc.nodeGC, false);
	}
	ColorBox::use_color = use_color;
    }
    else if(selected())
    {
	bool use_color = ColorBox::use_color;
	ColorBox::use_color = false;
	box()->draw(w, region(gc), exposed, gc.nodeGC, false);
	ColorBox::use_color = use_color;
    }
    else
    {
	box()->draw(w, region(gc), exposed, gc.nodeGC, false);
    }
}

__END_METHOD_CODE__


	METHOD BoxGraphNode!_print
		CALLS
		isFig : _SYSTEM_OR_USER_,
		startCompound : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		_print : RegionGraphNode,
		box : BoxGraphNode,
		_print : BoxGraphNode,
		region : _SYSTEM_OR_USER_,
		isFig : _SYSTEM_OR_USER_,
		endCompound : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 9
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 3
			DOTS 3
			EQTEST 0
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 10
			LT 0
			METHOD _print
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:9 CLASS:BoxGraphNode CLASSID:99 CYCLO:3 DOTS:3 EQTEST:0 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:10 LT:0 METHOD:_print METHODID:13 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-_print

__BEGIN_METHOD_CODE__

BoxGraphNode::_print(ostream& os, const GraphGC& gc)
{
    if(gc.printGC->isFig())
	startCompound(os, region(gc));

    RegionGraphNode::_print(os, gc);
    box()->_print(os, (BoxRegion&)region(gc), *gc.printGC);

    if(gc.printGC->isFig())
	endCompound(os);
}

__END_METHOD_CODE__


	METHOD BoxGraphNode!find_mark
		CALLS
		nchildren : _SYSTEM_OR_USER_,
		find_mark : BoxGraphNode,
		find_mark : BoxGraphNode,
		box : _SYSTEM_OR_USER_,
		box : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 2
			ASS 9
			AVVARLEN 0
			CALLEDN 5
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 7
			DOTS 0
			EQTEST 2
			EXPRORCALL 18
			GE 0
			GT 5
			IN 0
			INDR 3
			LE 0
			LOC 38
			LT 6
			METHOD find_mark
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 6
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:9 AVVARLEN:0 CALLEDN:5 CLASS:BoxGraphNode CLASSID:99 CYCLO:7 DOTS:0 EQTEST:2 EXPRORCALL:18 GE:0 GT:5 IN:0 INDR:3 LE:0 LOC:38 LT:6 METHOD:find_mark METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:6 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-find_mark

__BEGIN_METHOD_CODE__

BoxGraphNode::find_mark(Box *dup, Box *src, Box *mark)
{
    if(mark == 0)
	return 0;

    if(src == mark)
    {
	MarkBox *dup_mb = dynamic_cast< MarkBox  *>(  dup ) ;
	return dup_mb;
    }

     
    CompositeBox *src_cb = dynamic_cast< CompositeBox  *>(  src ) ;
    if(src_cb != 0)
    {
	CompositeBox *dup_cb = dynamic_cast< CompositeBox  *>(  dup ) ;

	for(int i = 0; i < src_cb->nchildren(); i++)
	{
	    MarkBox *mb = 
		find_mark((*dup_cb)[_ARGS_], (*src_cb)[_ARGS_], mark);
	    if(mb)
		return mb;
	}

	return 0;
    }

     
    HatBox *src_hb = dynamic_cast< HatBox  *>(  src ) ;
    if(src_hb != 0)
    {
	HatBox *dup_hb = dynamic_cast< HatBox  *>(  dup ) ;

	return find_mark(dup_hb->box(), src_hb->box(), mark);
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD BoxGraphNode!BoxGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxGraphNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxGraphNode METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-BoxGraphNode

__BEGIN_METHOD_CODE__

BoxGraphNode::BoxGraphNode(const BoxGraphNode& node)
{}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/BoxGraphN.o.nu.met	  Methods Number  6
#======================================================================
#Process file ../../code/ddd-3.0/ddd/Graph.o.nu.met ... 


	METHOD Graph!Graph
		CALLS
		dup : _SYSTEM_OR_USER_,
		addNodes : Graph,
		dup : _SYSTEM_OR_USER_,
		addUsedEdges : Graph,
		getNode : Graph,
		getNode : Graph,
		nextEdge : Graph,
		enqueue : GraphEdge



		METRICS
			ARRAYOP 0
			ASS 29
			AVVARLEN 0
			CALLEDN 8
			CLASS Graph
			CLASSID 100
			CYCLO 8
			DOTS 6
			EQTEST 0
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 17
			LE 0
			LOC 69
			LT 0
			METHOD Graph
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 32
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:29 AVVARLEN:0 CALLEDN:8 CLASS:Graph CLASSID:100 CYCLO:8 DOTS:6 EQTEST:0 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:17 LE:0 LOC:69 LT:0 METHOD:Graph METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:32 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-Graph

__BEGIN_METHOD_CODE__

Graph::Graph(const Graph &org_graph)
{
    GraphNode *node, *new_node; 

     
    node = org_graph._firstNode;
   
    if(node != 0)
    {
	do
	{
	    new_node = node->dup();
	    new_node->next  = new_node;	     
	    new_node->prev  = new_node;
	    new_node->graph = this;
	    addNodes(new_node);  
	    node = node->next;

	} while(node != org_graph._firstNode);
    }
     
    GraphEdge *edge, *new_edge;
    
     
    edge = org_graph._firstEdge;
    
    if(edge != 0)
    {
	do {
	    new_edge = edge->dup();
	    new_edge->next  = new_edge;		 
	    new_edge->prev  = new_edge;
	    new_edge->graph = this;
	    addUsedEdges(new_edge);  
	    edge = edge->next;

	} while(edge != org_graph._firstEdge);
    }

    if(_firstEdge != 0)
    {
	 
	GraphEdge *org_edge = org_graph._firstEdge;
    	edge = _firstEdge;
	GraphNode *from_node, *to_node;     
     
	 
	do { 
             
	    from_node = getNode(org_edge->_from, org_graph);
	    edge->_from = from_node;

	     
	    to_node = getNode(org_edge->_to, org_graph);	
	    edge->_to = to_node;
	
	    edge = edge->next;
	    org_edge = org_graph.nextEdge(org_edge);

	} while(edge != _firstEdge);

	 
	edge = _firstEdge; 

	do{
	    edge->enqueue();
	    edge = edge->next;
	} while(edge != _firstEdge);
    }
}

__END_METHOD_CODE__


	METHOD Graph!addNodes

		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 16
			LT 0
			METHOD addNodes
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:16 LT:0 METHOD:addNodes METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-addNodes

__BEGIN_METHOD_CODE__

Graph::addNodes(GraphNode *nodes)
{
     
    if(_firstNode == 0)
	_firstNode = nodes;
    else
    {
	 
	_firstNode->prev->next = nodes;
	nodes->prev->next = _firstNode;

	 
	GraphNode *old_prev = nodes->prev;
	nodes->prev = _firstNode->prev;
	_firstNode->prev = old_prev;
    }
}

__END_METHOD_CODE__


	METHOD Graph!addEdges
		CALLS
		enqueue : GraphEdge



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 23
			LT 0
			METHOD addEdges
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:23 LT:0 METHOD:addEdges METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-addEdges

__BEGIN_METHOD_CODE__

Graph::addEdges(GraphEdge *edges)
{
     
    GraphEdge *e = edges; 
    do {
	e->enqueue();
	e = e->next;
    } while(e != edges);
	
     
    if(_firstEdge == 0)
	_firstEdge = edges;
    else
    {
	 
	_firstEdge->prev->next = edges;
	edges->prev->next = _firstEdge;

	 
	GraphEdge *old_prev = edges->prev;
	edges->prev = _firstEdge->prev;
	_firstEdge->prev = old_prev;
    }
}

__END_METHOD_CODE__


	METHOD Graph!addUsedEdges

		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 16
			LT 0
			METHOD addUsedEdges
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:16 LT:0 METHOD:addUsedEdges METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-addUsedEdges

__BEGIN_METHOD_CODE__

Graph::addUsedEdges(GraphEdge *edges)
{
     
    if(_firstEdge == 0)
	_firstEdge = edges;
    else
    {
	 
	_firstEdge->prev->next = edges;
	edges->prev->next = _firstEdge;

	 
	GraphEdge *old_prev = edges->prev;
	edges->prev = _firstEdge->prev;
	_firstEdge->prev = old_prev;
    }
}

__END_METHOD_CODE__


	METHOD Graph!makeNodeFirst
		CALLS
		haveNode : Graph



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 13
			LE 0
			LOC 20
			LT 0
			METHOD makeNodeFirst
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:13 LE:0 LOC:20 LT:0 METHOD:makeNodeFirst METHODID:26 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-makeNodeFirst

__BEGIN_METHOD_CODE__

Graph::makeNodeFirst(GraphNode *node)
{
    if(!haveNode(node))
	return;
    if(node == _firstNode)
	return;

     
    node->prev->next = node->next;
    node->next->prev = node->prev;

     
    node->next = _firstNode;
    node->prev = _firstNode->prev;

    node->next->prev = node;
    node->prev->next = node;

     
    _firstNode = node;
}

__END_METHOD_CODE__


	METHOD Graph!makeNodeLast
		CALLS
		haveNode : Graph



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 4
			DOTS 0
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 16
			LE 0
			LOC 22
			LT 0
			METHOD makeNodeLast
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:4 DOTS:0 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:16 LE:0 LOC:22 LT:0 METHOD:makeNodeLast METHODID:27 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-makeNodeLast

__BEGIN_METHOD_CODE__

Graph::makeNodeLast(GraphNode *node)
{
    if(!haveNode(node))
	return;
    if(node == _firstNode->prev)
	return;

     
    node->prev->next = node->next;
    node->next->prev = node->prev;
    if(_firstNode == node)
	_firstNode = node->next;

     
    node->next = _firstNode;
    node->prev = _firstNode->prev;

    node->next->prev = node;
    node->prev->next = node;

     
    _firstNode = node->next;
}

__END_METHOD_CODE__


	METHOD Graph!makeEdgeFirst
		CALLS
		haveEdge : Graph



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 13
			LE 0
			LOC 20
			LT 0
			METHOD makeEdgeFirst
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:13 LE:0 LOC:20 LT:0 METHOD:makeEdgeFirst METHODID:28 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-makeEdgeFirst

__BEGIN_METHOD_CODE__

Graph::makeEdgeFirst(GraphEdge *edge)
{
    if(!haveEdge(edge))
	return;
    if(edge == _firstEdge)
	return;

     
    edge->prev->next = edge->next;
    edge->next->prev = edge->prev;

     
    edge->next = _firstEdge;
    edge->prev = _firstEdge->prev;

    edge->next->prev = edge;
    edge->prev->next = edge;

     
    _firstEdge = edge;
}

__END_METHOD_CODE__


	METHOD Graph!makeEdgeLast
		CALLS
		haveEdge : Graph



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 4
			DOTS 0
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 16
			LE 0
			LOC 22
			LT 0
			METHOD makeEdgeLast
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:4 DOTS:0 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:16 LE:0 LOC:22 LT:0 METHOD:makeEdgeLast METHODID:29 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-makeEdgeLast

__BEGIN_METHOD_CODE__

Graph::makeEdgeLast(GraphEdge *edge)
{
    if(!haveEdge(edge))
	return;
    if(edge == _firstEdge->prev)
	return;

     
    edge->prev->next = edge->next;
    edge->next->prev = edge->prev;
    if(_firstEdge == edge)
	_firstEdge = edge->next;

     
    edge->next = _firstEdge;
    edge->prev = _firstEdge->prev;

    edge->next->prev = edge;
    edge->prev->next = edge;

     
    _firstEdge = edge->next;
}

__END_METHOD_CODE__


	METHOD Graph!removeNode
		CALLS
		haveNode : Graph,
		firstFrom : GraphNode,
		removeEdge : Graph,
		firstTo : GraphNode,
		removeEdge : Graph



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 5
			CLASS Graph
			CLASSID 100
			CYCLO 6
			DOTS 0
			EQTEST 2
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 12
			LE 0
			LOC 31
			LT 0
			METHOD removeNode
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:5 CLASS:Graph CLASSID:100 CYCLO:6 DOTS:0 EQTEST:2 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:12 LE:0 LOC:31 LT:0 METHOD:removeNode METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-removeNode

__BEGIN_METHOD_CODE__

Graph::removeNode(GraphNode *node)
{
    if(!haveNode(node))
	return;

    GraphEdge *e;

     
    while((e = node->firstFrom()) != 0)
	removeEdge(e);
    while((e = node->firstTo()) != 0)
	removeEdge(e);

    if(node == _firstNode)
	_firstNode = node->next;

    if(node == _firstNode)
    {
	 ;
	_firstNode = 0;
    }
    else
    {
	 
	node->prev->next = node->next;
	node->next->prev = node->prev;
    }

    node->next  = 0;
    node->prev  = 0;
    node->graph = 0;
}

__END_METHOD_CODE__


	METHOD Graph!removeEdge
		CALLS
		haveEdge : Graph,
		dequeue : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 2
			CLASS Graph
			CLASSID 100
			CYCLO 4
			DOTS 0
			EQTEST 2
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 11
			LE 0
			LOC 25
			LT 0
			METHOD removeEdge
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:2 CLASS:Graph CLASSID:100 CYCLO:4 DOTS:0 EQTEST:2 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:11 LE:0 LOC:25 LT:0 METHOD:removeEdge METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-removeEdge

__BEGIN_METHOD_CODE__

Graph::removeEdge(GraphEdge *edge)
{
    if(!haveEdge(edge))
	return;

    edge->dequeue();

    if(edge == _firstEdge)
	_firstEdge = edge->next;

    if(edge == _firstEdge)
    {
	 ;
	_firstEdge = 0;
    }
    else
    {
	 
	edge->prev->next = edge->next;
	edge->next->prev = edge->prev;
    }

    edge->next  = 0;
    edge->prev  = 0;
    edge->graph = 0;
}

__END_METHOD_CODE__


	METHOD Graph!getNode

		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 12
			LT 0
			METHOD getNode
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:12 LT:0 METHOD:getNode METHODID:8 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-getNode

__BEGIN_METHOD_CODE__

Graph::getNode(GraphNode *org_node, const Graph& org_graph)
{
    GraphNode *search_node = org_graph._firstNode;
    GraphNode *dup_node = _firstNode;
     
     while(search_node != org_node)
     {
	 dup_node = dup_node->next;
	 search_node = search_node->next;
     }
 
     return dup_node;
}

__END_METHOD_CODE__


	METHOD Graph!draw
		CALLS
		gc : _SYSTEM_OR_USER_,
		firstVisibleEdge : Graph,
		nextVisibleEdge : Graph,
		draw : _SYSTEM_OR_USER_,
		firstVisibleNode : Graph,
		nextVisibleNode : Graph,
		redraw : GraphNode,
		draw : _SYSTEM_OR_USER_,
		redraw : GraphNode



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 9
			CLASS Graph
			CLASSID 100
			CYCLO 9
			DOTS 10
			EQTEST 4
			EXPRORCALL 29
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 28
			LT 0
			METHOD draw
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:9 CLASS:Graph CLASSID:100 CYCLO:9 DOTS:10 EQTEST:4 EXPRORCALL:29 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:28 LT:0 METHOD:draw METHODID:30 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-draw

__BEGIN_METHOD_CODE__

Graph::draw(Widget w, const BoxRegion& exposed, const GraphGC& _gc)
{
    GraphGC gc(_gc);

     
    if(gc.nodeGC   == 0)
	gc.nodeGC   = (( XtScreen(w) )->default_gc) ;
    if(gc.edgeGC   == 0)
	gc.edgeGC   = (( XtScreen(w) )->default_gc) ;
    if(gc.invertGC == 0)
	gc.invertGC = (( XtScreen(w) )->default_gc) ;
    if(gc.clearGC  == 0)
	gc.clearGC  = (( XtScreen(w) )->default_gc) ;

     
    for(GraphEdge *edge = firstVisibleEdge(); edge != 0; 
	 edge = nextVisibleEdge(edge))
	edge->draw(w, exposed, gc);

     
    for(GraphNode *node = firstVisibleNode(); node != 0; 
	 node = nextVisibleNode(node))
    {
	if(node->redraw() || !gc.redraw)
	    node->draw(w, exposed, gc);
	if(gc.redraw)
	    node->redraw() = false;
    }
}

__END_METHOD_CODE__


	METHOD Graph!_print
		CALLS
		gc : _SYSTEM_OR_USER_,
		firstVisibleEdge : Graph,
		nextVisibleEdge : Graph,
		from : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		to : GraphEdge,
		selected : _SYSTEM_OR_USER_,
		_print : _SYSTEM_OR_USER_,
		firstVisibleNode : Graph,
		nextVisibleNode : Graph,
		selected : _SYSTEM_OR_USER_,
		_print : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 12
			CLASS Graph
			CLASSID 100
			CYCLO 5
			DOTS 4
			EQTEST 2
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 0
			LOC 21
			LT 0
			METHOD _print
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:12 CLASS:Graph CLASSID:100 CYCLO:5 DOTS:4 EQTEST:2 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:7 LE:0 LOC:21 LT:0 METHOD:_print METHODID:33 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-_print

__BEGIN_METHOD_CODE__

Graph::_print(ostream& os, const GraphGC& _gc)
{
     
    GraphGC gc(_gc);
    gc.drawHints = false;
    gc.hintSize  = 0;

     
     
    for(GraphEdge *edge = firstVisibleEdge(); edge != 0; 
	 edge = nextVisibleEdge(edge))
	if(gc.printSelectedNodesOnly == false ||
	    (edge->from()->selected() && edge->to()->selected()))
	    edge->_print(os, gc);

     
     
    for(GraphNode *node = firstVisibleNode(); node != 0; 
	 node = nextVisibleNode(node))
	if(gc.printSelectedNodesOnly == false || node->selected())
	    node->_print(os, gc);
}

__END_METHOD_CODE__


	METHOD Graph!region
		CALLS
		firstVisibleNode : Graph,
		BoxRegion : BoxRegion,
		firstVisibleNode : Graph,
		region : Graph,
		nextVisibleNode : Graph,
		firstVisibleNode : Graph,
		nextVisibleNode : Graph,
		region : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 8
			CLASS Graph
			CLASSID 100
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 13
			LT 0
			METHOD region
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:8 CLASS:Graph CLASSID:100 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:13 LT:0 METHOD:region METHODID:37 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-region

__BEGIN_METHOD_CODE__

Graph::region(const GraphGC& gc)
{
    if(firstVisibleNode() == 0)
	return BoxRegion();

    BoxRegion r = firstVisibleNode()->region(gc);
    for(GraphNode *node = nextVisibleNode(firstVisibleNode()); node != 0;
	node = nextVisibleNode(node))
    {
	r = r | (BoxRegion&)node->region(gc);
    }

    return r;
}

__END_METHOD_CODE__


	METHOD Graph!firstVisibleNode
		CALLS
		firstNode : Graph,
		hidden : _SYSTEM_OR_USER_,
		nextNode : Graph



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS Graph
			CLASSID 100
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD firstVisibleNode
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:Graph CLASSID:100 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:firstVisibleNode METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-firstVisibleNode

__BEGIN_METHOD_CODE__

Graph::firstVisibleNode()
{
    GraphNode *node = firstNode();
    while(node != 0 && node->hidden())
	node = nextNode(node);
    return node;
}

__END_METHOD_CODE__


	METHOD Graph!nextVisibleNode
		CALLS
		nextNode : Graph,
		hidden : _SYSTEM_OR_USER_,
		nextNode : Graph



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS Graph
			CLASSID 100
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD nextVisibleNode
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:Graph CLASSID:100 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:nextVisibleNode METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-nextVisibleNode

__BEGIN_METHOD_CODE__

Graph::nextVisibleNode(GraphNode *ref)
{
    GraphNode *node = nextNode(ref);
    while(node != 0 && node->hidden())
	node = nextNode(node);
    return node;
}

__END_METHOD_CODE__


	METHOD Graph!firstVisibleEdge
		CALLS
		firstEdge : Graph,
		hidden : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		to : GraphEdge,
		hidden : _SYSTEM_OR_USER_,
		nextEdge : Graph



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS Graph
			CLASSID 100
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 7
			LT 0
			METHOD firstVisibleEdge
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:Graph CLASSID:100 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:7 LT:0 METHOD:firstVisibleEdge METHODID:24 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-firstVisibleEdge

__BEGIN_METHOD_CODE__

Graph::firstVisibleEdge()
{
    GraphEdge *edge = firstEdge();
    while(edge != 0 && (edge->hidden() 
			 || edge->from()->hidden() || edge->to()->hidden()))
	edge = nextEdge(edge);
    return edge;
}

__END_METHOD_CODE__


	METHOD Graph!nextVisibleEdge
		CALLS
		nextEdge : Graph,
		hidden : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		to : GraphEdge,
		hidden : _SYSTEM_OR_USER_,
		nextEdge : Graph



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS Graph
			CLASSID 100
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 7
			LT 0
			METHOD nextVisibleEdge
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:Graph CLASSID:100 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:7 LT:0 METHOD:nextVisibleEdge METHODID:25 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-nextVisibleEdge

__BEGIN_METHOD_CODE__

Graph::nextVisibleEdge(GraphEdge *ref)
{
    GraphEdge *edge = nextEdge(ref);
    while(edge != 0 && (edge->hidden() 
			 || edge->from()->hidden() || edge->to()->hidden()))
	edge = nextEdge(edge);
    return edge;
}

__END_METHOD_CODE__


	METHOD Graph!OK
		CALLS
		firstNode : Graph,
		nextNode : Graph,
		firstEdge : Graph,
		nextEdge : Graph



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 4
			CLASS Graph
			CLASSID 100
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD OK
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:4 CLASS:Graph CLASSID:100 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:OK METHODID:38 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-OK

__BEGIN_METHOD_CODE__

Graph::OK()
{
    for(GraphNode *n = firstNode(); n != 0; n = nextNode(n))
    {
	 ;
    }

    for(GraphEdge *e = firstEdge(); e != 0; e = nextEdge(e))
    {
	 ;
    }

    return true;
}

__END_METHOD_CODE__

#===================================================================
#File  ../../code/ddd-3.0/ddd/Graph.o.nu.met	  Methods Number  19
#===================================================================
#Process file ../../code/ddd-3.0/ddd/GraphEdit.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/GraphGC.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/GraphNode.o.nu.met ... 


	METHOD GraphNode!OK
		CALLS
		firstFrom : GraphNode,
		nextFrom : GraphNode,
		firstTo : GraphNode,
		nextTo : GraphNode



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 4
			CLASS GraphNode
			CLASSID 95
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD OK
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:4 CLASS:GraphNode CLASSID:95 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:OK METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-OK

__BEGIN_METHOD_CODE__

GraphNode::OK()
{
    GraphEdge *e;

     
    for(e = firstFrom(); e != 0; e = nextFrom(e))
	 ;

    for(e = firstTo(); e != 0; e = nextTo(e))
	 ;

    return true;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/GraphNode.o.nu.met	  Methods Number  1
#======================================================================
#Process file ../../code/ddd-3.0/ddd/HintGraphN.o.nu.met ... 


	METHOD HintGraphNode!forceDraw
		CALLS
		region : HintGraphNode,
		XDrawRectangle : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		origin : BoxRegion,
		space : BoxRegion,
		space : BoxRegion



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 6
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 2
			DOTS 6
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD forceDraw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:6 CLASS:HintGraphNode CLASSID:101 CYCLO:2 DOTS:6 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:forceDraw METHODID:0 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-forceDraw

__BEGIN_METHOD_CODE__

HintGraphNode::forceDraw(Widget w, const BoxRegion&, 
			      const GraphGC& gc)
{
    if(gc.drawHints)
    {
	const BoxRegion& r = region(gc);

	XDrawRectangle(XtDisplay(w), XtWindow(w), gc.hintGC, 
		       r.origin(X), r.origin(Y),
		       r.space(X), r.space(Y));
    }
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/HintGraphN.o.nu.met	  Methods Number  1
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/LineGraphE.o.nu.met ... 


	METHOD LineGraphEdge!moveToSide
		CALLS
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 4
			ASS 5
			AVVARLEN 0
			CALLEDN 5
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 5
			DOTS 5
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 20
			LT 0
			METHOD moveToSide
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:5 AVVARLEN:0 CALLEDN:5 CLASS:LineGraphEdge CLASSID:102 CYCLO:5 DOTS:5 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:20 LT:0 METHOD:moveToSide METHODID:6 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-moveToSide

__BEGIN_METHOD_CODE__

LineGraphEdge::moveToSide(const BoxRegion& b, int side, 
			       BoxPoint& p, const BoxPoint&)
{
     ;

    p = b.origin();

     
    if(side & (North | South))
    {
	p[_ARGS_] += b.space(X) / 2;
	if(side & South)
	    p[_ARGS_] += b.space(Y);
    }

    if(side & (East | West))
    {
	p[_ARGS_] += b.space(Y) / 2;
	if(side & East)
	    p[_ARGS_] += b.space(X);
    }
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!clipToSide
		CALLS
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 10
			ASS 10
			AVVARLEN 0
			CALLEDN 2
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 4
			DOTS 2
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 0
			METHOD clipToSide
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:10 ASS:10 AVVARLEN:0 CALLEDN:2 CLASS:LineGraphEdge CLASSID:102 CYCLO:4 DOTS:2 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:21 LT:0 METHOD:clipToSide METHODID:7 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-clipToSide

__BEGIN_METHOD_CODE__

LineGraphEdge::clipToSide(const BoxRegion& b, int side, 
			       BoxPoint& p, const BoxPoint& c)
{
     ;

    BoxDimension d1, d2;

    if(side & (North | South))
	d1 = X, d2 = Y;
    else
	d1 = Y, d2 = X;

    int offset;
    if(side & (North | West))
	offset = -1;
    else
	offset = 1;

    if(c[_ARGS_] != p[_ARGS_] && c[_ARGS_] != p[_ARGS_])
	p[_ARGS_] += offset * (b.space(d2) / 2) * (c[_ARGS_] - p[_ARGS_]) 
	    / (c[_ARGS_] - p[_ARGS_]);
    p[_ARGS_] += offset * b.space(d2) / 2;
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!clipToCircle
		CALLS
		max : DynArray,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		hypot : _SYSTEM_OR_USER_,
		BoxCoordinate : _SYSTEM_OR_USER_,
		BoxCoordinate : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 10
			ASS 4
			AVVARLEN 0
			CALLEDN 6
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD clipToCircle
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:10 ASS:4 AVVARLEN:0 CALLEDN:6 CLASS:LineGraphEdge CLASSID:102 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:11 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:clipToCircle METHODID:8 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-clipToCircle

__BEGIN_METHOD_CODE__

LineGraphEdge::clipToCircle(const BoxRegion& b, int  , 
				 BoxPoint& p, const BoxPoint& c)
{
     

    double radius = max(b.space(X), b.space(Y)) / 2;
    if(radius > 0.0)
    {
	double hyp = hypot(c[_ARGS_] - p[_ARGS_], c[_ARGS_] - p[_ARGS_]);

	p[_ARGS_] += BoxCoordinate((radius * (c[_ARGS_] - p[_ARGS_])) / hyp);
	p[_ARGS_] += BoxCoordinate((radius * (c[_ARGS_] - p[_ARGS_])) / hyp);
    }
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!findLine
		CALLS
		abs : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		void : _SYSTEM_OR_USER_,
		proc : _SYSTEM_OR_USER_,
		proc : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 13
			ASS 21
			AVVARLEN 0
			CALLEDN 9
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 7
			DOTS 9
			EQTEST 1
			EXPRORCALL 20
			GE 0
			GT 4
			IN 0
			INDR 0
			LE 0
			LOC 52
			LT 0
			METHOD findLine
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 7
			PPLUS 1
			RETPOINT 0
			SCOPEOP 3
			STMNT 28
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:13 ASS:21 AVVARLEN:0 CALLEDN:9 CLASS:LineGraphEdge CLASSID:102 CYCLO:7 DOTS:9 EQTEST:1 EXPRORCALL:20 GE:0 GT:4 IN:0 INDR:0 LE:0 LOC:52 LT:0 METHOD:findLine METHODID:0 MMINUS:0 OUT:0 PARNUM:7 PPLUS:1 RETPOINT:0 SCOPEOP:3 STMNT:28 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-findLine

__BEGIN_METHOD_CODE__

LineGraphEdge::findLine(const BoxPoint& c1, const BoxPoint& c2,
			     const BoxRegion& b1, const BoxRegion& b2, 
			     BoxPoint& p1, BoxPoint& p2, 
			     const GraphGC& gc)
{
     
    int side1 = North | South | East | West;
    int side2 = North | South | East | West;

     
    if(c2[_ARGS_] > c1[_ARGS_]) { side1 &= ~West; side2 &= ~East; }
    else               { side1 &= ~East; side2 &= ~West; }

    if(c2[_ARGS_] > c1[_ARGS_]) { side1 &= ~North; side2 &= ~South; }
    else               { side1 &= ~South; side2 &= ~North; }

     
    BoxCoordinate dx = abs(c1[_ARGS_] - c2[_ARGS_]);
    BoxCoordinate dy = abs(c1[_ARGS_] - c2[_ARGS_]);

    if(b1.space(Y) * dx > b1.space(X) * dy) side1 &= ~(North | South);
    else                                     side1 &= ~(East | West);

    if(b2.space(Y) * dx > b2.space(X) * dy) side2 &= ~(North | South);
    else                                     side2 &= ~(East | West);

    p1 = c1;
    p2 = c2;

     
    void(*ClipProc)(const BoxRegion& b, int side,
			     BoxPoint& p, const BoxPoint& c);

   
	EdgeAttachMode mode;
	ClipProc       proc;

    static const ClipMapRec clipMap[] = 
    {
	{Straight, LineGraphEdge::clipToSide},
	{Circle,   LineGraphEdge::clipToCircle},
	{Centered, LineGraphEdge::moveToSide},
	{Straight, 0}
    };

    for(int i = 0; clipMap[_ARGS_].proc != 0; i++)
	if(gc.edgeAttachMode == clipMap[_ARGS_].mode)
	{
	    clipMap[_ARGS_].proc(b1, side1, p1, c2);
	    clipMap[_ARGS_].proc(b2, side2, p2, c1);

	    return;
	}

     ;
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!_draw
		CALLS
		from : _SYSTEM_OR_USER_,
		to : GraphEdge,
		drawSelf : LineGraphEdge,
		drawLine : LineGraphEdge



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD _draw
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:LineGraphEdge CLASSID:102 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:_draw METHODID:1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_draw

__BEGIN_METHOD_CODE__

LineGraphEdge::_draw(Widget w, 
			  const BoxRegion& exposed, 
			  const GraphGC& gc)
{
    if(from() == to())
	drawSelf(w, exposed, gc);
    else
	drawLine(w, exposed, gc);
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!drawLine
		CALLS
		from : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		to : GraphEdge,
		pos : _SYSTEM_OR_USER_,
		to : GraphEdge,
		region : _SYSTEM_OR_USER_,
		to : GraphEdge,
		selected : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		findLine : LineGraphEdge,
		XDrawLine : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		drawArrowHead : LineGraphEdge



		METRICS
			ARRAYOP 8
			ASS 10
			AVVARLEN 0
			CALLEDN 20
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 5
			DOTS 7
			EQTEST 1
			EXPRORCALL 26
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 1
			LOC 39
			LT 1
			METHOD drawLine
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:8 ASS:10 AVVARLEN:0 CALLEDN:20 CLASS:LineGraphEdge CLASSID:102 CYCLO:5 DOTS:7 EQTEST:1 EXPRORCALL:26 GE:0 GT:0 IN:0 INDR:6 LE:1 LOC:39 LT:1 METHOD:drawLine METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-drawLine

__BEGIN_METHOD_CODE__

LineGraphEdge::drawLine(Widget w, 
			     const BoxRegion& exposed, 
			     const GraphGC& gc)
{
     
    BoxPoint pos1     = from()->pos();
    BoxRegion region1 = from()->region(gc);
    if(from()->selected())
    {
	pos1             += gc.offsetIfSelected;
	region1.origin() += gc.offsetIfSelected;
    }

    BoxPoint pos2     = to()->pos();
    BoxRegion region2 = to()->region(gc);
    if(to()->selected())
    {
	pos2             += gc.offsetIfSelected;
	region2.origin() += gc.offsetIfSelected;
    }

     
    if(region1 <= region2)
	return;

     
    BoxPoint l1, l2;
    findLine(pos1, pos2, region1, region2, l1, l2, gc);

     
    if(l1 == l2)
	return;

    XDrawLine(XtDisplay(w), XtWindow(w), gc.edgeGC,
	l1[_ARGS_], l1[_ARGS_], l2[_ARGS_], l2[_ARGS_]);

     
    double alpha = atan2(double(l1[_ARGS_] - l2[_ARGS_]), double(l1[_ARGS_] - l2[_ARGS_]));

     
    drawArrowHead(w, exposed, gc, l2, alpha);
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!drawArrowHead
		CALLS
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		short : _SYSTEM_OR_USER_,
		cos : _SYSTEM_OR_USER_,
		short : _SYSTEM_OR_USER_,
		sin : _SYSTEM_OR_USER_,
		short : _SYSTEM_OR_USER_,
		cos : _SYSTEM_OR_USER_,
		short : _SYSTEM_OR_USER_,
		sin : _SYSTEM_OR_USER_,
		XFillPolygon : _SYSTEM_OR_USER_,




		METRICS
			ARRAYOP 14
			ASS 8
			AVVARLEN 0
			CALLEDN 13
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 2
			DOTS 11
			EQTEST 0
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 26
			LT 0
			METHOD drawArrowHead
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:14 ASS:8 AVVARLEN:0 CALLEDN:13 CLASS:LineGraphEdge CLASSID:102 CYCLO:2 DOTS:11 EQTEST:0 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:26 LT:0 METHOD:drawArrowHead METHODID:4 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-drawArrowHead

__BEGIN_METHOD_CODE__

LineGraphEdge::drawArrowHead(Widget w,
				  const BoxRegion&  ,
				  const GraphGC& gc,
				  const BoxPoint& pos,
				  double alpha)
{
    if(!gc.drawArrowHeads || to()->isHint())
	return;

    const double offset = gc.arrowAngle * 3.14159265358979323846   / 180;	 
    const int length    = gc.arrowLength;		 

     
    XPoint points[_ARGS_];
    points[_ARGS_].x = pos[_ARGS_];
    points[_ARGS_].y = pos[_ARGS_];
    points[_ARGS_].x = short(pos[_ARGS_] + length * cos(alpha + offset / 2));
    points[_ARGS_].y = short(pos[_ARGS_] + length * sin(alpha + offset / 2));
    points[_ARGS_].x = short(pos[_ARGS_] + length * cos(alpha - offset / 2));
    points[_ARGS_].y = short(pos[_ARGS_] + length * sin(alpha - offset / 2));








    XFillPolygon(XtDisplay(w), XtWindow(w), gc.edgeGC, points,
		 ((Cardinal) (sizeof( points ) / sizeof( points [_ARGS_]))) , 2 , 0 );
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!drawSelf
		CALLS
		from : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		min : _SYSTEM_OR_USER_,
		space : BoxRegion,
		space : BoxRegion,
		min : _SYSTEM_OR_USER_,
		space : BoxRegion,
		space : BoxRegion,
		max : DynArray,
		position : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		XDrawArc : _SYSTEM_OR_USER_,
		acos : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		origin : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		drawArrowHead : LineGraphEdge



		METRICS
			ARRAYOP 2
			ASS 35
			AVVARLEN 0
			CALLEDN 43
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 23
			DOTS 33
			EQTEST 0
			EXPRORCALL 56
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 121
			LT 0
			METHOD drawSelf
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 55
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:35 AVVARLEN:0 CALLEDN:43 CLASS:LineGraphEdge CLASSID:102 CYCLO:23 DOTS:33 EQTEST:0 EXPRORCALL:56 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:121 LT:0 METHOD:drawSelf METHODID:3 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:55 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-drawSelf

__BEGIN_METHOD_CODE__

LineGraphEdge::drawSelf(Widget w,
			     const BoxRegion& exposed,
			     const GraphGC& gc)
{
     ;

     
    BoxRegion region = from()->region(gc);
    if(from()->selected())
	region.origin() += gc.offsetIfSelected;

     
    Dimension diameter = gc.selfEdgeDiameter;

     
    diameter = min(diameter, region.space(X) + region.space(X) / 2);
    diameter = min(diameter, region.space(Y) + region.space(Y) / 2);

     
    diameter = max(diameter, 4);
    Dimension radius = (diameter + 1) / 2;
    diameter = radius * 2;

    BoxPoint position(region.origin());	 
    int start = 0;		         
    const int extend = 270;	         

    switch(gc.selfEdgePosition)
    {
    case NorthEast:
	position += BoxPoint(region.space(X) - radius, -radius);
	start = 270;
	break;

    case SouthEast:
	position += 
	    BoxPoint(region.space(X) - radius, region.space(Y) - radius);
	start = 180;
	break;

    case SouthWest:
	position += BoxPoint(-radius, region.space(Y) - radius);
	start = 90;
	break;

    case NorthWest:
	position += BoxPoint(-radius, -radius);
	start = 0;
	break;
    }

    XDrawArc(XtDisplay(w), XtWindow(w), gc.edgeGC, position[_ARGS_],
	     position[_ARGS_], diameter, diameter,
	     start * 64, extend * 64);

     
    int arrow_angle = 0;
    switch(gc.selfEdgeDirection)
    {
    case Clockwise:
	arrow_angle = 360 - (start + extend + 180) % 360;
	break;

    case Counterclockwise:
	arrow_angle = 360 - (start + 180) % 360;
	break;
    }
    double alpha = 2 * 3.14159265358979323846   * arrow_angle / 360.0;

     
    double cosine = gc.arrowLength / (2.0 * radius);
    double inclination = (3.14159265358979323846   / 2.0) - acos(cosine);

     
    position = BoxPoint(region.origin());
    switch(gc.selfEdgeDirection)
    {
    case Clockwise:
	alpha -= inclination;
	switch(gc.selfEdgePosition)
	{
	case NorthEast:
	    position += BoxPoint(region.space(X), radius);
	    break;

	case SouthEast:
	    position += BoxPoint(region.space(X) - radius, region.space(Y));
	    break;

	case SouthWest:
	    position += BoxPoint(0, region.space(Y) - radius);
	    break;

	case NorthWest:
	    position += BoxPoint(radius, 0);
	    break;
	}
	break;

    case Counterclockwise:
	alpha += inclination;
	switch(gc.selfEdgePosition)
	{
	case NorthEast:
	    position += BoxPoint(region.space(X) - radius, 0);
	    break;

	case SouthEast:
	    position += BoxPoint(region.space(X), region.space(Y) - radius);
	    break;

	case SouthWest:
	    position += BoxPoint(radius, region.space(Y));
	    break;

	case NorthWest:
	    position += BoxPoint(0, radius);
	    break;
	}
	break;
    }

    drawArrowHead(w, exposed, gc, position, alpha);
}

__END_METHOD_CODE__


	METHOD LineGraphEdge!_print
		CALLS
		from : _SYSTEM_OR_USER_,
		to : GraphEdge,
		_print : GraphEdge



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 2
			METHOD _print
			METHODID 11
			MMINUS 0
			OUT 1
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:LineGraphEdge CLASSID:102 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:2 METHOD:_print METHODID:11 MMINUS:0 OUT:1 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-_print

__BEGIN_METHOD_CODE__

LineGraphEdge::_print(ostream& os, const GraphGC &gc)
{
    if(from() == to())
    {
	static int warning = 0;
	if(warning++ == 0)
	    cerr << _REMOVED_STR_;
    }

    GraphEdge::_print(os, gc);
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/LineGraphE.o.nu.met	  Methods Number  9
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/ArcGraphE.o.nu.met ... 


	METHOD ArcGraphEdge!center
		CALLS
		asin : _SYSTEM_OR_USER_,
		hypot : _SYSTEM_OR_USER_,
		asin : _SYSTEM_OR_USER_,
		hypot : _SYSTEM_OR_USER_,
		fabs : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 30
			ASS 12
			AVVARLEN 0
			CALLEDN 5
			CLASS ArcGraphEdge
			CLASSID 103
			CYCLO 4
			DOTS 6
			EQTEST 2
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 27
			LT 1
			METHOD center
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:30 ASS:12 AVVARLEN:0 CALLEDN:5 CLASS:ArcGraphEdge CLASSID:103 CYCLO:4 DOTS:6 EQTEST:2 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:27 LT:1 METHOD:center METHODID:2 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-center

__BEGIN_METHOD_CODE__

ArcGraphEdge::center(const BoxPoint& p1, const BoxPoint& p2, 
			  const BoxPoint& p3, double& x, double& y)
{
    if(p1[_ARGS_] == p3[_ARGS_] && p1[_ARGS_] == p3[_ARGS_])
	return false;

    BoxPoint d12 = p1 - p2;
    BoxPoint d13 = p1 - p3;

    double s12 = asin(d12[_ARGS_] / hypot(d12));
    double s13 = asin(d13[_ARGS_] / hypot(d13));
    const double epsilon = 0.01;
    if(fabs(s12 - s13) < epsilon)
	return false;

    double l1 = p1[_ARGS_] * p1[_ARGS_] + p1[_ARGS_] * p1[_ARGS_];
    double l2 = p2[_ARGS_] * p2[_ARGS_] + p2[_ARGS_] * p2[_ARGS_];
    double l3 = p3[_ARGS_] * p3[_ARGS_] + p3[_ARGS_] * p3[_ARGS_];

    y = (d12[_ARGS_] * (l3 - l1) - d13[_ARGS_] * (l2 - l1))
	/ (2.0 * (d13[_ARGS_] * d12[_ARGS_] - d12[_ARGS_] * d13[_ARGS_]));

    if(p1[_ARGS_] != p3[_ARGS_])
	x = (l3 + 2.0 * y * d13[_ARGS_] - l1) / (2.0 * -d13[_ARGS_]);
    else
	x = (l2 + 2.0 * y * d12[_ARGS_] - l1) / (2.0 * -d12[_ARGS_]);

    return true;
}

__END_METHOD_CODE__


	METHOD ArcGraphEdge!drawLine
		CALLS
		from : _SYSTEM_OR_USER_,
		isHint : _SYSTEM_OR_USER_,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		drawLine : LineGraphEdge,
		from : _SYSTEM_OR_USER_,
		isHint : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		to : GraphEdge,
		nextTo : GraphNode,
		firstTo : GraphNode,
		drawLine : LineGraphEdge,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		to : GraphEdge,
		firstFrom : GraphNode,
		to : GraphEdge,
		firstFrom : GraphNode,
		to : GraphEdge,
		from : _SYSTEM_OR_USER_,
		nextFrom : GraphNode,
		firstFrom : GraphNode,
		drawLine : LineGraphEdge,
		drawLine : LineGraphEdge,
		pos : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		pos : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		drawLine : LineGraphEdge,
		findLine : LineGraphEdge,
		findLine : LineGraphEdge,
		center : ArcGraphEdge,
		drawLine : LineGraphEdge,
		c : _SYSTEM_OR_USER_,
		hypot : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		sgn : _SYSTEM_OR_USER_,
		sgn : _SYSTEM_OR_USER_,
		drawLine : LineGraphEdge,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		XDrawArc : _SYSTEM_OR_USER_,
		unsigned : _SYSTEM_OR_USER_,
		unsigned : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		isHint : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		drawArrowHead : LineGraphEdge



		METRICS
			ARRAYOP 18
			ASS 49
			AVVARLEN 0
			CALLEDN 77
			CLASS ArcGraphEdge
			CLASSID 103
			CYCLO 17
			DOTS 20
			EQTEST 7
			EXPRORCALL 113
			GE 0
			GT 9
			IN 0
			INDR 25
			LE 2
			LOC 159
			LT 8
			METHOD drawLine
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 7
			STMNT 65
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:18 ASS:49 AVVARLEN:0 CALLEDN:77 CLASS:ArcGraphEdge CLASSID:103 CYCLO:17 DOTS:20 EQTEST:7 EXPRORCALL:113 GE:0 GT:9 IN:0 INDR:25 LE:2 LOC:159 LT:8 METHOD:drawLine METHODID:1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:7 STMNT:65 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-drawLine

__BEGIN_METHOD_CODE__

ArcGraphEdge::drawLine(Widget w, 
			    const BoxRegion& exposed, 
			    const GraphGC& gc)
{
    HintGraphNode   *arc_hint = 0;
    RegionGraphNode *arc_from = 0;
    RegionGraphNode *arc_to   = 0;

    if(from()->isHint() && to()->isHint())
    {
	 
	LineGraphEdge::drawLine(w, exposed, gc);
	return;
    }
    else if(from()->isHint() && from()->firstTo() != 0)
    {
	arc_hint = dynamic_cast< HintGraphNode  *>(  from() ) ;
	arc_from = dynamic_cast< RegionGraphNode  *>(  arc_hint->firstTo()->from() ) ;
	arc_to   = dynamic_cast< RegionGraphNode  *>(  to() ) ;

	if(arc_hint == 0 || arc_from == 0 || arc_to == 0 
	    || arc_hint->nextTo(arc_hint->firstTo()) != 0)
	{
	     
	    LineGraphEdge::drawLine(w, exposed, gc);
	    return;
	}
    }
    else if(to()->isHint() && to()->firstFrom() != 0)
    {
	arc_hint = dynamic_cast< HintGraphNode  *>(  to() ) ;
	arc_to   = dynamic_cast< RegionGraphNode  *>(  arc_hint->firstFrom()->to() ) ;
	arc_from = dynamic_cast< RegionGraphNode  *>(  from() ) ;

	if(arc_hint == 0 || arc_from == 0 || arc_to == 0
	    || arc_hint->nextFrom(arc_hint->firstFrom()) != 0)
	{
	     
	    LineGraphEdge::drawLine(w, exposed, gc);
	    return;
	}
    }
    else
    {
	 
	LineGraphEdge::drawLine(w, exposed, gc);
	return;
    }

    BoxPoint pos_from     = arc_from->pos();
    BoxRegion region_from = arc_from->region(gc);
    if(arc_from->selected())
    {
	pos_from             += gc.offsetIfSelected;
	region_from.origin() += gc.offsetIfSelected;
    }

    BoxPoint pos_to     = arc_to->pos();
    BoxRegion region_to = arc_to->region(gc);
    if(arc_to->selected())
    {
	pos_to             += gc.offsetIfSelected;
	region_to.origin() += gc.offsetIfSelected;
    }

    BoxPoint pos_hint     = arc_hint->pos();
    BoxRegion region_hint = arc_hint->region(gc);
    if(arc_hint->selected())
    {
	pos_hint             += gc.offsetIfSelected;
	region_hint.origin() += gc.offsetIfSelected;
    }

    if(pos_hint <= region_from || pos_hint <= region_to)
    {
	 
	LineGraphEdge::drawLine(w, exposed, gc);
	return;
    }

    BoxPoint new_pos_from, new_pos_to, dummy;
    findLine(pos_from, pos_hint, region_from, region_hint,
	     new_pos_from, dummy, gc);
    findLine(pos_hint, pos_to, region_hint, region_to,
	     dummy, new_pos_to, gc);
    pos_from = new_pos_from;
    pos_to   = new_pos_to;

     

     
    double x, y;
    bool ok = center(pos_from, pos_hint, pos_to, x, y);
    if(!ok)
    {
	 
	LineGraphEdge::drawLine(w, exposed, gc);
	return;
    }

    BoxPoint c((BoxCoordinate)x, (BoxCoordinate)y);

     
    double radius = hypot(c - pos_to);

     
    double alpha_from = -atan2(double(pos_from[_ARGS_] - c[_ARGS_]), 
			       double(pos_from[_ARGS_] - c[_ARGS_]));
    double alpha_hint = -atan2(double(pos_hint[_ARGS_] - c[_ARGS_]),
			       double(pos_hint[_ARGS_] - c[_ARGS_]));
    double alpha_to   = -atan2(double(pos_to[_ARGS_] - c[_ARGS_]),
			       double(pos_to[_ARGS_] - c[_ARGS_]));

    const int base = 360 * 64;

    int angle_from = (int(alpha_from * base / (3.14159265358979323846   * 2.0)) + base) % base;
    int angle_to   = (int(alpha_to   * base / (3.14159265358979323846   * 2.0)) + base) % base;
    int angle_hint = (int(alpha_hint * base / (3.14159265358979323846   * 2.0)) + base) % base;

    int path_from_hint = (base + angle_hint - angle_from) % base;
    int path_hint_to   = (base + angle_to - angle_hint) % base;

    if(abs(path_from_hint) > base / 2)
	path_from_hint = (path_from_hint - base) % base;
    if(abs(path_hint_to) > base / 2)
	path_hint_to = (path_hint_to - base) % base;

    if(sgn(path_from_hint) * sgn(path_hint_to) == -1)
    {
	 
	LineGraphEdge::drawLine(w, exposed, gc);
	return;
    }

    int angle, path;
    if(to()->isHint())
    {
	angle = angle_from;
	path  = path_from_hint;
    }
    else
    {
	angle = angle_hint;
	path  = path_hint_to;
    }

    XDrawArc(XtDisplay(w), XtWindow(w), gc.edgeGC,
	     c[_ARGS_] - int(radius), c[_ARGS_] - int(radius),
	     unsigned(radius) * 2, unsigned(radius) * 2, angle, path);

    if(from()->isHint())
    {
	 
	double alpha = atan2(double(pos_to[_ARGS_] - c[_ARGS_]),
			     double(pos_to[_ARGS_] - c[_ARGS_]));
	if(path > 0)
	    alpha += 3.14159265358979323846   / 2.0;
	else
	    alpha -= 3.14159265358979323846   / 2.0;
	drawArrowHead(w, exposed, gc, pos_to, alpha);
    }
}

__END_METHOD_CODE__


	METHOD ArcGraphEdge!_print
		CALLS
		_print : LineGraphEdge



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS ArcGraphEdge
			CLASSID 103
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 2
			METHOD _print
			METHODID 5
			MMINUS 0
			OUT 1
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:ArcGraphEdge CLASSID:103 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:2 METHOD:_print METHODID:5 MMINUS:0 OUT:1 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-_print

__BEGIN_METHOD_CODE__

ArcGraphEdge::_print(ostream& os, const GraphGC &gc)
{
    static int warning = 0;
    if(warning++ == 0)
	cerr << _REMOVED_STR_;

    LineGraphEdge::_print(os, gc);
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/ArcGraphE.o.nu.met	  Methods Number  3
#======================================================================
#Process file ../../code/ddd-3.0/ddd/PosGraphN.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/RegionGN.o.nu.met ... 


	METHOD RegionGraphNode!center
		CALLS
		origin : AssocRec,
		pos : _SYSTEM_OR_USER_,
		space : AssocRec



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD center
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:center METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-center

__BEGIN_METHOD_CODE__

RegionGraphNode::center()
{
    _region.origin() = pos() - (_region.space() / 2);
}

__END_METHOD_CODE__


	METHOD RegionGraphNode!originToPos
		CALLS
		region : RegionGraphNode,
		space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD originToPos
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:originToPos METHODID:8 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-originToPos

__BEGIN_METHOD_CODE__

RegionGraphNode::originToPos(const BoxPoint& origin,
				      const GraphGC& gc)
{
    return origin + region(gc).space() / 2;
}

__END_METHOD_CODE__


	METHOD RegionGraphNode!draw
		CALLS
		region : RegionGraphNode,
		space : BoxRegion,
		space : BoxRegion,
		XFillRectangle : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		origin : BoxRegion,
		space : BoxRegion,
		space : BoxRegion,
		selected : _SYSTEM_OR_USER_,
		highlightRegion : RegionGraphNode,
		XFillRectangle : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 15
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 3
			DOTS 12
			EQTEST 2
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 28
			LT 1
			METHOD draw
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:15 CLASS:RegionGraphNode CLASSID:98 CYCLO:3 DOTS:12 EQTEST:2 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:28 LT:1 METHOD:draw METHODID:9 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-draw

__BEGIN_METHOD_CODE__

RegionGraphNode::draw(Widget w, 
			   const BoxRegion& exposed, 
			   const GraphGC& gc)
{
    const BoxRegion& r = region(gc);

     
    if(!(r <= exposed) || r.space(X) == 0 || r.space(Y) == 0)
	return;

    Display *display = XtDisplay(w);
    Window window = XtWindow(w);

     
    XFillRectangle(display, window, gc.clearGC,
		   r.origin(X), r.origin(Y),
		   r.space(X), r.space(Y));

     
    forceDraw(w, exposed, gc);

     
    if(selected())
    {
	const BoxRegion& h = highlightRegion(gc);

	XFillRectangle(display, window, gc.invertGC,
		       h.origin(X), h.origin(Y),
		       h.space(X), h.space(Y));
    }
}

__END_METHOD_CODE__


	METHOD RegionGraphNode!_print
		CALLS
		cleanRegion : _SYSTEM_OR_USER_,
		region : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _print
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_print METHODID:10 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-_print

__BEGIN_METHOD_CODE__

RegionGraphNode::_print(ostream& os, const GraphGC& gc)
{
    cleanRegion(os, gc, region(gc));
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/RegionGN.o.nu.met	  Methods Number  4
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/ScrolledGE.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/args.o.nu.met ... 


	METHOD SourceView!create_bp
		CALLS
		set_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD create_bp
			METHODID 191
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:create_bp METHODID:191 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 191-create_bp

__BEGIN_METHOD_CODE__

SourceView::create_bp(const string& a, Widget w)
{
    set_bp(a, true, false, _REMOVED_STR_, w);
}

__END_METHOD_CODE__


	METHOD SourceView!create_temp_bp
		CALLS
		set_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD create_temp_bp
			METHODID 192
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:create_temp_bp METHODID:192 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 192-create_temp_bp

__BEGIN_METHOD_CODE__

SourceView::create_temp_bp(const string& a, Widget w)
{
    set_bp(a, true, true, _REMOVED_STR_, w);
}

__END_METHOD_CODE__


	METHOD SourceView!clear_bp
		CALLS
		set_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD clear_bp
			METHODID 193
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:clear_bp METHODID:193 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 193-clear_bp

__BEGIN_METHOD_CODE__

SourceView::clear_bp(const string& a, Widget w)
{
    set_bp(a, false, false, _REMOVED_STR_, w);
}

__END_METHOD_CODE__

#=================================================================
#File  ../../code/ddd-3.0/ddd/args.o.nu.met	  Methods Number  3
#=================================================================
#Process file ../../code/ddd-3.0/ddd/buttons.o.nu.met ... 


	METHOD DataDisp!get_selection
		CALLS
		get_state : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD get_selection
			METHODID 139
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:get_selection METHODID:139 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 139-get_selection

__BEGIN_METHOD_CODE__

DataDisp::get_selection(ostream& os, bool include_position)
{
    StringArray dummy;
    return get_state(os, false, include_position, dummy, 0);
}

__END_METHOD_CODE__


	METHOD DataDisp!get_state
		CALLS
		get_state : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD get_state
			METHODID 140
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:get_state METHODID:140 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 140-get_state

__BEGIN_METHOD_CODE__

DataDisp::get_state(ostream& os, const StringArray& scopes, 
				int target_frame)
{
    return get_state(os, true, true, scopes, target_frame);
}

__END_METHOD_CODE__


	METHOD DataDisp!get_shortcut_menu

		METRICS
			shortcut_exprs REFERRED 1 TIMES,
			shortcut_labels REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 14
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD get_shortcut_menu
			METHODID 87
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:14 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:get_shortcut_menu METHODID:87 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 87-get_shortcut_menu

__BEGIN_METHOD_CODE__

DataDisp::get_shortcut_menu(StringArray& exprs,
					StringArray& labels)
{
    exprs  = shortcut_exprs;
    labels = shortcut_labels;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/buttons.o.nu.met	  Methods Number  3
#====================================================================
#Process file ../../code/ddd-3.0/ddd/cmdtty.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/complete.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/userinfo.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/configinfo.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/dbx-lookup.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/disp-read.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/editing.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/environ.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/examine.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/exectty.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/exit.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/file.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/filetype.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/fonts.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/fortranize.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/gdbinit.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/graph.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/hostname.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/index.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/java.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/logo.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/mydialogs.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/options.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/post.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/question.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/regexps.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/resources.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/roulette.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/sashes.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/session.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/settings.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/shell.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/shorten.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/show.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/source.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/string-fun.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/tips.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/toolbar.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/ungrab.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/windows.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/xconfig.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/AliasGE.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/BreakPoint.o.nu.met ... 


	METHOD BreakPoint!BreakPoint
		CALLS
		update : BreakPoint



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD BreakPoint
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:BreakPoint METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-BreakPoint

__BEGIN_METHOD_CODE__

BreakPoint::BreakPoint(string& info_output, string arg, int number)
{
    update(info_output);
}

__END_METHOD_CODE__


	METHOD BreakPoint!update
		CALLS
		type : _SYSTEM_OR_USER_,
		strip_leading_space : _SYSTEM_OR_USER_,
		read_nr_str : _SYSTEM_OR_USER_,
		get_positive_nr : _SYSTEM_OR_USER_,
		strip_leading_space : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		after : string,
		contains : string,
		contains : string,
		contains : string,
		contains : string,
		contains : string,
		contains : string,
		after : string,
		after : string,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		through : string,
		from : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		after : string,
		index : string,
		through : string,
		after : string,
		freq : string,
		split : _SYSTEM_OR_USER_,
		strip_leading_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		atoi : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		size : StringArray,
		size : StringArray,
		size : StringArray,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		unquote : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		dbx_lookup : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		atoi : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		after : string,
		atoi : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		dbx_lookup : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_space : _SYSTEM_OR_USER_,
		after : string,
		index : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		after : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		pos : BreakPoint,
		line_nr : BreakPoint,
		address : BreakPoint,
		file_name : BreakPoint,
		itostring : _SYSTEM_OR_USER_,
		line_nr : BreakPoint,
		file_name : BreakPoint,
		itostring : _SYSTEM_OR_USER_,
		line_nr : BreakPoint,
		symbol : BreakPoint,
		enabled : BreakPoint,
		condition : BreakPoint,
		ignore_count : BreakPoint,
		number_str : BreakPoint,
		condition : BreakPoint,
		is_false : BreakPoint,
		real_condition : BreakPoint,
		real_condition : BreakPoint,
		after : string,
		and_op : BreakPoint,
		real_condition : BreakPoint,
		enabled : BreakPoint,
		is_false : BreakPoint,
		real_condition : BreakPoint,
		false_value : BreakPoint,
		program_language : GDBAgent,
		and_op : BreakPoint,
		program_language : GDBAgent,
		is_false : BreakPoint,
		false_value : BreakPoint,
		downcase : string,
		downcase : string,
		false_value : BreakPoint,
		and_op : BreakPoint,
		contains : _SYSTEM_OR_USER_,
		make_false : BreakPoint,
		is_false : BreakPoint,
		false_value : BreakPoint,
		false_value : BreakPoint,
		and_op : BreakPoint,
		get_state : BreakPoint,
		line_nr : BreakPoint,
		file_name : BreakPoint,
		itostring : _SYSTEM_OR_USER_,
		line_nr : BreakPoint,
		string : string,
		address : BreakPoint,
		char : _SYSTEM_OR_USER_,
		real_condition : BreakPoint,
		itostring : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		type : BreakPoint,
		dispo : BreakPoint,
		watch_command : GDBAgent,
		expr : BreakPoint,
		watch_mode : BreakPoint,
		enabled : BreakPoint,
		has_disable_command : GDBAgent,
		disable_command : GDBAgent,
		ignore_count : BreakPoint,
		has_ignore_command : GDBAgent,
		ignore_command : GDBAgent,
		has_condition_command : GDBAgent,
		condition_command : GDBAgent,
		commands : BreakPoint,
		size : _SYSTEM_OR_USER_,
		commands : BreakPoint,
		size : _SYSTEM_OR_USER_,
		commands : BreakPoint,
		has_handler_command : GDBAgent,
		type : BreakPoint,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		expr : BreakPoint,
		enabled : BreakPoint,
		has_disable_command : GDBAgent,
		disable_command : GDBAgent,
		ignore_count : BreakPoint,
		has_ignore_command : GDBAgent,
		ignore_command : GDBAgent,
		has_condition_command : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		after : string,
		enabled : BreakPoint,
		has_disable_command : GDBAgent,
		disable_command : GDBAgent,
		ignore_count : BreakPoint,
		has_ignore_command : GDBAgent,
		ignore_command : GDBAgent,
		has_delete_command : GDBAgent,
		delete_command : _SYSTEM_OR_USER_



		METRICS
			mynumber REFERRED 2 TIMES,
			mytype REFERRED 7 TIMES,
			mydispo REFERRED 6 TIMES,
			myenabled REFERRED 11 TIMES,
			myline_nr REFERRED 10 TIMES,
			myignore_count REFERRED 6 TIMES,
			mycommands REFERRED 4 TIMES,
			mywatch_mode REFERRED 4 TIMES,
			myenabled_changed REFERRED 15 TIMES,
			myfile_changed REFERRED 6 TIMES,
			myposition_changed REFERRED 10 TIMES,
			myaddress_changed REFERRED 2 TIMES,
			ARRAYOP 19
			ASS 267
			AVVARLEN 11
			CALLEDN 196
			CLASS BreakPoint
			CLASSID 106
			CYCLO 150
			DOTS 108
			EQTEST 9
			EXPRORCALL 358
			GE 4
			GT 8
			IN 0
			INDR 24
			LE 0
			LOC 807
			LT 117
			METHOD update
			METHODID 31
			MMINUS 1
			OUT 56
			PARNUM 1
			PPLUS 4
			RETPOINT 26
			SCOPEOP 9
			STMNT 270
			TERNINSTR 1
			USEDVARS 12

#METRICS ARRAYOP:19 ASS:267 AVVARLEN:11 CALLEDN:196 CLASS:BreakPoint CLASSID:106 CYCLO:150 DOTS:108 EQTEST:9 EXPRORCALL:358 GE:4 GT:8 IN:0 INDR:24 LE:0 LOC:807 LT:117 METHOD:update METHODID:31 MMINUS:1 OUT:56 PARNUM:1 PPLUS:4 RETPOINT:26 SCOPEOP:9 STMNT:270 TERNINSTR:1 USEDVARS:12 
		;


#ID 31-update

__BEGIN_METHOD_CODE__

BreakPoint::update(string& info_output)
{
    bool changed       = false;
    myenabled_changed  = false;
    myposition_changed = false;
    myfile_changed     = false;
    myaddress_changed  = false;

    if(gdb->type() != JDB)
    {
	 
	strip_leading_space(info_output);
	string number_str = read_nr_str(info_output);
	int number = get_positive_nr(number_str);
	if(number < 0)
	    return false;

	if(number_str != mynumber_str)
	{
	    mynumber_str = number_str;
	    changed = true;
	}
	if(number != mynumber)
	{
	    mynumber = number;
	    changed = true;
	}
    }
    strip_leading_space(info_output);

    switch(gdb->type())
    {
    case GDB:
	{
	     
	     
	    string word1 = info_output.before('\n');
	    string word2 = word1.after(rxblanks_or_tabs);

	    if(word1.contains(_REMOVED_STR_, 0) || 
		word2.contains(_REMOVED_STR_, 0))
	    {
		if(mytype != WATCHPOINT)
		{
		    changed = myenabled_changed = true;
		    mytype = WATCHPOINT;
		}

		 
		if(word1.contains(_REMOVED_STR_, 0))
		    mywatch_mode = WATCH_ACCESS;
		else if(word1.contains(_REMOVED_STR_, 0))
		    mywatch_mode = WATCH_READ;
		else
		    mywatch_mode = WATCH_CHANGE;
	    }
	    else if(word1.contains(_REMOVED_STR_, 0) || 
		     word2.contains(_REMOVED_STR_, 0))
	    {
		if(mytype != BREAKPOINT)
		{
		    changed = myenabled_changed = true;
		    mytype = BREAKPOINT;
		}
	    }
	    info_output = info_output.after(_REMOVED_STR_);
	    info_output = info_output.after(rxblanks_or_tabs);

	     
	    if(info_output.contains(_REMOVED_STR_, 0))
	    {
		if(mydispo != BPDIS)
		{
		    changed = myenabled_changed = true;
		    mydispo = BPDIS;
		}
	    }
	    else if(info_output.contains(_REMOVED_STR_, 0))
	    {
		if(mydispo != BPDEL)
		{
		    changed = myenabled_changed = true;
		    mydispo = BPDEL;
		}
	    }
	    else if(info_output.contains(_REMOVED_STR_, 0))
	    {
		if(mydispo != BPKEEP)
		{
		    changed = myenabled_changed = true;
		    mydispo = BPKEEP;
		}
	    }
	    info_output = info_output.after(rxblanks_or_tabs);

	     
	    if(info_output.contains('y', 0))
	    {
		if(!myenabled)
		{
		    changed = myenabled_changed = true;
		    myenabled = true;
		}
	    }
	    else if(info_output.contains('n', 0))
	    {
		if(myenabled)
		{
		    changed = myenabled_changed = true;
		    myenabled = false;
		}
	    }
	    info_output = info_output.after(rxblanks_or_tabs);

	    string new_info = _REMOVED_STR_;
	    if(mytype == BREAKPOINT) 
	    {
		 
		string new_address = info_output.through(rxalphanum);

		if(myaddress != new_address)
		{
		    changed = myaddress_changed = true;
		    myaddress = new_address;
		}

		info_output = info_output.from(rxname_colon_int_nl);
		if(myfile_name != info_output.before(_REMOVED_STR_))
		{
		    changed = myposition_changed = myfile_changed = true;
		    myfile_name = info_output.before(_REMOVED_STR_);
		}
		info_output = info_output.after(_REMOVED_STR_);
		if(info_output != _REMOVED_STR_ && (__ctype_b[(int) ( ( info_output[_ARGS_] ) )] & (unsigned short int)   _ISdigit )  )
		{
		    int new_line_nr = get_positive_nr(info_output);
		    if(new_line_nr < 0)
			return false;

		    if(myline_nr != new_line_nr) {
			changed = myposition_changed = true;
			myline_nr = new_line_nr;
		    }
		}
	    }
	    else if(mytype == WATCHPOINT)
	    {
		 
	        string new_expr = info_output.before('\n');
		if(myexpr != new_expr)
		{
		    changed = true;
		    myexpr = new_expr;
		}
	    }

	     
	    info_output = info_output.after('\n');

	    int ignore_count = 0;
	    string cond      = _REMOVED_STR_;
	    StringArray commands;

	    if(info_output != _REMOVED_STR_ && ! (__ctype_b[(int) ( ( info_output[_ARGS_] ) )] & (unsigned short int)   _ISdigit )  )
	    {
		 
		int next_nl = index(info_output, rxnl_int, _REMOVED_STR_);
		if(next_nl == -1)
		{
		    new_info += info_output;
		    info_output = _REMOVED_STR_;
		}
		else
		{
		    new_info += info_output.through(next_nl);
		    info_output = info_output.after(next_nl);
		}

		int n = new_info.freq('\n');
		string *lines = new string[_ARGS_];
		split(new_info, lines, n + 1, '\n');
		string newer_info = _REMOVED_STR_;

		for(int i = 0; i < n; i++)
		{
		    bool save_info = true;

		    string line = lines[_ARGS_];
		    bool starts_with_space = (line != _REMOVED_STR_ && (__ctype_b[(int) ( ( line[_ARGS_] ) )] & (unsigned short int)   _ISspace )  );
		    strip_leading_space(line);

		    if(line.contains(_REMOVED_STR_, 0))
		    {
			 
			string count = line.after(_REMOVED_STR_);
			count = count.before(_REMOVED_STR_);
			ignore_count = atoi(count);
		    }
		    else if(line.contains(_REMOVED_STR_, 0))
		    {
			 
			cond = line.after(_REMOVED_STR_);
		    }
		    else if(line.contains(_REMOVED_STR_, 0))
		    {
			 
		    }
		    else if(line.contains(_REMOVED_STR_, 0))
		    {
			 
		    }
		    else if(starts_with_space)
		    {
			 
			commands += line;
			save_info = false;
		    }
		    else
		    {
			 
		    }

		    if(save_info)
			newer_info += line + '\n';
		}

		new_info = newer_info;
		delete[] lines;
	    }

	    if(new_info != myinfos)
	    {
		changed = true;
		myinfos = new_info;
	    }

	    if(ignore_count != myignore_count)
	    {
		changed = myenabled_changed = true;
		myignore_count = ignore_count;
	    }

	    if(cond != mycondition)
	    {
		changed = myenabled_changed = true;
		mycondition = cond;
	    }

	    if(commands.size() != mycommands.size())
	    {
		changed = myenabled_changed = true;
		mycommands = commands;
	    }
	    else
	    {
		for(int i = 0; i < commands.size(); i++)
		    if(commands[_ARGS_] != mycommands[_ARGS_])
		    {
			changed = myenabled_changed = true;
			mycommands[_ARGS_] = commands[_ARGS_];
		    }
	    }
			
	}
	break;

    case DBX:
	{
	    if(info_output.contains(_REMOVED_STR_, 0)
		|| info_output.contains(_REMOVED_STR_, 0))
	    {
		info_output = info_output.after(rxblanks_or_tabs);
		strip_leading_space(info_output);
		if(info_output.contains(_REMOVED_STR_, 0))
		{
		    info_output = info_output.after(rxblanks_or_tabs);
		    string file_name;
		    if(info_output.contains(1, 0))
		    {
			 
			file_name = unquote(info_output.before(_REMOVED_STR_));
			info_output = info_output.after(_REMOVED_STR_);
		    }
		    else if(info_output.contains('[', 0))
		    {
			 
			file_name = info_output.before(_REMOVED_STR_);
			file_name = file_name.after('[');
			info_output = info_output.after(_REMOVED_STR_);
		    }
		    else
		    {
			 
			file_name = _REMOVED_STR_;
		    }

		    int new_line_nr = 0;
		    if(info_output != _REMOVED_STR_ && (__ctype_b[(int) ( ( info_output[_ARGS_] ) )] & (unsigned short int)   _ISdigit )  )
			new_line_nr = get_positive_nr(info_output);

		    if(file_name != _REMOVED_STR_ && file_name != myfile_name)
		    {
			myfile_name = file_name;
			changed = myposition_changed = myfile_changed = true;
		    }

		    if(new_line_nr && new_line_nr != myline_nr)
		    {
			myline_nr = new_line_nr;
			changed = myposition_changed = true;
		    }
		}
		else if(info_output.contains(_REMOVED_STR_, 0))
		{
		     
		    string func = info_output.after(rxblanks_or_tabs);
		    func = func.before('\n');
		    string pos = dbx_lookup(func);
		    if(pos != _REMOVED_STR_)
		    {
			string file_name = pos.before(_REMOVED_STR_);
			string line_s    = pos.after(_REMOVED_STR_);
			int new_line_nr  = get_positive_nr(line_s);

			if(file_name != myfile_name)
			{
			    myfile_name = file_name;
			    changed 
				= myposition_changed 
				= myfile_changed 
				= true;
			}

			if(new_line_nr && new_line_nr != myline_nr)
			{
			    myline_nr = new_line_nr;
			    changed = myposition_changed = true;
			}
		    }
		}
		else
		{
		     
		    mytype       = WATCHPOINT;
		    mywatch_mode = WATCH_CHANGE;

		    string expr = info_output;
		    if(expr.contains('\n'))
			expr = expr.before('\n');
		    if(expr.contains(rxblanks_or_tabs))
			expr = expr.before(rxblanks_or_tabs);

		    myexpr = expr;
		}

		 
		 
		 
		string options;
		if(info_output.contains('\n'))
		    options = info_output.before('\n');
		else
		    options = info_output;
		bool new_enabled = !options.contains(_REMOVED_STR_);
		if(new_enabled != myenabled)
		{
		    myenabled = new_enabled;
		    changed = myenabled_changed = true;
		}

		myinfos = _REMOVED_STR_;
		if(options.contains(_REMOVED_STR_))
		{
		    string count = options.after(_REMOVED_STR_);
		    strip_leading_space(count);
		    if(count.contains(' '))
			count = count.before(' ');

		    myinfos = _REMOVED_STR_ + count;
		    if(count.contains('/'))
			count = count.after('/');
		    int ignore_count = atoi(count);

		    if(ignore_count != myignore_count)
		    {
			myignore_count = ignore_count;
			changed = true;
		    }
		}

		if(options.contains(_REMOVED_STR_) || options.contains(_REMOVED_STR_))
		{
		    string cond = options.after(_REMOVED_STR_);
		    if(myinfos != _REMOVED_STR_)
			myinfos += '\n';
		    myinfos += _REMOVED_STR_ + cond;
		    if(cond != mycondition)
		    {
			mycondition = cond;
			changed = true;
		    }
		}
	    }
	    info_output = info_output.after('\n');
	}
	break;

    case XDB:
	{
	     
	     
	    if(info_output.contains(':', 0))
		info_output = info_output.after(0);

	    strip_leading_space(info_output);

	     
	    if(info_output.contains(_REMOVED_STR_, 0))
	    {
		info_output = info_output.after(_REMOVED_STR_);
		strip_leading_space(info_output);
		string count = info_output.before(rxblanks_or_tabs);
		info_output = info_output.after(rxblanks_or_tabs);

		int ignore_count = atoi(count);
		if(myignore_count != ignore_count)
		{
		    changed = true;
		    myignore_count = ignore_count;
		}
	    }
	    
	     
	     
	    if(info_output.contains(_REMOVED_STR_, 0))
	    {
		if(!myenabled)
		    changed = myenabled_changed = true;
		info_output = info_output.after(_REMOVED_STR_);
		myenabled   = true;
	    }
	    else if(info_output.contains(_REMOVED_STR_, 0))
	    {
		if(myenabled)
		    changed = myenabled_changed = true;
		info_output = info_output.after(_REMOVED_STR_);
		myenabled   = false;
	    }

	     
	    info_output = info_output.after(rxblanks_or_tabs);
	    string func = info_output.before(_REMOVED_STR_);
	    string pos  = dbx_lookup(func);
	    if(pos != _REMOVED_STR_)
	    {
		string file_name = pos.before(_REMOVED_STR_);
		if(file_name != myfile_name)
		{
		    changed = myposition_changed = myfile_changed = true;
		    myfile_name = file_name;
		}
	    }

	    info_output = info_output.after(_REMOVED_STR_);
	    int line_nr = get_positive_nr(info_output);
	    if(line_nr != myline_nr)
	    {
		changed = myposition_changed = true;
		myline_nr = line_nr;
	    }
	    
	    info_output = info_output.after('\n');

	     
	    string commands = info_output;
	    strip_leading_space(commands);
	    if(commands.contains('{', 0))
	    {
		 
		if(commands.contains(_REMOVED_STR_, 0))
		{
		    string cond = commands.after(_REMOVED_STR_);
		    cond = cond.before('{');
		    strip_space(cond);
		    if(cond != mycondition)
		    {
			mycondition = cond;
			changed = true;
		    }
		}

		 
		info_output = info_output.after('\n');
	    }
	}
	break;

    case JDB:
    {
	int colon = info_output.index(':');
	if(colon >= 0)
	{
	    string class_name = info_output.before(colon);
	    int line_no = get_positive_nr(info_output.after(colon));
	    if(line_no >= 0 && class_name != _REMOVED_STR_)
	    {
		if(line_no != myline_nr || class_name != myfile_name)
		{
		    changed = myposition_changed = myfile_changed = true;
		    myfile_name = class_name;
		    myline_nr   = line_no;
		}

		 
		int beginning_of_line = colon;
		while(beginning_of_line >= 0 && 
		       info_output[_ARGS_] != '\n')
		    beginning_of_line--;
		beginning_of_line++;

		int next_nl = info_output.index('\n', colon);
		if(next_nl >= 0)
		    info_output = info_output.before(beginning_of_line)
			+ info_output.from(next_nl);
		else
		    info_output = info_output.before(beginning_of_line);
	    }
	}
	break;
    }
    }

    return changed;
}


 
 
 

string BreakPoint::pos() const
{
    if(line_nr() == 0)
	return _REMOVED_STR_ + address();
    else if(file_name() == _REMOVED_STR_)
	return itostring(line_nr());
    else
	return file_name() + _REMOVED_STR_ + itostring(line_nr());
}

string BreakPoint::symbol() const
{
    char c;
    if(!enabled())
	c = '_';
    else if(condition() != _REMOVED_STR_ || ignore_count() != 0)
	c = '?';
    else
	c = '#';

    return c + number_str() + c;
}

string BreakPoint::condition() const
{
    if(is_false(real_condition()))
	return real_condition().after(and_op());
    else
	return real_condition();
}

bool BreakPoint::enabled() const
{
    if(is_false(real_condition()))
	return false;
    else
	return myenabled;
}



 
 
 

 
string BreakPoint::false_value()
{
    switch(gdb->program_language())
    {
    case LANGUAGE_C:
    case LANGUAGE_OTHER:
	return _REMOVED_STR_;

    case LANGUAGE_FORTRAN:
	return _REMOVED_STR_;

    case LANGUAGE_JAVA:
	return _REMOVED_STR_;

    case LANGUAGE_CHILL:	 
    case LANGUAGE_PASCAL:
    case LANGUAGE_ADA:
	return _REMOVED_STR_;
    }

    return _REMOVED_STR_;
}

 
string BreakPoint::and_op()
{
    switch(gdb->program_language())
    {
    case LANGUAGE_C:
    case LANGUAGE_JAVA:
    case LANGUAGE_OTHER:
	return _REMOVED_STR_;

    case LANGUAGE_FORTRAN:
	return _REMOVED_STR_;

    case LANGUAGE_CHILL:	 
    case LANGUAGE_PASCAL:
    case LANGUAGE_ADA:
	return _REMOVED_STR_;
    }

    return _REMOVED_STR_;
}

 
bool BreakPoint::is_false(const string& cond)
{
    if(cond == false_value())
	return true;

    string c = downcase(cond);
    string prefix = downcase(false_value() + and_op());

    return c.contains(prefix, 0);
}

 
string BreakPoint::make_false(const string& cond)
{
    if(is_false(cond))
	return cond;
    else if(cond == _REMOVED_STR_)
	return false_value();
    else
	return false_value() + and_op() + cond;
}

 
 
 

 
 
 
 
bool BreakPoint::get_state(ostream& os, int nr, bool as_dummy,
			   string pos, string cond)
{
    if(pos == _REMOVED_STR_)
    { 
	if(line_nr() > 0)
	    pos = file_name() + _REMOVED_STR_ + itostring(line_nr());
	else
	    pos = string('*') + address();
    }

    if(cond == char(-1))
	cond = real_condition();

    string num = _REMOVED_STR_ + itostring(nr) + _REMOVED_STR_;

    switch(gdb->type())
    {
    case GDB:
    {
	switch(type())
	{
	case BREAKPOINT:
	{
	    switch(dispo())
	    {
	    case BPKEEP:
	    case BPDIS:
		os << _REMOVED_STR_ << pos << _REMOVED_STR_;
		break;

	    case BPDEL:
		os << _REMOVED_STR_ << pos << _REMOVED_STR_;
		break;
	    }
	    break;
	}

	case WATCHPOINT:
	{
	    os << gdb->watch_command(expr(), watch_mode()) << _REMOVED_STR_;
	    break;
	}
	}

	if(!as_dummy)
	{
	     
	    if(!enabled() && gdb->has_disable_command())
		os << gdb->disable_command(num) << _REMOVED_STR_;
	    int ignore = ignore_count();
	    if(ignore > 0 && gdb->has_ignore_command())
		os << gdb->ignore_command(num, ignore) << _REMOVED_STR_;
	    if(cond != _REMOVED_STR_ && gdb->has_condition_command())
		os << gdb->condition_command(num, cond) << _REMOVED_STR_;
	    if(commands().size() != 0)
	    {
		os << _REMOVED_STR_ << num << _REMOVED_STR_;
		for(int i = 0; i < commands().size(); i++)
		    os << commands()[_ARGS_] << _REMOVED_STR_;
		os << _REMOVED_STR_;
	    }
	}
	break;
    }

    case DBX:
    {
	string cond_suffix = _REMOVED_STR_;
	if(cond != _REMOVED_STR_)
	{
	    if(gdb->has_handler_command())
		cond_suffix = _REMOVED_STR_ + cond;
	    else
		cond_suffix = _REMOVED_STR_ + cond;
	}

	switch(type())
	{
	case BREAKPOINT:
	    if(pos.contains('*', 0))
	    {
		os << _REMOVED_STR_ << pos.after('*') << cond_suffix << '\n';
	    }
	    else
	    {
		os << _REMOVED_STR_    << pos.before(':') << _REMOVED_STR_;
		os << _REMOVED_STR_ << pos.after(':')  << cond_suffix << _REMOVED_STR_;
	    }
	    break;

	case WATCHPOINT:
	    os << _REMOVED_STR_ << expr() << cond_suffix << '\n';
	    break;
	}

	if(!as_dummy)
	{
	     
	    if(!enabled() && gdb->has_disable_command())
		os << gdb->disable_command(num) << _REMOVED_STR_;
	    int ignore = ignore_count();
	    if(ignore > 0 && gdb->has_ignore_command())
		os << gdb->ignore_command(num, ignore) << _REMOVED_STR_;
	}
	break;
    }

    case JDB:
    {
	os << _REMOVED_STR_ << pos << _REMOVED_STR_;
	break;
    }

    case XDB:
    {
	string cond_suffix;
	if(cond != _REMOVED_STR_ && !gdb->has_condition_command())
	    cond_suffix = _REMOVED_STR_ + cond + _REMOVED_STR_;

	if(pos.contains('*', 0))
	    os << _REMOVED_STR_ << pos.after('*') << cond_suffix << '\n';
	else
	    os << _REMOVED_STR_ << pos << cond_suffix << _REMOVED_STR_;

	if(!as_dummy)
	{
	     
	    if(!enabled() && gdb->has_disable_command())
		os << gdb->disable_command(num) << _REMOVED_STR_;
	    int ignore = ignore_count();
	    if(ignore > 0 && gdb->has_ignore_command())
		os << gdb->ignore_command(num, ignore) << _REMOVED_STR_;
	}
	break;
    }
    }

    if(as_dummy && gdb->has_delete_command())
    {
	 
	os << gdb->delete_command(num) << _REMOVED_STR_;
    }

    return true;
}




__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/BreakPoint.o.nu.met	  Methods Number  2
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/BreakPM.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/CodeCache.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/Command.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/DataDisp.o.nu.met ... 


	METHOD DataDisp!ClearOriginCB

		METRICS
			last_origin REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 11
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD ClearOriginCB
			METHODID 106
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:11 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:ClearOriginCB METHODID:106 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 106-ClearOriginCB

__BEGIN_METHOD_CODE__

DataDisp::ClearOriginCB(Widget w, XtPointer, XtPointer)
{
    if(last_origin == w)
    {
	last_origin = 0;
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!set_last_origin
		CALLS
		find_shell : _SYSTEM_OR_USER_



		METRICS
			last_origin REFERRED 5 TIMES,
			ARRAYOP 2
			ASS 3
			AVVARLEN 11
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD set_last_origin
			METHODID 107
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:11 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:set_last_origin METHODID:107 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 107-set_last_origin

__BEGIN_METHOD_CODE__

DataDisp::set_last_origin(Widget w)
{
    if(last_origin != 0)
    {
	XtRemoveCallback(last_origin, ((char*)&XtStrings[_ARGS_]) , ClearOriginCB, 0);
    }

    last_origin = find_shell(w);

    if(last_origin != 0)
    {
	XtAddCallback(last_origin, ((char*)&XtStrings[_ARGS_]) , ClearOriginCB, 0);
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!count_data_displays
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		deferred : DispNode



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 4
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 14
			LT 0
			METHOD count_data_displays
			METHODID 120
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:4 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:14 LT:0 METHOD:count_data_displays METHODID:120 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 120-count_data_displays

__BEGIN_METHOD_CODE__

DataDisp::count_data_displays()
{
    int count = 0;

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(!dn->is_user_command() && !dn->deferred())
	    count++;
    }

    return count;
}

__END_METHOD_CODE__


	METHOD DataDisp!get_all_display_numbers
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		deferred : DispNode,
		disp_nr : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 4
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 10
			LT 0
			METHOD get_all_display_numbers
			METHODID 121
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:4 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:10 LT:0 METHOD:get_all_display_numbers METHODID:121 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 121-get_all_display_numbers

__BEGIN_METHOD_CODE__

DataDisp::get_all_display_numbers(IntArray& numbers)
{
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(!dn->deferred())
	    numbers += dn->disp_nr();
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!dereferenceCB
		CALLS
		set_last_origin : DataDisp,
		selected_node : DataDisp,
		selected_value : DataDisp,
		newCB : DataDisp,
		dereferenced_name : DispValue,
		dereference : DispValue,
		refresh : DispNode,
		recording : GDBAgent,
		name : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		new_display : DataDisp



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 12
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 23
			LT 0
			METHOD dereferenceCB
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:12 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:23 LT:0 METHOD:dereferenceCB METHODID:1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dereferenceCB

__BEGIN_METHOD_CODE__

DataDisp::dereferenceCB(Widget w, XtPointer client_data, 
			     XtPointer call_data)
{
    set_last_origin(w);

    DispNode *disp_node_arg   = selected_node();
    DispValue *disp_value_arg = selected_value();
    if(disp_node_arg == 0 || disp_value_arg == 0)
    {
	newCB(w, client_data, call_data);
	return;
    }

    string display_expression = disp_value_arg->dereferenced_name();
    disp_value_arg->dereference();
    disp_node_arg->refresh();

    string depends_on;
    if(gdb->recording())
	depends_on = disp_node_arg->name();
    else
	depends_on = itostring(disp_node_arg->disp_nr());

    new_display(display_expression, 0, depends_on, w);
}

__END_METHOD_CODE__


	METHOD DataDisp!dereferenceArgCB
		CALLS
		selected_value : DataDisp,
		dereferenceCB : DataDisp,
		new_display : DataDisp,
		dereferenced_expr : GDBAgent,
		get_string : ArgField



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD dereferenceArgCB
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:dereferenceArgCB METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dereferenceArgCB

__BEGIN_METHOD_CODE__

DataDisp::dereferenceArgCB(Widget w, XtPointer client_data, 
				XtPointer call_data)
{
    if(selected_value() != 0)
    {
	dereferenceCB(w, client_data, call_data);
	return;
    }

    new_display(gdb->dereferenced_expr(source_arg->get_string()), 0, _REMOVED_STR_, w);
}

__END_METHOD_CODE__


	METHOD DataDisp!toggleDetailCB
		CALLS
		recording : GDBAgent,
		showDetailCB : DataDisp,
		set_last_origin : DataDisp,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected_value : _SYSTEM_OR_USER_,
		value : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		disabled : DispNode,
		collapsedAll : DispValue,
		collapseAll : DispValue,
		expandAll : DispValue,
		value : _SYSTEM_OR_USER_,
		disabled : DispNode,
		disp_nr : _SYSTEM_OR_USER_,
		refresh : DispNode,
		collapse : DispValue,
		value : _SYSTEM_OR_USER_,
		enabled : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		refresh : DispNode,
		enable_display : DataDisp,
		disable_display : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 0
			ASS 18
			AVVARLEN 0
			CALLEDN 26
			CLASS DataDisp
			CLASSID 111
			CYCLO 13
			DOTS 0
			EQTEST 4
			EXPRORCALL 38
			GE 0
			GT 1
			IN 0
			INDR 20
			LE 0
			LOC 90
			LT 0
			METHOD toggleDetailCB
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 30
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:18 AVVARLEN:0 CALLEDN:26 CLASS:DataDisp CLASSID:111 CYCLO:13 DOTS:0 EQTEST:4 EXPRORCALL:38 GE:0 GT:1 IN:0 INDR:20 LE:0 LOC:90 LT:0 METHOD:toggleDetailCB METHODID:3 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:30 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-toggleDetailCB

__BEGIN_METHOD_CODE__

DataDisp::toggleDetailCB(Widget dialog,
			      XtPointer client_data,
			      XtPointer call_data)
{
    if(gdb->recording())
    {
	showDetailCB(dialog, client_data, call_data);
	return;
    }

    int depth = int(client_data);

    set_last_origin(dialog);

    IntArray disp_nrs;

    bool do_enable  = true;
    bool do_disable = true;

    bool changed = false;
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected())
	{
	    DispValue *dv = dn->selected_value();
	    if(dv == 0)
		dv = dn->value();

	    if(dv == 0)
	    {
		 
		disp_nrs += dn->disp_nr();

		if(dn->disabled())
		{
		     
		    do_disable = false;
		}
		else
		{
		     
		    do_enable = false;
		}
	    }
	    else if(dv->collapsedAll() > 0)
	    {
		 
		dv->collapseAll();
		dv->expandAll(depth);

		if(dv == dn->value() && dn->disabled())
		{
		     
		    disp_nrs += dn->disp_nr();
		    do_disable = false;
		}
		else
		{
		    dn->refresh();
		    changed = true;
		}
	    }
	    else
	    {
		 
		dv->collapse();

		if(dv == dn->value() && dn->enabled())
		{
		     
		    disp_nrs += dn->disp_nr();
		    do_enable = false;
		}
		else
		{
		    dn->refresh();
		    changed = true;
		}
	    }
	}
    }

    if(do_enable)
	enable_display(disp_nrs, dialog);
    else if(do_disable)
	disable_display(disp_nrs, dialog);

    if(changed)
	refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!showDetailCB
		CALLS
		show : DataDisp



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD showDetailCB
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:showDetailCB METHODID:11 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-showDetailCB

__BEGIN_METHOD_CODE__

DataDisp::showDetailCB(Widget dialog, XtPointer client_data, XtPointer)
{
    int depth = int(client_data);
    show(dialog, depth, 0);
}

__END_METHOD_CODE__


	METHOD DataDisp!showMoreDetailCB
		CALLS
		show : DataDisp



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD showMoreDetailCB
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:showMoreDetailCB METHODID:12 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-showMoreDetailCB

__BEGIN_METHOD_CODE__

DataDisp::showMoreDetailCB(Widget dialog, XtPointer client_data, 
				XtPointer)
{
    int more = int(client_data);
    show(dialog, 0, more);
}

__END_METHOD_CODE__


	METHOD DataDisp!show
		CALLS
		set_last_origin : DataDisp,
		recording : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		get_string : ArgField,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		disabled : DispNode,
		disp_nr : _SYSTEM_OR_USER_,
		selected_value : _SYSTEM_OR_USER_,
		value : _SYSTEM_OR_USER_,
		disabled : DispNode,
		collapsed : DispValue,
		heightExpanded : DispValue,
		collapsedAll : DispValue,
		collapseAll : DispValue,
		expandAll : DispValue,
		refresh : DispNode,
		enable_display : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 0
			ASS 10
			AVVARLEN 0
			CALLEDN 20
			CLASS DataDisp
			CLASSID 111
			CYCLO 11
			DOTS 0
			EQTEST 2
			EXPRORCALL 30
			GE 0
			GT 2
			IN 0
			INDR 16
			LE 0
			LOC 52
			LT 0
			METHOD show
			METHODID 47
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 20
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:0 CALLEDN:20 CLASS:DataDisp CLASSID:111 CYCLO:11 DOTS:0 EQTEST:2 EXPRORCALL:30 GE:0 GT:2 IN:0 INDR:16 LE:0 LOC:52 LT:0 METHOD:show METHODID:47 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:20 TERNINSTR:0 USEDVARS:0 
		;


#ID 47-show

__BEGIN_METHOD_CODE__

DataDisp::show(Widget dialog, int depth, int more)
{
    set_last_origin(dialog);

    if(gdb->recording())
    {
	gdb_command(_REMOVED_STR_ + source_arg->get_string());
	return;
    }

    IntArray disp_nrs;

    bool changed = false;
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected())
	{
	    if(dn->disabled())
	    {
		 
		disp_nrs += dn->disp_nr();
	    }
		
	    DispValue *dv = dn->selected_value();
	    if(dv == 0)
		dv = dn->value();
	    if(dv == 0)
		continue;

	    if(dn->disabled() && !dv->collapsed())
		continue;	 

	    if(more != 0)
		depth = dv->heightExpanded() + more;

	    if(depth > 0 || dv->collapsedAll() > 0)
	    {
		dv->collapseAll();
		dv->expandAll(depth);
		dn->refresh();
		changed = true;
	    }
	}
    }

    enable_display(disp_nrs, dialog);

    if(changed)
	refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!hideDetailCB
		CALLS
		set_last_origin : DataDisp,
		recording : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		get_string : ArgField,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected_value : _SYSTEM_OR_USER_,
		value : _SYSTEM_OR_USER_,
		value : _SYSTEM_OR_USER_,
		enabled : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		expanded : DispValue,
		collapse : DispValue,
		refresh : DispNode,
		disable_display : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 17
			CLASS DataDisp
			CLASSID 111
			CYCLO 8
			DOTS 0
			EQTEST 3
			EXPRORCALL 25
			GE 0
			GT 0
			IN 0
			INDR 13
			LE 0
			LOC 43
			LT 0
			METHOD hideDetailCB
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:17 CLASS:DataDisp CLASSID:111 CYCLO:8 DOTS:0 EQTEST:3 EXPRORCALL:25 GE:0 GT:0 IN:0 INDR:13 LE:0 LOC:43 LT:0 METHOD:hideDetailCB METHODID:13 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-hideDetailCB

__BEGIN_METHOD_CODE__

DataDisp::hideDetailCB(Widget dialog, XtPointer, XtPointer)
{
    set_last_origin(dialog);

    if(gdb->recording())
    {
	gdb_command(_REMOVED_STR_ + source_arg->get_string());
	return;
    }

    IntArray disp_nrs;

    bool changed = false;
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected())
	{
	    DispValue *dv = dn->selected_value();
	    if(dv == 0)
		dv = dn->value();

	    if((dv == 0 || dv == dn->value()) && dn->enabled())
	    {
		 
		disp_nrs += dn->disp_nr();
	    }

	    if(dv != 0 && dv->expanded())
	    {
		dv->collapse();
		dn->refresh();
		changed = true;
	    }
	}
    }

    disable_display(disp_nrs, dialog);

    if(changed)
	refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!toggle_rotate
		CALLS
		horizontal_aligned : DispValue,
		align_vertical : DispValue,
		align_horizontal : DispValue,
		nchildren : _SYSTEM_OR_USER_,
		toggle_rotate : DataDisp,
		get_child : DispValue



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 6
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 0
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 13
			LT 1
			METHOD toggle_rotate
			METHODID 49
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:6 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:0 EQTEST:1 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:13 LT:1 METHOD:toggle_rotate METHODID:49 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 49-toggle_rotate

__BEGIN_METHOD_CODE__

DataDisp::toggle_rotate(DispValue *dv, bool all)
{
    if(dv == 0)
	return;

    if(dv->horizontal_aligned())
	dv->align_vertical();
    else
	dv->align_horizontal();

    if(all)
	for(int i = 0; i < dv->nchildren(); i++)
	    toggle_rotate(dv->get_child(i), all);
}

__END_METHOD_CODE__


	METHOD DataDisp!rotateCB
		CALLS
		set_last_origin : DataDisp,
		selected_node : DataDisp,
		selected_value : DataDisp,
		toggle_rotate : DataDisp,
		refresh : DispNode,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 6
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 13
			LT 0
			METHOD rotateCB
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:6 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:13 LT:0 METHOD:rotateCB METHODID:6 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-rotateCB

__BEGIN_METHOD_CODE__

DataDisp::rotateCB(Widget w, XtPointer, XtPointer)
{
    set_last_origin(w);

    DispNode *disp_node_arg   = selected_node();
    DispValue *disp_value_arg = selected_value();
    if(disp_node_arg == 0 || disp_value_arg == 0)
	return;

    toggle_rotate(disp_value_arg, false);

    disp_node_arg->refresh();
    refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!rotateAllCB
		CALLS
		set_last_origin : DataDisp,
		selected_node : DataDisp,
		selected_value : DataDisp,
		toggle_rotate : DataDisp,
		refresh : DispNode,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 6
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 13
			LT 0
			METHOD rotateAllCB
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:6 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:13 LT:0 METHOD:rotateAllCB METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-rotateAllCB

__BEGIN_METHOD_CODE__

DataDisp::rotateAllCB(Widget w, XtPointer, XtPointer)
{
    set_last_origin(w);

    DispNode *disp_node_arg   = selected_node();
    DispValue *disp_value_arg = selected_value();
    if(disp_node_arg == 0 || disp_value_arg == 0)
	return;

    toggle_rotate(disp_value_arg, true);

    disp_node_arg->refresh();
    refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!toggleDisableCB
		CALLS
		set_last_origin : DataDisp,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		enabled : _SYSTEM_OR_USER_,
		disabled : DispNode,
		enable_display : DataDisp,
		disable_display : DataDisp



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 9
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 27
			LT 0
			METHOD toggleDisableCB
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:9 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:27 LT:0 METHOD:toggleDisableCB METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-toggleDisableCB

__BEGIN_METHOD_CODE__

DataDisp::toggleDisableCB(Widget dialog, XtPointer, XtPointer)
{
    set_last_origin(dialog);
    IntArray disp_nrs;

    bool do_enable  = true;
    bool do_disable = true;

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected())
	{
	    disp_nrs += dn->disp_nr();
	    if(dn->enabled())
		do_enable = false;
	    if(dn->disabled())
		do_disable = false;
	}
    }

    if(do_enable)
	enable_display(disp_nrs, dialog);
    else if(do_disable)
	disable_display(disp_nrs, dialog);
}

__END_METHOD_CODE__


	METHOD DataDisp!select_with_all_descendants
		CALLS
		selected : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		select : DispNode,
		selected : _SYSTEM_OR_USER_,
		firstFrom : GraphNode,
		nextFrom : GraphNode,
		select_with_all_descendants : DataDisp,
		to : GraphEdge



		METRICS
			ARRAYOP 0
			ASS 10
			AVVARLEN 0
			CALLEDN 10
			CLASS DataDisp
			CLASSID 111
			CYCLO 6
			DOTS 0
			EQTEST 1
			EXPRORCALL 16
			GE 0
			GT 1
			IN 0
			INDR 9
			LE 0
			LOC 29
			LT 1
			METHOD select_with_all_descendants
			METHODID 103
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:0 CALLEDN:10 CLASS:DataDisp CLASSID:111 CYCLO:6 DOTS:0 EQTEST:1 EXPRORCALL:16 GE:0 GT:1 IN:0 INDR:9 LE:0 LOC:29 LT:1 METHOD:select_with_all_descendants METHODID:103 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 103-select_with_all_descendants

__BEGIN_METHOD_CODE__

DataDisp::select_with_all_descendants(GraphNode *node)
{
    bool selected = node->selected();

    BoxGraphNode *bn = dynamic_cast< BoxGraphNode  *>(  node ) ;
    if(bn != 0)
    {
	 
	MapRef ref;
	for(DispNode* dn = disp_graph->first(ref); 
	     dn != 0;
	     dn = disp_graph->next(ref))
	{
	    if(dn->nodeptr() == node)
	    {
		dn->select(0);
		break;
	    }
	}
    }

    if(!selected)
    {
	node->selected() = true;
	
	for(GraphEdge *edge = node->firstFrom();
	     edge != 0; edge = node->nextFrom(edge))
	    select_with_all_descendants(edge->to());
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!select_with_all_ancestors
		CALLS
		selected : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		select : DispNode,
		selected : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		nextTo : GraphNode,
		select_with_all_ancestors : DataDisp,
		from : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 10
			AVVARLEN 0
			CALLEDN 10
			CLASS DataDisp
			CLASSID 111
			CYCLO 6
			DOTS 0
			EQTEST 1
			EXPRORCALL 16
			GE 0
			GT 1
			IN 0
			INDR 9
			LE 0
			LOC 29
			LT 1
			METHOD select_with_all_ancestors
			METHODID 104
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:0 CALLEDN:10 CLASS:DataDisp CLASSID:111 CYCLO:6 DOTS:0 EQTEST:1 EXPRORCALL:16 GE:0 GT:1 IN:0 INDR:9 LE:0 LOC:29 LT:1 METHOD:select_with_all_ancestors METHODID:104 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 104-select_with_all_ancestors

__BEGIN_METHOD_CODE__

DataDisp::select_with_all_ancestors(GraphNode *node)
{
    bool selected = node->selected();

    BoxGraphNode *bn = dynamic_cast< BoxGraphNode  *>(  node ) ;
    if(bn != 0)
    {
	 
	MapRef ref;
	for(DispNode* dn = disp_graph->first(ref); 
	     dn != 0;
	     dn = disp_graph->next(ref))
	{
	    if(dn->nodeptr() == node)
	    {
		dn->select(0);
		break;
	    }
	}
    }

    if(!selected)
    {
	node->selected() = true;
	
	for(GraphEdge *edge = node->firstTo();
	     edge != 0; edge = node->nextTo(edge))
	    select_with_all_ancestors(edge->from());
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!deleteCB
		CALLS
		set_last_origin : DataDisp,
		bool : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected_value : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		firstTo : GraphNode,
		nodeptr : DispNode,
		nextTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		isHint : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		firstFrom : GraphNode,
		nodeptr : DispNode,
		nextFrom : GraphNode,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		firstFrom : GraphNode,
		to : GraphEdge,
		size : VarArray<GraphNode@*>,
		select_with_all_descendants : DataDisp,
		size : VarArray<GraphNode@*>,
		select_with_all_ancestors : DataDisp,
		delete_display : DataDisp



		METRICS
			ARRAYOP 2
			ASS 20
			AVVARLEN 0
			CALLEDN 28
			CLASS DataDisp
			CLASSID 111
			CYCLO 9
			DOTS 2
			EQTEST 1
			EXPRORCALL 37
			GE 0
			GT 2
			IN 0
			INDR 21
			LE 0
			LOC 52
			LT 4
			METHOD deleteCB
			METHODID 132
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 29
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:20 AVVARLEN:0 CALLEDN:28 CLASS:DataDisp CLASSID:111 CYCLO:9 DOTS:2 EQTEST:1 EXPRORCALL:37 GE:0 GT:2 IN:0 INDR:21 LE:0 LOC:52 LT:4 METHOD:deleteCB METHODID:132 MMINUS:0 OUT:0 PARNUM:3 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:29 TERNINSTR:0 USEDVARS:0 
		;


#ID 132-deleteCB

__BEGIN_METHOD_CODE__

DataDisp::deleteCB(Widget dialog, XtPointer client_data, XtPointer)
{
    set_last_origin(dialog);

    IntArray disp_nrs;
    VarArray<GraphNode *> ancestors;
    VarArray<GraphNode *> descendants;

    bool delete_from_display_part = bool(client_data);

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	DispValue *dv = dn->selected_value();
	if(dn->selected() && (delete_from_display_part || dv == 0))
	{
	    disp_nrs += dn->disp_nr();

	     
	    GraphEdge *edge;
	    for(edge = dn->nodeptr()->firstTo();
		 edge != 0; edge = dn->nodeptr()->nextTo(edge))
	    {
		GraphNode *ancestor = edge->from();
		while(ancestor->isHint())
		    ancestor = ancestor->firstTo()->from();

		ancestors += ancestor;
	    }

	     
	    for(edge = dn->nodeptr()->firstFrom();
		 edge != 0; edge = dn->nodeptr()->nextFrom(edge))
	    {
		GraphNode *descendant = edge->to();
		while(descendant->isHint())
		    descendant = descendant->firstFrom()->to();

		descendants += descendant;
	    }
	}
    }

    int i;
    for(i = 0; i < ancestors.size(); i++)
	select_with_all_descendants(ancestors[_ARGS_]);
    for(i = 0; i < descendants.size(); i++)
	select_with_all_ancestors(descendants[_ARGS_]);

    delete_display(disp_nrs, dialog);
}

__END_METHOD_CODE__


	METHOD DataDisp!refreshCB
		CALLS
		first_nr : DispGraph,
		next_nr : DispGraph,
		unmerge_display : DataDisp,
		refresh_display : DataDisp



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 13
			LT 0
			METHOD refreshCB
			METHODID 129
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:13 LT:0 METHOD:refreshCB METHODID:129 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 129-refreshCB

__BEGIN_METHOD_CODE__

DataDisp::refreshCB(Widget w, XtPointer, XtPointer)
{
     
    MapRef ref;
    for(int k = disp_graph->first_nr(ref); 
	 k != 0;
	 k = disp_graph->next_nr(ref))
    {
	unmerge_display(k);
    }

     
    refresh_display(w);
}

__END_METHOD_CODE__


	METHOD DataDisp!selectAllCB
		CALLS
		set_last_origin : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD selectAllCB
			METHODID 130
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:selectAllCB METHODID:130 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 130-selectAllCB

__BEGIN_METHOD_CODE__

DataDisp::selectAllCB(Widget w, XtPointer, XtPointer)
{
     

    set_last_origin(w);
    XtCallActionProc(graph_edit, 
		     _REMOVED_STR_, (XEvent *)0, (String *)0, 0);
    refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!unselectAllCB
		CALLS
		set_last_origin : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD unselectAllCB
			METHODID 131
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:unselectAllCB METHODID:131 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 131-unselectAllCB

__BEGIN_METHOD_CODE__

DataDisp::unselectAllCB(Widget w, XtPointer, XtPointer)
{
     

    set_last_origin(w);
    XtCallActionProc(graph_edit, 
		     _REMOVED_STR_, (XEvent *)0, (String *)0, 0);
    refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!enableCB
		CALLS
		set_last_origin : DataDisp,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		disabled : DispNode,
		disp_nr : _SYSTEM_OR_USER_,
		enable_display : DataDisp



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 7
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 18
			LT 0
			METHOD enableCB
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:7 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:18 LT:0 METHOD:enableCB METHODID:9 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-enableCB

__BEGIN_METHOD_CODE__

DataDisp::enableCB(Widget w, XtPointer, XtPointer)
{
    set_last_origin(w);

    IntArray disp_nrs;

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected() && dn->disabled())
	{
	    disp_nrs += dn->disp_nr();
	}
    }

    enable_display(disp_nrs, w);
}

__END_METHOD_CODE__


	METHOD DataDisp!disableCB
		CALLS
		set_last_origin : DataDisp,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		enabled : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		disable_display : DataDisp



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 7
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 18
			LT 0
			METHOD disableCB
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:7 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:18 LT:0 METHOD:disableCB METHODID:10 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-disableCB

__BEGIN_METHOD_CODE__

DataDisp::disableCB(Widget w, XtPointer, XtPointer)
{
    set_last_origin(w);

    IntArray disp_nrs;

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected() && dn->enabled())
	{
	    disp_nrs += dn->disp_nr();
	}
    }

    disable_display(disp_nrs, w);
}

__END_METHOD_CODE__


	METHOD DataDisp!shortcutCB
		CALLS
		set_last_origin : DataDisp,
		selected_node : DataDisp,
		selected_value : DataDisp,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		recording : GDBAgent,
		name : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		get_string : ArgField,
		contains : string,
		contains : string,
		after : string,
		gsub : string,
		new_display : DataDisp



		METRICS
			shortcut_exprs REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 11
			AVVARLEN 14
			CALLEDN 16
			CLASS DataDisp
			CLASSID 111
			CYCLO 4
			DOTS 4
			EQTEST 0
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 30
			LT 0
			METHOD shortcutCB
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:11 AVVARLEN:14 CALLEDN:16 CLASS:DataDisp CLASSID:111 CYCLO:4 DOTS:4 EQTEST:0 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:30 LT:0 METHOD:shortcutCB METHODID:17 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-shortcutCB

__BEGIN_METHOD_CODE__

DataDisp::shortcutCB(Widget w, XtPointer client_data, XtPointer)
{
    int number = int(client_data) - 1;

    set_last_origin(w);

    string expr = shortcut_exprs[_ARGS_];

    string depends_on = _REMOVED_STR_;
    DispNode *disp_node_arg   = selected_node();
    DispValue *disp_value_arg = selected_value();
    if(disp_node_arg != 0 
	&& disp_value_arg != 0
	&& !disp_node_arg->nodeptr()->hidden())
    {
	if(gdb->recording())
	    depends_on = disp_node_arg->name();
	else
	    depends_on = itostring(disp_node_arg->disp_nr());
    }
	
    string arg = source_arg->get_string();

     
    if(arg.contains('/', 0) && expr.contains('/', 0))
	arg = arg.after(rxwhite);

    expr.gsub(_REMOVED_STR_, arg);

    new_display(expr, 0, depends_on, w);
}

__END_METHOD_CODE__


	METHOD DataDisp!set_shortcut_menu
		CALLS
		size : StringArray,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		refresh_args : DataDisp



		METRICS
			shortcut_popup1 REFERRED 1 TIMES,
			shortcut_popup2 REFERRED 1 TIMES,
			shortcut_menu REFERRED 1 TIMES,
			shortcut_items REFERRED 1 TIMES,
			shortcut_exprs REFERRED 2 TIMES,
			shortcut_labels REFERRED 4 TIMES,
			ARRAYOP 5
			ASS 10
			AVVARLEN 14
			CALLEDN 7
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 6
			EQTEST 1
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 48
			LT 3
			METHOD set_shortcut_menu
			METHODID 86
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:5 ASS:10 AVVARLEN:14 CALLEDN:7 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:6 EQTEST:1 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:48 LT:3 METHOD:set_shortcut_menu METHODID:86 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:6 
		;


#ID 86-set_shortcut_menu

__BEGIN_METHOD_CODE__

DataDisp::set_shortcut_menu(const StringArray& exprs,
				 const StringArray& labels)
{
    shortcut_labels = labels;
    shortcut_exprs  = exprs;

    while(shortcut_labels.size() < exprs.size())
	shortcut_labels += _REMOVED_STR_;









    for(int i = 0; i < shortcut_items; i++)
    {
	Widget popup1_item = shortcut_popup1[_ARGS_].widget;
	Widget popup2_item = shortcut_popup2[_ARGS_].widget;
	Widget menu_item   = shortcut_menu  [_ARGS_].widget;

	if(i < exprs.size())
	{
	    string& expr  = shortcut_exprs[_ARGS_];
	    string& label = shortcut_labels[_ARGS_];

	    if(label == _REMOVED_STR_)
		label = _REMOVED_STR_ + expr;

	    set_label(popup1_item, label);
	    set_label(popup2_item, label);
	    set_label(menu_item,   label);

	    XtManageChild(popup1_item);
	    XtManageChild(popup2_item);
	    XtManageChild(menu_item);
	}
	else
	{
	     
	    XtUnmanageChild(popup1_item);
	    XtUnmanageChild(popup2_item);
	    XtUnmanageChild(menu_item);
	}
    }

    refresh_args();
}

__END_METHOD_CODE__


	METHOD DataDisp!add_shortcut_expr
		CALLS
		string : string,
		string : string,
		size : StringArray,
		set_shortcut_menu : DataDisp,
		refresh_button_editor : _SYSTEM_OR_USER_,
		refresh_args : DataDisp



		METRICS
			shortcut_exprs REFERRED 6 TIMES,
			shortcut_labels REFERRED 5 TIMES,
			ARRAYOP 6
			ASS 7
			AVVARLEN 14
			CALLEDN 6
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 0
			METHOD add_shortcut_expr
			METHODID 62
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:6 ASS:7 AVVARLEN:14 CALLEDN:6 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:7 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:17 LT:0 METHOD:add_shortcut_expr METHODID:62 MMINUS:1 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:2 
		;


#ID 62-add_shortcut_expr

__BEGIN_METHOD_CODE__

DataDisp::add_shortcut_expr(const string& expr)
{
     
    shortcut_exprs  += string(_REMOVED_STR_);
    shortcut_labels += string(_REMOVED_STR_);
    for(int i = shortcut_exprs.size() - 1; i > 0; i--)
    {
	shortcut_exprs[_ARGS_]  = shortcut_exprs[_ARGS_];
	shortcut_labels[_ARGS_] = shortcut_labels[_ARGS_];
    }

    shortcut_exprs[_ARGS_]  = expr;
    shortcut_labels[_ARGS_] = _REMOVED_STR_;

    set_shortcut_menu(shortcut_exprs, shortcut_labels);
    refresh_button_editor();
    refresh_args();
}

__END_METHOD_CODE__


	METHOD DataDisp!shortcut_help
		CALLS
		rm : _SYSTEM_OR_USER_,
		contains : string,
		tt : _SYSTEM_OR_USER_,
		bf : _SYSTEM_OR_USER_,
		after : string,
		tt : _SYSTEM_OR_USER_,
		MString : MString



		METRICS
			shortcut_popup1 REFERRED 1 TIMES,
			shortcut_popup2 REFERRED 1 TIMES,
			shortcut_menu REFERRED 1 TIMES,
			shortcut_items REFERRED 1 TIMES,
			shortcut_exprs REFERRED 1 TIMES,
			ARRAYOP 4
			ASS 7
			AVVARLEN 14
			CALLEDN 7
			CLASS DataDisp
			CLASSID 111
			CYCLO 4
			DOTS 6
			EQTEST 3
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 1
			METHOD shortcut_help
			METHODID 143
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 5

#METRICS ARRAYOP:4 ASS:7 AVVARLEN:14 CALLEDN:7 CLASS:DataDisp CLASSID:111 CYCLO:4 DOTS:6 EQTEST:3 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:23 LT:1 METHOD:shortcut_help METHODID:143 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:5 
		;


#ID 143-shortcut_help

__BEGIN_METHOD_CODE__

DataDisp::shortcut_help(Widget w)
{
    for(int i = 0; i < shortcut_items; i++)
    {
	if(w == shortcut_menu  [_ARGS_].widget ||
	    w == shortcut_popup1[_ARGS_].widget ||
	    w == shortcut_popup2[_ARGS_].widget)
	{
	    MString ret = rm(_REMOVED_STR_);
	    string expr = shortcut_exprs[_ARGS_];

	    while(expr.contains(_REMOVED_STR_))
	    {
		ret += tt(expr.before(_REMOVED_STR_));
		ret += bf(_REMOVED_STR_);
		expr = expr.after(_REMOVED_STR_);
	    }
	    ret += tt(expr);
	    return ret;
	}
    }

    return MString(0, true);	 
}

__END_METHOD_CODE__


	METHOD DataDisp!DoubleClickCB
		CALLS
		selected_node : DataDisp,
		disabled : DispNode,
		showMoreDetailCB : DataDisp,
		selected_value : _SYSTEM_OR_USER_,
		count : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		collapsed : DispValue,
		dereferenceCB : DataDisp,
		showMoreDetailCB : DataDisp,
		hideDetailCB : DataDisp



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 10
			CLASS DataDisp
			CLASSID 111
			CYCLO 8
			DOTS 1
			EQTEST 4
			EXPRORCALL 22
			GE 0
			GT 1
			IN 0
			INDR 9
			LE 0
			LOC 40
			LT 0
			METHOD DoubleClickCB
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:10 CLASS:DataDisp CLASSID:111 CYCLO:8 DOTS:1 EQTEST:4 EXPRORCALL:22 GE:0 GT:1 IN:0 INDR:9 LE:0 LOC:40 LT:0 METHOD:DoubleClickCB METHODID:27 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-DoubleClickCB

__BEGIN_METHOD_CODE__

DataDisp::DoubleClickCB(Widget w, XtPointer client_data, 
			     XtPointer call_data)
{
    DataDisp *data_disp = (DataDisp *)client_data;
    GraphEditPreSelectionInfo *info = (GraphEditPreSelectionInfo *)call_data;

    if(!info->double_click)
	return;			 

    if(info->node == 0)
	return;			 

    DispNode *disp_node_arg   = data_disp->selected_node();
    if(disp_node_arg == 0)
	return;			 

    DispValue *disp_value_arg;

     
    if(disp_node_arg->disabled())
    {
	showMoreDetailCB(w, XtPointer(1), 0);  
    }
    else
    {
	disp_value_arg = disp_node_arg->selected_value();
	if(disp_value_arg == 0)
	    return;			 

	DataDispCount count(disp_graph);
	
	if(disp_value_arg->type() == Pointer && !disp_value_arg->collapsed())
	    data_disp->dereferenceCB(w, 0, 0);     
	else if(count.selected_collapsed > 0)
	    showMoreDetailCB(w, XtPointer(1), 0);  
	else
	    hideDetailCB(w, XtPointer(-1), 0);     
    }

     
    info->doit = 0 ;
}

__END_METHOD_CODE__


	METHOD DataDisp!popup_new_argCB
		CALLS
		set_last_origin : DataDisp,
		new_display : DataDisp,
		get_string : ArgField



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD popup_new_argCB
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:popup_new_argCB METHODID:19 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-popup_new_argCB

__BEGIN_METHOD_CODE__

DataDisp::popup_new_argCB(Widget    display_dialog,
				XtPointer client_data,
				XtPointer)
{
    set_last_origin(display_dialog);

    BoxPoint *p = (BoxPoint *) client_data;
    new_display(source_arg->get_string(), p, _REMOVED_STR_, display_dialog);
}

__END_METHOD_CODE__


	METHOD DataDisp!popup_newCB
		CALLS
		set_last_origin : DataDisp,
		new_displayCD : DataDisp



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD popup_newCB
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:popup_newCB METHODID:20 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-popup_newCB

__BEGIN_METHOD_CODE__

DataDisp::popup_newCB(Widget    display_dialog,
			    XtPointer client_data,
			    XtPointer)
{
    set_last_origin(display_dialog);

    BoxPoint *p = (BoxPoint *) client_data;
    new_displayCD(display_dialog, *p);
}

__END_METHOD_CODE__


	METHOD DataDisp!new_displayDCB
		CALLS
		set_last_origin : DataDisp,
		expr : _SYSTEM_OR_USER_,
		strip_leading_space : _SYSTEM_OR_USER_,
		strip_trailing_space : _SYSTEM_OR_USER_,
		new_display : DataDisp,
		gsub : string,
		gsub : string,
		string : string,
		add_shortcut_expr : DataDisp



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 9
			CLASS DataDisp
			CLASSID 111
			CYCLO 4
			DOTS 2
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 26
			LT 0
			METHOD new_displayDCB
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:9 CLASS:DataDisp CLASSID:111 CYCLO:4 DOTS:2 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:26 LT:0 METHOD:new_displayDCB METHODID:21 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-new_displayDCB

__BEGIN_METHOD_CODE__

DataDisp::new_displayDCB(Widget dialog, XtPointer client_data, XtPointer)
{
    set_last_origin(dialog);

    NewDisplayInfo *info = (NewDisplayInfo *)client_data;

    char *inp = XmTextFieldGetString(info->text);
    string expr(inp);
    XtFree(inp);

    strip_leading_space(expr);
    strip_trailing_space(expr);

    if(expr != _REMOVED_STR_)
    {
	new_display(expr, info->point_ptr, info->depends_on, info->origin);

	if(info->shortcut != 0 && XmToggleButtonGetState(info->shortcut))
	{
	     
	    expr.gsub(_REMOVED_STR_, _REMOVED_STR_);
	    if(expr != info->display_expression)
		expr.gsub(info->display_expression, string(_REMOVED_STR_));
	    add_shortcut_expr(expr);
	}
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!create_display_dialog
		CALLS
		find_shell : _SYSTEM_OR_USER_,
		register_shell : Delay,
		CreateComboBox : _SYSTEM_OR_USER_,
		tie_combo_box_to_history : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 36
			ASS 37
			AVVARLEN 0
			CALLEDN 4
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 27
			EQTEST 0
			EXPRORCALL 150
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 56
			LT 1
			METHOD create_display_dialog
			METHODID 48
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 11
			RETPOINT 1
			SCOPEOP 1
			STMNT 52
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:36 ASS:37 AVVARLEN:0 CALLEDN:4 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:27 EQTEST:0 EXPRORCALL:150 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:56 LT:1 METHOD:create_display_dialog METHODID:48 MMINUS:0 OUT:0 PARNUM:3 PPLUS:11 RETPOINT:1 SCOPEOP:1 STMNT:52 TERNINSTR:0 USEDVARS:0 
		;


#ID 48-create_display_dialog

__BEGIN_METHOD_CODE__

DataDisp::create_display_dialog(Widget parent, String name,
				       NewDisplayInfo& info)
{
    Arg args[_ARGS_];
    int arg = 0;

    Widget dialog = verify(XmCreatePromptDialog(find_shell(parent),
						name, args, arg));
    Delay::register_shell(dialog);

    if(lesstif_version <= 79)
	XtUnmanageChild(XmSelectionBoxGetChild(dialog, XmDIALOG_APPLY_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(dialog, XmDIALOG_TEXT));
    XtUnmanageChild(XmSelectionBoxGetChild(dialog, XmDIALOG_SELECTION_LABEL));

    XtAddCallback(dialog, ((char *)&_XmStrings[_ARGS_]) , ImmediateHelpCB, __null );
    XtAddCallback(dialog, ((char *)&_XmStrings[_ARGS_]) , new_displayDCB, XtPointer(&info));

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0  ) )) ; arg++;
    Widget box = verify(XmCreateRowColumn(dialog, _REMOVED_STR_, args, arg));
    XtManageChild(box);

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  XmALIGNMENT_BEGINNING ) )) ; arg++;
    Widget label = verify(XmCreateLabel(box, _REMOVED_STR_, args, arg));
    XtManageChild(label);

    arg = 0;
    info.text = verify(CreateComboBox(box, _REMOVED_STR_, args, arg));
    XtManageChild(info.text);

    tie_combo_box_to_history(info.text, display_history_filter);

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0  ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(  XmHORIZONTAL ) )) ; arg++;
    Widget box2 = verify(XmCreateRowColumn(box, _REMOVED_STR_, args, arg));
    XtManageChild(box2);

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  XmALIGNMENT_BEGINNING ) )) ; arg++;
    info.shortcut = verify(XmCreateToggleButton(box2, _REMOVED_STR_, args, arg));
    XtManageChild(info.shortcut);

    Widget display = verify(XmCreateLabel(box2, _REMOVED_STR_, args, arg));
    XtManageChild(display);
    Widget menu = verify(XmCreateLabel(box2, _REMOVED_STR_, args, arg));
    XtManageChild(menu);

    return dialog;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_displayCD
		CALLS
		create_display_dialog : DataDisp,
		get_string : ArgField,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 8
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 17
			LT 0
			METHOD new_displayCD
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:8 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:17 LT:0 METHOD:new_displayCD METHODID:33 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-new_displayCD

__BEGIN_METHOD_CODE__

DataDisp::new_displayCD(Widget w, BoxPoint box_point)
{
    static NewDisplayInfo info;
    if(info.point_ptr == 0)
	info.point_ptr = new BoxPoint;
    info.origin = w;

    static Widget new_display_dialog = 
	create_display_dialog(w, _REMOVED_STR_, info);

    XmToggleButtonSetState(info.shortcut, 0 , 0 );

    *(info.point_ptr) = box_point;
    info.display_expression = source_arg->get_string();
    XmTextSetString(info.text, info.display_expression);

    manage_and_raise(new_display_dialog);
}

__END_METHOD_CODE__


	METHOD DataDisp!newCB
		CALLS
		set_last_origin : DataDisp,
		new_displayCD : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD newCB
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:newCB METHODID:8 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-newCB

__BEGIN_METHOD_CODE__

DataDisp::newCB(Widget w, XtPointer, XtPointer)
{
    set_last_origin(w);
    new_displayCD(w);
}

__END_METHOD_CODE__


	METHOD DataDisp!dependentCB
		CALLS
		set_last_origin : DataDisp,
		selected_node : DataDisp,
		selected_value : DataDisp,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		newCB : DataDisp,
		recording : GDBAgent,
		name : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		create_display_dialog : DataDisp,
		full_name : DispValue,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 13
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 7
			EQTEST 2
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 30
			LT 0
			METHOD dependentCB
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:13 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:7 EQTEST:2 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:30 LT:0 METHOD:dependentCB METHODID:14 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-dependentCB

__BEGIN_METHOD_CODE__

DataDisp::dependentCB(Widget w, XtPointer client_data, 
			   XtPointer call_data)
{
    set_last_origin(w);

    DispNode *disp_node_arg   = selected_node();
    DispValue *disp_value_arg = selected_value();
    if(disp_node_arg == 0 
	|| disp_value_arg == 0
	|| disp_node_arg->nodeptr()->hidden())
    {
	newCB(w, client_data, call_data);
	return;
    }

    static NewDisplayInfo info;
    if(gdb->recording())
	info.depends_on = disp_node_arg->name();
    else
	info.depends_on = itostring(disp_node_arg->disp_nr());

    info.origin = w;

    static Widget dependent_display_dialog = 
	create_display_dialog(w, _REMOVED_STR_, info);

    XmToggleButtonSetState(info.shortcut, 1 , 0 );

    info.display_expression = disp_value_arg->full_name();
    XmTextSetString(info.text, info.display_expression);
    manage_and_raise(dependent_display_dialog);
}

__END_METHOD_CODE__


	METHOD DataDisp!displayArgCB
		CALLS
		bool : _SYSTEM_OR_USER_,
		selected_value : DataDisp,
		type : _SYSTEM_OR_USER_,
		dereferenceCB : DataDisp,
		get_string : ArgField,
		selected_node : DataDisp,
		recording : GDBAgent,
		name : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		new_display : DataDisp



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 11
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 0
			EQTEST 1
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 30
			LT 0
			METHOD displayArgCB
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:11 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:0 EQTEST:1 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:30 LT:0 METHOD:displayArgCB METHODID:15 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-displayArgCB

__BEGIN_METHOD_CODE__

DataDisp::displayArgCB(Widget w, XtPointer client_data, 
			    XtPointer call_data)
{
    bool check_pointer = bool(client_data);

    if(check_pointer)
    {
	DispValue *disp_value_arg = selected_value();

	if(disp_value_arg != 0 && disp_value_arg->type() == Pointer)
	{
	     
	    dereferenceCB(w, client_data, call_data);
	    return;
	}
    }

     
    string arg = source_arg->get_string();

    string depends_on = _REMOVED_STR_;
    DispNode *disp_node_arg = selected_node();
    if(disp_node_arg != 0)
    {
	if(gdb->recording())
	    depends_on = disp_node_arg->name();
	else
	    depends_on = itostring(disp_node_arg->disp_nr());
    }

    new_display(arg, 0, depends_on, w);
}

__END_METHOD_CODE__


	METHOD DataDisp!deleteArgCB
		CALLS
		count : _SYSTEM_OR_USER_,
		bool : _SYSTEM_OR_USER_,
		deleteCB : DataDisp,
		delete_display : DataDisp,
		get_string : ArgField



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 17
			LT 0
			METHOD deleteArgCB
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:7 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:17 LT:0 METHOD:deleteArgCB METHODID:18 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-deleteArgCB

__BEGIN_METHOD_CODE__

DataDisp::deleteArgCB(Widget dialog, XtPointer client_data, 
			   XtPointer call_data)
{
    DataDispCount count(disp_graph);
    bool delete_from_display_part = bool(client_data);

    if(count.selected_titles > 0 || 
	(delete_from_display_part && count.selected > 0))
    {
	 
	deleteCB(dialog, client_data, call_data);
	return;
    }
    else
    {
	 
	delete_display(source_arg->get_string());
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!refresh_graph_edit
		CALLS
		refresh_args : DataDisp,
		refresh_display_list : DataDisp



		METRICS
			refresh_graph_edit_timer REFERRED 2 TIMES,
			graph_edit REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 2
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 0
			METHOD refresh_graph_edit
			METHODID 122
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:2 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:0 METHOD:refresh_graph_edit METHODID:122 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:2 
		;


#ID 122-refresh_graph_edit

__BEGIN_METHOD_CODE__

DataDisp::refresh_graph_edit(bool silent)
{
     
    static GraphEditState state;

    XtVaGetValues(graph_edit,
		  _REMOVED_STR_ , &state.autoLayout,
		  _REMOVED_STR_ , &state.snapToGrid,
		  __null );

    if(refresh_graph_edit_timer == 0)
    {
	refresh_graph_edit_timer = 
	    XtAppAddTimeOut(XtWidgetToApplicationContext(graph_edit),
			    0, RefreshGraphEditCB, XtPointer(&state));
    }

    refresh_args();
    refresh_display_list(silent);
}

__END_METHOD_CODE__


	METHOD DataDisp!RefreshGraphEditCB

		METRICS
			refresh_graph_edit_timer REFERRED 1 TIMES,
			graph_edit REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 17
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 6
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 28
			LT 0
			METHOD RefreshGraphEditCB
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:17 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:6 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:28 LT:0 METHOD:RefreshGraphEditCB METHODID:29 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:2 
		;


#ID 29-RefreshGraphEditCB

__BEGIN_METHOD_CODE__

DataDisp::RefreshGraphEditCB(XtPointer client_data, XtIntervalId *id)
{
    (void) id;
    refresh_graph_edit_timer = 0;

    static GraphEditState state;

    XtVaGetValues(graph_edit,
		  _REMOVED_STR_ , &state.autoLayout,
		  _REMOVED_STR_ , &state.snapToGrid,
		  __null );

    const GraphEditState& old_state = *((GraphEditState *) client_data);

    static Graph *dummy = new Graph;

    XtVaSetValues(graph_edit,
		  _REMOVED_STR_ , old_state.autoLayout,
		  _REMOVED_STR_ , old_state.snapToGrid,
		  _REMOVED_STR_ , dummy,
		  __null );
    XtVaSetValues(graph_edit,
		  _REMOVED_STR_ , (Graph *)disp_graph,
		  __null );
    XtVaSetValues(graph_edit,
		  _REMOVED_STR_ , state.autoLayout,
		  _REMOVED_STR_ , state.snapToGrid,
		  __null );
}

__END_METHOD_CODE__


	METHOD DataDisp!getDispNrAtPoint
		CALLS
		graphEditGetNodeAtPoint : _SYSTEM_OR_USER_,
		get_nr : DispGraph



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 10
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 5
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 11
			LT 1
			METHOD getDispNrAtPoint
			METHODID 44
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:10 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:5 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:11 LT:1 METHOD:getDispNrAtPoint METHODID:44 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 44-getDispNrAtPoint

__BEGIN_METHOD_CODE__

DataDisp::getDispNrAtPoint(BoxPoint point)
{
    GraphNode* gn = graphEditGetNodeAtPoint(graph_edit, point);
    if(gn == 0)
	return 0;

    BoxGraphNode* bgn = dynamic_cast< BoxGraphNode  *>(  gn ) ;
    if(bgn == 0)
	return 0;

    return disp_graph->get_nr(bgn);
}

__END_METHOD_CODE__


	METHOD DataDisp!no_displaysHP
		CALLS
		bool : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		isReadyWithPrompt : GDBAgent



		METRICS
			graph_popup REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 11
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD no_displaysHP
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:11 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:no_displaysHP METHODID:34 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 34-no_displaysHP

__BEGIN_METHOD_CODE__

DataDisp::no_displaysHP(void*, void* , void* call_data)
{
    bool empty = bool(call_data);

    set_sensitive(graph_popup[_ARGS_].widget,
		   (!empty && gdb->isReadyWithPrompt()));
}

__END_METHOD_CODE__


	METHOD DataDisp!SelectionLostCB
		CALLS
		firstNode : Graph,
		nextNode : Graph,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		refresh_args : DataDisp,
		refresh_display_list : DataDisp



		METRICS
			lose_selection REFERRED 1 TIMES,
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 12
			CALLEDN 7
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 23
			LT 0
			METHOD SelectionLostCB
			METHODID 145
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:12 CALLEDN:7 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:23 LT:0 METHOD:SelectionLostCB METHODID:145 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:2 
		;


#ID 145-SelectionLostCB

__BEGIN_METHOD_CODE__

DataDisp::SelectionLostCB(Widget, XtPointer, XtPointer)
{
    if(!lose_selection)
	return;

     
    bool changed = false;
    for(GraphNode *gn = disp_graph->firstNode();
	 gn != 0; gn = disp_graph->nextNode(gn))
    {
	if(gn->selected())
	{
	    gn->selected() = false;
	    changed = true;
	    graphEditRedrawNode(graph_edit, gn);
	}
    }

    if(changed)
    {
	refresh_args();
	refresh_display_list();
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_dereferenceAct
		CALLS
		dereferenceCB : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD graph_dereferenceAct
			METHODID 57
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:graph_dereferenceAct METHODID:57 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 57-graph_dereferenceAct

__BEGIN_METHOD_CODE__

DataDisp::graph_dereferenceAct(Widget w, XEvent*, String*, Cardinal*)
{
    dereferenceCB(w, 0, 0);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_detailAct
		CALLS
		atoi : _SYSTEM_OR_USER_,
		toggleDetailCB : DataDisp



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD graph_detailAct
			METHODID 58
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:graph_detailAct METHODID:58 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 58-graph_detailAct

__BEGIN_METHOD_CODE__

DataDisp::graph_detailAct(Widget w, XEvent *, 
				String *params, Cardinal *num_params)
{
    int depth = -1;
    if(params != 0 && num_params != 0 && *num_params >= 1)
	depth = atoi(params[_ARGS_]);

    toggleDetailCB(w, XtPointer(depth), 0);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_rotateAct
		CALLS
		rotateCB : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD graph_rotateAct
			METHODID 59
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:graph_rotateAct METHODID:59 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 59-graph_rotateAct

__BEGIN_METHOD_CODE__

DataDisp::graph_rotateAct(Widget w, XEvent*, String*, Cardinal*)
{
    rotateCB(w, 0, 0);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_dependentAct
		CALLS
		dependentCB : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD graph_dependentAct
			METHODID 60
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:graph_dependentAct METHODID:60 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 60-graph_dependentAct

__BEGIN_METHOD_CODE__

DataDisp::graph_dependentAct(Widget w, XEvent*, String*, Cardinal*)
{
    dependentCB(w, 0, 0);
}

__END_METHOD_CODE__


	METHOD DataDisp!call_selection_proc
		CALLS
		time : _SYSTEM_OR_USER_,
		Time : _SYSTEM_OR_USER_,
		Time : _SYSTEM_OR_USER_,
		set_args : DataDisp,
		point : _SYSTEM_OR_USER_



		METRICS
			last_select_time REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 16
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD call_selection_proc
			METHODID 61
			MMINUS 0
			OUT 0
			PARNUM 6
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:16 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:call_selection_proc METHODID:61 MMINUS:0 OUT:0 PARNUM:6 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 61-call_selection_proc

__BEGIN_METHOD_CODE__

DataDisp::call_selection_proc(Widget w,
				   String name,
				   XEvent* event,
				   String* args,
				   Cardinal num_args,
				   SelectionMode mode)
{
     
    Time t = time(event);
    if(Time(t - last_select_time) > Time(XtGetMultiClickTime(XtDisplay(w))))
	set_args(point(event), mode);
    last_select_time = t;

    XtCallActionProc(w, name, event, args, num_args);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_selectAct
		CALLS
		call_selection_proc : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD graph_selectAct
			METHODID 50
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:graph_selectAct METHODID:50 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 50-graph_selectAct

__BEGIN_METHOD_CODE__

DataDisp::graph_selectAct(Widget, XEvent* event, String* args, 
				Cardinal* num_args)
{
    call_selection_proc(graph_edit, _REMOVED_STR_, event, args, *num_args, 
			SetSelection);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_select_or_moveAct
		CALLS
		call_selection_proc : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD graph_select_or_moveAct
			METHODID 51
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:graph_select_or_moveAct METHODID:51 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 51-graph_select_or_moveAct

__BEGIN_METHOD_CODE__

DataDisp::graph_select_or_moveAct(Widget, XEvent* event, String* args, 
					Cardinal* num_args)
{
    call_selection_proc(graph_edit, _REMOVED_STR_, event, args, *num_args,
			SetSelection);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_extendAct
		CALLS
		call_selection_proc : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD graph_extendAct
			METHODID 52
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:graph_extendAct METHODID:52 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 52-graph_extendAct

__BEGIN_METHOD_CODE__

DataDisp::graph_extendAct(Widget, XEvent* event, String* args, 
				Cardinal* num_args)
{
    call_selection_proc(graph_edit, _REMOVED_STR_, event, args, *num_args,
			ExtendSelection);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_extend_or_moveAct
		CALLS
		call_selection_proc : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD graph_extend_or_moveAct
			METHODID 53
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:graph_extend_or_moveAct METHODID:53 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 53-graph_extend_or_moveAct

__BEGIN_METHOD_CODE__

DataDisp::graph_extend_or_moveAct(Widget, XEvent* event, String* args, 
					Cardinal* num_args)
{
    call_selection_proc(graph_edit, _REMOVED_STR_, event, args, *num_args,
			ExtendSelection);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_toggleAct
		CALLS
		call_selection_proc : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD graph_toggleAct
			METHODID 54
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:graph_toggleAct METHODID:54 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 54-graph_toggleAct

__BEGIN_METHOD_CODE__

DataDisp::graph_toggleAct(Widget, XEvent* event, String* args, 
				Cardinal* num_args)
{
    call_selection_proc(graph_edit, _REMOVED_STR_, event, args, *num_args,
			ToggleSelection);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_toggle_or_moveAct
		CALLS
		call_selection_proc : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD graph_toggle_or_moveAct
			METHODID 55
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:graph_toggle_or_moveAct METHODID:55 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 55-graph_toggle_or_moveAct

__BEGIN_METHOD_CODE__

DataDisp::graph_toggle_or_moveAct(Widget, XEvent* event, String* args, 
					Cardinal* num_args)
{
    call_selection_proc(graph_edit, _REMOVED_STR_, event, args, *num_args,
			ToggleSelection);
}

__END_METHOD_CODE__


	METHOD DataDisp!graph_popupAct
		CALLS
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		point : _SYSTEM_OR_USER_,
		set_args : DataDisp,
		downcase : string,
		selected_node : DataDisp,
		quote : _SYSTEM_OR_USER_



		METRICS
			graph_popup REFERRED 2 TIMES,
			node_popup REFERRED 2 TIMES,
			shortcut_popup1 REFERRED 2 TIMES,
			graph_popup_w REFERRED 1 TIMES,
			node_popup_w REFERRED 1 TIMES,
			shortcut_popup_w REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 11
			AVVARLEN 12
			CALLEDN 11
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 1
			EQTEST 7
			EXPRORCALL 24
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 39
			LT 8
			METHOD graph_popupAct
			METHODID 56
			MMINUS 0
			OUT 4
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:1 ASS:11 AVVARLEN:12 CALLEDN:11 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:1 EQTEST:7 EXPRORCALL:24 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:39 LT:8 METHOD:graph_popupAct METHODID:56 MMINUS:0 OUT:4 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:6 
		;


#ID 56-graph_popupAct

__BEGIN_METHOD_CODE__

DataDisp::graph_popupAct(Widget, XEvent* event, String *args, 
			       Cardinal *num_args)
{
    static BoxPoint* p = 0;
    if(p == 0)
    {
	p = new BoxPoint;

	MMaddCallbacks(graph_popup,     XtPointer(p));
	MMaddCallbacks(node_popup,      XtPointer(p));
	MMaddCallbacks(shortcut_popup1, XtPointer(p));

	MMaddHelpCallback(graph_popup,     ImmediateHelpCB);
	MMaddHelpCallback(node_popup,      ImmediateHelpCB);
	MMaddHelpCallback(shortcut_popup1, ImmediateHelpCB);
    }
    *p = point(event);

    set_args(*p, SetSelection);

    string arg = _REMOVED_STR_;
    if(num_args != 0 && *num_args > 0)
	arg = downcase(args[_ARGS_]);

    Widget popup = 0;
    if(arg == _REMOVED_STR_ || selected_node() == 0)
	popup = graph_popup_w;
    else if(arg == _REMOVED_STR_ 
	     || (arg == _REMOVED_STR_ && event->xbutton.state & (1<<0) ))
	popup = shortcut_popup_w;
    else if(arg == _REMOVED_STR_ || arg == _REMOVED_STR_)
	popup = node_popup_w;
    else
	cerr << _REMOVED_STR_ << quote(arg) << _REMOVED_STR_;

    if(popup != 0)
    {
	XmMenuPosition(popup, &event->xbutton);
	XtManageChild(popup);
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!set_args
		CALLS
		getDispNrAtPoint : DataDisp,
		get : _SYSTEM_OR_USER_,
		box : DispNode,
		data : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		selected : _SYSTEM_OR_USER_,
		selected_node : DataDisp,
		selected_value : DispNode,
		selected_value : DispNode,
		selected : _SYSTEM_OR_USER_,
		select : DispNode,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		selected_value : DispNode,
		select : DispNode,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		selected : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		selected : _SYSTEM_OR_USER_,
		highlight : BoxGraphNode,
		select : DispNode,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		refresh_args : DataDisp,
		refresh_display_list : DataDisp



		METRICS
			graph_edit REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 23
			AVVARLEN 10
			CALLEDN 26
			CLASS DataDisp
			CLASSID 111
			CYCLO 15
			DOTS 0
			EQTEST 3
			EXPRORCALL 39
			GE 0
			GT 0
			IN 0
			INDR 19
			LE 0
			LOC 76
			LT 0
			METHOD set_args
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 28
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:23 AVVARLEN:10 CALLEDN:26 CLASS:DataDisp CLASSID:111 CYCLO:15 DOTS:0 EQTEST:3 EXPRORCALL:39 GE:0 GT:0 IN:0 INDR:19 LE:0 LOC:76 LT:0 METHOD:set_args METHODID:35 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:28 TERNINSTR:0 USEDVARS:1 
		;


#ID 35-set_args

__BEGIN_METHOD_CODE__

DataDisp::set_args(BoxPoint p, SelectionMode mode)
{
    DispNode*  disp_node   = 0;
    DispValue* disp_value  = 0;
    BoxGraphNode *disp_bgn = 0;

    bool was_selected = false;

    int disp_nr = getDispNrAtPoint(p);
    if(disp_nr)
    {
	disp_node = disp_graph->get(disp_nr);
	disp_value = (DispValue *)disp_node->box()->data(p);

	disp_bgn = disp_node->nodeptr();
	was_selected = disp_bgn->selected() && disp_value == 0;

	switch(mode)
	{
	case ExtendSelection:
	case ToggleSelection:
	    if(disp_node == selected_node()
		&& disp_node->selected_value() != 0
		&& disp_value != disp_node->selected_value())
	    {
		 
		 
		disp_bgn->selected() = false;
		disp_node->select(0);
		graphEditRedrawNode(graph_edit, disp_bgn);
		break;
	    }
	     

	case SetSelection:
	    if(disp_value != disp_node->selected_value())
	    {
		disp_node->select(disp_value);
		graphEditRedrawNode(graph_edit, disp_bgn);
	    }
	    break;
	}
    }

    if(mode == SetSelection)
    {
	 
	MapRef ref;
	for(DispNode* dn = disp_graph->first(ref); 
	     dn != 0;
	     dn = disp_graph->next(ref))
	{
	    if(dn != disp_node)
	    {
		BoxGraphNode *node = dn->nodeptr();
		bool redraw = false;

		if(!was_selected)
		{
		    if(!redraw)
			redraw = node->selected();
		    dn->nodeptr()->selected() = false;
		}

		if(!redraw)
		    redraw = (node->highlight() != 0);
		dn->select(0);

		if(redraw)
		    graphEditRedrawNode(graph_edit, node);
	    }
	}
    }

    refresh_args(true);
    refresh_display_list();
}

__END_METHOD_CODE__


	METHOD DataDisp!selected_node
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 19
			LT 0
			METHOD selected_node
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:19 LT:0 METHOD:selected_node METHODID:38 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-selected_node

__BEGIN_METHOD_CODE__

DataDisp::selected_node()
{
    DispNode *ret = 0;

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected())
	{
	    if(ret == 0)
		ret = dn;
	    else
		return 0;	 
	}
    }

    return ret;
}

__END_METHOD_CODE__


	METHOD DataDisp!selected_value
		CALLS
		selected_node : DataDisp,
		selected_value : _SYSTEM_OR_USER_,
		value : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 12
			LT 0
			METHOD selected_value
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:12 LT:0 METHOD:selected_value METHODID:37 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-selected_value

__BEGIN_METHOD_CODE__

DataDisp::selected_value()
{
    DispNode *dn = selected_node();
    if(dn == 0)
	return 0;

    DispValue *dv = dn->selected_value();
    if(dv != 0)
	return dv;

     
    return dn->value();
}

__END_METHOD_CODE__


	METHOD DataDisp!refresh_args

		METRICS
			refresh_args_timer REFERRED 2 TIMES,
			arg_needs_update REFERRED 1 TIMES,
			graph_edit REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 14
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD refresh_args
			METHODID 88
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:14 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:refresh_args METHODID:88 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:3 
		;


#ID 88-refresh_args

__BEGIN_METHOD_CODE__

DataDisp::refresh_args(bool update_arg)
{
    if(update_arg)
	arg_needs_update = true;

    if(refresh_args_timer == 0)
    {
	refresh_args_timer = 
	    XtAppAddTimeOut(XtWidgetToApplicationContext(graph_edit),
			    0, RefreshArgsCB, XtPointer(graph_edit));
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!RefreshArgsCB
		CALLS
		count : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		highlight : BoxGraphNode,
		select : DispNode,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		selected_node : DataDisp,
		selected_value : DataDisp,
		set_sensitive : _SYSTEM_OR_USER_,
		empty : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		expanded : DispValue,
		vertical_aligned : DispValue,
		abort : _SYSTEM_OR_USER_,
		get_string : ArgField,
		is_file_pos : _SYSTEM_OR_USER_,
		label : _SYSTEM_OR_USER_,
		dereferenced_expr : GDBAgent,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		recording : GDBAgent,
		emptyCommandQueue : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		has_assign_command : GDBAgent,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		has_assign_command : GDBAgent,
		size : StringArray,
		contains : string,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		full_name : DispValue,
		set_string : ArgField,
		name : _SYSTEM_OR_USER_,
		set_string : ArgField,
		get_selection : DataDisp,
		cmd : _SYSTEM_OR_USER_



		METRICS
			refresh_args_timer REFERRED 1 TIMES,
			lose_selection REFERRED 2 TIMES,
			graph_popup REFERRED 3 TIMES,
			node_popup REFERRED 10 TIMES,
			shortcut_popup1 REFERRED 1 TIMES,
			shortcut_popup2 REFERRED 1 TIMES,
			display_area REFERRED 6 TIMES,
			detail_menu REFERRED 4 TIMES,
			shortcut_menu REFERRED 3 TIMES,
			rotate_menu REFERRED 1 TIMES,
			shortcut_items REFERRED 1 TIMES,
			shortcut_exprs REFERRED 2 TIMES,
			graph_cmd_area REFERRED 14 TIMES,
			arg_needs_update REFERRED 2 TIMES,
			graph_edit REFERRED 1 TIMES,
			graph_selection_w REFERRED 5 TIMES,
			ARRAYOP 44
			ASS 43
			AVVARLEN 13
			CALLEDN 73
			CLASS DataDisp
			CLASSID 111
			CYCLO 31
			DOTS 65
			EQTEST 5
			EXPRORCALL 107
			GE 1
			GT 15
			IN 0
			INDR 18
			LE 0
			LOC 250
			LT 2
			METHOD RefreshArgsCB
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 100
			TERNINSTR 0
			USEDVARS 16

#METRICS ARRAYOP:44 ASS:43 AVVARLEN:13 CALLEDN:73 CLASS:DataDisp CLASSID:111 CYCLO:31 DOTS:65 EQTEST:5 EXPRORCALL:107 GE:1 GT:15 IN:0 INDR:18 LE:0 LOC:250 LT:2 METHOD:RefreshArgsCB METHODID:30 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:100 TERNINSTR:0 USEDVARS:16 
		;


#ID 30-RefreshArgsCB

__BEGIN_METHOD_CODE__

DataDisp::RefreshArgsCB(XtPointer, XtIntervalId *timer_id)
{
    (void) timer_id;
    refresh_args_timer = 0;

    DataDispCount count(disp_graph);

    if(count.selected > 1)
    {
	 
	MapRef ref;
	for(DispNode* dn = disp_graph->first(ref); 
	     dn != 0;
	     dn = disp_graph->next(ref))
	{
	    BoxGraphNode *node = dn->nodeptr();
	    bool redraw = (node->highlight() != 0);

	    dn->select(0);
	    if(redraw)
		graphEditRedrawNode(graph_edit, node);
	}
    }

    DispNode *disp_node_arg   = selected_node();
    DispValue *disp_value_arg = selected_value();

     
    set_sensitive(graph_popup[_ARGS_].widget, !source_arg->empty());

     
    set_sensitive(graph_popup[_ARGS_].widget,   count.all > 0);
    set_sensitive(graph_popup[_ARGS_].widget, count.visible > 0);

    Boolean dereference_ok  = 0 ;
    Boolean rotate_ok       = 0 ;
    Boolean rotate_state    = 0 ;

    if(disp_value_arg != 0)
    {
	 
	switch(disp_value_arg->type())
	{
	case Simple:
	case Text:
	case Reference:
	    break;

	case Pointer:
	    dereference_ok = true;
	    break;

	case Array:
	    rotate_ok     = disp_value_arg->expanded();
	    rotate_state  = disp_value_arg->vertical_aligned();
	    break;

	case List:
	case StructOrClass:
	case BaseClass:
	    break;

	case UnknownType:
	     ;
	    abort();
	}
    }

     
    bool arg_ok = false;
    if(disp_value_arg != 0)
    {
	arg_ok = true;
    }
    else
    {
	string arg = source_arg->get_string();
	arg_ok = (arg != _REMOVED_STR_) && !is_file_pos(arg);
    }

     








    if(dereference_ok)
    {
	string label(_REMOVED_STR_ + gdb->dereferenced_expr(_REMOVED_STR_));
	set_label(graph_cmd_area[_ARGS_].widget, label, _REMOVED_STR_ );
    }
    else
    {
	set_label(graph_cmd_area[_ARGS_].widget,
		  _REMOVED_STR_, _REMOVED_STR_ );
    }
    set_sensitive(shortcut_menu[_ARGS_].widget, arg_ok);
    set_sensitive(graph_cmd_area[_ARGS_].widget, arg_ok);
    set_sensitive(display_area[_ARGS_].widget, true);

     
    bool recording = gdb->recording() && emptyCommandQueue();
    bool record_ok = recording && arg_ok;
    set_sensitive(node_popup[_ARGS_].widget,
		  dereference_ok);
    set_sensitive(shortcut_menu[_ARGS_].widget,
		  record_ok || dereference_ok || 
		  (count.selected == 0 && arg_ok));
    set_sensitive(graph_cmd_area[_ARGS_].widget,
		  dereference_ok || (count.selected == 0 && arg_ok));
    set_sensitive(display_area[_ARGS_].widget,
		  dereference_ok);

     
    set_sensitive(node_popup[_ARGS_].widget,       rotate_ok);
    set_sensitive(graph_cmd_area[_ARGS_].widget,    rotate_ok);
    set_sensitive(rotate_menu[_ARGS_].widget, rotate_ok);

     
    if(recording)
    {
	 
	set_label(node_popup[_ARGS_].widget, _REMOVED_STR_);
	set_label(graph_cmd_area[_ARGS_].widget, 
		  _REMOVED_STR_, _REMOVED_STR_ );
	set_sensitive(node_popup[_ARGS_].widget, record_ok);
	set_sensitive(graph_cmd_area[_ARGS_].widget, record_ok);
    }
    else if(count.selected_expanded > 0 && count.selected_collapsed == 0)
    {
	 
	set_label(node_popup[_ARGS_].widget, _REMOVED_STR_);
	set_label(graph_cmd_area[_ARGS_].widget, 
		  _REMOVED_STR_, _REMOVED_STR_ );
	set_sensitive(node_popup[_ARGS_].widget, true);
	set_sensitive(graph_cmd_area[_ARGS_].widget, true);
    }
    else if(count.selected_collapsed > 0)
    {
	 
	set_label(node_popup[_ARGS_].widget, _REMOVED_STR_);
	set_label(graph_cmd_area[_ARGS_].widget, 
		  _REMOVED_STR_, _REMOVED_STR_ );
	set_sensitive(node_popup[_ARGS_].widget, true);
	set_sensitive(graph_cmd_area[_ARGS_].widget, true);
    }
    else
    {
	 
	set_sensitive(node_popup[_ARGS_].widget, false);
	set_sensitive(graph_cmd_area[_ARGS_].widget, false);
    }

    set_sensitive(display_area[_ARGS_].widget, 
		  record_ok || count.selected_collapsed > 0);
    set_sensitive(display_area[_ARGS_].widget, 
		  record_ok || count.selected_expanded > 0);

    set_sensitive(detail_menu[_ARGS_].widget, 
		  record_ok || count.selected_collapsed > 0);
    set_sensitive(detail_menu[_ARGS_].widget, 
		  record_ok || count.selected > 0);
    set_sensitive(detail_menu[_ARGS_].widget, 
		  record_ok || count.selected_collapsed > 0);
    set_sensitive(detail_menu[_ARGS_].widget, 
		  record_ok || count.selected_expanded > 0);

     
    set_sensitive(graph_cmd_area[_ARGS_].widget,
		  record_ok || count.selected_titles > 0);
    set_sensitive(display_area[_ARGS_].widget,
		  count.selected_titles > 0);

     
    bool can_set = gdb->has_assign_command() && arg_ok;
    set_sensitive(graph_cmd_area[_ARGS_].widget,   can_set);
    set_sensitive(display_area[_ARGS_].widget, can_set);
    set_sensitive(node_popup[_ARGS_].widget, gdb->has_assign_command());

     
    for(int i = 0; i < shortcut_items && i < shortcut_exprs.size(); i++)
    {
	const string& expr = shortcut_exprs[_ARGS_];
	bool sens = false;
	if(!expr.contains(_REMOVED_STR_))
	    sens = true;	 
	else if(arg_ok)
	    sens = true;	 
	else if(count.selected == 0)
	    sens = false;	 
	else if(disp_value_arg != 0)
	    sens = true;	 
 	else if(disp_node_arg != 0)
	    sens = true;	 

	set_sensitive(shortcut_popup1[_ARGS_].widget, sens);
	set_sensitive(shortcut_popup2[_ARGS_].widget, sens);
	set_sensitive(shortcut_menu  [_ARGS_].widget, sens);
    }

     
    if(arg_needs_update)
    {
	if(count.selected > 0)
	{
	    string arg;
	    if(disp_value_arg)
	    {
		arg = disp_value_arg->full_name();
		source_arg->set_string(arg);
	    }
	    else if(disp_node_arg)
	    {
		arg = disp_node_arg->name();
		source_arg->set_string(arg);
	    }
	}
	arg_needs_update = false;
    }

     
     
    bool include_position = (count.selected >= count.visible);
    ostrstream os;
    get_selection(os, include_position);
    string cmd(os);

     
     
     
    lose_selection = false;
    XmTextSetString(graph_selection_w, (char *)cmd);
    lose_selection = true;

    Time tm = XtLastTimestampProcessed(XtDisplay(graph_selection_w));

    if(cmd == _REMOVED_STR_)
    {
	 
	XmTextClearSelection(graph_selection_w, tm);
    }
    else
    {
	 
	XmTextSetSelection(graph_selection_w, 
			   0, XmTextGetLastPosition(graph_selection_w), tm);
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!get_scopes
		CALLS
		gdb_question : _SYSTEM_OR_USER_,
		where_command : GDBAgent,
		get_scope : _SYSTEM_OR_USER_,
		after : string,
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 13
			LT 0
			METHOD get_scopes
			METHODID 141
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:7 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:13 LT:0 METHOD:get_scopes METHODID:141 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 141-get_scopes

__BEGIN_METHOD_CODE__

DataDisp::get_scopes(StringArray& scopes)
{
     
    string backtrace = gdb_question(gdb->where_command(), -1, true);
    while(backtrace != _REMOVED_STR_)
    {
	string scope = get_scope(backtrace);
	if(scope != _REMOVED_STR_)
	    scopes += scope;
	backtrace = backtrace.after('\n');
    }

    return scopes.size() > 0;
}

__END_METHOD_CODE__


	METHOD DataDisp!write_frame_command
		CALLS
		has_frame_command : GDBAgent,
		frame_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 0
			EQTEST 2
			EXPRORCALL 8
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 26
			LT 19
			METHOD write_frame_command
			METHODID 114
			MMINUS 0
			OUT 9
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:0 EQTEST:2 EXPRORCALL:8 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:26 LT:19 METHOD:write_frame_command METHODID:114 MMINUS:0 OUT:9 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 114-write_frame_command

__BEGIN_METHOD_CODE__

DataDisp::write_frame_command(ostream& os, int& current_frame, 
				   int target_frame)
{
    if(target_frame != current_frame)
    {
	os << _REMOVED_STR_;
	if(gdb->has_frame_command())
	{
	     
	    os << gdb->frame_command(target_frame) << _REMOVED_STR_;
	}
	else
	{
	     
	    int offset = current_frame - target_frame;
	    if(offset == -1)
		os << _REMOVED_STR_;
	    else if(offset < 0)
		os << _REMOVED_STR_ << -offset;
	    else if(offset == 1)
		os << _REMOVED_STR_;
	    else if(offset > 0)
		os << _REMOVED_STR_ << offset;
	}

	current_frame = target_frame;
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!write_restore_scope_command
		CALLS
		deferred : DispNode,
		is_user_command : DispNode,
		scope : DispNode,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		scope : DispNode,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		name : _SYSTEM_OR_USER_,
		scope : DispNode,
		rm : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		scope : DispNode,
		rm : _SYSTEM_OR_USER_,
		set_status_mstring : _SYSTEM_OR_USER_,
		write_frame_command : DataDisp



		METRICS
			ARRAYOP 1
			ASS 11
			AVVARLEN 0
			CALLEDN 19
			CLASS DataDisp
			CLASSID 111
			CYCLO 8
			DOTS 2
			EQTEST 2
			EXPRORCALL 27
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 55
			LT 2
			METHOD write_restore_scope_command
			METHODID 115
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:11 AVVARLEN:0 CALLEDN:19 CLASS:DataDisp CLASSID:111 CYCLO:8 DOTS:2 EQTEST:2 EXPRORCALL:27 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:55 LT:2 METHOD:write_restore_scope_command METHODID:115 MMINUS:0 OUT:0 PARNUM:5 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:0 
		;


#ID 115-write_restore_scope_command

__BEGIN_METHOD_CODE__

DataDisp::write_restore_scope_command(ostream& os,
					   int& current_frame,
					   const StringArray& scopes,
					   DispNode *dn,
					   bool& ok)
{
    if(dn->deferred())
    {
	 
	return;
    }
    if(dn->is_user_command())
    {
	 
	return;
    }

    int target_frame = -1;

    if(dn->scope() == _REMOVED_STR_)
    {
	 
	target_frame = scopes.size() - 1;	 
    }
    else
    {
	 
	for(int i = 0; i < scopes.size(); i++)
	    if(scopes[_ARGS_] == dn->scope())
	    {
		target_frame = i;
		break;
	    }
    }

    if(target_frame < 0)
    {
	 
	MString msg;
	msg += rm(_REMOVED_STR_);
	msg += rm(itostring(dn->disp_nr()) + _REMOVED_STR_);
	msg += tt(dn->name());

	if(dn->scope() != _REMOVED_STR_)
	{
	   msg += rm(_REMOVED_STR_);
	   msg += tt(dn->scope());
	   msg += rm(_REMOVED_STR_);
	}

	set_status_mstring(msg);

	 
	(void) ok;

	return;
    }

    write_frame_command(os, current_frame, target_frame);
}

__END_METHOD_CODE__


	METHOD DataDisp!get_state
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		sort : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		need_core_to_restore : DataDisp,
		set_status : _SYSTEM_OR_USER_,
		size : IntArray,
		get : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		write_restore_scope_command : DataDisp,
		name : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		pos : _SYSTEM_OR_USER_,
		isValid : BoxPoint,
		deferred : DispNode,
		depends_on : DispNode,
		nodeptr : DispNode,
		firstTo : GraphNode,
		nodeptr : DispNode,
		nextTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		get_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		name : _SYSTEM_OR_USER_,
		scope : DispNode,
		scope : DispNode,
		write_frame_command : DataDisp,
		size : IntArray,
		refresh_display_cmd : DataDisp



		METRICS
			ARRAYOP 1
			ASS 23
			AVVARLEN 0
			CALLEDN 31
			CLASS DataDisp
			CLASSID 111
			CYCLO 16
			DOTS 5
			EQTEST 2
			EXPRORCALL 47
			GE 0
			GT 3
			IN 0
			INDR 20
			LE 0
			LOC 89
			LT 24
			METHOD get_state
			METHODID 116
			MMINUS 0
			OUT 11
			PARNUM 5
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 33
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:23 AVVARLEN:0 CALLEDN:31 CLASS:DataDisp CLASSID:111 CYCLO:16 DOTS:5 EQTEST:2 EXPRORCALL:47 GE:0 GT:3 IN:0 INDR:20 LE:0 LOC:89 LT:24 METHOD:get_state METHODID:116 MMINUS:0 OUT:11 PARNUM:5 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:33 TERNINSTR:0 USEDVARS:0 
		;


#ID 116-get_state

__BEGIN_METHOD_CODE__

DataDisp::get_state(ostream& os,
			 bool restore_state,
			 bool include_position,
			 const StringArray& scopes,
			 int target_frame)
{
     
     

     
     
    IntArray nrs;
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(restore_state || dn->selected())
	    nrs += dn->disp_nr();
    }
    sort(nrs, absolute_le);

    bool ok = true;
    if(restore_state && scopes.size() == 0 && need_core_to_restore())
    {
	set_status(_REMOVED_STR_);
	ok = false;
    }

     
    int current_frame = 0;

    for(int i = 0; i < nrs.size(); i++)
    {
	DispNode *dn = disp_graph->get(nrs[_ARGS_]);
	if(dn == 0)
	    continue;

	if(restore_state && scopes.size() > 0)
	    write_restore_scope_command(os, current_frame, scopes, dn, ok);

	os << _REMOVED_STR_ << dn->name();

	 
	if(include_position)
	{
	    BoxPoint pos = dn->nodeptr()->pos();
	    if(pos.isValid())
		os << _REMOVED_STR_ << pos;
	}

	 
	string depends_on = _REMOVED_STR_;
	if(dn->deferred())
	{
	    depends_on = dn->depends_on();
	}
	else
	{
	    for(GraphEdge *edge = dn->nodeptr()->firstTo();
		 edge != 0; edge = dn->nodeptr()->nextTo(edge))
	    {
		BoxGraphNode *ancestor = dynamic_cast< BoxGraphNode  *>(  edge->from() ) ;
		if(ancestor != 0)
		{
		    int depnr = disp_graph->get_nr(ancestor);
		    DispNode *depnode = disp_graph->get(depnr);
		    if(depnode != dn)
		    {
			depends_on = depnode->name();
			break;
		    }
		}
	    }
	}
	if(depends_on != _REMOVED_STR_)
	    os << _REMOVED_STR_ << depends_on;

	 
	if(dn->scope() != _REMOVED_STR_)
	    os << _REMOVED_STR_ << dn->scope();

	os << '\n';
    }

     
    write_frame_command(os, current_frame, target_frame);

     
    if(restore_state && nrs.size() > 0)
	os << refresh_display_cmd() << _REMOVED_STR_;

    return ok;
}

__END_METHOD_CODE__


	METHOD DataDisp!need_core_to_restore
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		deferred : DispNode,
		scope : DispNode



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 4
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 12
			LT 0
			METHOD need_core_to_restore
			METHODID 142
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:4 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:12 LT:0 METHOD:need_core_to_restore METHODID:142 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 142-need_core_to_restore

__BEGIN_METHOD_CODE__

DataDisp::need_core_to_restore()
{
    MapRef ref;
    for(DispNode *dn = disp_graph->first(ref);
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(!dn->deferred() && dn->scope() != _REMOVED_STR_)
	    return true;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DataDisp!reset_done

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD reset_done
			METHODID 117
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:reset_done METHODID:117 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 117-reset_done

__BEGIN_METHOD_CODE__

DataDisp::reset_done(const string& answer, void *)
{
     
    (void) answer;
}

__END_METHOD_CODE__


	METHOD DataDisp!reset
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		size : IntArray,
		c : _SYSTEM_OR_USER_,
		delete_display_cmd : DataDisp,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 7
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 6
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 22
			LT 0
			METHOD reset
			METHODID 144
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:7 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:6 EQTEST:0 EXPRORCALL:9 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:22 LT:0 METHOD:reset METHODID:144 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 144-reset

__BEGIN_METHOD_CODE__

DataDisp::reset()
{
     
    IntArray display_nrs;
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	display_nrs += dn->disp_nr();
    }

    if(display_nrs.size() > 0)
    {
	Command c(delete_display_cmd(display_nrs));
	c.verbose  = false;
	c.prompt   = false;
	c.check    = true;
	c.priority = 2 ;
	c.callback = reset_done;
	gdb_command(c);
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!alias_display_nr
		CALLS
		isHint : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		disp_nr : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 9
			LT 1
			METHOD alias_display_nr
			METHODID 113
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:9 LT:1 METHOD:alias_display_nr METHODID:113 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 113-alias_display_nr

__BEGIN_METHOD_CODE__

DataDisp::alias_display_nr(GraphNode *node)
{
    if(!node->isHint())
	return 0;
    AliasGraphEdge *edge = dynamic_cast< AliasGraphEdge  *>(  node->firstTo() ) ;
    if(edge == 0)
	return 0;

    return edge->disp_nr();
}

__END_METHOD_CODE__


	METHOD DataDisp!UpdateGraphEditorSelectionCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		size : IntArray,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		firstNode : Graph,
		nextNode : Graph,
		alias_display_nr : DataDisp,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		refresh_args : DataDisp,
		refresh_display_list : DataDisp



		METRICS
			display_list_w REFERRED 1 TIMES,
			graph_edit REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 14
			AVVARLEN 12
			CALLEDN 21
			CLASS DataDisp
			CLASSID 111
			CYCLO 9
			DOTS 1
			EQTEST 2
			EXPRORCALL 29
			GE 0
			GT 0
			IN 0
			INDR 14
			LE 0
			LOC 50
			LT 1
			METHOD UpdateGraphEditorSelectionCB
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:14 AVVARLEN:12 CALLEDN:21 CLASS:DataDisp CLASSID:111 CYCLO:9 DOTS:1 EQTEST:2 EXPRORCALL:29 GE:0 GT:0 IN:0 INDR:14 LE:0 LOC:50 LT:1 METHOD:UpdateGraphEditorSelectionCB METHODID:23 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:2 
		;


#ID 23-UpdateGraphEditorSelectionCB

__BEGIN_METHOD_CODE__

DataDisp::UpdateGraphEditorSelectionCB(Widget, XtPointer, XtPointer)
{
    IntArray display_nrs;
    getDisplayNumbers(display_list_w, display_nrs);

     
    MapRef ref;
    for(DispNode *dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	int display_nr = dn->disp_nr();

	bool select = false;
	for(int i = 0; i < display_nrs.size(); i++)
	{
	    if(display_nr == display_nrs[_ARGS_])
	    {
		select = true;
		break;
	    }
	}

	if(select != dn->selected())
	{
	    dn->selected() = select;
	    graphEditRedrawNode(graph_edit, dn->nodeptr());
	}

	if(dn->nodeptr()->hidden())
	{
	     
	    for(GraphNode *node = disp_graph->firstNode();
		 node != 0;
		 node = disp_graph->nextNode(node))
	    {
		if(alias_display_nr(node) == display_nr)
		{
		    if(node->selected() != dn->selected())
		    {
			node->selected() = dn->selected();
			graphEditRedrawNode(graph_edit, node);
		    }
		}
	    }
	}
    }

    refresh_args(true);
    refresh_display_list();
}

__END_METHOD_CODE__


	METHOD DataDisp!UpdateDisplayEditorSelectionCB
		CALLS
		firstNode : Graph,
		nextNode : Graph,
		alias_display_nr : DataDisp,
		get : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		graphEditRedrawNode : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		refresh_args : DataDisp,
		refresh_display_list : DataDisp



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 8
			AVVARLEN 10
			CALLEDN 12
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 1
			IN 0
			INDR 8
			LE 0
			LOC 24
			LT 0
			METHOD UpdateDisplayEditorSelectionCB
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:10 CALLEDN:12 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:16 GE:0 GT:1 IN:0 INDR:8 LE:0 LOC:24 LT:0 METHOD:UpdateDisplayEditorSelectionCB METHODID:24 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:1 
		;


#ID 24-UpdateDisplayEditorSelectionCB

__BEGIN_METHOD_CODE__

DataDisp::UpdateDisplayEditorSelectionCB(Widget, XtPointer, XtPointer)
{
     
    for(GraphNode *node = disp_graph->firstNode();
	 node != 0;
	 node = disp_graph->nextNode(node))
    {
	int nr = alias_display_nr(node);
	if(nr > 0)
	{
	    DispNode *dn = disp_graph->get(nr);
	    if(dn != 0)
	    {
		if(node->selected() != dn->selected())
		{
		    dn->selected() = node->selected();
		    graphEditRedrawNode(graph_edit, dn->nodeptr());
		}
	    }
	}
    }

    refresh_args(true);
    refresh_display_list();
}

__END_METHOD_CODE__


	METHOD DataDisp!CompareNodesCB
		CALLS
		get_nr : DispGraph,
		get_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		smart_compare : _SYSTEM_OR_USER_,
		name : _SYSTEM_OR_USER_,
		name : _SYSTEM_OR_USER_,
		long : UniqueId,
		long : UniqueId



		METRICS
			ARRAYOP 0
			ASS 19
			AVVARLEN 0
			CALLEDN 9
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 2
			IN 0
			INDR 14
			LE 0
			LOC 44
			LT 2
			METHOD CompareNodesCB
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:19 AVVARLEN:0 CALLEDN:9 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:16 GE:0 GT:2 IN:0 INDR:14 LE:0 LOC:44 LT:2 METHOD:CompareNodesCB METHODID:32 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-CompareNodesCB

__BEGIN_METHOD_CODE__

DataDisp::CompareNodesCB(Widget, XtPointer, XtPointer call_data)
{
    GraphEditCompareNodesInfo *info = (GraphEditCompareNodesInfo *)call_data;

    BoxGraphNode *node1 = dynamic_cast< BoxGraphNode  *>(  info->node1 ) ;
    BoxGraphNode *node2 = dynamic_cast< BoxGraphNode  *>(  info->node2 ) ;

    DispNode *disp1 = 0;
    DispNode *disp2 = 0;

    if(node1 != 0 && node2 != 0)
    {
	int nr1 = disp_graph->get_nr(node1);
	int nr2 = disp_graph->get_nr(node2);

	disp1 = disp_graph->get(nr1);
	disp2 = disp_graph->get(nr2);
    }

    if(disp1 != 0 && disp2 != 0)
    {
	info->result = smart_compare(disp1->name(), disp2->name());
    }
    else
    {
	if(disp1 != 0)
	{
	     
	    info->result = 1;
	}
	else if(disp2 != 0)
	{
	     
	    info->result = -1;
	}
	else
	{
	     
	    info->result = long(info->node1) - long(info->node2);
	}
    }



}

__END_METHOD_CODE__


	METHOD DataDisp!again_new_displaySQ
		CALLS
		new_displaySQ : DataDisp



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 7
			LT 0
			METHOD again_new_displaySQ
			METHODID 89
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:7 LT:0 METHOD:again_new_displaySQ METHODID:89 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 89-again_new_displaySQ

__BEGIN_METHOD_CODE__

DataDisp::again_new_displaySQ(XtPointer client_data, XtIntervalId *)
{
    NewDisplayInfo *info = (NewDisplayInfo *)client_data;
    new_displaySQ(info->display_expression, info->scope, info->point_ptr, 
		  info->depends_on, info->deferred, info->origin, 
		  info->verbose, info->prompt);
    delete info;
}

__END_METHOD_CODE__


	METHOD DataDisp!display_number
		CALLS
		get_by_name : DispGraph,
		post_gdb_message : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		post_gdb_message : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 6
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 0
			EQTEST 2
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 20
			LT 0
			METHOD display_number
			METHODID 146
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:6 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:0 EQTEST:2 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:20 LT:0 METHOD:display_number METHODID:146 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 146-display_number

__BEGIN_METHOD_CODE__

DataDisp::display_number(const string& name, bool verbose)
{
    int nr = disp_graph->get_by_name(name);

    if(nr == 0)
    {
	if(verbose)
	    post_gdb_message(_REMOVED_STR_ + quote(name) + _REMOVED_STR_);
	return 0;
    }

    DispNode *dn = disp_graph->get(nr);
    if(dn == 0)
    {
	if(verbose)
	    post_gdb_message(_REMOVED_STR_ + itostring(nr) + _REMOVED_STR_);
	return 0;
    }

    return nr;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_displaySQ
		CALLS
		display_number : DataDisp,
		BoxPoint : BoxPoint,
		StatusDelay : StatusDelay,
		set_last_origin : DataDisp,
		new_deferred_node : DataDisp,
		insert : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		prompt : GDBAgent,
		refresh_display_list : DataDisp,
		is_user_command : DispNode,
		user_command : DispNode,
		gdb_command : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		new_data_displaysSQA : DataDisp,
		display_prints_values : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		display_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		display_command : GDBAgent,
		OQCProc : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		print_command : GDBAgent



		METRICS
			last_origin REFERRED 4 TIMES,
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 23
			AVVARLEN 10
			CALLEDN 22
			CLASS DataDisp
			CLASSID 111
			CYCLO 13
			DOTS 1
			EQTEST 3
			EXPRORCALL 37
			GE 0
			GT 0
			IN 0
			INDR 19
			LE 0
			LOC 100
			LT 0
			METHOD new_displaySQ
			METHODID 63
			MMINUS 0
			OUT 0
			PARNUM 8
			PPLUS 0
			RETPOINT 0
			SCOPEOP 3
			STMNT 35
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:23 AVVARLEN:10 CALLEDN:22 CLASS:DataDisp CLASSID:111 CYCLO:13 DOTS:1 EQTEST:3 EXPRORCALL:37 GE:0 GT:0 IN:0 INDR:19 LE:0 LOC:100 LT:0 METHOD:new_displaySQ METHODID:63 MMINUS:0 OUT:0 PARNUM:8 PPLUS:0 RETPOINT:0 SCOPEOP:3 STMNT:35 TERNINSTR:0 USEDVARS:2 
		;


#ID 63-new_displaySQ

__BEGIN_METHOD_CODE__

DataDisp::new_displaySQ(string display_expression,
			      string scope, BoxPoint *p,
			      string depends_on, DeferMode deferred,
			      Widget origin, bool verbose, bool do_prompt)
{
     
    if(deferred != DeferAlways && depends_on != _REMOVED_STR_)
    {
	int depend_nr = display_number(depends_on, verbose);
	if(depend_nr == 0)
	    return;
    }

    NewDisplayInfo *info = new NewDisplayInfo;
    info->display_expression = display_expression;
    info->scope              = scope;
    info->verbose            = verbose;
    info->prompt             = do_prompt;
    info->deferred           = deferred;
    if(p != 0)
    {
	info->point = *p;
	info->point_ptr = &info->point;
    }
    else
    {
	info->point = BoxPoint();
	info->point_ptr = 0;
    }
    info->depends_on = depends_on;
    info->origin     = origin;

    static Delay *reading_delay = 0;
    if(!DispBox::vsllib_initialized)
    {
	 
	if(VSLLib::background != 0)
	{
	    reading_delay = new StatusDelay(_REMOVED_STR_);

	     
	    VSLLib::background = 0;
	}

	 
	 
	XtAppAddTimeOut(XtWidgetToApplicationContext(graph_edit),
			100, again_new_displaySQ, info);
	return;
    }
    delete reading_delay;
    reading_delay = 0;

    if(origin)
	set_last_origin(origin);

    if(display_expression == _REMOVED_STR_)
	return;

    if(deferred == DeferAlways)
    {
	 
	DispNode *dn = new_deferred_node(display_expression, scope, 
					 info->point, depends_on);

	 
	disp_graph->insert(dn->disp_nr(), dn);

	if(do_prompt)
	    prompt();

	delete info;

	refresh_display_list();
    }
    else if(is_user_command(display_expression))
    {
	 
	string cmd = user_command(display_expression);
	gdb_command(cmd, last_origin, new_user_displayOQC, info);
    }
    else
    {
	 
	if(display_expression.contains(rxmore_than_one))
	{
	    new_data_displaysSQA(display_expression, info);
	    return;
	}

	if(gdb->display_prints_values())
	{
	    gdb_command(gdb->display_command(display_expression),
			last_origin, new_data_displayOQC, info);
	}
	else
	{
	    gdb_command(gdb->display_command(display_expression),
			last_origin, OQCProc(0), (void *)0);
	    gdb_command(gdb->print_command(display_expression),
			last_origin, new_data_displayOQC, info);
	}
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!read_number_and_name
		CALLS
		has_numbered_displays : GDBAgent,
		read_disp_nr_str : _SYSTEM_OR_USER_,
		read_disp_name : _SYSTEM_OR_USER_,
		read_disp_name : _SYSTEM_OR_USER_,
		has_display_command : GDBAgent,
		gdb_question : _SYSTEM_OR_USER_,
		display_command : GDBAgent,
		index : string,
		from : string,
		get_nr : DispGraph,
		itostring : _SYSTEM_OR_USER_,
		post_warning : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			last_origin REFERRED 1 TIMES,
			next_ddd_display_number REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 13
			AVVARLEN 17
			CALLEDN 14
			CLASS DataDisp
			CLASSID 111
			CYCLO 8
			DOTS 2
			EQTEST 2
			EXPRORCALL 21
			GE 0
			GT 2
			IN 0
			INDR 3
			LE 0
			LOC 43
			LT 0
			METHOD read_number_and_name
			METHODID 105
			MMINUS 1
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:13 AVVARLEN:17 CALLEDN:14 CLASS:DataDisp CLASSID:111 CYCLO:8 DOTS:2 EQTEST:2 EXPRORCALL:21 GE:0 GT:2 IN:0 INDR:3 LE:0 LOC:43 LT:0 METHOD:read_number_and_name METHODID:105 MMINUS:1 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:2 
		;


#ID 105-read_number_and_name

__BEGIN_METHOD_CODE__

DataDisp::read_number_and_name(string& answer, string& nr, string& name)
{
    nr   = _REMOVED_STR_;
    name = _REMOVED_STR_;

    if(gdb->has_numbered_displays())
    {
	nr = read_disp_nr_str(answer, gdb);
	if(nr != _REMOVED_STR_)
	    name = read_disp_name(answer, gdb);
    }
    else
    {
	name = read_disp_name(answer, gdb);
	if(gdb->has_display_command())
	{
	     
	    string ans = gdb_question(gdb->display_command(), -1);
	    int index  = ans.index(name + _REMOVED_STR_, -1);
	    if(index > 0)
	    {
		while(index > 0 && ans[_ARGS_] != '\n')
		    index--;
		ans = ans.from(index);
		int n = get_nr(ans);
		nr = itostring(n);
	    }

	    if(nr == _REMOVED_STR_)
	    {
		 
		post_warning(_REMOVED_STR_ 
			     + quote(name), 
			     _REMOVED_STR_, last_origin);
	    }
	}
	
	if(nr == _REMOVED_STR_)
	{
	     
	    nr = itostring(next_ddd_display_number++);
	}
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!new_display_cmd
		CALLS
		BoxPoint : BoxPoint,
		itostring : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 2
			ASS 6
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD new_display_cmd
			METHODID 68
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:6 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:new_display_cmd METHODID:68 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 68-new_display_cmd

__BEGIN_METHOD_CODE__

DataDisp::new_display_cmd(string display_expression, BoxPoint *p,
				 string depends_on)
{
    string cmd = _REMOVED_STR_ + display_expression;
    if(p != 0 && *p != BoxPoint())
	cmd += _REMOVED_STR_ + itostring((*p)[_ARGS_]) + _REMOVED_STR_ + itostring((*p)[_ARGS_]) + _REMOVED_STR_;
    if(depends_on != _REMOVED_STR_)
	cmd += _REMOVED_STR_ + depends_on;

    return cmd;
}

__END_METHOD_CODE__


	METHOD DataDisp!open_data_window
		CALLS
		gdbOpenDataWindowCB : _SYSTEM_OR_USER_



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD open_data_window
			METHODID 39
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:open_data_window METHODID:39 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 39-open_data_window

__BEGIN_METHOD_CODE__

DataDisp::open_data_window()
{
     
    gdbOpenDataWindowCB(graph_edit, 0, 0);
}

__END_METHOD_CODE__


	METHOD DataDisp!close_data_window
		CALLS
		gdbCloseDataWindowCB : _SYSTEM_OR_USER_



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD close_data_window
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:close_data_window METHODID:40 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 40-close_data_window

__BEGIN_METHOD_CODE__

DataDisp::close_data_window()
{
    if(app_data.separate_data_window)
    {
	 
    }
    else
    {
	gdbCloseDataWindowCB(graph_edit, 0, 0);
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!new_data_node
		CALLS
		read_number_and_name : DataDisp,
		get_nr : DispGraph,
		post_gdb_message : _SYSTEM_OR_USER_,
		contains : string,
		contains : string,
		contains : string,
		contains : _SYSTEM_OR_USER_,
		is_disabling : _SYSTEM_OR_USER_,
		get_disp_value_str : _SYSTEM_OR_USER_,
		post_gdb_message : _SYSTEM_OR_USER_,
		s : _SYSTEM_OR_USER_,
		length : string,
		length : string,
		DispNode : DispNode,
		disable : DispNode,
		make_active : _SYSTEM_OR_USER_,
		open_data_window : DataDisp



		METRICS
			last_origin REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 11
			AVVARLEN 11
			CALLEDN 17
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 8
			EQTEST 2
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 64
			LT 0
			METHOD new_data_node
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 22
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:11 CALLEDN:17 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:8 EQTEST:2 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:64 LT:0 METHOD:new_data_node METHODID:41 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:22 TERNINSTR:0 USEDVARS:1 
		;


#ID 41-new_data_node

__BEGIN_METHOD_CODE__

DataDisp::new_data_node(const string& given_name,
				  const string& scope,
				  const string& answer)
{
    string value = answer;
    string nr_s;
    string display_name;
    read_number_and_name(value, nr_s, display_name);

    int nr = get_nr(nr_s);
    if(nr == 0 || display_name == _REMOVED_STR_)
    {
	post_gdb_message(answer, true, last_origin);
	return 0;
    }

     
     
     
     
     
     
     
     
     

     
     
     

     
     
     



    string title = display_name;
    if(title.contains(rxfunction_call) || 
	title.contains('{') || 
	title.contains('}') || 
	given_name.contains('\''))
	title = given_name;

    bool disabling_occurred = false;
    if(is_disabling(value, gdb))
    {
	string error_msg = get_disp_value_str(value, gdb);
	post_gdb_message(error_msg, true, last_origin);
	value = _REMOVED_STR_;
	disabling_occurred = true;
    }

    StatusShower s(_REMOVED_STR_);
    s.total   = value.length();
    s.current = value.length();

    DispNode *dn = new DispNode(nr, title, scope, value);
    if(disabling_occurred)
    {
	dn->disable();
	dn->make_active();
    }

    open_data_window();

    return dn;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_user_node
		CALLS
		s : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		DispNode : DispNode,
		open_data_window : DataDisp



		METRICS
			next_ddd_display_number REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 23
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 15
			LT 0
			METHOD new_user_node
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:23 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:15 LT:0 METHOD:new_user_node METHODID:42 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 42-new_user_node

__BEGIN_METHOD_CODE__

DataDisp::new_user_node(const string& name,
				  const string&  ,
				  const string& answer)
{
     
    int nr = -(next_ddd_display_number++);

    StatusShower s(_REMOVED_STR_);
    s.total   = answer.length();
    s.current = answer.length();

     
    DispNode *dn = new DispNode(nr, name, _REMOVED_STR_, answer);

    open_data_window();

    return dn;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_deferred_node
		CALLS
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		set_status_mstring : _SYSTEM_OR_USER_,
		DispNode : DispNode,
		deferred : DispNode,
		make_inactive : _SYSTEM_OR_USER_,
		depends_on : DispNode,
		moveTo : _SYSTEM_OR_USER_



		METRICS
			next_ddd_display_number REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 23
			CALLEDN 12
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 19
			LT 0
			METHOD new_deferred_node
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:23 CALLEDN:12 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:19 LT:0 METHOD:new_deferred_node METHODID:43 MMINUS:0 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 43-new_deferred_node

__BEGIN_METHOD_CODE__

DataDisp::new_deferred_node(const string& expr, const string& scope,
				      const BoxPoint& pos,
				      const string& depends_on)
{
     
    int nr = -(next_ddd_display_number++);

     
    string answer = _REMOVED_STR_;

    MString msg = rm(_REMOVED_STR_ + itostring(nr) + _REMOVED_STR_) + 
	tt(expr) + rm(_REMOVED_STR_) + tt(scope) + rm(_REMOVED_STR_);
    set_status_mstring(msg);

    DispNode *dn = new DispNode(nr, expr, scope, answer);
    dn->deferred() = true;
    dn->make_inactive();
    dn->depends_on() = depends_on;
    dn->moveTo(pos);

    return dn;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_data_displayOQC
		CALLS
		has_display_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		display_command : GDBAgent,
		contains_display : _SYSTEM_OR_USER_,
		new_deferred_node : DataDisp,
		insert : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		prompt : GDBAgent,
		refresh_display_list : DataDisp,
		post_gdb_message : _SYSTEM_OR_USER_,
		firstNode : Graph,
		nextNode : Graph,
		selected : _SYSTEM_OR_USER_,
		new_data_node : DataDisp,
		new_deferred_node : DataDisp,
		insert : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		prompt : GDBAgent,
		refresh_display_list : DataDisp,
		get_by_name : DispGraph,
		BoxPoint : BoxPoint,
		default_pos : DispGraph,
		moveTo : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		insert : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		refresh_addr : DataDisp,
		refresh_graph_edit : DataDisp,
		prompt : GDBAgent



		METRICS
			last_origin REFERRED 2 TIMES,
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 13
			AVVARLEN 10
			CALLEDN 29
			CLASS DataDisp
			CLASSID 111
			CYCLO 14
			DOTS 0
			EQTEST 6
			EXPRORCALL 43
			GE 0
			GT 0
			IN 0
			INDR 34
			LE 0
			LOC 102
			LT 0
			METHOD new_data_displayOQC
			METHODID 90
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 34
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:13 AVVARLEN:10 CALLEDN:29 CLASS:DataDisp CLASSID:111 CYCLO:14 DOTS:0 EQTEST:6 EXPRORCALL:43 GE:0 GT:0 IN:0 INDR:34 LE:0 LOC:102 LT:0 METHOD:new_data_displayOQC METHODID:90 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:34 TERNINSTR:0 USEDVARS:2 
		;


#ID 90-new_data_displayOQC

__BEGIN_METHOD_CODE__

DataDisp::new_data_displayOQC(const string& answer, void* data)
{
    NewDisplayInfo *info = (NewDisplayInfo *)data;

    if(answer == NO_GDB_ANSWER)
    {
	delete info;		 
	return;
    }

    if(answer == _REMOVED_STR_)
    {
	if(gdb->has_display_command())
	{
	     
	    gdb_command(gdb->display_command(), last_origin,
			new_data_display_extraOQC, data);
	}
	else
	{
	    delete info;
	}
	return;
    }

    if(!contains_display(answer, gdb))
    {
	if(info->deferred == DeferIfNeeded)
	{
	     
	    DispNode *dn = new_deferred_node(info->display_expression,
					     info->scope,
					     info->point, info->depends_on);
	    
	     
	    disp_graph->insert(dn->disp_nr(), dn);
	    
	    if(info->prompt)
		prompt();

	    refresh_display_list();
	}
	else
	{
	    if(info->verbose)
		post_gdb_message(answer, info->prompt, last_origin);
	}

	delete info;
	return;
    }

     
    for(GraphNode *gn = disp_graph->firstNode();
	 gn != 0; gn = disp_graph->nextNode(gn))
    {
	gn->selected() = false;
    }

     
    string ans = answer;
    DispNode *dn = new_data_node(info->display_expression, info->scope, ans);
    if(dn == 0)
    {
	if(info->deferred == DeferIfNeeded)
	{
	     
	    DispNode *dn = new_deferred_node(info->display_expression,
					     info->scope,
					     info->point, info->depends_on);
	    
	     
	    disp_graph->insert(dn->disp_nr(), dn);
	    
	    if(info->prompt)
		prompt();

	    refresh_display_list();
	}

	delete info;
	return;
    }

     
    int depend_nr = disp_graph->get_by_name(info->depends_on);
    BoxPoint box_point = info->point;
    if(box_point == BoxPoint())
	box_point = disp_graph->default_pos(dn, graph_edit, depend_nr);
    dn->moveTo(box_point);
    dn->selected() = true;

     
    disp_graph->insert(dn->disp_nr(), dn, depend_nr);

    refresh_addr(dn);
    refresh_graph_edit();

    if(info->prompt)
	prompt();

    delete info;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_user_displayOQC
		CALLS
		firstNode : Graph,
		nextNode : Graph,
		selected : _SYSTEM_OR_USER_,
		new_user_node : DataDisp,
		get_by_name : DispGraph,
		BoxPoint : BoxPoint,
		default_pos : DispGraph,
		moveTo : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		insert : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		refresh_addr : DataDisp,
		refresh_graph_edit : DataDisp,
		update_infos : _SYSTEM_OR_USER_,
		prompt : GDBAgent



		METRICS
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 12
			AVVARLEN 10
			CALLEDN 15
			CLASS DataDisp
			CLASSID 111
			CYCLO 6
			DOTS 0
			EQTEST 2
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 14
			LE 0
			LOC 42
			LT 0
			METHOD new_user_displayOQC
			METHODID 94
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:12 AVVARLEN:10 CALLEDN:15 CLASS:DataDisp CLASSID:111 CYCLO:6 DOTS:0 EQTEST:2 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:14 LE:0 LOC:42 LT:0 METHOD:new_user_displayOQC METHODID:94 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:1 
		;


#ID 94-new_user_displayOQC

__BEGIN_METHOD_CODE__

DataDisp::new_user_displayOQC(const string& answer, void* data)
{
    NewDisplayInfo *info = (NewDisplayInfo *)data;

    if(answer == NO_GDB_ANSWER)
    {
	delete info;		 
	return;
    }

     
    for(GraphNode *gn = disp_graph->firstNode();
	 gn != 0; gn = disp_graph->nextNode(gn))
    {
	gn->selected() = false;
    }

     
    string ans = answer;
    DispNode *dn = new_user_node(info->display_expression, info->scope, ans);
    if(dn != 0)
    {
	 
	int depend_nr = disp_graph->get_by_name(info->depends_on);
	BoxPoint box_point = info->point;
	if(box_point == BoxPoint())
	    box_point = disp_graph->default_pos(dn, graph_edit, depend_nr);
	dn->moveTo(box_point);
	dn->selected() = true;

	 
	disp_graph->insert(dn->disp_nr(), dn, depend_nr);

	refresh_addr(dn);
	refresh_graph_edit();
	update_infos();
    }

    if(info->prompt)
	prompt();

    delete info;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_data_display_extraOQC
		CALLS
		read_next_display : _SYSTEM_OR_USER_,
		new_data_displayOQC : DataDisp



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD new_data_display_extraOQC
			METHODID 91
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:new_data_display_extraOQC METHODID:91 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 91-new_data_display_extraOQC

__BEGIN_METHOD_CODE__

DataDisp::new_data_display_extraOQC(const string& answer, void* data)
{
    NewDisplayInfo *info = (NewDisplayInfo *)data;

    if(answer == NO_GDB_ANSWER)
    {
	delete info;		 
	return;
    }

     
    string ans = answer;
    string display = read_next_display(ans, gdb);

    if(display != _REMOVED_STR_)
	new_data_displayOQC(display, data);
}

__END_METHOD_CODE__


	METHOD DataDisp!new_data_displaysSQA
		CALLS
		after : string,
		from : _SYSTEM_OR_USER_,
		del : string,
		get_nr : DispGraph,
		after : string,
		get_nr : DispGraph,
		post_error : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		display_command : GDBAgent,
		print_command : GDBAgent,
		size : VoidArray,
		size : StringArray,
		display_prints_values : GDBAgent,
		send_qu_array : GDBAgent,
		size : StringArray,
		size : StringArray,
		gdb_question : _SYSTEM_OR_USER_,
		send_qu_array : GDBAgent,
		size : StringArray,
		post_gdb_busy : _SYSTEM_OR_USER_



		METRICS
			last_origin REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 17
			AVVARLEN 11
			CALLEDN 21
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 10
			EQTEST 0
			EXPRORCALL 30
			GE 0
			GT 1
			IN 0
			INDR 6
			LE 0
			LOC 54
			LT 3
			METHOD new_data_displaysSQA
			METHODID 92
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 2
			STMNT 29
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:17 AVVARLEN:11 CALLEDN:21 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:10 EQTEST:0 EXPRORCALL:30 GE:0 GT:1 IN:0 INDR:6 LE:0 LOC:54 LT:3 METHOD:new_data_displaysSQA METHODID:92 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:2 STMNT:29 TERNINSTR:0 USEDVARS:1 
		;


#ID 92-new_data_displaysSQA

__BEGIN_METHOD_CODE__

DataDisp::new_data_displaysSQA(string display_expression,
				     void *data)
{
    NewDisplayInfo *info = (NewDisplayInfo *)data;

     
    string prefix  = display_expression.before(rxmore_than_one);
    string postfix = display_expression.after(rxmore_than_one);
    string range   = display_expression.from(rxmore_than_one);
    range.del(_REMOVED_STR_);
    int start = ::get_nr(range);
    range = range.after(_REMOVED_STR_);
    int stop = ::get_nr(range);

    if(start > stop)
    {
	post_error(_REMOVED_STR_ + quote(display_expression), 
		   _REMOVED_STR_);
	delete info;
	return;
    }

     ;

    StringArray display_cmds;
    StringArray print_cmds;

    for(int i = start; i < stop + 1; i++)
    {
	string expr = prefix + _REMOVED_STR_ + itostring(i) + _REMOVED_STR_ + postfix;
	info->display_expressions += expr;
	display_cmds              += gdb->display_command(expr);
	print_cmds                += gdb->print_command(expr);
    }

    VoidArray dummy;
    while(dummy.size() < display_cmds.size())
	dummy += (void *)0;

    bool ok = true;
    if(gdb->display_prints_values())
    {
	ok = gdb->send_qu_array(display_cmds, dummy, display_cmds.size(),
				 new_data_displaysOQAC, info);
    }
    else
    {
	for(int i = 0; i < display_cmds.size(); i++)
	    gdb_question(display_cmds[_ARGS_]);

	ok = gdb->send_qu_array(print_cmds, dummy, print_cmds.size(),
				 new_data_displaysOQAC, info);
    }
    if(!ok)
	post_gdb_busy(last_origin);
}

__END_METHOD_CODE__


	METHOD DataDisp!new_data_displaysOQAC
		CALLS
		size : _SYSTEM_OR_USER_,
		firstNode : Graph,
		nextNode : Graph,
		selected : _SYSTEM_OR_USER_,
		get_by_name : DispGraph,
		contains_display : _SYSTEM_OR_USER_,
		post_gdb_message : _SYSTEM_OR_USER_,
		new_data_node : DataDisp,
		BoxPoint : BoxPoint,
		default_pos : DispGraph,
		moveTo : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		insert : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		refresh_addr : DataDisp,
		refresh_graph_edit : DataDisp,
		prompt : GDBAgent



		METRICS
			last_origin REFERRED 1 TIMES,
			graph_edit REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 13
			AVVARLEN 10
			CALLEDN 17
			CLASS DataDisp
			CLASSID 111
			CYCLO 8
			DOTS 1
			EQTEST 2
			EXPRORCALL 25
			GE 0
			GT 0
			IN 0
			INDR 16
			LE 0
			LOC 53
			LT 1
			METHOD new_data_displaysOQAC
			METHODID 93
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:13 AVVARLEN:10 CALLEDN:17 CLASS:DataDisp CLASSID:111 CYCLO:8 DOTS:1 EQTEST:2 EXPRORCALL:25 GE:0 GT:0 IN:0 INDR:16 LE:0 LOC:53 LT:1 METHOD:new_data_displaysOQAC METHODID:93 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:2 
		;


#ID 93-new_data_displaysOQAC

__BEGIN_METHOD_CODE__

DataDisp::new_data_displaysOQAC(const StringArray& answers,
				      const VoidArray&  ,
				      void*  data)
{
    int count = answers.size();

     
    for(GraphNode *gn = disp_graph->firstNode();
	 gn != 0; gn = disp_graph->nextNode(gn))
    {
	gn->selected() = false;
    }

    NewDisplayInfo *info = (NewDisplayInfo *)data;

     
    int depend_nr = disp_graph->get_by_name(info->depends_on);
    for(int i = 0; i < count; i++)
    {
	const string& answer = answers[_ARGS_];

	if(!contains_display(answer, gdb))
	{
	     
	    if(info->verbose)
		post_gdb_message(answer, info->prompt, last_origin);
	}
	else
	{
	     
	    DispNode *dn = new_data_node(info->display_expressions[_ARGS_],
					 info->scope, answer);
	    if(dn == 0)
		continue;

	    BoxPoint box_point = info->point;
	    if(box_point == BoxPoint())
	    {
		box_point = disp_graph->default_pos(dn, graph_edit, depend_nr);
	    }
	    dn->moveTo(box_point);
	    dn->selected() = true;

	     
	    disp_graph->insert(dn->disp_nr(), dn, depend_nr);
	}
    }

    refresh_addr();
    refresh_graph_edit();

    if(info->prompt)
	prompt();

    delete info;
}

__END_METHOD_CODE__


	METHOD DataDisp!add_refresh_data_commands
		CALLS
		size : _SYSTEM_OR_USER_,
		display_prints_values : GDBAgent,
		display_command : GDBAgent,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		deferred : DispNode,
		print_command : GDBAgent,
		name : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 10
			CLASS DataDisp
			CLASSID 111
			CYCLO 4
			DOTS 2
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 19
			LT 0
			METHOD add_refresh_data_commands
			METHODID 125
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:10 CLASS:DataDisp CLASSID:111 CYCLO:4 DOTS:2 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:19 LT:0 METHOD:add_refresh_data_commands METHODID:125 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 125-add_refresh_data_commands

__BEGIN_METHOD_CODE__

DataDisp::add_refresh_data_commands(StringArray& cmds)
{
    int initial_size = cmds.size();

    if(gdb->display_prints_values())
	cmds += gdb->display_command();
    else
    {
	MapRef ref;
	for(DispNode* dn = disp_graph->first(ref); 
	     dn != 0;
	     dn = disp_graph->next(ref))
	{
	    if(!dn->is_user_command() && !dn->deferred())
		cmds += gdb->print_command(dn->name());
	}
    }

    return cmds.size() - initial_size;
}

__END_METHOD_CODE__


	METHOD DataDisp!add_refresh_user_commands
		CALLS
		size : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		enabled : _SYSTEM_OR_USER_,
		deferred : DispNode,
		user_command : DispNode,
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 8
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 14
			LT 0
			METHOD add_refresh_user_commands
			METHODID 126
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:8 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:14 LT:0 METHOD:add_refresh_user_commands METHODID:126 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 126-add_refresh_user_commands

__BEGIN_METHOD_CODE__

DataDisp::add_refresh_user_commands(StringArray& cmds)
{
    int initial_size = cmds.size();

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->is_user_command() && dn->enabled() && !dn->deferred())
	    cmds += dn->user_command();
    }

    return cmds.size() - initial_size;
}

__END_METHOD_CODE__


	METHOD DataDisp!refresh_display_cmd

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD refresh_display_cmd
			METHODID 69
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:refresh_display_cmd METHODID:69 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 69-refresh_display_cmd

__BEGIN_METHOD_CODE__

DataDisp::refresh_display_cmd()
{
    return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD DataDisp!refresh_displaySQ
		CALLS
		set_last_origin : DataDisp,
		has_info_display_command : GDBAgent,
		info_display_command : GDBAgent,
		size : VoidArray,
		size : StringArray,
		add_refresh_data_commands : DataDisp,
		size : VoidArray,
		size : StringArray,
		add_refresh_user_commands : DataDisp,
		size : VoidArray,
		size : StringArray,
		add_refresh_addr_commands : DataDisp,
		size : VoidArray,
		size : StringArray,
		send_qu_array : GDBAgent,
		size : StringArray,
		size : StringArray,
		refresh_graph_edit : DataDisp,
		prompt : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 19
			CLASS DataDisp
			CLASSID 111
			CYCLO 9
			DOTS 12
			EQTEST 1
			EXPRORCALL 32
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 40
			LT 4
			METHOD refresh_displaySQ
			METHODID 64
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:19 CLASS:DataDisp CLASSID:111 CYCLO:9 DOTS:12 EQTEST:1 EXPRORCALL:32 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:40 LT:4 METHOD:refresh_displaySQ METHODID:64 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:0 
		;


#ID 64-refresh_displaySQ

__BEGIN_METHOD_CODE__

DataDisp::refresh_displaySQ(Widget origin, bool verbose, bool do_prompt)
{
    if(origin)
	set_last_origin(origin);

     
    StringArray cmds;
    VoidArray dummy;

    if(gdb->has_info_display_command())
	cmds += gdb->info_display_command();
    while(dummy.size() < cmds.size())
	dummy += (void *)0 ;

    add_refresh_data_commands(cmds);
    while(dummy.size() < cmds.size())
	dummy += (void *)1 ;

    add_refresh_user_commands(cmds);
    while(dummy.size() < cmds.size())
	dummy += (void *)2 ;

    add_refresh_addr_commands(cmds);
    while(dummy.size() < cmds.size())
	dummy += (void *)3 ;

    static RefreshInfo info;
    info.verbose = verbose;
    info.prompt  = do_prompt;

    bool ok = gdb->send_qu_array(cmds, dummy, cmds.size(), 
				 refresh_displayOQAC, (void *)&info);

    if(!ok || cmds.size() == 0)
    {
	 
	refresh_graph_edit();
	if(do_prompt)
	    prompt();
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!refresh_displayOQAC
		CALLS
		size : _SYSTEM_OR_USER_,
		process_info_display : DataDisp,
		process_displays : DataDisp,
		refresh_displaySQ : DataDisp,
		size : _SYSTEM_OR_USER_,
		process_user : DataDisp,
		size : _SYSTEM_OR_USER_,
		process_addr : DataDisp,
		prompt : GDBAgent



		METRICS
			force_check_aliases REFERRED 1 TIMES,
			ARRAYOP 5
			ASS 10
			AVVARLEN 19
			CALLEDN 10
			CLASS DataDisp
			CLASSID 111
			CYCLO 13
			DOTS 3
			EQTEST 0
			EXPRORCALL 18
			GE 0
			GT 3
			IN 0
			INDR 4
			LE 0
			LOC 64
			LT 1
			METHOD refresh_displayOQAC
			METHODID 96
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 27
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:10 AVVARLEN:19 CALLEDN:10 CLASS:DataDisp CLASSID:111 CYCLO:13 DOTS:3 EQTEST:0 EXPRORCALL:18 GE:0 GT:3 IN:0 INDR:4 LE:0 LOC:64 LT:1 METHOD:refresh_displayOQAC METHODID:96 MMINUS:0 OUT:0 PARNUM:3 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:27 TERNINSTR:0 USEDVARS:1 
		;


#ID 96-refresh_displayOQAC

__BEGIN_METHOD_CODE__

DataDisp::refresh_displayOQAC(const StringArray& answers,
				    const VoidArray& qu_datas,
				    void*  data)
{
    int count = answers.size();

    string data_answers;
    int data_answers_seen = 0;
    StringArray user_answers;
    StringArray addr_answers;

    RefreshInfo *info = (RefreshInfo *)data;

    for(int i = 0; i < count; i++)
    {
	switch(int(qu_datas[_ARGS_]))
	{
	case 0 :
	     
	    process_info_display(answers[_ARGS_]);
	    break;

	case 1 :
	    data_answers += answers[_ARGS_];
	    data_answers_seen++;
	    break;

	case 2 :
	    user_answers += answers[_ARGS_];
	    break;

	case 3 :
	    addr_answers += answers[_ARGS_];
	    break;

	default:
	     ;
	    break;
	}
    }

     
    if(data_answers_seen > 0)
    {
	bool disabling_occurred = false;
	process_displays(data_answers, disabling_occurred);

	 
	if(disabling_occurred)
	{
	    refresh_displaySQ(0, info->verbose, info->prompt);
	    info->prompt = false;	 
	}
    }

    if(user_answers.size() > 0)
	process_user(user_answers);

    if(addr_answers.size() > 0)
    {
	force_check_aliases = true;
	process_addr(addr_answers);
    }

    if(info->prompt)
	prompt();
}

__END_METHOD_CODE__


	METHOD DataDisp!numbers
		CALLS
		sort : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 1
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 1
			METHOD numbers
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:1 EQTEST:0 EXPRORCALL:5 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:13 LT:1 METHOD:numbers METHODID:45 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 45-numbers

__BEGIN_METHOD_CODE__

DataDisp::numbers(IntArray& a)
{
    sort(a);

    string ret;
    for(int i = 0; i < a.size(); i++)
    {
	if(i > 0)
	    ret += _REMOVED_STR_;
	ret += itostring(a[_ARGS_]);
    }

    return ret;
}

__END_METHOD_CODE__


	METHOD DataDisp!sort_and_check
		CALLS
		sort : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		post_gdb_message : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 3
			ASS 5
			AVVARLEN 0
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 1
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 18
			LT 1
			METHOD sort_and_check
			METHODID 102
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:5 AVVARLEN:0 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:1 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:18 LT:1 METHOD:sort_and_check METHODID:102 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 102-sort_and_check

__BEGIN_METHOD_CODE__

DataDisp::sort_and_check(IntArray& display_nrs)
{
    bool ok = true;
    sort(display_nrs);

    for(int i = 0; i < display_nrs.size(); i++)
    {
	DispNode *dn = disp_graph->get(display_nrs[_ARGS_]);
	if(dn == 0)
	{
	    post_gdb_message(_REMOVED_STR_ 
			     + itostring(display_nrs[_ARGS_]) + _REMOVED_STR_);
	    display_nrs[_ARGS_] = 0;
	    ok = false;
	}
    }

    return ok;
}

__END_METHOD_CODE__


	METHOD DataDisp!add_aliases
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 2
			ASS 9
			AVVARLEN 0
			CALLEDN 7
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 1
			EQTEST 2
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 0
			LOC 24
			LT 1
			METHOD add_aliases
			METHODID 101
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:9 AVVARLEN:0 CALLEDN:7 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:1 EQTEST:2 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:7 LE:0 LOC:24 LT:1 METHOD:add_aliases METHODID:101 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 101-add_aliases

__BEGIN_METHOD_CODE__

DataDisp::add_aliases(IntArray& display_nrs)
{
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->nodeptr()->hidden())
	{
	    bool have_alias = false;
	    bool need_alias = false;

	    for(int i = 0; i < display_nrs.size(); i++)
	    {
		if(display_nrs[_ARGS_] == dn->disp_nr())
		    have_alias = true;
		if(display_nrs[_ARGS_] == dn->alias_of)
		    need_alias = true;
	    }

	    if(need_alias && !have_alias)
		display_nrs += dn->disp_nr();
	}
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!disable_display_cmd
		CALLS
		add_aliases : DataDisp,
		size : _SYSTEM_OR_USER_,
		numbers : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD disable_display_cmd
			METHODID 70
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:disable_display_cmd METHODID:70 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 70-disable_display_cmd

__BEGIN_METHOD_CODE__

DataDisp::disable_display_cmd(IntArray& display_nrs)
{
    add_aliases(display_nrs);

    if(display_nrs.size() > 0)
	return _REMOVED_STR_ + numbers(display_nrs);
    else
	return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD DataDisp!disable_displaySQ
		CALLS
		sort_and_check : DataDisp,
		size : _SYSTEM_OR_USER_,
		has_disable_display_command : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		enabled : _SYSTEM_OR_USER_,
		disable : DispNode,
		refresh_graph_edit : DataDisp,
		prompt : GDBAgent



		METRICS
			last_origin REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 12
			AVVARLEN 11
			CALLEDN 11
			CLASS DataDisp
			CLASSID 111
			CYCLO 10
			DOTS 4
			EQTEST 1
			EXPRORCALL 21
			GE 0
			GT 3
			IN 0
			INDR 4
			LE 0
			LOC 45
			LT 2
			METHOD disable_displaySQ
			METHODID 65
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 4
			RETPOINT 0
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:3 ASS:12 AVVARLEN:11 CALLEDN:11 CLASS:DataDisp CLASSID:111 CYCLO:10 DOTS:4 EQTEST:1 EXPRORCALL:21 GE:0 GT:3 IN:0 INDR:4 LE:0 LOC:45 LT:2 METHOD:disable_displaySQ METHODID:65 MMINUS:0 OUT:0 PARNUM:3 PPLUS:4 RETPOINT:0 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:1 
		;


#ID 65-disable_displaySQ

__BEGIN_METHOD_CODE__

DataDisp::disable_displaySQ(IntArray& display_nrs, bool verbose, 
				 bool do_prompt)
{
    bool ok = sort_and_check(display_nrs);
    if(!ok)
	do_prompt = false;

    int disabled_data_displays = 0;
    int i;
    string cmd = _REMOVED_STR_;
    for(i = 0; i < display_nrs.size(); i++)
    {
	if(gdb->has_disable_display_command() && display_nrs[_ARGS_] > 0)
	{
	    cmd += _REMOVED_STR_ + itostring(display_nrs[_ARGS_]);
	    disabled_data_displays++;
	}
    }

    if(disabled_data_displays > 0)
    {
	static RefreshInfo info;
	info.verbose = verbose;
	info.prompt  = do_prompt;

	gdb_command(cmd, last_origin, disable_displayOQC, (void *)&info);
    }

    int disabled_user_displays = 0;
    for(i = 0; i < display_nrs.size(); i++)
    {
	DispNode *dn = disp_graph->get(display_nrs[_ARGS_]);
	if(dn != 0 && dn->enabled())
	{
	    dn->disable();
	    disabled_user_displays++;
	}
    }

    if(disabled_data_displays == 0)
    {
	if(disabled_user_displays > 0)
	    refresh_graph_edit();
	if(do_prompt)
	    prompt();
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!disable_displayOQC
		CALLS
		post_gdb_message : _SYSTEM_OR_USER_,
		prompt : GDBAgent,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 13
			LT 0
			METHOD disable_displayOQC
			METHODID 97
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:13 LT:0 METHOD:disable_displayOQC METHODID:97 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 97-disable_displayOQC

__BEGIN_METHOD_CODE__

DataDisp::disable_displayOQC(const string& answer, void *data)
{
    if(answer == NO_GDB_ANSWER)
	return;			 

    RefreshInfo *info = (RefreshInfo *)data;

    if(info->verbose)
	post_gdb_message(answer, info->prompt);
    if(info->prompt)
	prompt();

    refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!enable_display_cmd
		CALLS
		add_aliases : DataDisp,
		size : _SYSTEM_OR_USER_,
		numbers : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD enable_display_cmd
			METHODID 71
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:enable_display_cmd METHODID:71 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 71-enable_display_cmd

__BEGIN_METHOD_CODE__

DataDisp::enable_display_cmd(IntArray& display_nrs)
{
    add_aliases(display_nrs);

    if(display_nrs.size() > 0)
	return _REMOVED_STR_ + numbers(display_nrs);
    else
	return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD DataDisp!enable_displaySQ
		CALLS
		sort_and_check : DataDisp,
		size : _SYSTEM_OR_USER_,
		has_enable_display_command : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		disabled : DispNode,
		deferred : DispNode,
		enable : DispNode,
		value : _SYSTEM_OR_USER_,
		expandAll : DispValue,
		refresh_graph_edit : DataDisp,
		prompt : GDBAgent



		METRICS
			last_origin REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 12
			AVVARLEN 11
			CALLEDN 15
			CLASS DataDisp
			CLASSID 111
			CYCLO 10
			DOTS 4
			EQTEST 1
			EXPRORCALL 25
			GE 0
			GT 3
			IN 0
			INDR 8
			LE 0
			LOC 47
			LT 2
			METHOD enable_displaySQ
			METHODID 66
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 4
			RETPOINT 0
			SCOPEOP 0
			STMNT 22
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:3 ASS:12 AVVARLEN:11 CALLEDN:15 CLASS:DataDisp CLASSID:111 CYCLO:10 DOTS:4 EQTEST:1 EXPRORCALL:25 GE:0 GT:3 IN:0 INDR:8 LE:0 LOC:47 LT:2 METHOD:enable_displaySQ METHODID:66 MMINUS:0 OUT:0 PARNUM:3 PPLUS:4 RETPOINT:0 SCOPEOP:0 STMNT:22 TERNINSTR:0 USEDVARS:1 
		;


#ID 66-enable_displaySQ

__BEGIN_METHOD_CODE__

DataDisp::enable_displaySQ(IntArray& display_nrs, bool verbose, 
 				bool do_prompt)
{
    bool ok = sort_and_check(display_nrs);
    if(!ok)
	do_prompt = false;

    int enabled_data_displays = 0;
    int i;
    string cmd = _REMOVED_STR_;
    for(i = 0; i < display_nrs.size(); i++)
    {
	if(gdb->has_enable_display_command() && display_nrs[_ARGS_] > 0)
	{
	    cmd += _REMOVED_STR_ + itostring(display_nrs[_ARGS_]);
	    enabled_data_displays++;
	}
    }

    if(enabled_data_displays > 0)
    {
	static RefreshInfo info;
	info.verbose = verbose;
	info.prompt  = do_prompt;

	gdb_command(cmd, last_origin, enable_displayOQC, (void *)&info);
    }

    int enabled_user_displays = 0;
    for(i = 0; i < display_nrs.size(); i++)
    {
	DispNode *dn = disp_graph->get(display_nrs[_ARGS_]);
	if(dn != 0 && dn->is_user_command() && 
	    dn->disabled() && !dn->deferred())
	{
	    dn->enable();
	    dn->value()->expandAll();
	    enabled_user_displays++;
	}
    }

    if(enabled_data_displays == 0)
    {
	if(enabled_user_displays > 0)
	    refresh_graph_edit();
	if(do_prompt)
	    prompt();
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!enable_displayOQC
		CALLS
		post_gdb_message : _SYSTEM_OR_USER_,
		refresh_displaySQ : DataDisp



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 11
			LT 0
			METHOD enable_displayOQC
			METHODID 98
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:11 LT:0 METHOD:enable_displayOQC METHODID:98 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 98-enable_displayOQC

__BEGIN_METHOD_CODE__

DataDisp::enable_displayOQC(const string& answer, void *data)
{
    if(answer == NO_GDB_ANSWER)
	return;			 

    RefreshInfo *info = (RefreshInfo *)data;

    if(info->verbose)
	post_gdb_message(answer, false);

    refresh_displaySQ(0, info->verbose, info->prompt);
}

__END_METHOD_CODE__


	METHOD DataDisp!delete_display_cmd
		CALLS
		add_aliases : DataDisp,
		size : _SYSTEM_OR_USER_,
		delete_display_cmd : DataDisp,
		numbers : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD delete_display_cmd
			METHODID 72
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:delete_display_cmd METHODID:72 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 72-delete_display_cmd

__BEGIN_METHOD_CODE__

DataDisp::delete_display_cmd(IntArray& display_nrs)
{
    if(app_data.delete_alias_displays)
	add_aliases(display_nrs);

    if(display_nrs.size() > 0)
	return delete_display_cmd(numbers(display_nrs));
    else
	return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD DataDisp!delete_display_cmd

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD delete_display_cmd
			METHODID 73
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:delete_display_cmd METHODID:73 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 73-delete_display_cmd

__BEGIN_METHOD_CODE__

DataDisp::delete_display_cmd(const string& name)
{
    return _REMOVED_STR_ + name;
}

__END_METHOD_CODE__


	METHOD DataDisp!all_display_numbers
		CALLS
		get_all_display_numbers : DataDisp,
		size : _SYSTEM_OR_USER_,
		size : IntArray,
		sort : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 2
			ASS 3
			AVVARLEN 0
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 4
			DOTS 3
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 1
			METHOD all_display_numbers
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:0 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:4 DOTS:3 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:1 METHOD:all_display_numbers METHODID:46 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 46-all_display_numbers

__BEGIN_METHOD_CODE__

DataDisp::all_display_numbers(IntArray& display_nrs)
{
    IntArray all_display_nrs;
    get_all_display_numbers(all_display_nrs);

    if(display_nrs.size() != all_display_nrs.size())
	return false;

    sort(all_display_nrs);
    for(int i = 0; i < display_nrs.size(); i++)
	if(display_nrs[_ARGS_] != all_display_nrs[_ARGS_])
		return false;

    return true;
}

__END_METHOD_CODE__


	METHOD DataDisp!delete_displaySQ
		CALLS
		sort_and_check : DataDisp,
		type : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		all_display_numbers : DataDisp,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		wants_display_comma : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		has_display_command : GDBAgent,
		c : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		deletion_done : DataDisp



		METRICS
			last_origin REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 13
			AVVARLEN 11
			CALLEDN 12
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 7
			EQTEST 1
			EXPRORCALL 19
			GE 1
			GT 4
			IN 0
			INDR 3
			LE 0
			LOC 46
			LT 1
			METHOD delete_displaySQ
			METHODID 67
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:13 AVVARLEN:11 CALLEDN:12 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:7 EQTEST:1 EXPRORCALL:19 GE:1 GT:4 IN:0 INDR:3 LE:0 LOC:46 LT:1 METHOD:delete_displaySQ METHODID:67 MMINUS:0 OUT:0 PARNUM:3 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:1 
		;


#ID 67-delete_displaySQ

__BEGIN_METHOD_CODE__

DataDisp::delete_displaySQ(IntArray& display_nrs, bool verbose, 
				bool do_prompt)
{
    bool ok = sort_and_check(display_nrs);
    if(!ok)
	do_prompt = false;

    string cmd = _REMOVED_STR_;

    int deleted_data_displays = 0;

    if(gdb->type() == GDB && verbose && 
	display_nrs.size() >= 2 && all_display_numbers(display_nrs))
    {
	 
	 
	deleted_data_displays = display_nrs.size();
    }
    else
    {
	 
	for(int i = 0; i < display_nrs.size(); i++)
	{
	    if(display_nrs[_ARGS_] > 0)
	    {
		if(deleted_data_displays++ > 0 && gdb->wants_display_comma())
		    cmd += _REMOVED_STR_;
		cmd += _REMOVED_STR_ + itostring(display_nrs[_ARGS_]);
	    }
	}
    }

    if(deleted_data_displays > 0 && gdb->has_display_command())
    {
	static RefreshInfo info;
	info.verbose     = verbose;
	info.prompt      = do_prompt;
	info.display_nrs = display_nrs;

	Command c(cmd, last_origin, delete_displayOQC, (void *)&info);
	c.verbose = verbose;
	gdb_command(c);
    }
    else
    {
	deletion_done(display_nrs, do_prompt);
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!delete_displayOQC
		CALLS
		type : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		gdb_question : _SYSTEM_OR_USER_,
		info_display_command : GDBAgent,
		process_info_display : DataDisp,
		has_redisplaying_undisplay : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		process_displays : DataDisp,
		deletion_done : DataDisp



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 9
			CLASS DataDisp
			CLASSID 111
			CYCLO 6
			DOTS 2
			EQTEST 2
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 38
			LT 0
			METHOD delete_displayOQC
			METHODID 99
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:9 CLASS:DataDisp CLASSID:111 CYCLO:6 DOTS:2 EQTEST:2 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:38 LT:0 METHOD:delete_displayOQC METHODID:99 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 99-delete_displayOQC

__BEGIN_METHOD_CODE__

DataDisp::delete_displayOQC(const string& answer, void *data)
{
    if(answer == NO_GDB_ANSWER)
	return;			 

    RefreshInfo *info = (RefreshInfo *)data;

    if(gdb->type() == GDB && answer.contains(_REMOVED_STR_))
    {
	 
	 
	 
	 

	string info_display = gdb_question(gdb->info_display_command());

	if(info_display != NO_GDB_ANSWER)
	{
	    process_info_display(info_display, false);

	     
	    static IntArray empty;
	    info->display_nrs = empty;
	}
    }

    if(gdb->has_redisplaying_undisplay())
    {
	 
	if(answer != _REMOVED_STR_ && !answer.contains(_REMOVED_STR_))
	{
	    bool disabling_occurred;
	    string ans = answer;
	    process_displays(ans, disabling_occurred);
	}
    }

    deletion_done(info->display_nrs, info->prompt);
}

__END_METHOD_CODE__


	METHOD DataDisp!deletion_done
		CALLS
		size : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		del : _SYSTEM_OR_USER_,
		firstVisibleNode : Graph,
		close_data_window : DataDisp,
		size : _SYSTEM_OR_USER_,
		refresh_graph_edit : DataDisp,
		refresh_addr : DataDisp,
		prompt : GDBAgent,
		update_infos : _SYSTEM_OR_USER_



		METRICS
			force_check_aliases REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 4
			AVVARLEN 19
			CALLEDN 10
			CLASS DataDisp
			CLASSID 111
			CYCLO 6
			DOTS 2
			EQTEST 1
			EXPRORCALL 15
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 29
			LT 1
			METHOD deletion_done
			METHODID 100
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:4 AVVARLEN:19 CALLEDN:10 CLASS:DataDisp CLASSID:111 CYCLO:6 DOTS:2 EQTEST:1 EXPRORCALL:15 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:29 LT:1 METHOD:deletion_done METHODID:100 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 100-deletion_done

__BEGIN_METHOD_CODE__

DataDisp::deletion_done(IntArray& display_nrs, bool do_prompt)
{
    for(int i = 0; i < display_nrs.size(); i++)
    {
	DispNode *dn = disp_graph->get(display_nrs[_ARGS_]);
	if(dn != 0)
	    disp_graph->del(display_nrs[_ARGS_]);
    }

    if(disp_graph->firstVisibleNode() == 0)
    {
	 
	close_data_window();
    }

    if(display_nrs.size() > 0)
    {
	 
	refresh_graph_edit();

	 
	force_check_aliases = true;
	refresh_addr();
    }

    if(do_prompt)
	prompt();

    update_infos();
}

__END_METHOD_CODE__


	METHOD DataDisp!process_info_display
		CALLS
		read_first_disp_info : _SYSTEM_OR_USER_,
		get_positive_nr : _SYSTEM_OR_USER_,
		max : DynArray,
		contains : _SYSTEM_OR_USER_,
		string : string,
		get_info_disp_str : _SYSTEM_OR_USER_,
		insert : StringMap,
		read_next_disp_info : _SYSTEM_OR_USER_,
		max : DynArray,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		deferred : DispNode,
		get : StringMap,
		disp_nr : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		disp_is_disabled : _SYSTEM_OR_USER_,
		enabled : _SYSTEM_OR_USER_,
		disable : DispNode,
		disabled : DispNode,
		del : StringMap,
		disp_nr : _SYSTEM_OR_USER_,
		sort : _SYSTEM_OR_USER_,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		title : GDBAgent,
		set_status_mstring : _SYSTEM_OR_USER_,
		size : IntArray,
		get : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		pos : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		firstTo : GraphNode,
		nodeptr : DispNode,
		nextTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		get_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		name : _SYSTEM_OR_USER_,
		new_displaySQ : DataDisp,
		name : _SYSTEM_OR_USER_,
		scope : DispNode,
		size : IntArray,
		del : _SYSTEM_OR_USER_,
		size : IntArray,
		refresh_addr : DataDisp,
		refresh_graph_edit : DataDisp,
		refresh_display_list : DataDisp



		METRICS
			next_gdb_display_number REFERRED 2 TIMES,
			force_check_aliases REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 49
			AVVARLEN 21
			CALLEDN 64
			CLASS DataDisp
			CLASSID 111
			CYCLO 25
			DOTS 12
			EQTEST 3
			EXPRORCALL 89
			GE 5
			GT 7
			IN 0
			INDR 26
			LE 0
			LOC 165
			LT 4
			METHOD process_info_display
			METHODID 80
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 60
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:3 ASS:49 AVVARLEN:21 CALLEDN:64 CLASS:DataDisp CLASSID:111 CYCLO:25 DOTS:12 EQTEST:3 EXPRORCALL:89 GE:5 GT:7 IN:0 INDR:26 LE:0 LOC:165 LT:4 METHOD:process_info_display METHODID:80 MMINUS:0 OUT:0 PARNUM:2 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:60 TERNINSTR:0 USEDVARS:2 
		;


#ID 80-process_info_display

__BEGIN_METHOD_CODE__

DataDisp::process_info_display(string& info_display_answer,
				    bool defer_deleted)
{
    int disp_nr;
    StringMap info_disp_string_map;
    string *strptr;
    int max_disp_nr = 0;

    string next_disp_info = 
	read_first_disp_info(info_display_answer, gdb);
    while(next_disp_info != _REMOVED_STR_)
    {
	disp_nr = get_positive_nr(next_disp_info);
	if(disp_nr >= 0)
	{
	    max_disp_nr = max(max_disp_nr, disp_nr);

	    if(disp_graph->contains(disp_nr)) 
	    {
		 
		strptr = new string(get_info_disp_str(next_disp_info, gdb));
		info_disp_string_map.insert(disp_nr, strptr);
	    }
	}
	next_disp_info = 
	    read_next_disp_info(info_display_answer, gdb);
    }
    next_gdb_display_number = max(next_gdb_display_number, max_disp_nr + 1);

     

     
    IntArray deleted_displays;
    bool changed = false;
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref);
	 dn != 0; 
	 dn = disp_graph->next(ref))
    {
	if(!dn->is_user_command() && !dn->deferred())
	{
	    string *disp_info = info_disp_string_map.get(dn->disp_nr());
	    
	    if(disp_info == 0)
	    {
		 
		 
		 
		 
		 
		 
		deleted_displays += dn->disp_nr();
	    }
	    else
	    {
		 
		if(disp_is_disabled(*disp_info, gdb))
		{
		    if(dn->enabled())
		    {
			dn->disable();
			changed = true;
		    }
		}
		else
		{
		    if(dn->disabled())
		    {
			changed = true;
		    }
		}

		delete disp_info;
		info_disp_string_map.del(dn->disp_nr());
	    }
	}
    }

     ;


     
    sort(deleted_displays);

     
    if(defer_deleted && deleted_displays.size() >= 1)
    {
	MString msg = rm(_REMOVED_STR_);
	if(deleted_displays.size() >= 2)
	    msg += rm(_REMOVED_STR_);
	msg += rm(_REMOVED_STR_);

	for(int i = 0; i < deleted_displays.size(); i++)
	{
	    if(i > 0)
	    {
		if(deleted_displays.size() == 2)
		    msg += rm(_REMOVED_STR_);
		else if(i == deleted_displays.size() - 1)
		    msg += rm(_REMOVED_STR_);
		else
		    msg += rm(_REMOVED_STR_);
	    }
	    msg += rm(itostring(deleted_displays[_ARGS_]));
	}

	msg += rm(_REMOVED_STR_);
	if(deleted_displays.size() >= 2)
	    msg += rm(_REMOVED_STR_);
	else
	    msg += rm(_REMOVED_STR_);
	msg += rm(_REMOVED_STR_ + gdb->title());

	set_status_mstring(msg);
    }

    if(defer_deleted)
    {
	 
	for(int i = 0; i < deleted_displays.size(); i++)
	{
	    DispNode *dn = disp_graph->get(deleted_displays[_ARGS_]);

	     
	    BoxPoint pos = dn->nodeptr()->pos();

	    string depends_on = _REMOVED_STR_;
	    for(GraphEdge *edge = dn->nodeptr()->firstTo();
		 edge != 0; edge = dn->nodeptr()->nextTo(edge))
	    {
		BoxGraphNode *ancestor = dynamic_cast< BoxGraphNode  *>(  edge->from() ) ;
		if(ancestor != 0)
		{
		    int depnr = disp_graph->get_nr(ancestor);
		    DispNode *depnode = disp_graph->get(depnr);
		    if(depnode != 0)
		    {
			depends_on = depnode->name();
			break;
		    }
		}
	    }

	     
	    new_displaySQ(dn->name(), dn->scope(), &pos,
			  depends_on, DeferIfNeeded, 0, false);
	}
    }

     
    for(int i = 0; i < deleted_displays.size(); i++)
    {
	disp_graph->del(deleted_displays[_ARGS_]);
	changed = true;
    }

    if(deleted_displays.size() >= 1)
    {
	force_check_aliases = true;
	refresh_addr();
    }

    if(changed)
	refresh_graph_edit();

    refresh_display_list();
}

__END_METHOD_CODE__


	METHOD DataDisp!process_displays
		CALLS
		length : _SYSTEM_OR_USER_,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		active : DispNode,
		s : _SYSTEM_OR_USER_,
		read_next_display : _SYSTEM_OR_USER_,
		has_numbered_displays : GDBAgent,
		get_positive_nr : _SYSTEM_OR_USER_,
		read_disp_name : _SYSTEM_OR_USER_,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		name : DispNode,
		disp_nr : DispNode,
		is_disabling : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		get_disp_value_str : _SYSTEM_OR_USER_,
		post_gdb_message : _SYSTEM_OR_USER_,
		make_active : DispNode,
		disable : DispNode,
		delete_all_contents : StringMap,
		is_invalid : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		string : string,
		get_disp_value_str : _SYSTEM_OR_USER_,
		insert : StringMap,
		length : _SYSTEM_OR_USER_,
		read_next_display : _SYSTEM_OR_USER_,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		deferred : DispNode,
		contains : StringMap,
		make_active : _SYSTEM_OR_USER_,
		make_inactive : _SYSTEM_OR_USER_,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		deferred : DispNode,
		contains : StringMap,
		get : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		update : DispNode,
		matches : _SYSTEM_OR_USER_,
		after : string,
		del : StringMap,
		refresh_addr : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			force_check_aliases REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 50
			AVVARLEN 19
			CALLEDN 51
			CLASS DataDisp
			CLASSID 111
			CYCLO 26
			DOTS 11
			EQTEST 2
			EXPRORCALL 77
			GE 2
			GT 2
			IN 0
			INDR 31
			LE 0
			LOC 187
			LT 0
			METHOD process_displays
			METHODID 81
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 64
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:50 AVVARLEN:19 CALLEDN:51 CLASS:DataDisp CLASSID:111 CYCLO:26 DOTS:11 EQTEST:2 EXPRORCALL:77 GE:2 GT:2 IN:0 INDR:31 LE:0 LOC:187 LT:0 METHOD:process_displays METHODID:81 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:64 TERNINSTR:0 USEDVARS:1 
		;


#ID 81-process_displays

__BEGIN_METHOD_CODE__

DataDisp::process_displays(string& displays,
				  bool& disabling_occurred)
{
    string not_my_displays;
    disabling_occurred = false;

    if(displays.length() == 0)
    {
	bool have_displays = false;
	MapRef ref;
	for(int k = disp_graph->first_nr(ref); 
	     k != 0;
	     k = disp_graph->next_nr(ref))
	{
	    DispNode* dn = disp_graph->get(k);
	    if(!dn->is_user_command() && dn->active())
	    {
		have_displays = true;
		break;
	    }
	}

	if(!have_displays)
	    return _REMOVED_STR_;		 
    }

    StatusShower s(_REMOVED_STR_);

     
     
    int disp_nr = 0;
    StringMap disp_string_map;





    string next_display = read_next_display(displays, gdb);
    while(next_display != _REMOVED_STR_) 
    {



	if(gdb->has_numbered_displays())
	{
	    disp_nr = get_positive_nr(next_display);
	}
	else
	{
	    disp_nr = 0;
	    string disp_name = next_display;
	    disp_name = read_disp_name(disp_name, gdb);
	    if(disp_name != _REMOVED_STR_)
	    {
		MapRef ref;
		for(DispNode* dn = disp_graph->first(ref); 
		     dn != 0;
		     dn = disp_graph->next(ref))
		{
		    if(dn->name() == disp_name)
		    {
			disp_nr = dn->disp_nr();
			break;
		    }
		}
	    }
	}





	if(is_disabling(next_display, gdb))
	{
	     
	    disabling_occurred = true;
	    DispNode *dn = disp_graph->get(disp_nr);
	    if(disp_nr >= 0 && dn != 0)
	    {
		string error_msg = get_disp_value_str(next_display, gdb);
		post_gdb_message(error_msg);
		dn->make_active();
		dn->disable();
	    }
	    else
	    {
		not_my_displays = next_display;  
	    }

	     
	    disp_string_map.delete_all_contents();

	    return not_my_displays;
	}

	if(is_invalid(next_display))
	{
	     
	}
	else if(disp_nr >= 0 && disp_graph->contains(disp_nr))
	{
	    string *strptr = new string(get_disp_value_str(next_display, gdb));
	    disp_string_map.insert(disp_nr, strptr);
	    s.total += strptr->length();
	}
	else 
	{
	    not_my_displays += next_display + '\n';
	}

	next_display = read_next_display(displays, gdb);
    }

     
    bool changed   = false;
    bool activated = false;

     
     
    MapRef ref;
    int k;
    for(k = disp_graph->first_nr(ref); k != 0; k = disp_graph->next_nr(ref))
    {
	DispNode* dn = disp_graph->get(k);
	if(dn->is_user_command() || dn->deferred())
	    continue;

	if(disp_string_map.contains(k))
	{
	    if(disp_graph->make_active(k))
	    {
		 
		changed = activated = true;
	    }
	}
	else
	{
	     
	    if(disp_graph->make_inactive(k))
	    {
		 
		changed = true;
	    }
	}
    }

     
    for(k = disp_graph->first_nr(ref); k != 0; k = disp_graph->next_nr(ref))
    {
	DispNode* dn = disp_graph->get(k);
	if(dn->is_user_command() || dn->deferred())
	    continue;

	if(!disp_string_map.contains(k))
	    continue;

	 
	string *strptr = disp_string_map.get(k);
	s.current = strptr->length();

	if(dn->update(*strptr))
	{
	     
	    changed = true;
	}
	if(*strptr != _REMOVED_STR_ && !(strptr->matches(rxwhite)))
	{
	     
	     
	    not_my_displays += strptr->after(rxwhite);
	}

	s.base += s.current;

	delete strptr;
	disp_string_map.del(k);
    }

     ;
    if(activated)
    {
	force_check_aliases = true;
	refresh_addr();
    }
    if(changed) 
	refresh_graph_edit();

    return not_my_displays;
}

__END_METHOD_CODE__


	METHOD DataDisp!process_user
		CALLS
		size : _SYSTEM_OR_USER_,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		deferred : DispNode,
		s : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		first_nr : DispGraph,
		size : _SYSTEM_OR_USER_,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		enabled : DispNode,
		deferred : DispNode,
		length : _SYSTEM_OR_USER_,
		update : DispNode,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 2
			ASS 18
			AVVARLEN 0
			CALLEDN 19
			CLASS DataDisp
			CLASSID 111
			CYCLO 10
			DOTS 9
			EQTEST 1
			EXPRORCALL 28
			GE 0
			GT 0
			IN 0
			INDR 12
			LE 0
			LOC 52
			LT 2
			METHOD process_user
			METHODID 82
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 24
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:18 AVVARLEN:0 CALLEDN:19 CLASS:DataDisp CLASSID:111 CYCLO:10 DOTS:9 EQTEST:1 EXPRORCALL:28 GE:0 GT:0 IN:0 INDR:12 LE:0 LOC:52 LT:2 METHOD:process_user METHODID:82 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:24 TERNINSTR:0 USEDVARS:0 
		;


#ID 82-process_user

__BEGIN_METHOD_CODE__

DataDisp::process_user(StringArray& answers)
{
    if(answers.size() == 0)
    {
	bool have_displays = false;
	MapRef ref;
	for(int k = disp_graph->first_nr(ref); 
	     k != 0;
	     k = disp_graph->next_nr(ref))
	{
	    DispNode* dn = disp_graph->get(k);
	    if(dn->is_user_command() && !dn->deferred())
	    {
		have_displays = true;
		break;
	    }
	}

	if(!have_displays)
	    return;		 
    }

    StatusShower s(_REMOVED_STR_);

    int i;
    for(i = 0; i < answers.size(); i++)
	s.total += answers[_ARGS_].length();

    i = 0;
    bool changed = false;
    MapRef ref;
    for(int k = disp_graph->first_nr(ref); 
	     k != 0 && i < answers.size();
	     k = disp_graph->next_nr(ref))
    {
	DispNode* dn = disp_graph->get(k);

	if(dn->is_user_command() && dn->enabled() && !dn->deferred())
	{
	    string answer = answers[_ARGS_];

	    s.current = answer.length();

	    if(dn->update(answer))
		changed = true;

	    s.base += s.current;
	}
    }

    if(changed) 
	refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!need_scope
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		deferred : DispNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 12
			LT 0
			METHOD need_scope
			METHODID 85
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:12 LT:0 METHOD:need_scope METHODID:85 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 85-need_scope

__BEGIN_METHOD_CODE__

DataDisp::need_scope()
{
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->deferred())
	    return true;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DataDisp!process_scope
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		deferred : DispNode,
		scope : DispNode,
		disp_nr : _SYSTEM_OR_USER_,
		size : IntArray,
		sort : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		set_status_mstring : _SYSTEM_OR_USER_,
		size : IntArray,
		get : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		pos : _SYSTEM_OR_USER_,
		c : _SYSTEM_OR_USER_,
		new_display_cmd : DataDisp,
		name : _SYSTEM_OR_USER_,
		depends_on : DispNode,
		gdb_command : _SYSTEM_OR_USER_,
		size : IntArray,
		del : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 3
			ASS 19
			AVVARLEN 0
			CALLEDN 31
			CLASS DataDisp
			CLASSID 111
			CYCLO 11
			DOTS 9
			EQTEST 3
			EXPRORCALL 41
			GE 1
			GT 3
			IN 0
			INDR 11
			LE 0
			LOC 55
			LT 3
			METHOD process_scope
			METHODID 84
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 28
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:19 AVVARLEN:0 CALLEDN:31 CLASS:DataDisp CLASSID:111 CYCLO:11 DOTS:9 EQTEST:3 EXPRORCALL:41 GE:1 GT:3 IN:0 INDR:11 LE:0 LOC:55 LT:3 METHOD:process_scope METHODID:84 MMINUS:0 OUT:0 PARNUM:1 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:28 TERNINSTR:0 USEDVARS:0 
		;


#ID 84-process_scope

__BEGIN_METHOD_CODE__

DataDisp::process_scope(const string& scope)
{
     
    IntArray deferred_displays;
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->deferred() && dn->scope() == scope)
	    deferred_displays += dn->disp_nr();
    }

    if(deferred_displays.size() > 0)
    {
	 
	sort(deferred_displays, absolute_le);

	MString msg = rm(_REMOVED_STR_);
	if(deferred_displays.size() >= 2)
	    msg += rm(_REMOVED_STR_);
	msg += rm(_REMOVED_STR_);

	int i;
	for(i = 0; i < deferred_displays.size(); i++)
	{
	    if(i > 0)
	    {
		if(deferred_displays.size() == 2)
		    msg += rm(_REMOVED_STR_);
		else if(i == deferred_displays.size() - 1)
		    msg += rm(_REMOVED_STR_);
		else
		    msg += rm(_REMOVED_STR_);
	    }
	    msg += rm(itostring(deferred_displays[_ARGS_]));
	}
	set_status_mstring(msg);

	for(i = 0; i < deferred_displays.size(); i++)
	{
	    DispNode *dn = disp_graph->get(deferred_displays[_ARGS_]);

	    BoxPoint pos = dn->nodeptr()->pos();
	    Command c(new_display_cmd(dn->name(), &pos, dn->depends_on()));
	    c.verbose = false;
	    c.prompt  = false;
	    gdb_command(c);
	}

	for(i = 0; i < deferred_displays.size(); i++)
	{
	    disp_graph->del(deferred_displays[_ARGS_]);
	}
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!refresh_display_list
		CALLS
		count_all : DispGraph,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : DispNode,
		deferred : DispNode,
		active : DispNode,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		enabled : DispNode,
		name : DispNode,
		scope : DispNode,
		addr : _SYSTEM_OR_USER_,
		max_width : _SYSTEM_OR_USER_,
		max_width : _SYSTEM_OR_USER_,
		max_width : _SYSTEM_OR_USER_,
		max_width : _SYSTEM_OR_USER_,
		max_width : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		fmt : _SYSTEM_OR_USER_,
		selected : DispNode,
		selected : DispNode,
		sort : _SYSTEM_OR_USER_,
		setLabelList : _SYSTEM_OR_USER_,
		selected_node : DataDisp,
		disabled : DispNode,
		value : DispNode,
		selected_value : DispNode,
		count : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		full_name : else,
		tt : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		type : else,
		collapsed : else,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		set_status_mstring : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		selected : DispNode,
		disp_nr : DispNode,
		sort : _SYSTEM_OR_USER_,
		size : IntArray,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		size : IntArray,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		size : IntArray,
		set_status_mstring : _SYSTEM_OR_USER_



		METRICS
			detect_aliases REFERRED 3 TIMES,
			display_list_w REFERRED 2 TIMES,
			ARRAYOP 27
			ASS 85
			AVVARLEN 14
			CALLEDN 80
			CLASS DataDisp
			CLASSID 111
			CYCLO 29
			DOTS 5
			EQTEST 5
			EXPRORCALL 108
			GE 0
			GT 6
			IN 0
			INDR 30
			LE 0
			LOC 217
			LT 1
			METHOD refresh_display_list
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 4
			RETPOINT 0
			SCOPEOP 0
			STMNT 101
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:27 ASS:85 AVVARLEN:14 CALLEDN:80 CLASS:DataDisp CLASSID:111 CYCLO:29 DOTS:5 EQTEST:5 EXPRORCALL:108 GE:0 GT:6 IN:0 INDR:30 LE:0 LOC:217 LT:1 METHOD:refresh_display_list METHODID:36 MMINUS:0 OUT:0 PARNUM:1 PPLUS:4 RETPOINT:0 SCOPEOP:0 STMNT:101 TERNINSTR:0 USEDVARS:2 
		;


#ID 36-refresh_display_list

__BEGIN_METHOD_CODE__

DataDisp::refresh_display_list(bool silent)
{
    if(display_list_w == 0)
	return;

    int number_of_displays = disp_graph->count_all();

    StringArray nums;
    StringArray states;
    StringArray exprs;
    StringArray scopes;
    StringArray addrs;

    if(number_of_displays > 0)
    {
	 
	nums   += _REMOVED_STR_;
	states += _REMOVED_STR_;
	exprs  += _REMOVED_STR_;
	scopes += _REMOVED_STR_;
	addrs  += _REMOVED_STR_;
    }
    else
    {
	nums   += _REMOVED_STR_;
	states += _REMOVED_STR_;
	exprs  += _REMOVED_STR_;
	scopes += _REMOVED_STR_;
	addrs  += _REMOVED_STR_;
    }

    MapRef ref;
    int k;
    for(k = disp_graph->first_nr(ref); k != 0; k = disp_graph->next_nr(ref))
    {
	DispNode* dn = disp_graph->get(k);

	nums += itostring(dn->disp_nr()) + _REMOVED_STR_;

	if(dn->deferred())
	    states += _REMOVED_STR_;
	else if(!dn->active())
	    states += _REMOVED_STR_;
	else if(dn->nodeptr()->hidden())
	    states += _REMOVED_STR_ + itostring(dn->alias_of);
	else if(dn->enabled())
	    states += _REMOVED_STR_;
	else
	    states += _REMOVED_STR_;
	
	exprs += dn->name();
	scopes += dn->scope();
	addrs += dn->addr();
    }

    int nums_width   = max_width(nums);
    int exprs_width  = max_width(exprs)  + 1;
    int states_width = max_width(states) + 1;
    int scopes_width = max_width(scopes) + 1;
    int addrs_width  = max_width(addrs);

    string *label_list = new string[_ARGS_];
    bool *selected     = new bool[_ARGS_];

     
    int display_count = 0;
    string line;
    if(number_of_displays > 0)
    {
	line = fmt(nums[_ARGS_], nums_width) 
	    + _REMOVED_STR_ + fmt(exprs[_ARGS_], exprs_width)
	    + _REMOVED_STR_ + fmt(states[_ARGS_], states_width)
	    + _REMOVED_STR_ + fmt(scopes[_ARGS_], scopes_width);
	if(detect_aliases)
	    line += _REMOVED_STR_ + fmt(addrs[_ARGS_], addrs_width);
    }
    else
    {
	line = _REMOVED_STR_;
    }
    label_list[_ARGS_] = line;
    selected[_ARGS_] = false;
    display_count++;

    int selected_displays = 0;	 
    int index_selected    = -1;	 

     
    for(k = disp_graph->first_nr(ref); k != 0; k = disp_graph->next_nr(ref))
    {
	DispNode* dn = disp_graph->get(k);
	line = fmt(nums[_ARGS_], nums_width) 
	    + _REMOVED_STR_ + fmt(exprs[_ARGS_], exprs_width)
	    + _REMOVED_STR_ + fmt(states[_ARGS_], states_width)
	    + _REMOVED_STR_ + fmt(scopes[_ARGS_], scopes_width);
	if(detect_aliases)
	    line += _REMOVED_STR_ + fmt(addrs[_ARGS_], addrs_width);

	label_list[_ARGS_] = line;
	selected[_ARGS_]   = dn->selected();

	if(dn->selected())
	{ 
	    selected_displays++;
	    index_selected = display_count;
	}

	display_count++;
    }

    sort(label_list + 1, selected + 1, display_count - 1);

    setLabelList(display_list_w, label_list, selected, display_count, 
		 number_of_displays > 0, false);

    if(!silent)
    {
	 
	MString msg;

	if(selected_displays == 1)
	{
	     
	    DispNode *dn = selected_node();
	    DispValue *dv = 0;
	    if(dn != 0)
	    {
		if(dn->disabled())
		    dv = dn->value();
		else
		    dv = dn->selected_value();
	    }

	    if(dv != 0)
	    {
		DataDispCount count(disp_graph);

		 
		msg = rm(_REMOVED_STR_ + nums[_ARGS_] + _REMOVED_STR_);

		string title = dv->full_name();
		 
		msg += tt(title);
		msg += rm(_REMOVED_STR_);
		if(dv->type() == Pointer && !dv->collapsed())
		    msg += rm(_REMOVED_STR_);
		else if(count.selected_collapsed > 0)
		    msg += rm(_REMOVED_STR_);
		else
		    msg += rm(_REMOVED_STR_);

		msg += rm(_REMOVED_STR_);
	    }
	    else
	    {
		 
		msg = rm(_REMOVED_STR_ + nums[_ARGS_] + _REMOVED_STR_);

		string title = exprs[_ARGS_];
		 
		msg += tt(title);

		msg += rm(_REMOVED_STR_ + states[_ARGS_]);
		if(scopes[_ARGS_] != _REMOVED_STR_)
		{
		    msg += rm(_REMOVED_STR_);
		    msg += tt(scopes[_ARGS_]);
		}

		if(detect_aliases && addrs[_ARGS_] != _REMOVED_STR_)
		{
		    msg += rm(_REMOVED_STR_);
		    msg += tt(addrs[_ARGS_]);
		}

		msg += rm(_REMOVED_STR_);
	    }

	    set_status_mstring(msg);
	}
	else if(selected_displays > 1)
	{
	     
	    msg = rm(_REMOVED_STR_);
	    IntArray displays;
	    for(k = disp_graph->first_nr(ref); k != 0; 
		 k = disp_graph->next_nr(ref))
	    {
		DispNode* dn = disp_graph->get(k);
		if(dn->selected())
		    displays += dn->disp_nr();
	    }

	    sort(displays);

	    for(k = 0; k < displays.size(); k++)
	    {
		if(k > 0)
		{
		    if(displays.size() == 2)
			msg += rm(_REMOVED_STR_);
		    else if(k == displays.size() - 1)
			msg += rm(_REMOVED_STR_);
		    else
			msg += rm(_REMOVED_STR_);
		}
		msg += rm(itostring(displays[_ARGS_]));
	    }
	    msg += rm(_REMOVED_STR_ + itostring(displays.size()) 
			      + _REMOVED_STR_);

	    set_status_mstring(msg);
	}
    }

    delete[] label_list;
    delete[] selected;
}

__END_METHOD_CODE__


	METHOD DataDisp!EditDisplaysCB
		CALLS
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			edit_displays_dialog_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 22
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD EditDisplaysCB
			METHODID 128
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:22 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:EditDisplaysCB METHODID:128 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 128-EditDisplaysCB

__BEGIN_METHOD_CODE__

DataDisp::EditDisplaysCB(Widget, XtPointer, XtPointer)
{
    manage_and_raise(edit_displays_dialog_w);
}

__END_METHOD_CODE__


	METHOD DataDisp!setCB
		CALLS
		has_assign_command : GDBAgent,
		selected_value : DataDisp,
		full_name : DispValue,
		get_string : ArgField,
		is_file_pos : _SYSTEM_OR_USER_,
		gdb_question : _SYSTEM_OR_USER_,
		print_command : GDBAgent,
		is_invalid : _SYSTEM_OR_USER_,
		post_gdb_message : _SYSTEM_OR_USER_,
		get_disp_value_str : _SYSTEM_OR_USER_,
		gsub : string,
		strip_space : _SYSTEM_OR_USER_,
		bf : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		xmstring : MString,
		find_shell : _SYSTEM_OR_USER_,
		register_shell : Delay,
		chars : string,
		strcpy : _SYSTEM_OR_USER_,
		strlen : _SYSTEM_OR_USER_,
		chars : string,
		chars : string,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 11
			ASS 22
			AVVARLEN 0
			CALLEDN 23
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 9
			EQTEST 1
			EXPRORCALL 77
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 1
			LOC 67
			LT 1
			METHOD setCB
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 2
			RETPOINT 0
			SCOPEOP 1
			STMNT 34
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:11 ASS:22 AVVARLEN:0 CALLEDN:23 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:9 EQTEST:1 EXPRORCALL:77 GE:0 GT:0 IN:0 INDR:4 LE:1 LOC:67 LT:1 METHOD:setCB METHODID:16 MMINUS:0 OUT:0 PARNUM:3 PPLUS:2 RETPOINT:0 SCOPEOP:1 STMNT:34 TERNINSTR:1 USEDVARS:0 
		;


#ID 16-setCB

__BEGIN_METHOD_CODE__

DataDisp::setCB(Widget w, XtPointer, XtPointer)
{
    if(!gdb->has_assign_command())
	return;

    string name;
    DispValue *disp_value = selected_value();
    if(disp_value != 0)
	name = disp_value->full_name();
    else
	name = source_arg->get_string();

    bool can_set = (name != _REMOVED_STR_) && !is_file_pos(name);
    if(!can_set)
	return;

    string value = gdb_question(gdb->print_command(name));
    if(value == NO_GDB_ANSWER)
    {
	value = _REMOVED_STR_;		 
    }
    else if(is_invalid(value))
    {
	post_gdb_message(value);
	value = _REMOVED_STR_;		 
    }

    value = get_disp_value_str(value, gdb);



    value.gsub(rxnl, _REMOVED_STR_);
    strip_space(value);

    MString prompt = bf(_REMOVED_STR_) + tt(name);

    Arg args[_ARGS_];
    int arg = 0;

    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  XmDESTROY ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  prompt.xmstring() ) )) ; arg++;
    Widget set_dialog = 
	verify(XmCreatePromptDialog(find_shell(w), _REMOVED_STR_, args, arg));

    Delay::register_shell(set_dialog);

    if(lesstif_version <= 79)
	XtUnmanageChild(XmSelectionBoxGetChild(set_dialog,
					       XmDIALOG_APPLY_BUTTON));

    String name_s = (String)(( name.chars() ) != __null  ? (strcpy(XtMalloc((unsigned)strlen( name.chars() ) + 1),  name.chars() )) : __null ) ;

     
     

    XtAddCallback(set_dialog, ((char *)&_XmStrings[_ARGS_]) ,     setDCB, name_s);
    XtAddCallback(set_dialog, ((char *)&_XmStrings[_ARGS_]) ,  setDCB, name_s);
    XtAddCallback(set_dialog, ((char *)&_XmStrings[_ARGS_]) ,   ImmediateHelpCB, 0);
    XtAddCallback(set_dialog, ((char *)&_XmStrings[_ARGS_]) , DestroyThisCB,
		  (XtPointer)set_dialog);

    Widget apply = XmSelectionBoxGetChild(set_dialog, XmDIALOG_APPLY_BUTTON);
    XtManageChild(apply);
    manage_and_raise(set_dialog);

    Widget text = XmSelectionBoxGetChild(set_dialog, XmDIALOG_TEXT);
    XmTextSetString(text, value);
}

__END_METHOD_CODE__


	METHOD DataDisp!setDCB
		CALLS
		value : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		assign_command : GDBAgent



		METRICS
			last_origin REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 11
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 0
			METHOD setDCB
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:11 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:10 LT:0 METHOD:setDCB METHODID:22 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:1 
		;


#ID 22-setDCB

__BEGIN_METHOD_CODE__

DataDisp::setDCB(Widget set_dialog, XtPointer client_data, XtPointer)
{
    String name_s = (String)client_data;

    Widget text = XmSelectionBoxGetChild(set_dialog, XmDIALOG_TEXT);
    String value_s = XmTextGetString(text);
    string value(value_s);
    XtFree(value_s);

    gdb_command(gdb->assign_command(name_s, value), last_origin);
}

__END_METHOD_CODE__


	METHOD DataDisp!have_user_display
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		user_command : DispNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 12
			LT 0
			METHOD have_user_display
			METHODID 133
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:12 LT:0 METHOD:have_user_display METHODID:133 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 133-have_user_display

__BEGIN_METHOD_CODE__

DataDisp::have_user_display(const string& name)
{
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->user_command() == name)
	    return true;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DataDisp!new_user_display
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		user_command : DispNode,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			last_origin REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 11
			CALLEDN 4
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 12
			LT 0
			METHOD new_user_display
			METHODID 134
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:11 CALLEDN:4 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:12 LT:0 METHOD:new_user_display METHODID:134 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 134-new_user_display

__BEGIN_METHOD_CODE__

DataDisp::new_user_display(const string& name)
{
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->user_command() == name)
	    return;
    }

    gdb_command(_REMOVED_STR_ + name + _REMOVED_STR_, last_origin);
}

__END_METHOD_CODE__


	METHOD DataDisp!delete_user_display
		CALLS
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		user_command : DispNode,
		disp_nr : _SYSTEM_OR_USER_,
		delete_display : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 6
			CLASS DataDisp
			CLASSID 111
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 17
			LT 0
			METHOD delete_user_display
			METHODID 135
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:6 CLASS:DataDisp CLASSID:111 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:17 LT:0 METHOD:delete_user_display METHODID:135 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 135-delete_user_display

__BEGIN_METHOD_CODE__

DataDisp::delete_user_display(const string& name)
{
    IntArray killme;

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->user_command() == name)
	{
	    killme += dn->disp_nr();
	}
    }

    delete_display(killme);
    refresh_graph_edit();
}

__END_METHOD_CODE__


	METHOD DataDisp!language_changedHP
		CALLS
		label : _SYSTEM_OR_USER_,
		dereferenced_expr : GDBAgent,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_



		METRICS
			node_popup REFERRED 1 TIMES,
			display_area REFERRED 1 TIMES,
			shortcut_menu REFERRED 1 TIMES,
			graph_cmd_area REFERRED 1 TIMES,
			ARRAYOP 4
			ASS 1
			AVVARLEN 12
			CALLEDN 6
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 1
			METHOD language_changedHP
			METHODID 136
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:4 ASS:1 AVVARLEN:12 CALLEDN:6 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:7 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:10 LT:1 METHOD:language_changedHP METHODID:136 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:4 
		;


#ID 136-language_changedHP

__BEGIN_METHOD_CODE__

DataDisp::language_changedHP(Agent *source, void *, void *)
{
    GDBAgent *gdb = dynamic_cast< GDBAgent  *>(  source ) ;

    string label(_REMOVED_STR_ + gdb->dereferenced_expr(_REMOVED_STR_));

    set_label(shortcut_menu[_ARGS_].widget, label);
    set_label(node_popup[_ARGS_].widget, label);
    set_label(display_area[_ARGS_].widget, label);
    set_label(graph_cmd_area[_ARGS_].widget, label);
}

__END_METHOD_CODE__


	METHOD DataDisp!set_detect_aliases
		CALLS
		refresh_addr : DataDisp,
		first_nr : DispGraph,
		next_nr : DispGraph,
		unmerge_display : DataDisp,
		refresh_graph_edit : DataDisp



		METRICS
			detect_aliases REFERRED 3 TIMES,
			force_check_aliases REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 16
			CALLEDN 5
			CLASS DataDisp
			CLASSID 111
			CYCLO 5
			DOTS 0
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 28
			LT 0
			METHOD set_detect_aliases
			METHODID 137
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:16 CALLEDN:5 CLASS:DataDisp CLASSID:111 CYCLO:5 DOTS:0 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:28 LT:0 METHOD:set_detect_aliases METHODID:137 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:2 
		;


#ID 137-set_detect_aliases

__BEGIN_METHOD_CODE__

DataDisp::set_detect_aliases(bool value)
{
    if(value == detect_aliases)
	return;

    detect_aliases = value;
    if(detect_aliases)
    {
	 
	force_check_aliases = true;
	refresh_addr();
    }
    else
    {
	bool changed = false;

	MapRef ref;
	for(int k = disp_graph->first_nr(ref); 
	     k != 0; 
	     k = disp_graph->next_nr(ref))
	{
	     
	    changed = unmerge_display(k) || changed;
	}

	if(changed)
	    refresh_graph_edit();
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!add_refresh_addr_commands
		CALLS
		size : _SYSTEM_OR_USER_,
		active : DispNode,
		is_user_command : DispNode,
		address_expr : GDBAgent,
		name : _SYSTEM_OR_USER_,
		print_command : GDBAgent,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		add_refresh_addr_commands : DataDisp,
		size : _SYSTEM_OR_USER_



		METRICS
			detect_aliases REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 8
			AVVARLEN 14
			CALLEDN 10
			CLASS DataDisp
			CLASSID 111
			CYCLO 6
			DOTS 2
			EQTEST 0
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 0
			LOC 28
			LT 0
			METHOD add_refresh_addr_commands
			METHODID 127
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:14 CALLEDN:10 CLASS:DataDisp CLASSID:111 CYCLO:6 DOTS:2 EQTEST:0 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:7 LE:0 LOC:28 LT:0 METHOD:add_refresh_addr_commands METHODID:127 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:1 
		;


#ID 127-add_refresh_addr_commands

__BEGIN_METHOD_CODE__

DataDisp::add_refresh_addr_commands(StringArray& cmds, DispNode *dn)
{
    if(!detect_aliases)
	return 0;

    int initial_size = cmds.size();

    if(dn != 0)
    {
 	if(dn->active() && !dn->is_user_command())
	{
	    string addr = gdb->address_expr(dn->name());
	    if(addr != _REMOVED_STR_)
		cmds += gdb->print_command(addr);
	}
    }
    else
    {
	MapRef ref;
	for(dn = disp_graph->first(ref); 
	     dn != 0;
	     dn = disp_graph->next(ref))
	{
	    add_refresh_addr_commands(cmds, dn);
	}
    }

    return cmds.size() - initial_size;
}

__END_METHOD_CODE__


	METHOD DataDisp!refresh_addr
		CALLS
		RefreshAddrCB : DataDisp



		METRICS
			refresh_addr_timer REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 18
			CALLEDN 1
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD refresh_addr
			METHODID 124
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:18 CALLEDN:1 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:refresh_addr METHODID:124 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 124-refresh_addr

__BEGIN_METHOD_CODE__

DataDisp::refresh_addr(DispNode *dn)
{
    if(refresh_addr_timer != 0)
    {
	XtRemoveTimeOut(refresh_addr_timer);
	refresh_addr_timer = 0;
	dn = 0;
    }

    RefreshAddrCB(XtPointer(dn), (XtIntervalId *)0);
}

__END_METHOD_CODE__


	METHOD DataDisp!RefreshAddrCB
		CALLS
		isReadyWithPrompt : GDBAgent,
		add_refresh_addr_commands : DataDisp,
		size : StringArray,
		size : VoidArray,
		size : StringArray,
		send_qu_array : GDBAgent,
		size : StringArray,
		size : StringArray,
		check_aliases : DataDisp,
		refresh_display_list : DataDisp,
		graphEditEnableRedisplay : _SYSTEM_OR_USER_



		METRICS
			refresh_addr_timer REFERRED 2 TIMES,
			force_check_aliases REFERRED 1 TIMES,
			graph_edit REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 14
			AVVARLEN 15
			CALLEDN 11
			CLASS DataDisp
			CLASSID 111
			CYCLO 7
			DOTS 7
			EQTEST 0
			EXPRORCALL 22
			GE 0
			GT 2
			IN 0
			INDR 2
			LE 0
			LOC 55
			LT 1
			METHOD RefreshAddrCB
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 20
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:14 AVVARLEN:15 CALLEDN:11 CLASS:DataDisp CLASSID:111 CYCLO:7 DOTS:7 EQTEST:0 EXPRORCALL:22 GE:0 GT:2 IN:0 INDR:2 LE:0 LOC:55 LT:1 METHOD:RefreshAddrCB METHODID:31 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:20 TERNINSTR:0 USEDVARS:3 
		;


#ID 31-RefreshAddrCB

__BEGIN_METHOD_CODE__

DataDisp::RefreshAddrCB(XtPointer client_data, XtIntervalId *id)
{
    if(id != 0)
    {
	 ;
	refresh_addr_timer = 0;
    }

    DispNode *dn = (DispNode *)client_data;

    bool ok = false;
    bool sent = false;
    if(gdb->isReadyWithPrompt())
    {
	StringArray cmds;
	VoidArray dummy;

	add_refresh_addr_commands(cmds, dn);
	if(cmds.size() > 0)
	{
	    while(dummy.size() < cmds.size())
		dummy += (void *)3 ;

	    static RefreshInfo info;
	    info.verbose = false;
	    info.prompt  = false;
	    ok = gdb->send_qu_array(cmds, dummy, cmds.size(), 
				    refresh_displayOQAC, (void *)&info);

	    sent = cmds.size() > 0;
	}
	else
	{
	     
	    bool suppressed = check_aliases();
	    force_check_aliases = false;
	    refresh_display_list(suppressed);
	    ok = true;
	}
    }

    if(!ok)
    {
	 
	refresh_addr_timer = 
	    XtAppAddTimeOut(XtWidgetToApplicationContext(graph_edit),
			    50, RefreshAddrCB, client_data);
    }

    if(sent)
    {
	 
	 
	graphEditEnableRedisplay(graph_edit, 0 );
    }
}

__END_METHOD_CODE__


	METHOD DataDisp!process_addr
		CALLS
		first : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		active : DispNode,
		is_user_command : DispNode,
		contains : string,
		contains : string,
		read_token : _SYSTEM_OR_USER_,
		from : string,
		through : string,
		addr : _SYSTEM_OR_USER_,
		set_addr : DispNode,
		check_aliases : DataDisp,
		graphEditEnableRedisplay : _SYSTEM_OR_USER_,
		refresh_display_list : DataDisp,
		check_aliases : DataDisp,
		first_nr : DispGraph,
		next_nr : DispGraph,
		get : _SYSTEM_OR_USER_,
		alias_ok : DispNode,
		iter : _SYSTEM_OR_USER_,
		ok : _SYSTEM_OR_USER_,
		key : AssocIter,
		value : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		unmerge_display : DataDisp,
		merge_displays : DataDisp,
		refresh_graph_edit : DataDisp,
		last_change_of_disp_nr : DataDisp,
		get : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		last_change : DispNode,
		sort_last_change : DataDisp,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		last_change_of_disp_nr : DataDisp,
		last_change_of_disp_nr : DataDisp,
		merge_displays : DataDisp,
		sort_last_change : DataDisp,
		get : _SYSTEM_OR_USER_,
		active : DispNode,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		unmerge_display : DataDisp,
		size : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		active : DispNode,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		firstTo : GraphNode,
		unmerge_display : DataDisp,
		alias : DispGraph,
		size : _SYSTEM_OR_USER_,
		sort : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		name : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		get : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		disp_nr : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		name : _SYSTEM_OR_USER_,
		set_status_mstring : _SYSTEM_OR_USER_,
		unmerge_display : DataDisp,
		unalias : DispGraph,
		PreLayoutCB : DataDisp,
		graphEditEnableRedisplay : _SYSTEM_OR_USER_,
		PostLayoutCB : DataDisp,
		first_nr : DispGraph,
		next_nr : DispGraph,
		unmerge_display : DataDisp,
		check_aliases : DataDisp,
		graphEditEnableRedisplay : _SYSTEM_OR_USER_,
		refresh_graph_edit : DataDisp,
		have_selection : DataDisp,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		Yes : _SYSTEM_OR_USER_,
		bump : DataDisp,
		graphEditGetGraphGC : _SYSTEM_OR_USER_,
		region : _SYSTEM_OR_USER_,
		resize : _SYSTEM_OR_USER_,
		moveTo : _SYSTEM_OR_USER_,
		originToPos : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		space : _SYSTEM_OR_USER_,
		space : BoxRegion,
		origin : BoxRegion,
		origin : BoxRegion,
		space : BoxRegion,
		firstNode : Graph,
		nextNode : Graph,
		first : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		active : DispNode,
		origin : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		moveTo : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		moveTo : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		moveTo : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		moveTo : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		DataDisp : DataDisp,
		registerOwnConverters : _SYSTEM_OR_USER_,
		FontTable : FontTable,
		DispGraph : DispGraph,
		addHandler : _SYSTEM_OR_USER_,
		create_toolbar : _SYSTEM_OR_USER_,
		createPannedGraphEdit : _SYSTEM_OR_USER_,
		pannerOfGraphEdit : _SYSTEM_OR_USER_,
		createScrolledGraphEdit : _SYSTEM_OR_USER_,
		scrollerOfGraphEdit : _SYSTEM_OR_USER_,
		set_last_origin : DataDisp,
		registerOwnConverters : _SYSTEM_OR_USER_,
		create_toolbar : _SYSTEM_OR_USER_,
		text : ArgField,
		create_shells : DataDisp,
		MMcreatePopupMenu : _SYSTEM_OR_USER_,
		InstallButtonTips : _SYSTEM_OR_USER_,
		MMcreatePopupMenu : _SYSTEM_OR_USER_,
		InstallButtonTips : _SYSTEM_OR_USER_,
		MMcreatePopupMenu : _SYSTEM_OR_USER_,
		InstallButtonTips : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		createTopLevelSelectionDialog : _SYSTEM_OR_USER_,
		find_shell : _SYSTEM_OR_USER_,
		register_shell : Delay,
		MMcreateWorkArea : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		register_menu_shell : _SYSTEM_OR_USER_,
		set_args : DataDisp



		METRICS
			graph_popup REFERRED 1 TIMES,
			node_popup REFERRED 1 TIMES,
			shortcut_popup1 REFERRED 1 TIMES,
			display_area REFERRED 5 TIMES,
			graph_cmd_area REFERRED 2 TIMES,
			detect_aliases REFERRED 3 TIMES,
			graph_popup_w REFERRED 2 TIMES,
			node_popup_w REFERRED 2 TIMES,
			shortcut_popup_w REFERRED 2 TIMES,
			edit_displays_dialog_w REFERRED 13 TIMES,
			display_list_w REFERRED 6 TIMES,
			force_check_aliases REFERRED 2 TIMES,
			graph_form_w REFERRED 2 TIMES,
			graph_edit REFERRED 18 TIMES,
			graph_cmd_w REFERRED 5 TIMES,
			graph_selection_w REFERRED 2 TIMES,
			bump_displays REFERRED 2 TIMES,
			ARRAYOP 53
			ASS 133
			AVVARLEN 13
			CALLEDN 165
			CLASS DataDisp
			CLASSID 111
			CYCLO 59
			DOTS 37
			EQTEST 12
			EXPRORCALL 321
			GE 3
			GT 11
			IN 0
			INDR 69
			LE 1
			LOC 576
			LT 7
			METHOD process_addr
			METHODID 83
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 8
			RETPOINT 10
			SCOPEOP 21
			STMNT 202
			TERNINSTR 0
			USEDVARS 17

#METRICS ARRAYOP:53 ASS:133 AVVARLEN:13 CALLEDN:165 CLASS:DataDisp CLASSID:111 CYCLO:59 DOTS:37 EQTEST:12 EXPRORCALL:321 GE:3 GT:11 IN:0 INDR:69 LE:1 LOC:576 LT:7 METHOD:process_addr METHODID:83 MMINUS:0 OUT:0 PARNUM:1 PPLUS:8 RETPOINT:10 SCOPEOP:21 STMNT:202 TERNINSTR:0 USEDVARS:17 
		;


#ID 83-process_addr

__BEGIN_METHOD_CODE__

DataDisp::process_addr(StringArray& answers)
{
    int i = 0;

    bool changed = false;

    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref); 
	 dn != 0 && i < answers.size();
	 dn = disp_graph->next(ref))
    {
	if(dn->active() && !dn->is_user_command())
	{
	    string addr = answers[_ARGS_];

	    if(addr.contains('(', 0) || addr.contains('{', 0))
	    {
		 
		read_token(addr);
	    }

	    addr = addr.from(rxaddress);
	    addr = addr.through(rxaddress);

	    if(dn->addr() != addr)
	    {
		dn->set_addr(addr);
		changed = true;
	    }
	}
    }

    bool suppressed = false;
    if(changed || force_check_aliases)
    {
	suppressed = check_aliases();
	force_check_aliases = false;
    }

     
    graphEditEnableRedisplay(graph_edit, 1 );

    if(changed)
	refresh_display_list(suppressed);
}

 
bool DataDisp::check_aliases()
{
    if(!detect_aliases)
	return false;

     
    StringIntArrayAssoc equivalences;

    MapRef ref;
    for(int k = disp_graph->first_nr(ref); 
	     k != 0; 
	     k = disp_graph->next_nr(ref))
    {
	DispNode *dn = disp_graph->get(k);
	if(dn != 0 && dn->alias_ok())
	    equivalences[_ARGS_] += k;
    }

     
    bool changed    = false;
    bool suppressed = false;

    for(StringIntArrayAssocIter iter(equivalences); iter.ok(); iter++)
    {
	string addr = iter.key();
	IntArray& displays = iter.value();

	if(addr == _REMOVED_STR_ || displays.size() == 1)
	{
	     
	    for(int i = 0; i < displays.size(); i++)
		changed = unmerge_display(displays[_ARGS_]) || changed;
	}
	else
	{
	     
	    merge_displays(displays, changed, suppressed);
	}
    }

    if(changed)
	refresh_graph_edit(suppressed);

    return suppressed;
}

 
int DataDisp::last_change_of_disp_nr(int disp_nr)
{
    DispNode *dn = disp_graph->get(disp_nr);

    if(dn->nodeptr()->hidden())
	return 2147483647  ;

    return dn->last_change();
}

 
void DataDisp::sort_last_change(IntArray& disp_nrs)
{
     
    int h = 1;
    do {
	h = h * 3 + 1;
    } while(h <= disp_nrs.size());
    do {
	h /= 3;
	for(int i = h; i < disp_nrs.size(); i++)
	{
	    int v = disp_nrs[_ARGS_];
	    int j;
	    for(j = i; j >= h && last_change_of_disp_nr(disp_nrs[_ARGS_]) > 
		                  last_change_of_disp_nr(v); j -= h)
		disp_nrs[_ARGS_] = disp_nrs[_ARGS_];
	    if(i != j)
		disp_nrs[_ARGS_] = v;
	}
    } while(h != 1);
}

 
 
void DataDisp::merge_displays(IntArray displays,
			      bool& changed, bool& suppressed)
{
     ;

     
    sort_last_change(displays);









    DispNode *d0 = disp_graph->get(displays[_ARGS_]);
    if(d0->active() && d0->nodeptr()->hidden())
    {
	 
	 
	changed = unmerge_display(displays[_ARGS_]) || changed;
    }

    IntArray suppressed_displays;
    for(int i = 1; i < displays.size(); i++)
    {
	int disp_nr = displays[_ARGS_];
	DispNode *dn = disp_graph->get(disp_nr);

	if(!dn->active())
	    continue;		 

	bool hidden = dn->nodeptr()->hidden();

	if(!hidden && dn->nodeptr()->firstTo() == 0)
	{
	     
	     
	    changed = unmerge_display(disp_nr) || changed;
	}
	else
	{
	    bool c = disp_graph->alias(graph_edit, displays[_ARGS_], disp_nr);
	    if(c)
	    {
		if(!hidden)
		    suppressed_displays += disp_nr;
		changed = true;
	    }
	}
    }

    if(suppressed_displays.size() > 0)
    {
	suppressed = true;

	sort(suppressed_displays);

	 
	MString msg = rm(_REMOVED_STR_);

	if(suppressed_displays.size() == 1)
	{
	    DispNode *node = disp_graph->get(suppressed_displays[_ARGS_]);
	    msg += rm(_REMOVED_STR_ + itostring(node->disp_nr()) + _REMOVED_STR_);
	    msg += tt(node->name());
	}
	else if(suppressed_displays.size() == 2)
	{
	    msg += rm(_REMOVED_STR_
		      + itostring(suppressed_displays[_ARGS_])
		      + _REMOVED_STR_
		      + itostring(suppressed_displays[_ARGS_]));
	}
	else
	{
	    msg += rm(_REMOVED_STR_);
	    for(int i = 1; i < suppressed_displays.size(); i++)
	    {
		if(i == suppressed_displays.size() - 1)
		    msg += rm(_REMOVED_STR_);
		else if(i > 1)
		    msg += rm(_REMOVED_STR_);
		msg += rm(itostring(suppressed_displays[_ARGS_]));
	    }
	}

	if(suppressed_displays.size() == 1)
	    msg += rm(_REMOVED_STR_);
	else
	    msg += rm(_REMOVED_STR_);

	DispNode *of = disp_graph->get(displays[_ARGS_]);
	msg += rm(_REMOVED_STR_ + itostring(of->disp_nr()) + _REMOVED_STR_);
	msg += tt(of->name());

	set_status_mstring(msg);
    }
}

bool DataDisp::unmerge_display(int disp_nr)
{
    return disp_graph->unalias(disp_nr);
}

void DataDisp::PreLayoutCB(Widget w, XtPointer client_data, XtPointer)
{
    DataDisp *data_disp = (DataDisp *)client_data;

    if(data_disp->detect_aliases)
    {
	 
	graphEditEnableRedisplay(w, 0 );
    }
}

 
void DataDisp::PostLayoutCB(Widget w, XtPointer client_data, XtPointer)
{
    DataDisp *data_disp = (DataDisp *)client_data;

    if(data_disp->detect_aliases)
    {
	 
	MapRef ref;
	for(int k = disp_graph->first_nr(ref); 
	     k != 0; 
	     k = disp_graph->next_nr(ref))
	{
	    unmerge_display(k);
	}
	data_disp->check_aliases();

	 
	graphEditEnableRedisplay(w, 1 );
	refresh_graph_edit();
    }
}

 
bool DataDisp::have_selection()
{
    MapRef ref;
    for(DispNode* dn = disp_graph->first(ref);
	 dn != 0;
	 dn = disp_graph->next(ref))
    {
	if(dn->selected())
	    return true;
    }
    return false;
}


 
 
 

bool DataDisp::bump_displays = true;

static bool Yes(RegionGraphNode *, const BoxSize&)
{
    return true;
}

 
bool DataDisp::bump(RegionGraphNode *node, const BoxSize& newSize)
{
    if(!bump_displays)
	return true;		 

    const GraphGC& gc = graphEditGetGraphGC(graph_edit);
    BoxRegion oldRegion = node->region(gc);

     
    RegionGraphNode::ResizeCB = Yes;
    node->resize(newSize);
    RegionGraphNode::ResizeCB = bump;

     
    node->moveTo(node->originToPos(oldRegion.origin(), gc));

     
     

     
    BoxSize delta  = node->space(gc) - oldRegion.space();

     
    BoxPoint node_origin = oldRegion.origin();

     
    BoxPoint node_bumper = oldRegion.origin() + oldRegion.space();

    for(GraphNode *r = disp_graph->firstNode(); 
	 r != 0; r = disp_graph->nextNode(r))
    {
	if(r == node)
	    continue;

	 
	 
	BoxGraphNode *b = dynamic_cast< BoxGraphNode  *>(  r ) ;

	if(b != 0)
	{
	    bool is_active = true;

	    MapRef ref;
	    for(DispNode* dn = disp_graph->first(ref); 
		 dn != 0;
		 dn = disp_graph->next(ref))
	    {
		if(b == dn->nodeptr())
		{
		    is_active = dn->active();
		    break;
		}
	    }

	    if(!is_active)
		continue;
	}

	 
	 
	 

	BoxPoint r_origin = r->origin(gc);
	BoxPoint r_bumper = r->origin(gc) + r->space(gc);

	if(r_bumper[_ARGS_] >= node_origin[_ARGS_] && r_bumper[_ARGS_] >= node_origin[_ARGS_])
	{
	    if(r_origin[_ARGS_] > node_bumper[_ARGS_] && r_origin[_ARGS_] > node_bumper[_ARGS_])
		r->moveTo(r->pos() + delta);
	    else if(r_origin[_ARGS_] > node_bumper[_ARGS_])
		r->moveTo(r->pos() + BoxPoint(delta[_ARGS_], 0));
	    else if(r_origin[_ARGS_] > node_bumper[_ARGS_])
		r->moveTo(r->pos() + BoxPoint(0, delta[_ARGS_]));
	    else
		r->moveTo(r->pos() + delta);  
	}
    }

     
    return false;
}



 
 
 

DataDisp::DataDisp(Widget parent)
{
    XtAppContext app_context = XtWidgetToApplicationContext(parent);

    registerOwnConverters();

     
    StringBox::fontTable      = new FontTable(XtDisplay(parent));
    DispBox::vsllib_name      = app_data.vsl_library;
    DispBox::vsllib_path      = app_data.vsl_path;
    DispBox::vsllib_base_defs = app_data.vsl_base_defs;
    DispBox::vsllib_defs      = app_data.vsl_defs;

     
    disp_graph = new DispGraph();
    disp_graph->addHandler(DispGraph_Empty, no_displaysHP);

     
    unsigned char label_type = XmSTRING;
    if(app_data.button_captions || app_data.button_images)
	label_type = XmPIXMAP;

    Widget arg_label = 0;
    if(graph_cmd_w == 0 && !app_data.toolbars_at_bottom)
    {
	graph_cmd_w = create_toolbar(parent, _REMOVED_STR_, 
				     graph_cmd_area, 0, arg_label, graph_arg,
				     label_type);
    }

     
    Arg args[_ARGS_];
    int arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  _REMOVED_STR_  ), ( args[_ARGS_] ).value = (XtArgVal)(  (Graph *)disp_graph ) )) ; arg++;

    if(app_data.panned_graph_editor)
    {
	graph_edit = createPannedGraphEdit(parent, _REMOVED_STR_, args, arg);
	graph_form_w = pannerOfGraphEdit(graph_edit);
    }
    else
    {
	graph_edit = createScrolledGraphEdit(parent, _REMOVED_STR_, args, arg);
	graph_form_w = scrollerOfGraphEdit(graph_edit);
    }

    set_last_origin(graph_edit);

     
    XtAppAddActions(app_context, actions, ((Cardinal) (sizeof( actions ) / sizeof( actions [_ARGS_]))) );
    XtManageChild(graph_edit);

     
    registerOwnConverters();

    if(graph_cmd_w == 0)
    {
	graph_cmd_w = create_toolbar(parent, _REMOVED_STR_, 
				     graph_cmd_area, 0, arg_label, graph_arg,
				     label_type);
    }

    if(arg_label != 0)
    {
	XtAddCallback(arg_label, ((char *)&_XmStrings[_ARGS_]) ,
		      SelectionLostCB, XtPointer(0));
	XtAddCallback(arg_label, ((char *)&_XmStrings[_ARGS_]) , 
		      ClearTextFieldCB, graph_arg->text());
    }

     
    graph_selection_w =
	verify(XmCreateText(graph_cmd_w, _REMOVED_STR_, __null , 0));
    XtAddCallback(graph_selection_w, ((char *)&_XmStrings[_ARGS_]) , 
		  SelectionLostCB, XtPointer(0));
}

void DataDisp::create_shells()
{
    Arg args[_ARGS_];
    Cardinal arg = 0;

     
    graph_popup_w = 
	MMcreatePopupMenu(graph_edit, _REMOVED_STR_, graph_popup);
    InstallButtonTips(graph_popup_w);

    node_popup_w = 
	MMcreatePopupMenu(graph_edit, _REMOVED_STR_, node_popup);
    InstallButtonTips(node_popup_w);

    shortcut_popup_w = 
	MMcreatePopupMenu(graph_edit, _REMOVED_STR_, shortcut_popup1);
    InstallButtonTips(shortcut_popup_w);

    disp_graph->callHandlers();

     
    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ; arg++;
    edit_displays_dialog_w =
	verify(createTopLevelSelectionDialog(find_shell(graph_edit), 
					     _REMOVED_STR_, 
					     args, arg));
    Delay::register_shell(edit_displays_dialog_w);

    XtUnmanageChild(XmSelectionBoxGetChild(edit_displays_dialog_w,
					   XmDIALOG_TEXT));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_displays_dialog_w,
					   XmDIALOG_CANCEL_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_displays_dialog_w,
					   XmDIALOG_APPLY_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_displays_dialog_w,
					   XmDIALOG_SELECTION_LABEL));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_displays_dialog_w,
					   XmDIALOG_LIST_LABEL));

    display_list_w = 
	XmSelectionBoxGetChild(edit_displays_dialog_w, XmDIALOG_LIST);

    if(app_data.flat_dialog_buttons)
    {
	for(MMDesc *item = display_area; item != 0 && item->name != 0; item++)
	{
	    if((item->type & MMTypeMask) == MMPush)
		item->type = (MMFlatPush | (item->type & ~MMTypeMask));
	}
    }

    Widget buttons = verify(MMcreateWorkArea(edit_displays_dialog_w, 
					     _REMOVED_STR_, display_area));
    XtVaSetValues(buttons,
		  ((char *)&_XmStrings[_ARGS_]) ,     0, 
		  ((char *)&_XmStrings[_ARGS_]) ,    0, 
		  ((char*)&XtStrings[_ARGS_])  ,     0,
		  ((char *)&_XmStrings[_ARGS_]) , 0, 
		  ((char *)&_XmStrings[_ARGS_]) ,         0,
		  __null );

    MMaddCallbacks(display_area);
    MMaddHelpCallback(display_area, ImmediateHelpCB);
    register_menu_shell(display_area);

     
    XtAddCallback(graph_edit, _REMOVED_STR_ ,
		  DoubleClickCB, XtPointer(this));
    XtAddCallback(graph_edit, _REMOVED_STR_ ,
		  UpdateDisplayEditorSelectionCB, XtPointer(this));
    XtAddCallback(graph_edit, _REMOVED_STR_ ,
		  CompareNodesCB, XtPointer(this));
    XtAddCallback(graph_edit, _REMOVED_STR_ ,
		  PreLayoutCB, XtPointer(this));
    XtAddCallback(graph_edit, _REMOVED_STR_ ,
		  PostLayoutCB, XtPointer(this));

    if(display_list_w != 0)
    {
	XtAddCallback(display_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateGraphEditorSelectionCB,
		      0);
	XtAddCallback(display_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateGraphEditorSelectionCB,
		      0);
	XtAddCallback(display_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateGraphEditorSelectionCB,
		      0);
	XtAddCallback(display_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateGraphEditorSelectionCB,
		      0);
    }

    if(edit_displays_dialog_w != 0)
    {
	XtAddCallback(edit_displays_dialog_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UnmanageThisCB,
		      edit_displays_dialog_w);
	XtAddCallback(edit_displays_dialog_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      ImmediateHelpCB,
		      0);
    }

     
    RegionGraphNode::ResizeCB = bump;

     
    set_args();
}




__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/DataDisp.o.nu.met	  Methods Number  123
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/DispBox.o.nu.met ... 


	METHOD DispBox!DispBox
		CALLS
		is_user_command : DispNode,
		length : string,
		index : string,
		after : string,
		shorten : _SYSTEM_OR_USER_,
		is_user_command : DispNode,
		user_command : DispNode,
		contains : string,
		after : string,
		contains : string,
		length : string,
		after : string,
		tag : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		tag : _SYSTEM_OR_USER_,
		eval : DispBox,
		create_value_box : DispBox,
		eval : DispBox,
		eval : DispBox



		METRICS
			max_display_title_length REFERRED 2 TIMES,
			ARRAYOP 9
			ASS 17
			AVVARLEN 24
			CALLEDN 20
			CLASS DispBox
			CLASSID 109
			CYCLO 8
			DOTS 10
			EQTEST 0
			EXPRORCALL 35
			GE 1
			GT 3
			IN 0
			INDR 0
			LE 0
			LOC 52
			LT 0
			METHOD DispBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:9 ASS:17 AVVARLEN:24 CALLEDN:20 CLASS:DispBox CLASSID:109 CYCLO:8 DOTS:10 EQTEST:0 EXPRORCALL:35 GE:1 GT:3 IN:0 INDR:0 LE:0 LOC:52 LT:0 METHOD:DispBox METHODID:3 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-DispBox

__BEGIN_METHOD_CODE__

DispBox::DispBox(int disp_nr, const string& t, const DispValue *dv)
{
    string title = t;

    if(!is_user_command(title))
    {
	 



	int i = 0;
	while(int(title.length()) > max_display_title_length 
	       && ((i = title.index(rxdbx_scope)) >= 0))
	{
	    title = title.before(i) + title.after('`');
	}
    }

     
    shorten(title, max_display_title_length);

     
    VSLArg args[_ARGS_];
    if(is_user_command(title))
    {
	 
	title = user_command(title);
	if(title.contains(_REMOVED_STR_, 0))
	    title = title.after(_REMOVED_STR_);
	else if(title.contains(_REMOVED_STR_))
	    title = title.before(_REMOVED_STR_);
	if(title.length() > 0)
	    title = ((int) __ctype_toupper[(int) (  title[_ARGS_]  )])   + title.after(0);

	args[_ARGS_] = tag(title);
    }
    else
    {
	 
	args[_ARGS_] = itostring(disp_nr);
	args[_ARGS_] = tag(title);
    }

    title_box = eval(_REMOVED_STR_, args);
    
    args[_ARGS_] = title_box;
    if(dv)
	args[_ARGS_] = create_value_box(dv);
    else
	args[_ARGS_] = eval(_REMOVED_STR_);

    mybox = eval(_REMOVED_STR_, args);
}

__END_METHOD_CODE__


	METHOD DispBox!set_value
		CALLS
		create_value_box : DispBox,
		eval : DispBox,
		eval : DispBox



		METRICS
			ARRAYOP 4
			ASS 4
			AVVARLEN 0
			CALLEDN 4
			CLASS DispBox
			CLASSID 109
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 13
			LT 0
			METHOD set_value
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:4 AVVARLEN:0 CALLEDN:4 CLASS:DispBox CLASSID:109 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:13 LT:0 METHOD:set_value METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-set_value

__BEGIN_METHOD_CODE__

DispBox::set_value(const DispValue* dv)
{
    VSLArg args[_ARGS_];

    args[_ARGS_] = title_box;
    if(dv)
	args[_ARGS_] = create_value_box(dv);
    else
	args[_ARGS_] = eval(_REMOVED_STR_);

    mybox->unlink();

    mybox = eval(_REMOVED_STR_, args);
}

__END_METHOD_CODE__


	METHOD DispBox!create_value_box
		CALLS
		type : _SYSTEM_OR_USER_,
		collapsed : DispValue,
		eval : DispBox,
		is_numeric : _SYSTEM_OR_USER_,
		eval : DispBox,
		value : _SYSTEM_OR_USER_,
		eval : DispBox,
		value : _SYSTEM_OR_USER_,
		collapsed : DispValue,
		eval : DispBox,
		value : _SYSTEM_OR_USER_,
		strip_space : _SYSTEM_OR_USER_,
		freq : string,
		split : _SYSTEM_OR_USER_,
		eval : DispBox,
		eval : DispBox,
		collapsed : DispValue,
		eval : DispBox,
		dereferenced : DispValue,
		eval : DispBox,
		value : _SYSTEM_OR_USER_,
		eval : DispBox,
		value : _SYSTEM_OR_USER_,
		collapsed : DispValue,
		eval : DispBox,
		nchildren : _SYSTEM_OR_USER_,
		eval : DispBox,
		repeats : DispValue,
		get_child : DispValue,
		type : _SYSTEM_OR_USER_,
		repeats : DispValue,
		nchildren : _SYSTEM_OR_USER_,
		nchildren : _SYSTEM_OR_USER_,
		vertical_aligned : DispValue,
		get_child : DispValue,
		nchildren : _SYSTEM_OR_USER_,
		get_child : DispValue,
		create_value_box : DispBox,
		eval : DispBox,
		max : DynArray,
		get_child : DispValue,
		nchildren : _SYSTEM_OR_USER_,
		get_child : DispValue,
		nchildren : _SYSTEM_OR_USER_,
		get_child : DispValue,
		create_value_box : DispBox,
		eval : DispBox,
		eval : DispBox,
		create_value_box : DispBox,
		get_child : DispValue,
		vertical_aligned : DispValue,
		eval : DispBox,
		eval : DispBox,
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		collapsed : DispValue,
		eval : DispBox,
		nchildren : _SYSTEM_OR_USER_,
		eval : DispBox,
		get_child : DispValue,
		name : _SYSTEM_OR_USER_,
		eval : DispBox,
		max : DynArray,
		size : _SYSTEM_OR_USER_,
		create_value_box : DispBox,
		get_child : DispValue,
		eval : DispBox,
		collapsed : DispValue,
		eval : DispBox,
		create_value_box : DispBox,
		get_child : DispValue,
		eval : DispBox,
		abort : _SYSTEM_OR_USER_,
		repeats : DispValue,
		collapsed : DispValue,
		eval : DispBox,
		link : Box,
		repeats : DispValue,
		is_changed : DispValue,
		eval : DispBox,
		link : Box,
		depth : DispValue,
		parent : DispValue,
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		eval : DispBox,
		name : _SYSTEM_OR_USER_,
		link : Box,
		eval : DispBox,
		name : _SYSTEM_OR_USER_,
		link : Box,
		abort : _SYSTEM_OR_USER_,
		tag : Box



		METRICS
			align_2d_arrays REFERRED 1 TIMES,
			ARRAYOP 5
			ASS 93
			AVVARLEN 15
			CALLEDN 108
			CLASS DispBox
			CLASSID 109
			CYCLO 56
			DOTS 1
			EQTEST 8
			EXPRORCALL 151
			GE 0
			GT 4
			IN 0
			INDR 69
			LE 0
			LOC 309
			LT 12
			METHOD create_value_box
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 11
			RETPOINT 1
			SCOPEOP 0
			STMNT 136
			TERNINSTR 4
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:93 AVVARLEN:15 CALLEDN:108 CLASS:DispBox CLASSID:109 CYCLO:56 DOTS:1 EQTEST:8 EXPRORCALL:151 GE:0 GT:4 IN:0 INDR:69 LE:0 LOC:309 LT:12 METHOD:create_value_box METHODID:7 MMINUS:0 OUT:0 PARNUM:2 PPLUS:11 RETPOINT:1 SCOPEOP:0 STMNT:136 TERNINSTR:4 USEDVARS:1 
		;


#ID 7-create_value_box

__BEGIN_METHOD_CODE__

DispBox::create_value_box(const DispValue* dv, int member_name_width)
{
    Box* vbox = 0;

    switch(dv->type())
    {
    case Simple:
	if(dv->collapsed())
	    vbox = eval(_REMOVED_STR_);
	else
	{
	     
	    if(is_numeric(dv))
		vbox = eval(_REMOVED_STR_, dv->value());
	    else
		vbox = eval(_REMOVED_STR_, dv->value());
	    break;
	}

    case Text:
	if(dv->collapsed())
	    vbox = eval(_REMOVED_STR_);
	else
	{
	    string v = dv->value();
	    strip_space(v);
	    untabify(v);

	    int n = v.freq('\n');
	    string *lines = new string[_ARGS_];
	    split(v, lines, n + 1, '\n');

	    ListBox *args = new ListBox;
	    for(int i = 0; i < n + 1; i++)
	    {
		if(lines[_ARGS_] == _REMOVED_STR_)
		    lines[_ARGS_] = _REMOVED_STR_;
		*args += eval(_REMOVED_STR_, lines[_ARGS_]);
	    }
	    vbox = eval(_REMOVED_STR_, args);

	    args->unlink();
	    delete[] lines;
	}
	break;

    case Pointer:
	if(dv->collapsed())
	    vbox = eval(_REMOVED_STR_);
	else if(dv->dereferenced())
	    vbox = eval(_REMOVED_STR_, dv->value());
	else
	    vbox = eval(_REMOVED_STR_, dv->value());
	break;

    case Array:
	if(dv->collapsed())
	    vbox = eval(_REMOVED_STR_);
	else
	{
	    int count = dv->nchildren();
	    if(count == 0)
	    {
		vbox = eval(_REMOVED_STR_);
	    }
	    else
	    {
		bool have_2d_array = true;

		if(dv->repeats() > 1)
		    have_2d_array = false;

		int nchildren = 0;
		for(int k = 0; have_2d_array && k < count; k++)
		{
		    DispValue *child = dv->get_child(k);
		    if(child->type() != Array)
		    {
			 
			have_2d_array = false;
			break;
		    }

		    if(child->repeats() > 1)
		    {
			 
			have_2d_array = false;
			break;
		    }

		    if(k == 0)
		    {
			nchildren = child->nchildren();
		    }
		    else if(nchildren != child->nchildren())
		    {
			 
			have_2d_array = false;
			break;
		    }
		}

		if(have_2d_array && align_2d_arrays)
		{
		     
		    ListBox *table = new ListBox;

		    if(dv->vertical_aligned())
		    {
			 
			 
			for(int i = 0; i < count; i++)
			{
			    DispValue *c = dv->get_child(i);
			    ListBox *row = new ListBox;
			    for(int j = 0; j < c->nchildren(); j++)
			    {
				DispValue *cc = c->get_child(j);
				ListBox *args = new ListBox;
				*args += create_value_box(cc);
				Box *b = eval(_REMOVED_STR_, args);
				*row += b;
				b->unlink();
				args->unlink();
			    }

			    *table += row;
			    row->unlink();
			}
		    }
		    else
		    {
			 
			 
			int max_cc = 0;
			for(int j = 0; j < count; j++)
			    max_cc = max(max_cc,
					 dv->get_child(j)->nchildren());
			for(int i = 0; i < max_cc; i++)
			{
			    ListBox *row = new ListBox;
			    for(int j = 0; j < count; j++)
			    {
				DispValue *c = dv->get_child(j);
				Box *elem = 0;
				if(i < c->nchildren())
				{
				    DispValue *cc = c->get_child(i);
				    elem = create_value_box(cc);
				}
				else
				{
				    elem = new ListBox;
				}
				ListBox *args = new ListBox;
				*args += elem;
				Box *b = eval(_REMOVED_STR_, elem);
				*row += b;
				b->unlink();
				args->unlink();
			    }

			    *table += row;
			    row->unlink();
			}
		    }

		    ListBox *args = new ListBox;
		    *args += table;
		    table->unlink();

		    vbox = eval(_REMOVED_STR_, args);

		    args->unlink();
		}
		else
		{
		     
		    ListBox* args = new ListBox;
		    for(int i = 0; i < count; i++)
			*args += create_value_box(dv->get_child(i));

		    if(dv->vertical_aligned())
			vbox = eval(_REMOVED_STR_, args);
		    else
			vbox = eval(_REMOVED_STR_, args);

		    args->unlink();
		}
	    }
	}
	break;

    case List:
    case StructOrClass:
    case BaseClass:
	{
	    String collapsed_value = (dv->type() == List ? 
				      _REMOVED_STR_ :
				      _REMOVED_STR_);
	    String empty_value     = (dv->type() == List ? 
				      _REMOVED_STR_ :
				      _REMOVED_STR_);
	    String member_name     = (dv->type() == List ? 
				      _REMOVED_STR_ :
				      _REMOVED_STR_);
	    String value           = (dv->type() == List ? 
				      _REMOVED_STR_ :
				      _REMOVED_STR_);

	    if(dv->collapsed())
		vbox = eval(collapsed_value);
	    else
	    {
		int count = dv->nchildren();
		if(count == 0)
		    vbox = eval(empty_value);
		else
		{
		     
		    int max_member_name_width = 0;
		    int i;
		    for(i = 0; i < count; i++)
		    {
			string child_member_name = dv->get_child(i)->name();
			Box *box = eval(member_name, child_member_name);
			max_member_name_width = 
			    max(max_member_name_width, box->size(X));
			box->unlink();
		    }

		     
		    ListBox* args = new ListBox;
		    for(i = 0; i < count; i++)
			*args += create_value_box(dv->get_child(i), 
						  max_member_name_width);

		    vbox = eval(value, args);
		    args->unlink();
		}
	    }
	}
	break;

    case Reference:
	if(dv->collapsed())
	    vbox = eval(_REMOVED_STR_);
	else
	{
	    ListBox* args = new ListBox;
	    for(int i = 0; i < 2; i++)
		*args += create_value_box(dv->get_child(i));

	    vbox = eval(_REMOVED_STR_, args);
	    args->unlink();
	}
	break;

    case UnknownType:
	 ;
	abort();
    }

     
    if(dv->repeats() > 1 && !dv->collapsed())
    {
	vbox = eval(_REMOVED_STR_, vbox->link(), dv->repeats());
    }

     
    if(dv->is_changed())
    {
	vbox = eval(_REMOVED_STR_, vbox->link());
    }

     
    if(dv->depth() > 0)
    {
	switch(dv->parent()->type())
	{
	case List:
	    if(dv->type() != Text)
		vbox = eval(_REMOVED_STR_, dv->name(), vbox->link(), 
			    member_name_width);
	    break;

	case StructOrClass:
	case BaseClass:
	    vbox = eval(_REMOVED_STR_, dv->name(), vbox->link(), 
			member_name_width);
	    break;

	case Array:
	case Reference:
	case Simple:
	case Text:
	case Pointer:
	    break;

	case UnknownType:
	     ;
	    abort();
	}
    }

    Data* data = (Data *)dv;
    vbox = vbox->tag(data);

    return vbox;
}

__END_METHOD_CODE__


	METHOD DispBox!dup
		CALLS
		link : _SYSTEM_OR_USER_,
		ForegroundColorBox : ForegroundColorBox,
		StringBox : StringBox,
		link : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS DispBox
			CLASSID 109
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 8
			LT 0
			METHOD dup
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:DispBox CLASSID:109 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:8 LT:0 METHOD:dup METHODID:9 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-dup

__BEGIN_METHOD_CODE__

DispBox::dup(const string& func_name, const Box *box)
{
    if(box != 0)
	return((Box *)box)->link();

     
    return(new ForegroundColorBox(
	new StringBox(_REMOVED_STR_ + func_name + _REMOVED_STR_), _REMOVED_STR_))->link();
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/DispBox.o.nu.met	  Methods Number  4
#====================================================================
#Process file ../../code/ddd-3.0/ddd/DispBuffer.o.nu.met ... 


	METHOD DispBuffer!filter
		CALLS
		prepend : _SYSTEM_OR_USER_,
		display_index : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		possible_begin_of_display : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_



		METRICS
			already_read REFERRED 5 TIMES,
			ARRAYOP 0
			ASS 15
			AVVARLEN 12
			CALLEDN 5
			CLASS DispBuffer
			CLASSID 123
			CYCLO 9
			DOTS 5
			EQTEST 2
			EXPRORCALL 11
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 55
			LT 0
			METHOD filter
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:15 AVVARLEN:12 CALLEDN:5 CLASS:DispBuffer CLASSID:123 CYCLO:9 DOTS:5 EQTEST:2 EXPRORCALL:11 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:55 LT:0 METHOD:filter METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-filter

__BEGIN_METHOD_CODE__

DispBuffer::filter(string& answer)
{
    int index;

     
    switch(already_read) {
    case DisplayPart:
	answer.prepend(answer_buffer);
	answer_buffer = _REMOVED_STR_;
	already_read = Null;
	 
    case Null:
	index = display_index(answer, gdb);

	if(index == 0) {
	     
	    display_buffer = answer;
	    already_read = DisplayFound;

	    answer = _REMOVED_STR_;
	}
	else if(index > 0) {
	     
	    display_buffer = answer.from(index);
	    already_read = DisplayFound;

	    answer = answer.before(index);
	}
	else {
	     
	    index = possible_begin_of_display(answer, gdb);

	    if(index == -1) {
		 
	    }
	    else {
		answer_buffer = answer.from(index);
		already_read = DisplayPart;

		answer = answer.before(index);
	    }
	}
	break;
    case DisplayFound:
	display_buffer += answer;

	answer = _REMOVED_STR_;
	break;
    default:
	 
	 ;
	break;
    }

     
}

__END_METHOD_CODE__


	METHOD DispBuffer!answer_ended

		METRICS
			already_read REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS DispBuffer
			CLASSID 123
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 20
			LT 0
			METHOD answer_ended
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:DispBuffer CLASSID:123 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:20 LT:0 METHOD:answer_ended METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-answer_ended

__BEGIN_METHOD_CODE__

DispBuffer::answer_ended()
{
    switch(already_read) {
    case DisplayPart:
	 ;
	return answer_buffer;

    case Null:
	 ;
	return _REMOVED_STR_;

    case DisplayFound:
	return _REMOVED_STR_;

    default:
	 
	 ;
	break;
    }
    return _REMOVED_STR_;
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/DispBuffer.o.nu.met	  Methods Number  2
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/DispGraph.o.nu.met ... 


	METHOD DispGraph!DispGraph
		CALLS
		addHandler : DispNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD DispGraph
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:DispGraph METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-DispGraph

__BEGIN_METHOD_CODE__

DispGraph::DispGraph()
{
    DispNode::addHandler(DispNode_Disabled,
			 disp_node_disabledHP,
			 (void*)this);
}

__END_METHOD_CODE__


	METHOD DispGraph!clear
		CALLS
		delete_all_contents : DispNodeMap



		METRICS
			idMap REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD clear
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:clear METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-clear

__BEGIN_METHOD_CODE__

DispGraph::clear()
{
    idMap.delete_all_contents();
}

__END_METHOD_CODE__


	METHOD DispGraph!count_all
		CALLS
		length : DispNodeMap,
		first_key : DispNodeMap,
		next_key : DispNodeMap,
		get : DispNodeMap,
		enabled : _SYSTEM_OR_USER_,
		get : DispNodeMap,
		enabled : _SYSTEM_OR_USER_



		METRICS
			idMap REFERRED 5 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 5
			CALLEDN 7
			CLASS DispGraph
			CLASSID 119
			CYCLO 10
			DOTS 5
			EQTEST 1
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 30
			LT 0
			METHOD count_all
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 3
			RETPOINT 2
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:5 CALLEDN:7 CLASS:DispGraph CLASSID:119 CYCLO:10 DOTS:5 EQTEST:1 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:30 LT:0 METHOD:count_all METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:3 RETPOINT:2 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-count_all

__BEGIN_METHOD_CODE__

DispGraph::count_all(Displaying e)
{
    if(e == Both)
	return idMap.length();

    int count = 0;
    MapRef ref;
    for(int k = idMap.first_key(ref); k != 0; k =
	     idMap.next_key(ref))
    {
	switch(e) 
	{
	case Both:
	    count++;
	    break;
	case Enabled:
	    if(idMap.get(k)->enabled())
		count++;
	    break;
	case Disabled:
	    if(!(idMap.get(k)->enabled()))
		count++;
	    break;
	default:
	     
	     ;
	    break;
	}
    }
    return count;
}

__END_METHOD_CODE__


	METHOD DispGraph!count_selected
		CALLS
		first_key : DispNodeMap,
		next_key : DispNodeMap,
		get : DispNodeMap,
		selected : _SYSTEM_OR_USER_



		METRICS
			idMap REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 5
			CALLEDN 4
			CLASS DispGraph
			CLASSID 119
			CYCLO 3
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 0
			METHOD count_selected
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:5 CALLEDN:4 CLASS:DispGraph CLASSID:119 CYCLO:3 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:0 METHOD:count_selected METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-count_selected

__BEGIN_METHOD_CODE__

DispGraph::count_selected()
{
    int count = 0;
    MapRef ref;
    for(int k = idMap.first_key(ref); k != 0; k = idMap.next_key(ref)) {
	    if(!idMap.get(k)->selected())
		count++;
    }
    return count;
}

__END_METHOD_CODE__


	METHOD DispGraph!addHandler
		CALLS
		add : QueueRec



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD addHandler
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:addHandler METHODID:8 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-addHandler

__BEGIN_METHOD_CODE__

DispGraph::addHandler(unsigned    type,
			    HandlerProc proc,
			    void*       client_data)
{
    handlers.add(type, proc, client_data);
}

__END_METHOD_CODE__


	METHOD DispGraph!removeHandler
		CALLS
		remove : QueueRec



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD removeHandler
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:removeHandler METHODID:9 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-removeHandler

__BEGIN_METHOD_CODE__

DispGraph::removeHandler(unsigned    type,
			       HandlerProc proc,
			       void        *client_data)
{
    handlers.remove(type, proc, client_data);
}

__END_METHOD_CODE__


	METHOD DispGraph!callHandlers
		CALLS
		call : QueueRec,
		count_all : DispGraph,
		call : QueueRec,
		call : QueueRec



		METRICS
			no_enabled REFERRED 1 TIMES,
			no_disabled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 4
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 3
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD callHandlers
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:4 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:3 EQTEST:1 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:callHandlers METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 10-callHandlers

__BEGIN_METHOD_CODE__

DispGraph::callHandlers()
{
    handlers.call(DispGraph_Empty,
		  this,
		  (void*)(count_all() == 0));
    handlers.call(NoEnabled,
		  this,
		  (void*)(no_enabled));
    handlers.call(NoDisabled,
		  this,
		  (void*)(no_disabled));
}

__END_METHOD_CODE__


	METHOD DispGraph!insert
		CALLS
		contains : DispNodeMap,
		length : DispNodeMap,
		call : QueueRec,
		nodeptr : DispNode,
		get : DispNodeMap,
		LineGraphEdge : LineGraphEdge,
		nodeptr : DispNode,
		nodeptr : DispNode,
		insert : DispNodeMap,
		count_all : DispGraph,
		call : QueueRec,
		count_all : DispGraph,
		call : QueueRec



		METRICS
			idMap REFERRED 4 TIMES,
			no_enabled REFERRED 2 TIMES,
			no_disabled REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 8
			CALLEDN 13
			CLASS DispGraph
			CLASSID 119
			CYCLO 8
			DOTS 7
			EQTEST 3
			EXPRORCALL 27
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 28
			LT 0
			METHOD insert
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:8 CALLEDN:13 CLASS:DispGraph CLASSID:119 CYCLO:8 DOTS:7 EQTEST:3 EXPRORCALL:27 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:28 LT:0 METHOD:insert METHODID:11 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:3 
		;


#ID 11-insert

__BEGIN_METHOD_CODE__

DispGraph::insert(int new_disp_nr,
		      DispNode* new_dn,
		      int depends_on)
{
    if(idMap.contains(new_disp_nr))
	return 0;
    if(idMap.length() == 0)
	handlers.call(DispGraph_Empty, this, (void*)false);

    *this += new_dn->nodeptr();

    if(depends_on != 0)
    {
	DispNode* old_dn = idMap.get(depends_on);
	*this += new LineGraphEdge(old_dn->nodeptr(), new_dn->nodeptr());
    }
     ;

    idMap.insert(new_disp_nr, new_dn);

    if(no_enabled) {
	if(!( no_enabled = (count_all(Enabled) == 0) ))
	    handlers.call(NoEnabled, this, (void*)false);
    }
    if(no_disabled) {
	if(!( no_disabled = (count_all(Disabled) == 0) ))
	    handlers.call(NoDisabled, this, (void*)false);
    }

    return new_disp_nr;
}

__END_METHOD_CODE__


	METHOD DispGraph!adjust_position
		CALLS
		graphEditGetGraphGC : _SYSTEM_OR_USER_,
		new_size : _SYSTEM_OR_USER_,
		box : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		new_region : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		BoxPoint : BoxPoint,
		origin : BoxRegion,
		BoxPoint : BoxPoint,
		origin : BoxRegion,
		BoxPoint : BoxPoint,
		origin : BoxRegion,
		BoxPoint : BoxPoint,
		firstVisibleNode : Graph,
		region : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		firstVisibleNode : Graph,
		nextVisibleNode : Graph



		METRICS
			ARRAYOP 6
			ASS 15
			AVVARLEN 0
			CALLEDN 18
			CLASS DispGraph
			CLASSID 119
			CYCLO 5
			DOTS 5
			EQTEST 0
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 3
			LOC 44
			LT 3
			METHOD adjust_position
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:15 AVVARLEN:0 CALLEDN:18 CLASS:DispGraph CLASSID:119 CYCLO:5 DOTS:5 EQTEST:0 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:3 LE:3 LOC:44 LT:3 METHOD:adjust_position METHODID:27 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-adjust_position

__BEGIN_METHOD_CODE__

DispGraph::adjust_position(DispNode *new_node,
				     Widget w,
				     BoxPoint pos,
				     BoxPoint offset,
				     BoxPoint grid)
{
    const GraphGC& graphGC = graphEditGetGraphGC(w);

     

    BoxSize new_size(new_node->box()->size());

     
    BoxRegion new_region(pos - (new_size + grid) / 2, new_size + grid);

     
    while(new_region.origin()[_ARGS_] <= 0)
    {
	pos                 += BoxPoint(grid[_ARGS_], 0);
	new_region.origin() += BoxPoint(grid[_ARGS_], 0);
	 
    }

    while(new_region.origin()[_ARGS_] <= 0)
    {
	pos                 += BoxPoint(0, grid[_ARGS_]);
	new_region.origin() += BoxPoint(0, grid[_ARGS_]);
	 
    }

     
    GraphNode *n = firstVisibleNode();
    while(n != 0)
    {
	const BoxRegion& region = n->region(graphGC);
	if(new_region <= region)
	{
	    pos                 += offset;
	    new_region.origin() += offset;

	    n = firstVisibleNode();
	     
	}
	else
	    n = nextVisibleNode(n);
    }

    return pos;
}

__END_METHOD_CODE__


	METHOD DispGraph!default_pos
		CALLS
		grid : _SYSTEM_OR_USER_,
		max : DynArray,
		max : DynArray,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		max : DynArray,
		max : DynArray,
		new_size : _SYSTEM_OR_USER_,
		box : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		graphEditFinalPosition : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		get : DispNodeMap,
		nodeptr : DispNode,
		pos : _SYSTEM_OR_USER_,
		firstFrom : GraphNode,
		nextFrom : GraphNode,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		firstFrom : GraphNode,
		to : GraphEdge,
		hidden : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		abs : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		pos : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		abs : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		adjust_position : DispGraph



		METRICS
			idMap REFERRED 1 TIMES,
			ARRAYOP 30
			ASS 38
			AVVARLEN 5
			CALLEDN 62
			CLASS DispGraph
			CLASSID 119
			CYCLO 11
			DOTS 1
			EQTEST 4
			EXPRORCALL 84
			GE 0
			GT 6
			IN 0
			INDR 36
			LE 0
			LOC 169
			LT 1
			METHOD default_pos
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 47
			TERNINSTR 6
			USEDVARS 1

#METRICS ARRAYOP:30 ASS:38 AVVARLEN:5 CALLEDN:62 CLASS:DispGraph CLASSID:119 CYCLO:11 DOTS:1 EQTEST:4 EXPRORCALL:84 GE:0 GT:6 IN:0 INDR:36 LE:0 LOC:169 LT:1 METHOD:default_pos METHODID:16 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:47 TERNINSTR:6 USEDVARS:1 
		;


#ID 16-default_pos

__BEGIN_METHOD_CODE__

DispGraph::default_pos(DispNode *new_node, 
				Widget w, int depends_on)
{
    Dimension grid_height = 16;
    Dimension grid_width  = 16;
    Cardinal rotation     = 0;
    XtVaGetValues(w,
		  _REMOVED_STR_ , &grid_height,
		  _REMOVED_STR_ ,  &grid_width,
		  _REMOVED_STR_ ,   &rotation,
		  __null );

    BoxPoint grid(max(grid_height, 1), max(grid_width, 1));
    BoxPoint delta = grid * 2;

    bool horizontal = rotation % 90;

    BoxPoint pos;
    BoxPoint offset;

    if(depends_on == 0)
    {
	 
	 
	offset = horizontal ? BoxPoint(grid[_ARGS_], 0) : BoxPoint(0, grid[_ARGS_]);

	 
	Position x = 0;
	Position y = 0;
	XtVaGetValues(w, ((char*)&XtStrings[_ARGS_]) , &x, ((char*)&XtStrings[_ARGS_]) , &y, __null );
	pos = BoxPoint(max(-x, grid[_ARGS_]), max(-y, grid[_ARGS_] * 2));

	 
	BoxSize new_size(new_node->box()->size());
	pos += new_size / 2;

	 
	pos = graphEditFinalPosition(w, pos);
    }
    else
    {
	 

	 
	offset = horizontal ? BoxPoint(0, delta[_ARGS_]) : BoxPoint(delta[_ARGS_], 0);

	 
	 
	 
	 

	BoxGraphNode *node = idMap.get(depends_on)->nodeptr();
	 
	pos = node->pos() + offset;

	 
	BoxGraphNode *max_child      = 0;
	BoxGraphNode *next_max_child = 0;

	 
	for(GraphEdge *edge = node->firstFrom(); 
	     edge != 0; 
	     edge = node->nextFrom(edge))
	{
	    BoxDimension d = horizontal ? X : Y;

	    GraphNode *child = edge->to();
	    while(child->isHint())
		child = child->firstFrom()->to();
	    if(child->hidden())
		continue;

	    BoxGraphNode *bgn = dynamic_cast< BoxGraphNode  *>(  child ) ;
	    if(bgn == 0)
		continue;

	    if(max_child == 0 || child->pos()[_ARGS_] > max_child->pos()[_ARGS_])
	    {
		next_max_child = max_child;
		max_child = bgn;
	    }
	    else if(next_max_child == 0 
		     || child->pos()[_ARGS_] > next_max_child->pos()[_ARGS_])
	    {
		next_max_child = bgn;
	    }
	}

	if(max_child && next_max_child)
	{
	     
	     
	     
	     
	     
	     
	     
	     

	     
	     

	     
	    pos = max_child->pos() 
		+ (max_child->pos() - next_max_child->pos());

	     
	     
	     
	     
	    bool horizontal = 
		(abs(max_child->pos()[_ARGS_] - next_max_child->pos()[_ARGS_]) >
		 abs(max_child->pos()[_ARGS_] - next_max_child->pos()[_ARGS_]));

	    offset = horizontal ? 
		BoxPoint(delta[_ARGS_], 0) : BoxPoint(0, delta[_ARGS_]);
	}
	else if(max_child)
	{
	     
	     
	     
	     

	     

	     
	     
	    bool horizontal = 
		(abs(max_child->pos()[_ARGS_] - node->pos()[_ARGS_]) >
		 abs(max_child->pos()[_ARGS_] - node->pos()[_ARGS_]));
	    offset = horizontal ? 
		BoxPoint(0, delta[_ARGS_]) : BoxPoint(delta[_ARGS_], 0);

	    pos = max_child->pos() + offset;
	}
	else
	{
	    GraphEdge *edge = node->firstTo();
	    if(edge)
	    {
		 
		 
		 
		 

		GraphNode *parent = edge->from();

		 

		 
		pos = node->pos() + (node->pos() - parent->pos());

		 
		 
		 
		bool horizontal = 
		    (abs(node->pos()[_ARGS_] - parent->pos()[_ARGS_]) >
		     abs(node->pos()[_ARGS_] - parent->pos()[_ARGS_]));

		offset = horizontal ? BoxPoint(delta[_ARGS_], 0) 
		    : BoxPoint(0, delta[_ARGS_]);
		pos += offset;
	    }
	}
    }

     ;

    return adjust_position(new_node, w, pos, offset, grid);
}

__END_METHOD_CODE__


	METHOD DispGraph!del
		CALLS
		contains : DispNodeMap,
		unalias : DispGraph,
		get : DispNodeMap,
		find_hints_from : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		find_hints_to : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		size : VarArray<GraphNode@*>,
		nodeptr : DispNode,
		del : DispNodeMap,
		length : DispNodeMap,
		call : QueueRec,
		count_all : DispGraph,
		call : QueueRec,
		count_all : DispGraph,
		call : QueueRec



		METRICS
			idMap REFERRED 4 TIMES,
			no_enabled REFERRED 2 TIMES,
			no_disabled REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 6
			AVVARLEN 8
			CALLEDN 16
			CLASS DispGraph
			CLASSID 119
			CYCLO 8
			DOTS 8
			EQTEST 3
			EXPRORCALL 30
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 30
			LT 2
			METHOD del
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:1 ASS:6 AVVARLEN:8 CALLEDN:16 CLASS:DispGraph CLASSID:119 CYCLO:8 DOTS:8 EQTEST:3 EXPRORCALL:30 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:30 LT:2 METHOD:del METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:3 
		;


#ID 17-del

__BEGIN_METHOD_CODE__

DispGraph::del(int disp_nr)
{
    if(idMap.contains(disp_nr))
    {
	unalias(disp_nr);
	DispNode* dn = idMap.get(disp_nr);

	VarArray<GraphNode *> hints;

	find_hints_from(dn->nodeptr(), hints);
	find_hints_to(dn->nodeptr(), hints);
	for(int i = 0; i < hints.size(); i++)
	    *this -= hints[_ARGS_];
	    
	*this -= dn->nodeptr();
	delete dn;
	idMap.del(disp_nr);

	if(idMap.length() == 0)
	    handlers.call(DispGraph_Empty, this, (void*)true);
	if(!no_enabled)
	    if((no_enabled = (count_all(Enabled) == 0)))
		handlers.call(NoEnabled, this, (void*)true);
	if(!no_disabled)
	    if((no_disabled = (count_all(Disabled) == 0)))
		handlers.call(NoDisabled, this, (void*)true);

	return true;
    }
    return false;
}

__END_METHOD_CODE__


	METHOD DispGraph!get_nr
		CALLS
		first_key : DispNodeMap,
		next_key : DispNodeMap,
		get : DispNodeMap,
		nodeptr : DispNode



		METRICS
			idMap REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 5
			CALLEDN 4
			CLASS DispGraph
			CLASSID 119
			CYCLO 3
			DOTS 3
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 0
			METHOD get_nr
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:5 CALLEDN:4 CLASS:DispGraph CLASSID:119 CYCLO:3 DOTS:3 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:0 METHOD:get_nr METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 20-get_nr

__BEGIN_METHOD_CODE__

DispGraph::get_nr(BoxGraphNode *nodeptr)
{
    MapRef ref;
    for(int k = idMap.first_key(ref); k != 0; k = idMap.next_key(ref))
	if(idMap.get(k)->nodeptr() == nodeptr)
	    return k;
    return 0;
}

__END_METHOD_CODE__


	METHOD DispGraph!get_by_name
		CALLS
		matches : _SYSTEM_OR_USER_,
		atoi : _SYSTEM_OR_USER_,
		first_key : DispNodeMap,
		next_key : DispNodeMap,
		get : DispNodeMap,
		name : _SYSTEM_OR_USER_



		METRICS
			idMap REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 5
			CALLEDN 6
			CLASS DispGraph
			CLASSID 119
			CYCLO 4
			DOTS 4
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 0
			METHOD get_by_name
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:5 CALLEDN:6 CLASS:DispGraph CLASSID:119 CYCLO:4 DOTS:4 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:10 LT:0 METHOD:get_by_name METHODID:19 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-get_by_name

__BEGIN_METHOD_CODE__

DispGraph::get_by_name(const string& name)
{
    if(name.matches(rxint))
	return atoi(name);

    MapRef ref;
    for(int k = idMap.first_key(ref); k != 0; k = idMap.next_key(ref))
	if(idMap.get(k)->name() == name)
	    return k;
    return 0;
}

__END_METHOD_CODE__


	METHOD DispGraph!first
		CALLS
		first : DispNodeMap,
		next : DispNodeMap,
		enabled : return,
		enabled : return



		METRICS
			idMap REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 5
			CALLEDN 4
			CLASS DispGraph
			CLASSID 119
			CYCLO 9
			DOTS 2
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 24
			LT 0
			METHOD first
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:5 CALLEDN:4 CLASS:DispGraph CLASSID:119 CYCLO:9 DOTS:2 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:24 LT:0 METHOD:first METHODID:22 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 22-first

__BEGIN_METHOD_CODE__

DispGraph::first(MapRef& ref, Displaying e)
{
    for(DispNode* dn = idMap.first(ref); dn != 0; dn = idMap.next(ref)) {
	switch(e) {
	case Both:
	    return dn;

	case Enabled:
	    if(dn->enabled())
		return dn;
	    break;

	case Disabled:
	    if(!dn->enabled())
		return dn;
	    break;

	default:
	     
	     ;
	    break;
	}
    }
    return 0;
}

__END_METHOD_CODE__


	METHOD DispGraph!next
		CALLS
		next : DispNodeMap,
		next : DispNodeMap,
		enabled : return,
		enabled : return



		METRICS
			idMap REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 5
			CALLEDN 4
			CLASS DispGraph
			CLASSID 119
			CYCLO 9
			DOTS 2
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 24
			LT 0
			METHOD next
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:5 CALLEDN:4 CLASS:DispGraph CLASSID:119 CYCLO:9 DOTS:2 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:24 LT:0 METHOD:next METHODID:23 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 23-next

__BEGIN_METHOD_CODE__

DispGraph::next(MapRef& ref, Displaying e)
{
    for(DispNode* dn = idMap.next(ref); dn != 0; dn = idMap.next(ref)) {
	switch(e) {
	case Both:
	    return dn;

	case Enabled:
	    if(dn->enabled())
		return dn;
	    break;

	case Disabled:
	    if(!dn->enabled())
		return dn;
	    break;

	default:
	     
	     ;
	    break;
	}
    }
    return 0;
}

__END_METHOD_CODE__


	METHOD DispGraph!first_nr
		CALLS
		first_key : DispNodeMap,
		next_key : DispNodeMap,
		get : DispNodeMap,
		enabled : _SYSTEM_OR_USER_,
		get : DispNodeMap,
		enabled : _SYSTEM_OR_USER_



		METRICS
			idMap REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 5
			CALLEDN 6
			CLASS DispGraph
			CLASSID 119
			CYCLO 9
			DOTS 4
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 24
			LT 0
			METHOD first_nr
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:5 CALLEDN:6 CLASS:DispGraph CLASSID:119 CYCLO:9 DOTS:4 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:24 LT:0 METHOD:first_nr METHODID:24 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 24-first_nr

__BEGIN_METHOD_CODE__

DispGraph::first_nr(MapRef& ref, Displaying e)
{
    for(int k = idMap.first_key(ref); k != 0; k = idMap.next_key(ref)) {
	switch(e) {
	case Both:
	    return k;

	case Enabled:
	    if(idMap.get(k)->enabled())
		return k;
	    break;

	case Disabled:
	    if(!idMap.get(k)->enabled())
		return k;
	    break;

	default:
	     
	     ;
	    break;
	}
    }
    return 0;
}

__END_METHOD_CODE__


	METHOD DispGraph!next_nr
		CALLS
		next_key : DispNodeMap,
		next_key : DispNodeMap,
		get : DispNodeMap,
		enabled : _SYSTEM_OR_USER_,
		get : DispNodeMap,
		enabled : _SYSTEM_OR_USER_



		METRICS
			idMap REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 5
			CALLEDN 6
			CLASS DispGraph
			CLASSID 119
			CYCLO 9
			DOTS 4
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 24
			LT 0
			METHOD next_nr
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:5 CALLEDN:6 CLASS:DispGraph CLASSID:119 CYCLO:9 DOTS:4 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:24 LT:0 METHOD:next_nr METHODID:25 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 25-next_nr

__BEGIN_METHOD_CODE__

DispGraph::next_nr(MapRef& ref, Displaying e)
{
    for(int k = idMap.next_key(ref); k != 0; k = idMap.next_key(ref)) {
	switch(e) {
	case Both:
	    return k;

	case Enabled:
	    if(idMap.get(k)->enabled())
		return k;
	    break;

	case Disabled:
	    if(!idMap.get(k)->enabled())
		return k;
	    break;

	default:
	     
	     ;
	    break;
	}
    }
    return 0;
}

__END_METHOD_CODE__


	METHOD DispGraph!disp_node_disabledHP
		CALLS
		bool : _SYSTEM_OR_USER_,
		call : _SYSTEM_OR_USER_,
		count_all : DispGraph,
		call : _SYSTEM_OR_USER_,
		call : _SYSTEM_OR_USER_,
		count_all : DispGraph,
		call : _SYSTEM_OR_USER_



		METRICS
			no_enabled REFERRED 3 TIMES,
			no_disabled REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 10
			CALLEDN 7
			CLASS DispGraph
			CLASSID 119
			CYCLO 6
			DOTS 4
			EQTEST 2
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 12
			LE 0
			LOC 21
			LT 0
			METHOD disp_node_disabledHP
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:10 CALLEDN:7 CLASS:DispGraph CLASSID:119 CYCLO:6 DOTS:4 EQTEST:2 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:12 LE:0 LOC:21 LT:0 METHOD:disp_node_disabledHP METHODID:29 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:2 
		;


#ID 29-disp_node_disabledHP

__BEGIN_METHOD_CODE__

DispGraph::disp_node_disabledHP(void*,
				      void* client_data,
				      void* call_data)
{
    DispGraph* disp_graph = (DispGraph*) client_data;
    bool    disabled   = bool(call_data);

    if(disabled) {
	if(disp_graph->no_disabled) {
	    disp_graph->no_disabled = false;
	    disp_graph->handlers.call(NoDisabled, disp_graph, (void*)false);
	}
	if(disp_graph->no_enabled = (disp_graph->count_all(Enabled) == 0))
	    disp_graph->handlers.call(NoEnabled, disp_graph, (void*)true);
    }
    else {
	if(disp_graph->no_enabled) {
	    disp_graph->no_enabled = false;
	    disp_graph->handlers.call(NoEnabled, disp_graph, (void*)false);
	}
	if(disp_graph->no_disabled = (disp_graph->count_all(Disabled) == 0))
	    disp_graph->handlers.call(NoDisabled, disp_graph, (void*)true);
    }
}

__END_METHOD_CODE__


	METHOD DispGraph!alias
		CALLS
		get : DispGraph,
		get : DispGraph,
		active : DispNode,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		unalias : DispGraph,
		hidden : _SYSTEM_OR_USER_,
		firstFrom : GraphNode,
		nextFrom : GraphNode,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		to : GraphEdge,
		hidden : _SYSTEM_OR_USER_,
		to : GraphEdge,
		firstFrom : GraphNode,
		to : GraphEdge,
		firstTo : GraphNode,
		nextTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		isHint : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		from : _SYSTEM_OR_USER_,
		size : VarArray<GraphNode@*>,
		add_alias_edge : DispGraph,
		nodeptr : DispNode,
		size : VarArray<GraphNode@*>,
		add_alias_edge : DispGraph,
		nodeptr : DispNode,
		firstNode : Graph,
		nextNode : Graph,
		isHint : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		disp_nr : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 2
			ASS 26
			AVVARLEN 0
			CALLEDN 39
			CLASS DispGraph
			CLASSID 119
			CYCLO 15
			DOTS 2
			EQTEST 5
			EXPRORCALL 54
			GE 0
			GT 3
			IN 0
			INDR 32
			LE 0
			LOC 74
			LT 5
			METHOD alias
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 2
			RETPOINT 4
			SCOPEOP 0
			STMNT 38
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:26 AVVARLEN:0 CALLEDN:39 CLASS:DispGraph CLASSID:119 CYCLO:15 DOTS:2 EQTEST:5 EXPRORCALL:54 GE:0 GT:3 IN:0 INDR:32 LE:0 LOC:74 LT:5 METHOD:alias METHODID:12 MMINUS:0 OUT:0 PARNUM:3 PPLUS:2 RETPOINT:4 SCOPEOP:0 STMNT:38 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-alias

__BEGIN_METHOD_CODE__

DispGraph::alias(Widget w, int disp_nr, int alias_disp_nr)
{
    DispNode *d0 = get(disp_nr);
    DispNode *dn = get(alias_disp_nr);

    if(d0 == 0 || dn == 0)
	return false;

    if(!dn->active())
    {
	 
	return false;
    }

    GraphNode *node = dn->nodeptr();

    if(node->hidden() && dn->alias_of == disp_nr)
    {
	 
	return false;
    }

    if(node->hidden())
	unalias(alias_disp_nr);

     
    node->hidden() = true;
    dn->alias_of   = disp_nr;

     
    GraphEdge *edge;
    VarArray<GraphNode *> from_nodes;
    VarArray<GraphNode *> to_nodes;
    int i;

    for(edge = node->firstFrom(); edge != 0; edge = node->nextFrom(edge))
    {
	GraphEdge *e = edge;
	while(e->to()->isHint())
	{
	    e->to()->hidden() = true;
	    e = e->to()->firstFrom();
	}
	to_nodes += e->to();
    }
    for(edge = node->firstTo(); edge != 0; edge = node->nextTo(edge))
    {
	GraphEdge *e = edge;
	while(e->from()->isHint())
	{
	    e->from()->hidden() = true;
	    e = e->from()->firstTo();
	}
	from_nodes += e->from();
    }

    for(i = 0; i < to_nodes.size(); i++)
	add_alias_edge(w, alias_disp_nr, d0->nodeptr(), to_nodes[_ARGS_]);
    for(i = 0; i < from_nodes.size(); i++)
	add_alias_edge(w, alias_disp_nr, from_nodes[_ARGS_], d0->nodeptr());

     
    for(node = firstNode(); node != 0; node = nextNode(node))
    {
	if(!node->isHint())
	    continue;
	AliasGraphEdge *edge = dynamic_cast< AliasGraphEdge  *>(  node->firstTo() ) ;
	if(edge == 0)
	    continue;
	if(edge->disp_nr() == alias_disp_nr)
	    node->selected() = dn->selected();
    }

    return true;
}

__END_METHOD_CODE__


	METHOD DispGraph!unalias
		CALLS
		get : DispGraph,
		active : DispNode,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		firstEdge : Graph,
		nextEdge : Graph,
		disp_nr : _SYSTEM_OR_USER_,
		size : VoidArray,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		to : GraphEdge,
		to : GraphEdge,
		firstFrom : GraphNode,
		nextFrom : GraphNode,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		to : GraphEdge,
		hidden : _SYSTEM_OR_USER_,
		to : GraphEdge,
		firstFrom : GraphNode,
		firstTo : GraphNode,
		nextTo : GraphNode,
		from : delete,
		isHint : _SYSTEM_OR_USER_,
		from : delete,
		hidden : _SYSTEM_OR_USER_,
		from : delete,
		firstTo : GraphNode



		METRICS
			ARRAYOP 1
			ASS 26
			AVVARLEN 0
			CALLEDN 29
			CLASS DispGraph
			CLASSID 119
			CYCLO 11
			DOTS 1
			EQTEST 2
			EXPRORCALL 42
			GE 0
			GT 1
			IN 0
			INDR 26
			LE 0
			LOC 59
			LT 2
			METHOD unalias
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 30
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:26 AVVARLEN:0 CALLEDN:29 CLASS:DispGraph CLASSID:119 CYCLO:11 DOTS:1 EQTEST:2 EXPRORCALL:42 GE:0 GT:1 IN:0 INDR:26 LE:0 LOC:59 LT:2 METHOD:unalias METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:30 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-unalias

__BEGIN_METHOD_CODE__

DispGraph::unalias(int alias_disp_nr)
{
    DispNode *dn = get(alias_disp_nr);
    if(dn == 0 || !dn->active())
	return false;

    GraphNode *node = dn->nodeptr();
    if(!node->hidden())
	return false;

     
    node->hidden() = false;

     
    VoidArray kill_edges;
    GraphEdge *edge;
    for(edge = firstEdge(); edge != 0; edge = nextEdge(edge))
    {
	AliasGraphEdge *e = dynamic_cast< AliasGraphEdge  *>(  edge ) ;
	if(e != 0 && e->disp_nr() == alias_disp_nr)
	    kill_edges += (void *)e;
    }
    for(int i = 0; i < kill_edges.size(); i++)
    {
	AliasGraphEdge *e = (AliasGraphEdge *)kill_edges[_ARGS_];
	if(e->to()->isHint())
	{
	    *this -= e->to();	 
	    delete e->to();
	}
	else
	{
	    *this -= e;
	}
	delete e;
    }

     
    for(edge = node->firstFrom(); edge != 0; edge = node->nextFrom(edge))
    {
	GraphEdge *e = edge;
	while(e->to()->isHint())
	{
	    e->to()->hidden() = false;
	    e = e->to()->firstFrom();
	}
    }
    for(edge = node->firstTo(); edge != 0; edge = node->nextTo(edge))
    {
	GraphEdge *e = edge;
	while(e->from()->isHint())
	{
	    e->from()->hidden() = false;
	    e = e->from()->firstTo();
	}
    }

    dn->alias_of = 0;
    return true;
}

__END_METHOD_CODE__


	METHOD DispGraph!same_angle
		CALLS
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		fabs : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 8
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS DispGraph
			CLASSID 119
			CYCLO 2
			DOTS 1
			EQTEST 2
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 1
			METHOD same_angle
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:8 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:DispGraph CLASSID:119 CYCLO:2 DOTS:1 EQTEST:2 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:1 METHOD:same_angle METHODID:30 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-same_angle

__BEGIN_METHOD_CODE__

DispGraph::same_angle(const BoxPoint& r,
			   const BoxPoint& p1,
			   const BoxPoint& p2)
{
    if(p1 == r || p2 == r)
	return false;		 

    double angle1 = atan2(double(r[_ARGS_] - p1[_ARGS_]), double(r[_ARGS_] - p1[_ARGS_]));
    double angle2 = atan2(double(r[_ARGS_] - p2[_ARGS_]), double(r[_ARGS_] - p2[_ARGS_]));

    const double epsilon = 0.1;
    return fabs(angle1 - angle2) < epsilon;
}

__END_METHOD_CODE__


	METHOD DispGraph!has_angle
		CALLS
		firstFrom : GraphNode,
		nextFrom : GraphNode,
		same_angle : DispGraph,
		pos : _SYSTEM_OR_USER_,
		to : GraphEdge,
		pos : _SYSTEM_OR_USER_,
		firstTo : GraphNode,
		nextTo : GraphNode,
		same_angle : DispGraph,
		pos : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 12
			CLASS DispGraph
			CLASSID 119
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 15
			LT 0
			METHOD has_angle
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:12 CLASS:DispGraph CLASSID:119 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:15 LT:0 METHOD:has_angle METHODID:31 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-has_angle

__BEGIN_METHOD_CODE__

DispGraph::has_angle(PosGraphNode *node, const BoxPoint& p)
{
    GraphEdge *edge;
    for(edge = node->firstFrom(); edge != 0; edge = node->nextFrom(edge))
    {
	if(same_angle(node->pos(), edge->to()->pos(), p))
	    return true;
    }
    for(edge = node->firstTo(); edge != 0; edge = node->nextTo(edge))
    {
	if(same_angle(node->pos(), edge->from()->pos(), p))
	    return true;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DispGraph!add_alias_edge
		CALLS
		add_direct_alias_edge : DispGraph,
		add_routed_alias_edge : DispGraph



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS DispGraph
			CLASSID 119
			CYCLO 2
			DOTS 0
			EQTEST 3
			EXPRORCALL 6
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 2
			METHOD add_alias_edge
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:DispGraph CLASSID:119 CYCLO:2 DOTS:0 EQTEST:3 EXPRORCALL:6 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:16 LT:2 METHOD:add_alias_edge METHODID:28 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-add_alias_edge

__BEGIN_METHOD_CODE__

DispGraph::add_alias_edge(Widget w, int alias_disp_nr, 
			       GraphNode *_from, GraphNode *_to)
{
    PosGraphNode *from = dynamic_cast< PosGraphNode  *>(  _from ) ;
    PosGraphNode *to   = dynamic_cast< PosGraphNode  *>(  _to ) ;

     
    if(from == to || (from == 0 || to == 0))
    {
	 
	add_direct_alias_edge(w, alias_disp_nr, _from, _to);
    }
    else
    {
	 
	add_routed_alias_edge(w, alias_disp_nr, from, to);
    }
}

__END_METHOD_CODE__


	METHOD DispGraph!add_direct_alias_edge
		CALLS
		AliasGraphEdge : AliasGraphEdge



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD add_direct_alias_edge
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:add_direct_alias_edge METHODID:32 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-add_direct_alias_edge

__BEGIN_METHOD_CODE__

DispGraph::add_direct_alias_edge(Widget, int alias_disp_nr, 
				      GraphNode *from, GraphNode *to)
{
    *this += new AliasGraphEdge(alias_disp_nr, from, to);
}

__END_METHOD_CODE__


	METHOD DispGraph!is_hidden
		CALLS
		graphEditGetGraphGC : _SYSTEM_OR_USER_,
		firstVisibleNode : Graph,
		nextVisibleNode : Graph,
		pos : _SYSTEM_OR_USER_,
		sensitiveRegion : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 5
			CLASS DispGraph
			CLASSID 119
			CYCLO 4
			DOTS 0
			EQTEST 2
			EXPRORCALL 9
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 1
			LOC 15
			LT 2
			METHOD is_hidden
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:5 CLASS:DispGraph CLASSID:119 CYCLO:4 DOTS:0 EQTEST:2 EXPRORCALL:9 GE:0 GT:1 IN:0 INDR:2 LE:1 LOC:15 LT:2 METHOD:is_hidden METHODID:34 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-is_hidden

__BEGIN_METHOD_CODE__

DispGraph::is_hidden(Widget w, const BoxPoint& p)
{
    const GraphGC& graphGC = graphEditGetGraphGC(w);

    for(GraphNode *n = firstVisibleNode(); n != 0; n = nextVisibleNode(n))
    {
	RegionGraphNode *node = dynamic_cast< RegionGraphNode  *>(  n ) ;
	if(node == 0)
	    continue;

	if(p == node->pos() || p <= node->sensitiveRegion(graphGC))
	    return true;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DispGraph!rotate_offset
		CALLS
		BoxPoint : BoxPoint,
		hypot : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxCoordinate : _SYSTEM_OR_USER_,
		cos : _SYSTEM_OR_USER_,
		BoxCoordinate : _SYSTEM_OR_USER_,
		sin : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 4
			ASS 3
			AVVARLEN 0
			CALLEDN 10
			CLASS DispGraph
			CLASSID 119
			CYCLO 2
			DOTS 3
			EQTEST 1
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD rotate_offset
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:3 AVVARLEN:0 CALLEDN:10 CLASS:DispGraph CLASSID:119 CYCLO:2 DOTS:3 EQTEST:1 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:rotate_offset METHODID:35 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-rotate_offset

__BEGIN_METHOD_CODE__

DispGraph::rotate_offset(const BoxPoint& p, int angle)
{
    if(p == BoxPoint(0, 0))
	return p;

    double length = hypot(p[_ARGS_], p[_ARGS_]);
    double alpha  = atan2(double(p[_ARGS_]), double(p[_ARGS_]));

    alpha += (2.0 * 3.14159265358979323846   * angle / 360.0);

    return BoxPoint(BoxCoordinate(length * cos(alpha)), 
		    BoxCoordinate(length * sin(alpha)));
}

__END_METHOD_CODE__


	METHOD DispGraph!hint_positions_ok
		CALLS
		graphEditFinalPosition : _SYSTEM_OR_USER_,
		graphEditFinalPosition : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		has_angle : DispGraph,
		pos : _SYSTEM_OR_USER_,
		has_angle : DispGraph,
		pos : _SYSTEM_OR_USER_,
		has_angle : DispGraph,
		has_angle : DispGraph,
		is_hidden : DispGraph,
		is_hidden : DispGraph,
		graphEditFinalPosition : _SYSTEM_OR_USER_,
		is_hidden : DispGraph



		METRICS
			ARRAYOP 6
			ASS 8
			AVVARLEN 0
			CALLEDN 14
			CLASS DispGraph
			CLASSID 119
			CYCLO 11
			DOTS 0
			EQTEST 2
			EXPRORCALL 24
			GE 0
			GT 2
			IN 0
			INDR 4
			LE 4
			LOC 38
			LT 4
			METHOD hint_positions_ok
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 9
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:8 AVVARLEN:0 CALLEDN:14 CLASS:DispGraph CLASSID:119 CYCLO:11 DOTS:0 EQTEST:2 EXPRORCALL:24 GE:0 GT:2 IN:0 INDR:4 LE:4 LOC:38 LT:4 METHOD:hint_positions_ok METHODID:36 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:9 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-hint_positions_ok

__BEGIN_METHOD_CODE__

DispGraph::hint_positions_ok(Widget w,
				  PosGraphNode *from,
				  PosGraphNode *to,
				  const BoxPoint& pos1,
				  const BoxPoint& pos2)
{
    BoxPoint p1 = graphEditFinalPosition(w, pos1);
    BoxPoint p2 = graphEditFinalPosition(w, pos2);

    if(p1[_ARGS_] <= 0 || p2[_ARGS_] <= 0 || p1[_ARGS_] <= 0 || p2[_ARGS_] <= 0)
	return false;		 
	
    if(p1 == from->pos() && p2 == to->pos())
    {
	 
	if(has_angle(from, to->pos()))
	    return false;	 
	if(has_angle(to, from->pos()))
	    return false;	 
    }
    else
    {
	 
	if(has_angle(from, p1))
	    return false;	 
	if(has_angle(to, p2))
	    return false;	 
	if(is_hidden(w, p1))
	    return false;	 
	if(is_hidden(w, p2))
	    return false;	 
    }

    BoxPoint dist = p2 - p1;
    if(dist[_ARGS_] > 0 || dist[_ARGS_] > 0)
    {
	BoxPoint center = graphEditFinalPosition(w, p1 + dist / 2);
	if(is_hidden(w, center))	 
	    return false;
    }

    return true;
}

__END_METHOD_CODE__


	METHOD DispGraph!add_routed_alias_edge
		CALLS
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		atan2 : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		grid_offset : _SYSTEM_OR_USER_,
		BoxCoordinate : _SYSTEM_OR_USER_,
		cos : _SYSTEM_OR_USER_,
		BoxCoordinate : _SYSTEM_OR_USER_,
		sin : _SYSTEM_OR_USER_,
		rotate_offset : DispGraph,
		rotate_offset : DispGraph,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		hint_positions_ok : DispGraph,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		pos : _SYSTEM_OR_USER_,
		add_direct_alias_edge : DispGraph,
		HintGraphNode : HintGraphNode,
		hidden : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		AliasGraphEdge : AliasGraphEdge,
		AliasGraphEdge : AliasGraphEdge



		METRICS
			ARRAYOP 6
			ASS 28
			AVVARLEN 0
			CALLEDN 27
			CLASS DispGraph
			CLASSID 119
			CYCLO 6
			DOTS 0
			EQTEST 3
			EXPRORCALL 33
			GE 0
			GT 0
			IN 0
			INDR 12
			LE 1
			LOC 90
			LT 8
			METHOD add_routed_alias_edge
			METHODID 33
			MMINUS 0
			OUT 3
			PARNUM 4
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 35
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:28 AVVARLEN:0 CALLEDN:27 CLASS:DispGraph CLASSID:119 CYCLO:6 DOTS:0 EQTEST:3 EXPRORCALL:33 GE:0 GT:0 IN:0 INDR:12 LE:1 LOC:90 LT:8 METHOD:add_routed_alias_edge METHODID:33 MMINUS:0 OUT:3 PARNUM:4 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:35 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-add_routed_alias_edge

__BEGIN_METHOD_CODE__

DispGraph::add_routed_alias_edge(Widget w, int alias_disp_nr, 
				      PosGraphNode *from, PosGraphNode *to)
{
     
    Dimension grid_height = 16;
    Dimension grid_width  = 16;
    XtVaGetValues(w,
		  _REMOVED_STR_ , &grid_height,
		  _REMOVED_STR_ ,  &grid_width,
		  __null );

    BoxPoint dist   = to->pos() - from->pos();
    BoxPoint center = from->pos() + dist / 2;
    double angle    = atan2(double(dist[_ARGS_]), double(dist[_ARGS_]));
    BoxPoint grid_offset(BoxCoordinate(grid_width  * cos(angle)),
			 BoxCoordinate(grid_height * sin(angle)));

    const int LEFT  = 1;
    const int RIGHT = 0;

    BoxPoint offsets[_ARGS_];
    offsets[_ARGS_]  = rotate_offset(grid_offset, +90);
    offsets[_ARGS_] = rotate_offset(grid_offset, -90);






     
    BoxPoint pos1, pos2;
    bool found = false;

    const bool try_direct = false;

    const int max_iterations = 100;
    for(int i = 0; i < max_iterations && !found; i++)
    {
	for(int side = RIGHT; !found && side <= LEFT; side++)
	{
	    BoxPoint offset = offsets[_ARGS_] * i;

	    if(try_direct && i == 0)
	    {
		 
		pos1 = from->pos() + offset;
		pos2 = to->pos()   + offset;
	    }		
	    else
	    {
		 
		pos1 = pos2 = center + offset;
	    }







	    found = hint_positions_ok(w, from, to, pos1, pos2);
	}
    }

    if(!found)
    {
	 
	cerr << _REMOVED_STR_ 
	     << max_iterations << _REMOVED_STR_;
	pos1 = from->pos();
	pos2 = to->pos();
    }

    if(try_direct && pos1 == from->pos() && pos2 == to->pos())
    {
	 
	add_direct_alias_edge(w, alias_disp_nr, from, to);
    }
    else
    {
	 ;

	 
	HintGraphNode *hint = new HintGraphNode(pos1);
	hint->hidden() = from->hidden() || to->hidden();
	*this += hint;

	 
	*this += new AliasGraphEdge(alias_disp_nr, from, hint);
	*this += new AliasGraphEdge(alias_disp_nr, hint, to);
    }
}

__END_METHOD_CODE__


	METHOD DispGraph!make_inactive
		CALLS
		get : DispGraph,
		active : DispNode,
		enabled : _SYSTEM_OR_USER_,
		disable : DispNode,
		make_inactive : _SYSTEM_OR_USER_,
		firstEdge : Graph,
		nextEdge : Graph,
		disp_nr : _SYSTEM_OR_USER_,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		to : GraphEdge,
		hidden : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_



		METRICS
			hide_inactive_displays REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 8
			AVVARLEN 22
			CALLEDN 13
			CLASS DispGraph
			CLASSID 119
			CYCLO 7
			DOTS 0
			EQTEST 2
			EXPRORCALL 20
			GE 0
			GT 1
			IN 0
			INDR 10
			LE 0
			LOC 34
			LT 1
			METHOD make_inactive
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:22 CALLEDN:13 CLASS:DispGraph CLASSID:119 CYCLO:7 DOTS:0 EQTEST:2 EXPRORCALL:20 GE:0 GT:1 IN:0 INDR:10 LE:0 LOC:34 LT:1 METHOD:make_inactive METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-make_inactive

__BEGIN_METHOD_CODE__

DispGraph::make_inactive(int disp_nr)
{
    DispNode *dn = get(disp_nr);
    if(dn == 0)
	return false;

    if(dn->active() && dn->enabled())
    {
	if(!hide_inactive_displays)
	{
	    dn->disable();
	}
	else
	{
	    dn->make_inactive();

	     
	    VoidArray hide_edges;
	    GraphEdge *edge;
	    for(edge = firstEdge(); edge != 0; edge = nextEdge(edge))
	    {
		AliasGraphEdge *e = dynamic_cast< AliasGraphEdge  *>(  edge ) ;
		if(e != 0 && e->disp_nr() == disp_nr)
		{
		    if(e->to()->isHint())
			e->to()->hidden() = true;
		    e->hidden() = true;
		}
	    }
	}
	return true;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DispGraph!make_active
		CALLS
		get : DispGraph,
		active : DispNode,
		make_active : _SYSTEM_OR_USER_,
		nodeptr : DispNode,
		hidden : _SYSTEM_OR_USER_,
		firstEdge : Graph,
		nextEdge : Graph,
		disp_nr : _SYSTEM_OR_USER_,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		to : GraphEdge,
		hidden : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 13
			CLASS DispGraph
			CLASSID 119
			CYCLO 7
			DOTS 0
			EQTEST 2
			EXPRORCALL 20
			GE 0
			GT 1
			IN 0
			INDR 10
			LE 0
			LOC 31
			LT 1
			METHOD make_active
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:13 CLASS:DispGraph CLASSID:119 CYCLO:7 DOTS:0 EQTEST:2 EXPRORCALL:20 GE:0 GT:1 IN:0 INDR:10 LE:0 LOC:31 LT:1 METHOD:make_active METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-make_active

__BEGIN_METHOD_CODE__

DispGraph::make_active(int disp_nr)
{
    DispNode *dn = get(disp_nr);
    if(dn == 0)
	return false;

    if(!dn->active())
    {
	dn->make_active();

	if(dn->nodeptr()->hidden())
	{
	     
	    VoidArray hide_edges;
	    GraphEdge *edge;
	    for(edge = firstEdge(); edge != 0; edge = nextEdge(edge))
	    {
		AliasGraphEdge *e = dynamic_cast< AliasGraphEdge  *>(  edge ) ;
		if(e != 0 && e->disp_nr() == disp_nr)
		{
		    if(e->to()->isHint())
			e->to()->hidden() = false;
		    e->hidden() = false;
		}
	    }
	}

	return true;
    }

    return false;
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/DispGraph.o.nu.met	  Methods Number  30
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/DispNodeM.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/DispValue.o.nu.met ... 


	METHOD DispValue!index_base
		CALLS
		program_language : GDBAgent,
		default_index_base : GDBAgent,
		contains : string,
		has : StringStringAssoc,
		gdb_question : _SYSTEM_OR_USER_,
		whatis_command : GDBAgent,
		length : string,
		index : string,
		length : string,
		default_index_base : GDBAgent,
		atoi : _SYSTEM_OR_USER_



		METRICS
			type_cache REFERRED 3 TIMES,
			ARRAYOP 4
			ASS 10
			AVVARLEN 10
			CALLEDN 11
			CLASS DispValue
			CLASSID 108
			CYCLO 7
			DOTS 6
			EQTEST 0
			EXPRORCALL 26
			GE 3
			GT 3
			IN 0
			INDR 4
			LE 0
			LOC 25
			LT 1
			METHOD index_base
			METHODID 3
			MMINUS 2
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:10 AVVARLEN:10 CALLEDN:11 CLASS:DispValue CLASSID:108 CYCLO:7 DOTS:6 EQTEST:0 EXPRORCALL:26 GE:3 GT:3 IN:0 INDR:4 LE:0 LOC:25 LT:1 METHOD:index_base METHODID:3 MMINUS:2 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-index_base

__BEGIN_METHOD_CODE__

DispValue::index_base(const string& expr, int dim)
{
    if(gdb->program_language() != LANGUAGE_FORTRAN)
	return gdb->default_index_base();

    string base = expr;
    if(base.contains('('))
	base = base.before('(');
    if(!type_cache.has(base))
	type_cache[_ARGS_] = gdb_question(gdb->whatis_command(base));
    string type = type_cache[_ARGS_];

     
     
     
    int colon = type.length();
    while(colon >= 0 && dim-- >= 0)
	colon = type.index(':', colon - type.length() - 1);
    if(colon < 0)
	return  gdb->default_index_base();  

    while(colon >= 0 && (__ctype_b[(int) ( ( type[_ARGS_] ) )] & (unsigned short int)   _ISdigit )  )
	colon--;

    return atoi((char *)type + colon);
}

__END_METHOD_CODE__


	METHOD DispValue!add_member_name
		CALLS
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS DispValue
			CLASSID 108
			CYCLO 2
			DOTS 5
			EQTEST 1
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 12
			LT 0
			METHOD add_member_name
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:DispValue CLASSID:108 CYCLO:2 DOTS:5 EQTEST:1 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:12 LT:0 METHOD:add_member_name METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-add_member_name

__BEGIN_METHOD_CODE__

DispValue::add_member_name(const string& base, 
				  const string& member_name)
{
    if(gdb->program_language() == LANGUAGE_FORTRAN && 
	member_name.contains('(', 0) &&	base.contains('('))
    {
	return base.before('(') + member_name.before(')') + _REMOVED_STR_ + 
	    base.after('(');
    }
    else
    {
	return base + member_name;
    }
}

__END_METHOD_CODE__


	METHOD DispValue!clear_type_cache

		METRICS
			type_cache REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 10
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD clear_type_cache
			METHODID 47
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:10 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:clear_type_cache METHODID:47 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 47-clear_type_cache

__BEGIN_METHOD_CODE__

DispValue::clear_type_cache()
{
    static StringStringAssoc empty;
    type_cache = empty;
}

__END_METHOD_CODE__


	METHOD DispValue!DispValue
		CALLS
		init : DispValue



		METRICS
			changed REFERRED 1 TIMES,
			v REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 4
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD DispValue
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 6
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:4 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:DispValue METHODID:7 MMINUS:0 OUT:0 PARNUM:6 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 7-DispValue

__BEGIN_METHOD_CODE__

DispValue::DispValue(DispValue* p, 
		      int d,
		      string& value,
		      const string& f_n, 
		      const string& p_n,
		      DispValueType given_type)
{
    v.simple = 0;
    init(value, given_type);

     
    changed = false;
}

__END_METHOD_CODE__


	METHOD DispValue!DispValue
		CALLS
		dup : DispValue,
		dup : DispValue



		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 22 TIMES,
			ARRAYOP 4
			ASS 15
			AVVARLEN 3
			CALLEDN 2
			CLASS DispValue
			CLASSID 108
			CYCLO 13
			DOTS 29
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 19
			LE 0
			LOC 48
			LT 2
			METHOD DispValue
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 22
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:15 AVVARLEN:3 CALLEDN:2 CLASS:DispValue CLASSID:108 CYCLO:13 DOTS:29 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:19 LE:0 LOC:48 LT:2 METHOD:DispValue METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:22 TERNINSTR:0 USEDVARS:2 
		;


#ID 8-DispValue

__BEGIN_METHOD_CODE__

DispValue::DispValue(const DispValue& dv)
{
    switch(mytype)
    {
    case UnknownType:
    {
	v.simple = 0;
	break;
    }

    case Simple:
    case Text:
    {
	v.simple = new SimpleDispValue;
	v.simple->value = dv.v.simple->value;
	break;
    }

    case Pointer:
    {
	v.pointer = new PointerDispValue;
	v.pointer->value = dv.v.pointer->value;
	v.pointer->dereferenced = false;
	break;
    }

    case Array:
    {
	v.array = new ArrayDispValue;
	v.array->member_count = dv.v.array->member_count;
	for(int i = 0; i < v.array->member_count; i++)
	    v.array->members[_ARGS_] = dv.v.array->members[_ARGS_]->dup();
	v.array->align = dv.v.array->align;
	break;
    }

    case StructOrClass:
    case BaseClass:
    case Reference:
    case List:
    {
	v.str_or_cl = new StructOrClassDispValue;
	v.str_or_cl->member_count = dv.v.str_or_cl->member_count;
	for(int i = 0; i < v.str_or_cl->member_count; i++)
	    v.str_or_cl->members[_ARGS_] = dv.v.str_or_cl->members[_ARGS_]->dup();
	break;
    }
    }
}

__END_METHOD_CODE__


	METHOD DispValue!dup
		CALLS
		DispValue : DispValue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-dup

__BEGIN_METHOD_CODE__

DispValue::dup()
{ return new DispValue(*this); }

__END_METHOD_CODE__


	METHOD DispValue!init
		CALLS
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		clear : DispValue,
		is_user_command : DispNode,
		is_BaseClass_name : _SYSTEM_OR_USER_,
		determine_type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		read_simple_value : _SYSTEM_OR_USER_,
		depth : DispValue,
		read_pointer_value : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		matches : string,
		read_array_begin : _SYSTEM_OR_USER_,
		read_vtable_entries : _SYSTEM_OR_USER_,
		DispValue : DispValue,
		depth : DispValue,
		index_base : DispValue,
		depth : DispValue,
		index_expr : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		DispValue : DispValue,
		depth : DispValue,
		add_member_name : DispValue,
		type : _SYSTEM_OR_USER_,
		read_repeats : _SYSTEM_OR_USER_,
		index_expr : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		DispValue : DispValue,
		depth : DispValue,
		add_member_name : DispValue,
		repeats : DispValue,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		init : DispValue,
		read_array_next : _SYSTEM_OR_USER_,
		read_array_end : _SYSTEM_OR_USER_,
		depth : DispValue,
		munch_dump_line : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		del : string,
		matches : _SYSTEM_OR_USER_,
		prepend : string,
		prepend : string,
		read_str_or_cl_begin : _SYSTEM_OR_USER_,
		read_member_name : _SYSTEM_OR_USER_,
		is_BaseClass_name : _SYSTEM_OR_USER_,
		DispValue : DispValue,
		depth : DispValue,
		read_str_or_cl_next : _SYSTEM_OR_USER_,
		read_members_of_xy : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		has_quotes : GDBAgent,
		quote : _SYSTEM_OR_USER_,
		DispValue : DispValue,
		depth : DispValue,
		read_str_or_cl_next : _SYSTEM_OR_USER_,
		read_member_name : _SYSTEM_OR_USER_,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		init : DispValue,
		DispValue : DispValue,
		depth : DispValue,
		read_str_or_cl_end : _SYSTEM_OR_USER_,
		depth : DispValue,
		index : string,
		index : string,
		after : string,
		DispValue : DispValue,
		depth : DispValue,
		address_expr : GDBAgent,
		DispValue : DispValue,
		depth : DispValue,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		init : DispValue,
		abort : _SYSTEM_OR_USER_,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 13 TIMES,
			myexpanded REFERRED 4 TIMES,
			changed REFERRED 1 TIMES,
			v REFERRED 33 TIMES,
			expand_repeated_values REFERRED 1 TIMES,
			ARRAYOP 8
			ASS 78
			AVVARLEN 9
			CALLEDN 80
			CLASS DispValue
			CLASSID 108
			CYCLO 36
			DOTS 52
			EQTEST 12
			EXPRORCALL 110
			GE 0
			GT 2
			IN 0
			INDR 34
			LE 2
			LOC 335
			LT 2
			METHOD init
			METHODID 0
			MMINUS 2
			OUT 0
			PARNUM 2
			PPLUS 4
			RETPOINT 0
			SCOPEOP 0
			STMNT 102
			TERNINSTR 0
			USEDVARS 5

#METRICS ARRAYOP:8 ASS:78 AVVARLEN:9 CALLEDN:80 CLASS:DispValue CLASSID:108 CYCLO:36 DOTS:52 EQTEST:12 EXPRORCALL:110 GE:0 GT:2 IN:0 INDR:34 LE:2 LOC:335 LT:2 METHOD:init METHODID:0 MMINUS:2 OUT:0 PARNUM:2 PPLUS:4 RETPOINT:0 SCOPEOP:0 STMNT:102 TERNINSTR:0 USEDVARS:5 
		;


#ID 0-init

__BEGIN_METHOD_CODE__

DispValue::init(string& value, DispValueType given_type)
{




    if(background(value.length()))
    {
	clear();

	mytype          = Simple;
	v.simple        = new SimpleDispValue;
	v.simple->value = _REMOVED_STR_;
	return;
    }

    mytype = given_type;
    if(mytype == UnknownType && print_name == _REMOVED_STR_)
	mytype = Text;
    if(mytype == UnknownType && is_user_command(print_name))
	mytype = List;
    if(mytype == UnknownType && is_BaseClass_name(print_name))
	mytype = BaseClass;
    if(mytype == UnknownType)
	mytype = determine_type(value);

    bool ignore_repeats = (myparent != 0 && myparent->type() == Array);

    switch(mytype) {
    case Simple:
	{
	    v.simple = new SimpleDispValue;
	    v.simple->value = 
		read_simple_value(value, depth(), ignore_repeats);



	    break;
	}

    case Text:
	{
	    v.simple = new SimpleDispValue;
	    v.simple->value = value;



	    break;
	}

    case Pointer:
	{
	    v.pointer = new PointerDispValue;
	    v.pointer->value = read_pointer_value(value, ignore_repeats);
	    v.pointer->dereferenced = false;




	     
	    if(v.pointer->value.contains(_REMOVED_STR_)
		|| v.pointer->value.contains(_REMOVED_STR_))
		myexpanded = false;
	    break;
	}

    case Array:
	{




	    string base = myfull_name;
	    if(!base.matches(rxsimple))
		base = _REMOVED_STR_ + base + _REMOVED_STR_;

	    v.array = new ArrayDispValue;
	    v.array->align = Vertical;
	    v.array->member_count = 0;





	    read_array_begin(value, myaddr);

	     
	    string vtable_entries = read_vtable_entries(value);
	    if(vtable_entries != _REMOVED_STR_)
	    {
		v.array->members[_ARGS_] = 
		    new DispValue(this, depth() + 1,
				   vtable_entries, 
				   myfull_name, myfull_name);
	    }

	     
	     
	    DispValueType member_type = UnknownType;
	    if(!v.array->have_index_base)
	    {
		v.array->index_base = index_base(base, depth());
		v.array->have_index_base = true;
	    }
	    int array_index = v.array->index_base;

	     
	     
	    do {
		string repeated_value = value;
		string member_name = 
		    gdb->index_expr(_REMOVED_STR_, itostring(array_index++));
		DispValue *dv = 
		    new DispValue(this, depth() + 1, value,
				  add_member_name(base, member_name), 
				  member_name, member_type);
		member_type = dv->type();
		v.array->members[_ARGS_] = dv;

		int repeats = read_repeats(value);

		if(expand_repeated_values)
		{
		     
		    while(--repeats > 0)
		    {
			member_name = 
			    gdb->index_expr(_REMOVED_STR_, itostring(array_index++));
			string val = repeated_value;
			DispValue *repeated_dv = 
			    new DispValue(this, depth() + 1, val,
					  add_member_name(base, member_name),
					  member_name, member_type);
			v.array->members[_ARGS_] = 
			    repeated_dv;
		    }
		}
		else
		{
		     
		    if(repeats > 1)
		    {
			array_index--;









			dv->repeats()   = repeats;

			array_index += repeats;
		    }
		}

		if(background(value.length()))
		{
		    init(value);
		    return;
		}
	    } while(read_array_next(value) != 0);
	    read_array_end(value);

	     
	    myexpanded = (depth() == 0 || v.array->member_count <= 1);




	    break;
	}

    case List:
	 
	 
	 
	munch_dump_line(value);

	 
    case StructOrClass:
    case BaseClass:
	{
	    v.str_or_cl = new StructOrClassDispValue;
	    v.str_or_cl->member_count = 0;
	



	    string member_prefix = myfull_name;
	    if(mytype == List)
	    {
		member_prefix = _REMOVED_STR_;
	    }
	    else
	    {
		 
		if(member_prefix.contains('*', 0))
		{
		    if(gdb->program_language() == LANGUAGE_C)
		    {
			 
			member_prefix.del(_REMOVED_STR_);



			if(member_prefix.matches(rxchain))
			{
			     
			    member_prefix += _REMOVED_STR_;
			}
			else
			{
			    member_prefix.prepend(_REMOVED_STR_);
			    member_prefix += _REMOVED_STR_;
			}
		    }
		    else
		    {
			member_prefix.prepend(_REMOVED_STR_);
			member_prefix += _REMOVED_STR_;
		    }
		}
		else
		{
		    member_prefix += _REMOVED_STR_;
		}

		read_str_or_cl_begin(value, myaddr);
	    }

	    bool more_values = true;
	    string member_name = read_member_name(value);
	    int i = 0;
	    while(more_values && member_name != _REMOVED_STR_)
	    {
		v.str_or_cl->member_count++;
		if(is_BaseClass_name(member_name) || member_name == _REMOVED_STR_)
		{
		     
		    v.str_or_cl->members[_ARGS_] = 
			new DispValue(this, depth() + 1, value, myfull_name,
				       member_name);
		    more_values = read_str_or_cl_next(value);
		    read_members_of_xy(value);
		}
		else
		{
		    string full_name;

		     
		     
		    if(member_name.contains('.') && gdb->has_quotes())
			full_name = member_prefix + quote(member_name, '\'');
		    else
			full_name = member_prefix + member_name;

		    v.str_or_cl->members[_ARGS_] = 
			new DispValue(this, depth() + 1, value, 
				       full_name, member_name);
		    more_values = read_str_or_cl_next(value);
		}
		i++;
		if(more_values)
		    member_name = read_member_name(value);

		if(background(value.length()))
		{
		    init(value);
		    return;
		}
	    }

	    if(mytype == List && value != _REMOVED_STR_)
	    {
		 
		v.str_or_cl->members[_ARGS_] = 
		    new DispValue(this, depth() + 1, value, _REMOVED_STR_, _REMOVED_STR_);
	    }
	    else
	    {
		 
		read_str_or_cl_end(value);
	    }

	     
	    myexpanded = (depth() == 0 || v.array->member_count <= 1);







	    break;
	}

    case Reference:
	{
	    v.str_or_cl = new StructOrClassDispValue;
	    myexpanded = true;
	    v.str_or_cl->member_count = 2;

	    int sep = value.index('@');
	    sep = value.index(':', sep);

	    string ref = value.before(sep);
	    value = value.after(sep);

	    v.str_or_cl->members[_ARGS_] = 
		new DispValue(this, depth() + 1, ref, 
			      gdb->address_expr(myfull_name), 
			      myfull_name, Pointer);

	    v.str_or_cl->members[_ARGS_] = 
		new DispValue(this, depth() + 1, value,
			      myfull_name, myfull_name);

	    if(background(value.length()))
	    {
		init(value);
		return;
	    }
	    break;
	}

    default:
	 ;
	abort();
    }

    background(value.length());
    changed = true;
}

__END_METHOD_CODE__


	METHOD DispValue!clear

		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 8 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 3
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 13
			DOTS 8
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 31
			LT 2
			METHOD clear
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:3 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:13 DOTS:8 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:31 LT:2 METHOD:clear METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:2 
		;


#ID 1-clear

__BEGIN_METHOD_CODE__

DispValue::clear()
{
    int i;
    switch(mytype) {
    case Simple:
    case Text:
	delete v.simple;
	break;
    case Pointer:
	delete v.pointer;
	break;
    case Array:
	for(i = 0; i < v.array->member_count; i++) {
	    delete v.array->members[_ARGS_];
	}
	delete v.array;
	break;

    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
	for(i = 0; i < v.str_or_cl->member_count; i++) {
	    delete v.str_or_cl->members[_ARGS_];
	}
	delete v.str_or_cl;
	break;

    case UnknownType:
	break;
    }
}

__END_METHOD_CODE__


	METHOD DispValue!dereferenced
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 11
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 22
			LT 0
			METHOD dereferenced
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:11 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:22 LT:0 METHOD:dereferenced METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:2 
		;


#ID 27-dereferenced

__BEGIN_METHOD_CODE__

DispValue::dereferenced()
{
    switch(mytype)
    {
    case Pointer:
	return v.pointer->dereferenced;

    case Simple:
    case Text:
    case Array:
    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
	return false;

    default:
	 ;
	abort();
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DispValue!dereferenced_name
		CALLS
		full_name : DispValue,
		contains : string,
		from : string,
		dereferenced_expr : GDBAgent,
		abort : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 6
			CALLEDN 5
			CLASS DispValue
			CLASSID 108
			CYCLO 12
			DOTS 2
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 28
			LT 0
			METHOD dereferenced_name
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:6 CALLEDN:5 CLASS:DispValue CLASSID:108 CYCLO:12 DOTS:2 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:28 LT:0 METHOD:dereferenced_name METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 28-dereferenced_name

__BEGIN_METHOD_CODE__

DispValue::dereferenced_name()
{
    switch(mytype)
    {
    case Pointer:
	{
	    string f = full_name();
	    if(f.contains('/', 0))
		f = f.from(2);	 

	    return gdb->dereferenced_expr(f);
	}

    case Simple:
    case Text:
    case Array:
    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
	return _REMOVED_STR_;

    default:
	 ;
	abort();
    }

    return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD DispValue!value
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 11
			DOTS 2
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 23
			LT 0
			METHOD value
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:11 DOTS:2 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:23 LT:0 METHOD:value METHODID:26 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:2 
		;


#ID 26-value

__BEGIN_METHOD_CODE__

DispValue::value()
{
    switch(mytype) {
    case Simple:
    case Text:
	return v.simple->value;

    case Pointer:
	return v.pointer->value;

    case Array:
    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
	return _REMOVED_STR_;

    default:
	 ;
	abort();
    }

    return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD DispValue!nchildren
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 11
			DOTS 2
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 23
			LT 0
			METHOD nchildren
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:11 DOTS:2 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:23 LT:0 METHOD:nchildren METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:2 
		;


#ID 29-nchildren

__BEGIN_METHOD_CODE__

DispValue::nchildren()
{
    switch(mytype) {
    case Array:
	return v.array->member_count;

    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
	return v.str_or_cl->member_count;

    case Simple:
    case Text:
    case Pointer:
	return 0;

    default:
	 ;
	abort();
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD DispValue!get_child
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 0
			AVVARLEN 3
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 11
			DOTS 2
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 25
			LT 0
			METHOD get_child
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:0 AVVARLEN:3 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:11 DOTS:2 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:25 LT:0 METHOD:get_child METHODID:30 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:2 
		;


#ID 30-get_child

__BEGIN_METHOD_CODE__

DispValue::get_child(int i)
{
    switch(mytype) {
    case Array:
	 ;
	return v.array->members[_ARGS_];

    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
	 ;
	return v.str_or_cl->members[_ARGS_];

    case Pointer:
    case Simple:
    case Text:
	return 0;

    default:
	 ;
	abort();
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD DispValue!vertical_aligned
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 11
			DOTS 1
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 21
			LT 0
			METHOD vertical_aligned
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:11 DOTS:1 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:21 LT:0 METHOD:vertical_aligned METHODID:31 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:2 
		;


#ID 31-vertical_aligned

__BEGIN_METHOD_CODE__

DispValue::vertical_aligned()
{
    switch(mytype) {
    case Array:
	return v.array->align == Vertical;

    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
    case Pointer:
    case Simple:
    case Text:
	return false;

    default:
	 ;
	abort();
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DispValue!horizontal_aligned
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 11
			DOTS 1
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 21
			LT 0
			METHOD horizontal_aligned
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:11 DOTS:1 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:21 LT:0 METHOD:horizontal_aligned METHODID:32 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:2 
		;


#ID 32-horizontal_aligned

__BEGIN_METHOD_CODE__

DispValue::horizontal_aligned()
{
    switch(mytype) {
    case Array:
	return v.array->align == Horizontal;

    case List:
    case StructOrClass:
    case BaseClass:
    case Reference:
    case Pointer:
    case Simple:
    case Text:
	return false;

    default:
	 ;
	abort();
    }

    return false;
}

__END_METHOD_CODE__


	METHOD DispValue!dereference

		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD dereference
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:dereference METHODID:33 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 33-dereference

__BEGIN_METHOD_CODE__

DispValue::dereference()
{
    if(mytype == Pointer)
	v.pointer->dereferenced = true;
}

__END_METHOD_CODE__


	METHOD DispValue!align_vertical

		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD align_vertical
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:align_vertical METHODID:42 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 42-align_vertical

__BEGIN_METHOD_CODE__

DispValue::align_vertical()
{
    if(mytype == Array)
	v.array->align = Vertical;
}

__END_METHOD_CODE__


	METHOD DispValue!align_horizontal

		METRICS
			mytype REFERRED 1 TIMES,
			v REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 3
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD align_horizontal
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:3 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:align_horizontal METHODID:43 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 43-align_horizontal

__BEGIN_METHOD_CODE__

DispValue::align_horizontal()
{
    if(mytype == Array)
	v.array->align = Horizontal;
}

__END_METHOD_CODE__


	METHOD DispValue!expandAll
		CALLS
		_expand : DispValue,
		nchildren : DispValue,
		get_child : DispValue,
		expandAll : DispValue



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS DispValue
			CLASSID 108
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 12
			LT 1
			METHOD expandAll
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:DispValue CLASSID:108 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:12 LT:1 METHOD:expandAll METHODID:35 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-expandAll

__BEGIN_METHOD_CODE__

DispValue::expandAll(int depth)
{
    if(depth == 0)
	return;

    _expand();

    for(int i = 0; i < nchildren(); i++)
    {
	DispValue *child = get_child(i);
	child->expandAll(depth - 1);
    }
}

__END_METHOD_CODE__


	METHOD DispValue!collapseAll
		CALLS
		_collapse : DispValue,
		nchildren : DispValue,
		get_child : DispValue,
		collapseAll : DispValue



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS DispValue
			CLASSID 108
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 12
			LT 1
			METHOD collapseAll
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:DispValue CLASSID:108 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:12 LT:1 METHOD:collapseAll METHODID:34 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-collapseAll

__BEGIN_METHOD_CODE__

DispValue::collapseAll(int depth)
{
    if(depth == 0)
	return;

    _collapse();

    for(int i = 0; i < nchildren(); i++)
    {
	DispValue *child = get_child(i);
	child->collapseAll(depth - 1);
    }
}

__END_METHOD_CODE__


	METHOD DispValue!expandedAll
		CALLS
		expanded : DispValue,
		nchildren : DispValue,
		get_child : DispValue,
		expandedAll : DispValue



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS DispValue
			CLASSID 108
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 1
			METHOD expandedAll
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 2
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:DispValue CLASSID:108 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:1 METHOD:expandedAll METHODID:38 MMINUS:0 OUT:0 PARNUM:0 PPLUS:2 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-expandedAll

__BEGIN_METHOD_CODE__

DispValue::expandedAll()
{
    int count = 0;
    if(expanded())
	count++;
    for(int i = 0; i < nchildren(); i++)
	count += get_child(i)->expandedAll();

    return count;
}

__END_METHOD_CODE__


	METHOD DispValue!collapsedAll
		CALLS
		collapsed : DispValue,
		nchildren : DispValue,
		get_child : DispValue,
		collapsedAll : DispValue



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS DispValue
			CLASSID 108
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 1
			METHOD collapsedAll
			METHODID 39
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 2
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:DispValue CLASSID:108 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:1 METHOD:collapsedAll METHODID:39 MMINUS:0 OUT:0 PARNUM:0 PPLUS:2 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 39-collapsedAll

__BEGIN_METHOD_CODE__

DispValue::collapsedAll()
{
    int count = 0;
    if(collapsed())
	count++;
    for(int i = 0; i < nchildren(); i++)
	count += get_child(i)->collapsedAll();

    return count;
}

__END_METHOD_CODE__


	METHOD DispValue!height
		CALLS
		nchildren : DispValue,
		max : DynArray,
		get_child : DispValue,
		height : DispValue



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS DispValue
			CLASSID 108
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 1
			METHOD height
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:DispValue CLASSID:108 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:8 LT:1 METHOD:height METHODID:40 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-height

__BEGIN_METHOD_CODE__

DispValue::height()
{
    int d = 0;

    for(int i = 0; i < nchildren(); i++)
	d = max(d, get_child(i)->height());

    return d + 1;
}

__END_METHOD_CODE__


	METHOD DispValue!heightExpanded
		CALLS
		collapsed : DispValue,
		nchildren : DispValue,
		get_child : DispValue,
		collapsed : DispValue,
		max : DynArray,
		get_child : DispValue,
		heightExpanded : DispValue



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS DispValue
			CLASSID 108
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 16
			LT 1
			METHOD heightExpanded
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:DispValue CLASSID:108 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:16 LT:1 METHOD:heightExpanded METHODID:41 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 41-heightExpanded

__BEGIN_METHOD_CODE__

DispValue::heightExpanded()
{
    if(collapsed())
	return 0;

    int d = 0;

    for(int i = 0; i < nchildren(); i++)
    {
	if(get_child(i)->collapsed())
	    return 1;

	d = max(d, get_child(i)->heightExpanded());
    }

    return d + 1;
}

__END_METHOD_CODE__


	METHOD DispValue!new_BaseClass_name

		METRICS
			mytype REFERRED 1 TIMES,
			changed REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 6
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD new_BaseClass_name
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:6 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:new_BaseClass_name METHODID:45 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:2 
		;


#ID 45-new_BaseClass_name

__BEGIN_METHOD_CODE__

DispValue::new_BaseClass_name(string name)
{
    if(mytype != BaseClass)
	return false;

    if(print_name != name)
    {
	print_name = name;
	changed = true;
	return true;
    }
    return false;
}

__END_METHOD_CODE__


	METHOD DispValue!update
		CALLS
		is_user_command : DispNode,
		is_BaseClass_name : _SYSTEM_OR_USER_,
		determine_type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		clear : DispValue,
		init : DispValue,
		read_simple_value : _SYSTEM_OR_USER_,
		depth : DispValue,
		read_pointer_value : _SYSTEM_OR_USER_,
		read_array_begin : _SYSTEM_OR_USER_,
		read_vtable_entries : _SYSTEM_OR_USER_,
		update : DispValue,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		update : _SYSTEM_OR_USER_,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		read_repeats : _SYSTEM_OR_USER_,
		repeats : DispValue,
		update : _SYSTEM_OR_USER_,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		repeats : DispValue,
		read_array_next : _SYSTEM_OR_USER_,
		clear : DispValue,
		init : DispValue,
		read_array_end : _SYSTEM_OR_USER_,
		type : DispValue,
		value : DispValue,
		init : DispValue,
		munch_dump_line : _SYSTEM_OR_USER_,
		read_str_or_cl_begin : _SYSTEM_OR_USER_,
		read_member_name : _SYSTEM_OR_USER_,
		is_BaseClass_name : _SYSTEM_OR_USER_,
		new_BaseClass_name : DispValue,
		update : DispValue,
		read_str_or_cl_next : _SYSTEM_OR_USER_,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		read_members_of_xy : _SYSTEM_OR_USER_,
		name : DispValue,
		update : DispValue,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		read_str_or_cl_next : _SYSTEM_OR_USER_,
		clear : DispValue,
		init : DispValue,
		read_str_or_cl_end : _SYSTEM_OR_USER_,
		after : string,
		update : DispValue,
		update : DispValue,
		clear : DispValue,
		init : DispValue,
		abort : _SYSTEM_OR_USER_,
		background : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			mytype REFERRED 4 TIMES,
			changed REFERRED 5 TIMES,
			v REFERRED 22 TIMES,
			expand_repeated_values REFERRED 1 TIMES,
			ARRAYOP 11
			ASS 66
			AVVARLEN 9
			CALLEDN 57
			CLASS DispValue
			CLASSID 108
			CYCLO 48
			DOTS 30
			EQTEST 10
			EXPRORCALL 97
			GE 0
			GT 2
			IN 0
			INDR 37
			LE 0
			LOC 268
			LT 2
			METHOD update
			METHODID 44
			MMINUS 1
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 100
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:11 ASS:66 AVVARLEN:9 CALLEDN:57 CLASS:DispValue CLASSID:108 CYCLO:48 DOTS:30 EQTEST:10 EXPRORCALL:97 GE:0 GT:2 IN:0 INDR:37 LE:0 LOC:268 LT:2 METHOD:update METHODID:44 MMINUS:1 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:100 TERNINSTR:0 USEDVARS:4 
		;


#ID 44-update

__BEGIN_METHOD_CODE__

DispValue::update(string& value, bool& was_changed, bool& was_initialized,
		       DispValueType given_type)
{
    if(changed)
    {
	was_changed = true;	 
	changed     = false;
    }

    string init_value = value;






    DispValueType new_type = given_type;
    if(new_type == UnknownType && print_name == _REMOVED_STR_)
	new_type = Text;
    if(new_type == UnknownType && is_user_command(print_name))
	new_type = List;
    if(new_type == UnknownType && is_BaseClass_name(print_name))
	new_type = BaseClass;
    if(new_type == UnknownType)
	new_type = determine_type(value);

    bool ignore_repeats = (myparent != 0 && myparent->type() == Array);

    if(mytype != new_type)
    {
	 
	 
	 



	value = init_value;
	clear();
	init(value);
	was_initialized = was_changed = true;
	return;
    }

    switch(mytype) {
    case Simple:
    {
	string new_value = 
	    read_simple_value(value, depth(), ignore_repeats);
	if(v.simple->value != new_value) {
	    v.simple->value = new_value;
	    changed = was_changed = true;
	}
	break;
    }

    case Text:
    {
	if(v.simple->value != value) {
	    v.simple->value = value;
	    changed = was_changed = true;
	}
	break;
    }

    case Pointer:
    {
	string new_value = read_pointer_value(value, ignore_repeats);
	if(v.pointer->value != new_value) {
	    v.pointer->value = new_value;
	    changed = was_changed = true;
	}
	break;
    }

    case Array:
    {
	read_array_begin(value, myaddr);

	string vtable_entries = read_vtable_entries(value);
	int member_index = 0;
	bool size_changed = false;
	if(vtable_entries != _REMOVED_STR_)
	{
	    v.array->members[_ARGS_]->update(vtable_entries, 
						     was_changed, 
						     was_initialized);
	    if(was_initialized)
		break;
	    if(background(value.length()))
		break;
	}

	if(!was_initialized)
	{
	    DispValueType member_type = UnknownType;
	    bool more_values = true;
	    while(more_values && member_index < v.array->member_count)
	    {
		string repeated_value = value;
		DispValue *member = v.array->members[_ARGS_];
		member->update(value, was_changed, was_initialized, 
			       member_type);

		if(was_initialized)
		    break;
		if(background(value.length()))
		    break;

		member_type = member->type();

		int repeats = read_repeats(value);

		if(expand_repeated_values)
		{
		     
		    while(--repeats > 0)
		    {
			string val = repeated_value;
			DispValue *member = v.array->members[_ARGS_];

			if(member->repeats() > 1)
			{
			    size_changed = true;
			    break;
			}

			member->update(val, was_changed, 
				       was_initialized, member_type);
			if(was_initialized)
			    break;
			if(background(value.length()))
			    break;
		    }
		}
		else
		{
		     
		    if(repeats != member->repeats())
		    {
			size_changed = true;
			break;	 
		    }
		}

		more_values = read_array_next(value);
	    }
	}

	if(was_initialized || size_changed || 
	    member_index != v.array->member_count)
	{


	     
	     
	     
	    value = init_value;
	    clear();
	    init(value);
	    was_initialized = was_changed = true;
	    return;
	}
	read_array_end(value);
	break;
    }

    case List:
    case StructOrClass:
    case BaseClass:
    {
	if(mytype == List 
	    && v.str_or_cl->member_count == 1
	    && v.str_or_cl->members[_ARGS_]->type() == Text
	    && v.str_or_cl->members[_ARGS_]->value() != value)
	{
	     
	    init(value);
	    was_initialized = was_changed = true;
	    return;
	}

	if(mytype == List)
	    munch_dump_line(value);

	read_str_or_cl_begin(value, myaddr);
	int i;
	bool more_values = true;
	for(i = 0; more_values && i < v.str_or_cl->member_count; i++)
	{
	    string member_name = read_member_name(value);
		
	    if(is_BaseClass_name(member_name))
	    {
		if(v.str_or_cl->members[_ARGS_]->
		    new_BaseClass_name(member_name))
		    was_changed = true;
		v.str_or_cl->members[_ARGS_]->update(value, was_changed,
						was_initialized);
		if(was_initialized)
		    break;
		if(!read_str_or_cl_next(value))
		    break;
		if(background(value.length()))
		    break;
		read_members_of_xy(value);
	    }
	    else
	    {
		if(member_name != v.str_or_cl->members[_ARGS_]->name())
		    break;

		v.str_or_cl->members[_ARGS_]->update(value, was_changed,
						was_initialized);
		if(was_initialized)
		    break;
		if(background(value.length()))
		    break;
		more_values = read_str_or_cl_next(value);
	    }
	}

	if(was_initialized 
	    || i != v.str_or_cl->member_count 
	    || more_values)
	{


	     
	     
	    value = init_value;
	    clear();
	    init(value);
	    was_initialized = was_changed = true;
	    return;
	}
	read_str_or_cl_end(value);
    }
    break;

    case Reference:
    {
	string ref = value.before(':');
	value = value.after(':');

	v.str_or_cl->members[_ARGS_]->update(ref, was_changed, was_initialized);
	if(!was_initialized)
	    v.str_or_cl->members[_ARGS_]->update(value, 
					    was_changed, was_initialized);
	if(was_initialized)
	{
	    value = init_value;
	    clear();
	    init(value);
	    was_initialized = was_changed = true;
	    return;
	}
	break;
    }

    default:
	 ;
	abort();
    }




    background(value.length());
    return;
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/DispValue.o.nu.met	  Methods Number  26
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/DispValueA.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/EntryType.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/GDBAgent.o.nu.met ... 


	METHOD GDBAgent!GDBAgent
		CALLS
		removeAllHandlers : Agent,
		removeAllHandlers : Agent,
		removeAllHandlers : Agent,
		addHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			_has_watch_command REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 18
			CALLEDN 12
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 25
			LT 0
			METHOD GDBAgent
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:18 CALLEDN:12 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:25 LT:0 METHOD:GDBAgent METHODID:-1 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:1 
		;


#ID -1-GDBAgent

__BEGIN_METHOD_CODE__

GDBAgent::GDBAgent(XtAppContext app_context,
		    const string& gdb_call,
		    DebuggerType tp,
		    unsigned int nTypes)
{
     
    removeAllHandlers(Panic);
    removeAllHandlers(Strange);
    removeAllHandlers(Died);

     
    addHandler(Panic,   PanicHP);
    addHandler(Strange, StrangeHP);
    addHandler(Died,    DiedHP);
    addHandler(Input,   InputHP);

     
    addHandler(Input,  traceInputHP);      
    addHandler(Output, traceOutputHP);     
    addHandler(Error,  traceErrorHP);      

     
    if(type() == GDB)
	_has_watch_command = WATCH_CHANGE | WATCH_READ | WATCH_WRITE;
    else if(type() == DBX)
	_has_watch_command = WATCH_CHANGE;
    else
	_has_watch_command = 0;
}

__END_METHOD_CODE__


	METHOD GDBAgent!GDBAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD GDBAgent
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:GDBAgent METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-GDBAgent

__BEGIN_METHOD_CODE__

GDBAgent::GDBAgent(const GDBAgent& gdb)
{}

__END_METHOD_CODE__


	METHOD GDBAgent!title
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 15
			LT 0
			METHOD title
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:15 LT:0 METHOD:title METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-title

__BEGIN_METHOD_CODE__

GDBAgent::title()
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_;
    case DBX:
	return _REMOVED_STR_;
    case XDB:
	return _REMOVED_STR_;
    case JDB:
	return _REMOVED_STR_;
    }

    return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD GDBAgent!trace
		CALLS
		s : _SYSTEM_OR_USER_,
		length : string,
		length : string,
		quote : _SYSTEM_OR_USER_,
		string : string,
		replicate : _SYSTEM_OR_USER_,
		strlen : _SYSTEM_OR_USER_,
		gsub : string,
		s : _SYSTEM_OR_USER_,
		length : string,
		flush : LiterateAgent



		METRICS
			ARRAYOP 1
			ASS 7
			AVVARLEN 0
			CALLEDN 12
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 6
			EQTEST 1
			EXPRORCALL 18
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 21
			LT 6
			METHOD trace
			METHODID 3
			MMINUS 0
			OUT 3
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:7 AVVARLEN:0 CALLEDN:12 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:6 EQTEST:1 EXPRORCALL:18 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:21 LT:6 METHOD:trace METHODID:3 MMINUS:0 OUT:3 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-trace

__BEGIN_METHOD_CODE__

GDBAgent::trace(char *prefix, void *call_data)
{
    DataLength* dl    = (DataLength *) call_data;
    string s(dl->data, dl->length);

    bool s_ends_with_nl = false;
    if(s.length() > 0 && s[_ARGS_] == '\n')
    {
	s_ends_with_nl = true;
	s = s.before(int(s.length() - 1));
    }

    s = quote(s);
    string nl = string(_REMOVED_STR_) + replicate(' ', strlen(prefix)) + _REMOVED_STR_;
    s.gsub(_REMOVED_STR_, nl);

    if(s_ends_with_nl)
	s(s.length() - 1, 0) = _REMOVED_STR_;

    (*_dddlog)  << prefix << s << '\n';
    (*_dddlog) .flush();
}

__END_METHOD_CODE__


	METHOD GDBAgent!traceInputHP
		CALLS
		trace : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 1
			METHOD traceInputHP
			METHODID 160
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:5 LT:1 METHOD:traceInputHP METHODID:160 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 160-traceInputHP

__BEGIN_METHOD_CODE__

GDBAgent::traceInputHP(Agent *source, void *, void *call_data)
{
    GDBAgent *gdb = dynamic_cast< GDBAgent  *>(  source ) ;
    if(gdb != 0)
	gdb->trace(_REMOVED_STR_, call_data);
}

__END_METHOD_CODE__


	METHOD GDBAgent!traceOutputHP
		CALLS
		trace : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 1
			METHOD traceOutputHP
			METHODID 161
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:5 LT:1 METHOD:traceOutputHP METHODID:161 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 161-traceOutputHP

__BEGIN_METHOD_CODE__

GDBAgent::traceOutputHP(Agent *source, void *, void *call_data)
{
    GDBAgent *gdb = dynamic_cast< GDBAgent  *>(  source ) ;
    if(gdb != 0)
	gdb->trace(_REMOVED_STR_, call_data);
}

__END_METHOD_CODE__


	METHOD GDBAgent!traceErrorHP
		CALLS
		trace : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 1
			METHOD traceErrorHP
			METHODID 162
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:5 LT:1 METHOD:traceErrorHP METHODID:162 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 162-traceErrorHP

__BEGIN_METHOD_CODE__

GDBAgent::traceErrorHP(Agent *source, void *, void *call_data)
{
    GDBAgent *gdb = dynamic_cast< GDBAgent  *>(  source ) ;
    if(gdb != 0)
	gdb->trace(_REMOVED_STR_, call_data);
}

__END_METHOD_CODE__


	METHOD GDBAgent!do_start
		CALLS
		start : TTYAgent,
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_



		METRICS
			_user_data REFERRED 1 TIMES,
			_on_answer REFERRED 1 TIMES,
			_on_answer_completion REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 13
			CALLEDN 4
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD do_start
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 8
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:13 CALLEDN:4 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:do_start METHODID:8 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:8 TERNINSTR:0 USEDVARS:3 
		;


#ID 8-do_start

__BEGIN_METHOD_CODE__

GDBAgent::do_start(OAProc  on_answer,
			 OACProc on_answer_completion,
			 void*   user_data)
{
     ;

    _on_answer = on_answer;
    _on_answer_completion = on_answer_completion;
    _user_data = user_data;
    TTYAgent::start();
    callHandlers(ReadyForQuestion, (void *)false);
    callHandlers(ReadyForCmd, (void *)false);
    callHandlers(LanguageChanged, (void *)this);
}

__END_METHOD_CODE__


	METHOD GDBAgent!start_plus
		CALLS
		init_qu_array : GDBAgent,
		do_start : GDBAgent



		METRICS
			questions_waiting REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD start_plus
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 8
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:start_plus METHODID:9 MMINUS:0 OUT:0 PARNUM:8 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-start_plus

__BEGIN_METHOD_CODE__

GDBAgent::start_plus(OAProc   on_answer,
			   OACProc  on_answer_completion,
			   void*    user_data,
			   const StringArray& cmds,
			   const VoidArray& qu_datas,
			   int      qu_count,
			   OQACProc on_qu_array_completion,
			   void*    qa_data)
{
    if(qu_count > 0) {
	questions_waiting = true;
	init_qu_array(cmds, qu_datas, qu_count, 
		      on_qu_array_completion, qa_data);
    }

    do_start(on_answer, on_answer_completion, user_data);
}

__END_METHOD_CODE__


	METHOD GDBAgent!send_user_cmd
		CALLS
		callHandlers : _SYSTEM_OR_USER_,
		write : GDBAgent,
		flush : LiterateAgent



		METRICS
			state REFERRED 2 TIMES,
			_user_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 7
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 26
			LT 0
			METHOD send_user_cmd
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:7 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:26 LT:0 METHOD:send_user_cmd METHODID:10 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:2 
		;


#ID 10-send_user_cmd

__BEGIN_METHOD_CODE__

GDBAgent::send_user_cmd(string cmd, void *user_data)
{
    if(user_data)
	_user_data = user_data;

    switch(state) {
    case ReadyWithPrompt:
    case BusyOnInitialCmds:

	 
	state = BusyOnCmd;
	complete_answer = _REMOVED_STR_;
	callHandlers(ReadyForQuestion, (void *)false);
	cmd += '\n';
	write(cmd);
	flush();

	return true;

    case BusyOnQuestion:
    case BusyOnQuArray:
    case BusyOnCmd:
	break;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD GDBAgent!send_user_ctrl_cmd
		CALLS
		write : GDBAgent,
		flush : LiterateAgent



		METRICS
			state REFERRED 2 TIMES,
			_user_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 7
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD send_user_ctrl_cmd
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:7 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:send_user_ctrl_cmd METHODID:11 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:2 
		;


#ID 11-send_user_ctrl_cmd

__BEGIN_METHOD_CODE__

GDBAgent::send_user_ctrl_cmd(string cmd, void *user_data)
{
    if(user_data)
	_user_data = user_data;

     
     
    if(cmd == '\004' && state == ReadyWithPrompt)
    {
	state = BusyOnCmd;
	complete_answer = _REMOVED_STR_;
    }

    write(cmd);
    flush();
    return true;
}

__END_METHOD_CODE__


	METHOD GDBAgent!send_user_cmd_plus
		CALLS
		init_qu_array : GDBAgent,
		callHandlers : _SYSTEM_OR_USER_,
		write : GDBAgent,
		flush : LiterateAgent



		METRICS
			state REFERRED 2 TIMES,
			_user_data REFERRED 1 TIMES,
			questions_waiting REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 10
			CALLEDN 4
			CLASS GDBAgent
			CLASSID 89
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 0
			METHOD send_user_cmd_plus
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 7
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:10 CALLEDN:4 CLASS:GDBAgent CLASSID:89 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:23 LT:0 METHOD:send_user_cmd_plus METHODID:12 MMINUS:0 OUT:0 PARNUM:7 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:3 
		;


#ID 12-send_user_cmd_plus

__BEGIN_METHOD_CODE__

GDBAgent::send_user_cmd_plus(const StringArray& cmds,
				   const VoidArray& qu_datas,
				   int      qu_count,
				   OQACProc on_qu_array_completion,
				   void*    qa_data,
				   string   user_cmd,
				   void* user_data)
{
    if(state != ReadyWithPrompt) 
	return false;

    if(user_data)
	_user_data = user_data;
    if(qu_count > 0)
    {
	questions_waiting = true;
	init_qu_array(cmds, qu_datas, qu_count,
		      on_qu_array_completion, qa_data);
    }

     
    state = BusyOnCmd;
    complete_answer = _REMOVED_STR_;
    callHandlers(ReadyForQuestion, (void *)false);
    user_cmd += '\n';
    write(user_cmd);
    flush();

    return true;
}

__END_METHOD_CODE__


	METHOD GDBAgent!send_question
		CALLS
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		write : GDBAgent,
		flush : LiterateAgent



		METRICS
			state REFERRED 2 TIMES,
			_qu_data REFERRED 1 TIMES,
			_on_question_completion REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 12
			CALLEDN 4
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 0
			METHOD send_question
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:12 CALLEDN:4 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:0 METHOD:send_question METHODID:13 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:3 
		;


#ID 13-send_question

__BEGIN_METHOD_CODE__

GDBAgent::send_question(string  cmd,
			      OQCProc on_question_completion,
			      void*   qu_data)
{
    if(state != ReadyWithPrompt) 
	return false;

    state = BusyOnQuestion;
    callHandlers(ReadyForQuestion, (void *)false);
    callHandlers(ReadyForCmd, (void *)false);

    _on_question_completion = on_question_completion;
    _qu_data = qu_data;
    complete_answer = _REMOVED_STR_;

    cmd += '\n';
    write(cmd);
    flush();

    return true;
}

__END_METHOD_CODE__


	METHOD GDBAgent!send_qu_array
		CALLS
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		init_qu_array : GDBAgent,
		write : GDBAgent,
		flush : LiterateAgent



		METRICS
			state REFERRED 2 TIMES,
			cmd_array REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 2
			AVVARLEN 7
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 0
			METHOD send_qu_array
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:7 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:0 METHOD:send_qu_array METHODID:14 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:2 
		;


#ID 14-send_qu_array

__BEGIN_METHOD_CODE__

GDBAgent::send_qu_array(const StringArray& cmds,
			      const VoidArray& qu_datas,
			      int      qu_count,
			      OQACProc on_qu_array_completion,
			      void*    qa_data)
{
    if(qu_count == 0)
	return true;
    if(state != ReadyWithPrompt)
	return false;

    state = BusyOnQuArray;
    callHandlers(ReadyForQuestion, (void *)false);
    callHandlers(ReadyForCmd, (void *)false);

    init_qu_array(cmds, qu_datas, qu_count, on_qu_array_completion, qa_data);
    
     
    write(cmd_array[_ARGS_]);
    flush();

    return true;
}

__END_METHOD_CODE__


	METHOD GDBAgent!init_qu_array

		METRICS
			qu_index REFERRED 1 TIMES,
			_qu_count REFERRED 1 TIMES,
			cmd_array REFERRED 2 TIMES,
			complete_answers REFERRED 2 TIMES,
			_qu_datas REFERRED 2 TIMES,
			_qa_data REFERRED 1 TIMES,
			_on_qu_array_completion REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 11
			AVVARLEN 11
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 1
			METHOD init_qu_array
			METHODID 144
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 7

#METRICS ARRAYOP:2 ASS:11 AVVARLEN:11 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:1 METHOD:init_qu_array METHODID:144 MMINUS:0 OUT:0 PARNUM:5 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:7 
		;


#ID 144-init_qu_array

__BEGIN_METHOD_CODE__

GDBAgent::init_qu_array(const StringArray& cmds,
			      const VoidArray& qu_datas,
			      int      qu_count,
			      OQACProc on_qu_array_completion,
			      void*    qa_data)
{
    _on_qu_array_completion = on_qu_array_completion;
    qu_index  = 0;
    _qu_count = qu_count;
    _qa_data  = qa_data;

    StringArray empty_s;
    VoidArray   empty_v;

    complete_answers = empty_s;
    cmd_array        = empty_s;
    _qu_datas        = empty_v;
    for(int i = 0; i < qu_count; i++)
    {
	complete_answers += _REMOVED_STR_;
	cmd_array        += cmds[_ARGS_] + '\n';
	_qu_datas        += qu_datas[_ARGS_];
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!ends_with_prompt
		CALLS
		strip_control : GDBAgent,
		type : GDBAgent,
		recording : GDBAgent,
		contains : string,
		contains : string,
		length : string,
		from : string,
		matches : string,
		recording : GDBAgent,
		index : string,
		length : string,
		length : string,
		reverse : string,
		match : _SYSTEM_OR_USER_,
		chars : string,
		length : _SYSTEM_OR_USER_,
		reverse : string,
		at : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		matches : string,
		length : string,
		index : string,
		length : string,
		match : _SYSTEM_OR_USER_,
		chars : string,
		length : string,
		length : string,
		length : string,
		at : string



		METRICS
			ARRAYOP 8
			ASS 26
			AVVARLEN 0
			CALLEDN 32
			CLASS GDBAgent
			CLASSID 89
			CYCLO 19
			DOTS 24
			EQTEST 2
			EXPRORCALL 55
			GE 2
			GT 7
			IN 0
			INDR 0
			LE 0
			LOC 123
			LT 5
			METHOD ends_with_prompt
			METHODID 142
			MMINUS 2
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 13
			SCOPEOP 0
			STMNT 37
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:8 ASS:26 AVVARLEN:0 CALLEDN:32 CLASS:GDBAgent CLASSID:89 CYCLO:19 DOTS:24 EQTEST:2 EXPRORCALL:55 GE:2 GT:7 IN:0 INDR:0 LE:0 LOC:123 LT:5 METHOD:ends_with_prompt METHODID:142 MMINUS:2 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:13 SCOPEOP:0 STMNT:37 TERNINSTR:0 USEDVARS:0 
		;


#ID 142-ends_with_prompt

__BEGIN_METHOD_CODE__

GDBAgent::ends_with_prompt(const string& ans)
{
    string answer = ans;
    strip_control(answer);

    switch(type())
    {
    case GDB:
	 
	if(recording() && answer.contains('>', -1))
	{
	    last_prompt = _REMOVED_STR_;
	    return true;
	}

	 
	if(answer.contains(_REMOVED_STR_, -1))
	    return true;

	 
    case DBX:
    {
	 
	int i = answer.length() - 1;
	if(i < 0 || answer[_ARGS_] != ' ')
	    return false;

	while(i >= 0 && answer[_ARGS_] != '\n' && answer[_ARGS_] != '(')
	    i--;
	if(i < 0 || answer[_ARGS_] != '(')
	    return false;

	string possible_prompt = answer.from(i);







	if(possible_prompt.matches(rxprompt))
	{
	    last_prompt = possible_prompt;
	    recording(false);
	    return true;
	}
	return false;
    }

    case XDB:
    {
	 
	unsigned beginning_of_line = answer.index('\n', -1) + 1;
	if(beginning_of_line < answer.length()
	    && answer.length() > 0
	    && answer[_ARGS_] == '>')
	{
	    last_prompt = _REMOVED_STR_;
	    return true;
	}
	return false;
    }

    case JDB:
    {
	 
	 




	 
	string reverse_answer = reverse(answer);
	int match_len = rxjdbprompt_reverse.match(reverse_answer.chars(), 
						  reverse_answer.length(), 0);
	if(match_len > 0)
	{
	    last_prompt = reverse(reverse_answer.at(0, match_len));
	    return true;
	}

	 
	int beginning_of_line = answer.index('\n', -1) + 1;
	string possible_prompt = ((string &) answer).from(beginning_of_line);
	if(possible_prompt.matches(rxjdbprompt_nothread))
	{
	    last_prompt = possible_prompt;
	    return true;
	}

	 
	int last_nl = answer.length() - 1;
	while(last_nl >= 0)
	{
	    last_nl = answer.index('\n', last_nl - answer.length());
	    int beginning_of_line = last_nl + 1;

	    match_len = rxjdbprompt.match(answer.chars(), answer.length(), 
					  beginning_of_line);
	    if(match_len > 0)
	    {
		int i = beginning_of_line + match_len;
		while(i < int(answer.length()) && (__ctype_b[(int) ( ( answer[_ARGS_] ) )] & (unsigned short int)   _ISspace )  )
		    i++;
		if(i < int(answer.length()) && answer[_ARGS_] == '=')
		{
		     
		}
		else
		{
		    last_prompt = answer.at(beginning_of_line, match_len);
		    return true;
		}
	    }

	    last_nl--;
	}

	return false;
    }
    }

    return false;		 
}

__END_METHOD_CODE__


	METHOD GDBAgent!ends_with_secondary_prompt
		CALLS
		strip_control : GDBAgent,
		type : GDBAgent,
		ends_in : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		ends_in : _SYSTEM_OR_USER_,
		ends_in : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 1
			EQTEST 2
			EXPRORCALL 10
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 37
			LT 1
			METHOD ends_with_secondary_prompt
			METHODID 143
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:1 EQTEST:2 EXPRORCALL:10 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:37 LT:1 METHOD:ends_with_secondary_prompt METHODID:143 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 143-ends_with_secondary_prompt

__BEGIN_METHOD_CODE__

GDBAgent::ends_with_secondary_prompt(const string& ans)
{
    string answer = ans;
    strip_control(answer);

    switch(type())
    {
    case DBX:
	if(ends_in(answer, _REMOVED_STR_))
	{
	     
	     



	    int idx = index(answer, rxselect, _REMOVED_STR_, -1);
	    if(idx >= 0 && answer.index('\n', idx) < 0)
		return true;
	}

	 
	return answer == _REMOVED_STR_ || ends_in(answer, _REMOVED_STR_);

    case GDB:
	 
	return answer == _REMOVED_STR_ || ends_in(answer, _REMOVED_STR_);
	
    case XDB:
	 
	return false;

    case JDB:
	 
	return false;
    }

    return false;		 
}

__END_METHOD_CODE__


	METHOD GDBAgent!requires_reply
		CALLS
		contains : _SYSTEM_OR_USER_,
		ends_with_prompt : GDBAgent,
		index : string,
		chars : _SYSTEM_OR_USER_,
		downcase : string,
		strip_control : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		type : GDBAgent,
		matches : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 15
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 12
			EQTEST 1
			EXPRORCALL 22
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 56
			LT 0
			METHOD requires_reply
			METHODID 145
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:15 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:12 EQTEST:1 EXPRORCALL:22 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:56 LT:0 METHOD:requires_reply METHODID:145 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 145-requires_reply

__BEGIN_METHOD_CODE__

GDBAgent::requires_reply(const string& answer)
{
     
     
     
     
     

    if(answer.contains('\n', -1) || ends_with_prompt(answer))
	return _REMOVED_STR_;
    int last_line_index = answer.index('\n', -1) + 1;

    string last_line = answer.chars() + last_line_index;
    last_line.downcase();
    strip_control(last_line);

    if(last_line.contains(_REMOVED_STR_) 
	|| last_line.contains(_REMOVED_STR_)
	|| last_line.contains(_REMOVED_STR_)
	|| last_line.contains(_REMOVED_STR_))
    {



	if(answer.matches(rxq, last_line_index))
	    return _REMOVED_STR_;		 




	if(answer.matches(rxspace, last_line_index))
	    return _REMOVED_STR_;		 







	if(answer.matches(rxreturn, last_line_index))
	    return _REMOVED_STR_;		 

	if(type() == XDB)
	{
	     
	     
	     



	    if(answer.matches(rxxdb, last_line_index))
		return _REMOVED_STR_;	 
	}
    }

    return _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD GDBAgent!normalize_answer
		CALLS
		strip_control : GDBAgent,
		strip_dbx_comments : GDBAgent,
		cut_off_prompt : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD normalize_answer
			METHODID 149
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:normalize_answer METHODID:149 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 149-normalize_answer

__BEGIN_METHOD_CODE__

GDBAgent::normalize_answer(string& answer)
{
    strip_control(answer);
    strip_dbx_comments(answer);
    cut_off_prompt(answer);
}

__END_METHOD_CODE__


	METHOD GDBAgent!cut_off_prompt
		CALLS
		type : GDBAgent,
		recording : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : AssocRec



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 8
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 8
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 3
			IN 0
			INDR 0
			LE 0
			LOC 31
			LT 0
			METHOD cut_off_prompt
			METHODID 146
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:8 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:8 EQTEST:0 EXPRORCALL:16 GE:0 GT:3 IN:0 INDR:0 LE:0 LOC:31 LT:0 METHOD:cut_off_prompt METHODID:146 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 146-cut_off_prompt

__BEGIN_METHOD_CODE__

GDBAgent::cut_off_prompt(string& answer)
{
    switch(type())
    {
    case GDB:
	if(recording() && answer.contains('>', -1))
	{
	    answer = answer.before('>', -1);
	    break;
	}

	 
    case DBX:
	answer = answer.before('(', -1);
	break;

    case XDB:
	answer = answer.before('>', -1);
	break;

    case JDB:
    {
	 
	if(answer.contains(last_prompt, -1))
	{
	    answer = answer.before(int(answer.length()) - 
				   int(last_prompt.length()));
	}
	break;
    }
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!strip_dbx_comments
		CALLS
		type : GDBAgent,
		index : string,
		index : string,
		length : _SYSTEM_OR_USER_,
		s : _SYSTEM_OR_USER_,
		verbatim : GDBAgent,
		has_print_r_option : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		index : string,
		at : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		at : string,
		contains : _SYSTEM_OR_USER_,
		gsub : string,
		gsub : string



		METRICS
			ARRAYOP 3
			ASS 15
			AVVARLEN 0
			CALLEDN 24
			CLASS GDBAgent
			CLASSID 89
			CYCLO 23
			DOTS 15
			EQTEST 6
			EXPRORCALL 42
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 99
			LT 5
			METHOD strip_dbx_comments
			METHODID 147
			MMINUS 2
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 26
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:15 AVVARLEN:0 CALLEDN:24 CLASS:GDBAgent CLASSID:89 CYCLO:23 DOTS:15 EQTEST:6 EXPRORCALL:42 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:99 LT:5 METHOD:strip_dbx_comments METHODID:147 MMINUS:2 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:26 TERNINSTR:0 USEDVARS:0 
		;


#ID 147-strip_dbx_comments

__BEGIN_METHOD_CODE__

GDBAgent::strip_dbx_comments(string& s)
{
    if(type() == DBX)
    {
	 
	 
	for(;)
	{
	    int warning = s.index(_REMOVED_STR_);
	    if(warning < 0)
		break;
	    int eol = s.index('\n', warning) + 1;
	    if(eol <= 0)
		eol = s.length();
	    s(warning, eol - warning) = _REMOVED_STR_;
	}
    }

     
    if(verbatim())
	return;

     
    if(!has_print_r_option())
	return;

    if(s.contains('/'))
    {
	 
	char quoted = '\0';

	unsigned int i = 0;
	while(i < s.length())
	{
	    char c = s[_ARGS_];
	    switch(c)
	    {
	    case '\\':
		if(i < s.length())
		    i++;
		break;

	    case '\'':
	    case '0':
		if(c == quoted)
		    quoted = '\0';
		else if(!quoted)
		    quoted = c;
		break;

	    case '/':
		if(i < s.length() && !quoted)
		{
		    if(s[_ARGS_] == '*')
		    {
			 
			int end = s.index(_REMOVED_STR_, i + 1);
			if(end == -1)
			{
			     
			    break;
			}

			 
			i--;
			s.at(int(i), int(end - i + 2)) = _REMOVED_STR_;
		    }
		    else if(s[_ARGS_] == '/')
		    {
			 
			int end = s.index('\n', i + 1);
			i--;

			 
			if(end == -1)
			    s.from(int(i)) = _REMOVED_STR_;
			else
			    s.at(int(i), int(end - i)) = _REMOVED_STR_;
		    }
		}
	    }
	}
    }

    if(s.contains(_REMOVED_STR_))
    {
	 
	 
	 







	s.gsub(rxdbxwarn1, _REMOVED_STR_);
	s.gsub(rxdbxwarn2, _REMOVED_STR_);
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!strip_control
		CALLS
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 15
			ASS 15
			AVVARLEN 0
			CALLEDN 14
			CLASS GDBAgent
			CLASSID 89
			CYCLO 18
			DOTS 8
			EQTEST 5
			EXPRORCALL 32
			GE 2
			GT 5
			IN 0
			INDR 0
			LE 0
			LOC 111
			LT 5
			METHOD strip_control
			METHODID 148
			MMINUS 3
			OUT 0
			PARNUM 1
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 27
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:15 ASS:15 AVVARLEN:0 CALLEDN:14 CLASS:GDBAgent CLASSID:89 CYCLO:18 DOTS:8 EQTEST:5 EXPRORCALL:32 GE:2 GT:5 IN:0 INDR:0 LE:0 LOC:111 LT:5 METHOD:strip_control METHODID:148 MMINUS:3 OUT:0 PARNUM:1 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:27 TERNINSTR:0 USEDVARS:0 
		;


#ID 148-strip_control

__BEGIN_METHOD_CODE__

GDBAgent::strip_control(string& answer)
{
    int source_index = 0;
    int target_index = 0;

    for(source_index = 0; source_index < int(answer.length()); source_index++)
    {
	char c = answer[_ARGS_];
	switch(c)
	{
	case '\b':
	     
	    if(target_index > 0 && answer[_ARGS_] != '\n')
		target_index--;
	    else
	    {
		 
		goto copy;
	    }
	    break;

	case '\r':
	    if(source_index + 1 < int(answer.length()))
	    {
		if(answer[_ARGS_] == '\n' ||
		    answer[_ARGS_] == '\r')
		{
		     
		    break;
		}
	        else
		{
		     
		     
		    while(target_index > 0 && 
			   answer[_ARGS_] != '\n')
			target_index--;
		}
	    }
	    else
	    {
		 
		goto copy;
	    }
	    break;

	case '\032':
	     
	     
	     
	     
	    if(target_index > 0 &&
		answer[_ARGS_] == '\n' &&
		source_index + 1 < int(answer.length()) && 
		answer[_ARGS_] == '\032')
	    {
		 
		int i = source_index;
		while(i < int(answer.length()) &&
		       answer[_ARGS_] != '\n' && answer[_ARGS_] != ':')
		    i++;
		if(i >= int(answer.length()))
		{
		     
		    goto copy;
		}
		else if(answer[_ARGS_] == ':')
		{
		     
		    goto copy;
		}
		else
		{
		     
		     ;
		    target_index--;
		    source_index = i;
		}
	    }
	    else
	    {
		 
		goto copy;
	    }
	    break;

	case '\033':
	     
	     
	     
	     
	    while(source_index < int(answer.length()) && 
		   ! (__ctype_b[(int) ( ( answer[_ARGS_] ) )] & (unsigned short int)   _ISalpha )  )
		source_index++;

	    if(source_index >= int(answer.length()))
	    {
		 
		answer[_ARGS_] = c;
	    }
	    break;

	copy:
	default:
	     
	    answer[_ARGS_] = answer[_ARGS_];
	    break;
	}
    }

    answer = answer.before(target_index);
}

__END_METHOD_CODE__


	METHOD GDBAgent!InputHP
		CALLS
		answer : _SYSTEM_OR_USER_,
		handle_input : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 8
			LT 1
			METHOD InputHP
			METHODID 156
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:8 LT:1 METHOD:InputHP METHODID:156 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 156-InputHP

__BEGIN_METHOD_CODE__

GDBAgent::InputHP(Agent *agent, void *, void *call_data)
{
    GDBAgent* gdb = dynamic_cast< GDBAgent  *>(  agent ) ;

    DataLength* dl = (DataLength *) call_data;
    string answer(dl->data, dl->length);

    gdb->handle_input(answer);
}

__END_METHOD_CODE__


	METHOD GDBAgent!handle_echo
		CALLS
		detect_echos : GDBAgent,
		length : _SYSTEM_OR_USER_,
		length : AssocRec,
		length : AssocRec,
		callHandlers : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		prepend : _SYSTEM_OR_USER_,
		detect_echos : GDBAgent



		METRICS
			echoed_characters REFERRED 6 TIMES,
			ARRAYOP 3
			ASS 12
			AVVARLEN 17
			CALLEDN 13
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 7
			EQTEST 2
			EXPRORCALL 21
			GE 5
			GT 5
			IN 0
			INDR 0
			LE 0
			LOC 57
			LT 2
			METHOD handle_echo
			METHODID 151
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:3 ASS:12 AVVARLEN:17 CALLEDN:13 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:7 EQTEST:2 EXPRORCALL:21 GE:5 GT:5 IN:0 INDR:0 LE:0 LOC:57 LT:2 METHOD:handle_echo METHODID:151 MMINUS:0 OUT:0 PARNUM:1 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:1 
		;


#ID 151-handle_echo

__BEGIN_METHOD_CODE__

GDBAgent::handle_echo(string& answer)
{
     
    if(!detect_echos())
	return;

     
     
     
    if(echoed_characters >= 0)
    {
	int i = 0;
	int e = echoed_characters;
	while(i < int(answer.length()) && e < int(last_written.length()))
	{
	    if(answer[_ARGS_] == '\r')
	    {
		 
		i++;
	    }
	    else if(answer[_ARGS_] == last_written[_ARGS_])
	    {
		i++, e++;
	    }
	    else
	    {
		 
		break;
	    }
	}

	if(e >= ECHO_THRESHOLD && e >= int(last_written.length()))
	{
	     
	     
	    callHandlers(EchoDetected);
	    answer = answer.from(i);
	    echoed_characters = -1;
	}
	else if(i >= ECHO_THRESHOLD && i >= int(answer.length()))
	{
	     
	     
	    answer = _REMOVED_STR_;
	    echoed_characters = e;
	}
	else
	{
	     
	     
	    answer.prepend(last_written.before(echoed_characters));
	    echoed_characters = -1;

	     
	    detect_echos(false);
	}
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!handle_more
		CALLS
		requires_reply : GDBAgent,
		write : GDBAgent,
		flush : LiterateAgent,
		index : string,
		from : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 0
			METHOD handle_more
			METHODID 152
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:0 METHOD:handle_more METHODID:152 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 152-handle_more

__BEGIN_METHOD_CODE__

GDBAgent::handle_more(string& answer)
{
     
    string reply = requires_reply(answer);
    if(reply != _REMOVED_STR_)
    {
	 
	write(reply);
	flush();

	 
	int last_beginning_of_line = answer.index('\n', -1) + 1;
	answer.from(last_beginning_of_line) = _REMOVED_STR_;
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!handle_reply
		CALLS
		recording : GDBAgent,
		ends_with_secondary_prompt : GDBAgent,
		callHandlers : _SYSTEM_OR_USER_,
		write : GDBAgent,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 4
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 28
			LT 0
			METHOD handle_reply
			METHODID 153
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:4 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:28 LT:0 METHOD:handle_reply METHODID:153 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 153-handle_reply

__BEGIN_METHOD_CODE__

GDBAgent::handle_reply(string& answer)
{
    if(recording())
	return;

     
    if(ends_with_secondary_prompt(answer))
    {
	 
	 
	 
	 
	 

	ReplyRequiredInfo info;
	info.question = answer;
	info.reply    = _REMOVED_STR_;

	 
	callHandlers(ReplyRequired, (void *)&info);

	 
	write(info.reply);
	flush();

	 
	answer = info.question;
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!recording
		CALLS
		callHandlers : _SYSTEM_OR_USER_,
		recording : GDBAgent,
		recording : GDBAgent



		METRICS
			_recording REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 10
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD recording
			METHODID 104
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:10 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:recording METHODID:104 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 104-recording

__BEGIN_METHOD_CODE__

GDBAgent::recording(bool val)
{
    if(_recording != val)
    {
	_recording = val;
	callHandlers(Recording, (void *)recording());
    }
    return recording();
}

__END_METHOD_CODE__


	METHOD GDBAgent!handle_input
		CALLS
		handle_echo : GDBAgent,
		handle_more : GDBAgent,
		handle_reply : GDBAgent,
		strip_control : GDBAgent,
		callHandlers : _SYSTEM_OR_USER_,
		ends_with_prompt : GDBAgent,
		normalize_answer : GDBAgent,
		strip_control : GDBAgent,
		_on_answer : _SYSTEM_OR_USER_,
		ends_with_prompt : GDBAgent,
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		_on_answer_completion : _SYSTEM_OR_USER_,
		write : GDBAgent,
		flush : LiterateAgent,
		callHandlers : _SYSTEM_OR_USER_,
		_on_answer_completion : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		write : GDBAgent,
		flush : LiterateAgent,
		ends_with_prompt : GDBAgent,
		normalize_answer : GDBAgent,
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		c : _SYSTEM_OR_USER_,
		_on_question_completion : _SYSTEM_OR_USER_,
		ends_with_prompt : GDBAgent,
		normalize_answer : GDBAgent,
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		answers : _SYSTEM_OR_USER_,
		datas : _SYSTEM_OR_USER_,
		answer_completion : _SYSTEM_OR_USER_,
		array_completion : _SYSTEM_OR_USER_,
		write : GDBAgent,
		flush : LiterateAgent



		METRICS
			state REFERRED 8 TIMES,
			_user_data REFERRED 4 TIMES,
			questions_waiting REFERRED 5 TIMES,
			_qu_data REFERRED 1 TIMES,
			qu_index REFERRED 1 TIMES,
			_qu_count REFERRED 1 TIMES,
			cmd_array REFERRED 3 TIMES,
			complete_answers REFERRED 4 TIMES,
			_qu_datas REFERRED 1 TIMES,
			_qa_data REFERRED 1 TIMES,
			_on_answer REFERRED 2 TIMES,
			_on_answer_completion REFERRED 5 TIMES,
			_on_question_completion REFERRED 2 TIMES,
			_on_qu_array_completion REFERRED 2 TIMES,
			ARRAYOP 6
			ASS 20
			AVVARLEN 12
			CALLEDN 36
			CLASS GDBAgent
			CLASSID 89
			CYCLO 24
			DOTS 0
			EQTEST 2
			EXPRORCALL 62
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 150
			LT 0
			METHOD handle_input
			METHODID 154
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 51
			TERNINSTR 0
			USEDVARS 14

#METRICS ARRAYOP:6 ASS:20 AVVARLEN:12 CALLEDN:36 CLASS:GDBAgent CLASSID:89 CYCLO:24 DOTS:0 EQTEST:2 EXPRORCALL:62 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:150 LT:0 METHOD:handle_input METHODID:154 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:51 TERNINSTR:0 USEDVARS:14 
		;


#ID 154-handle_input

__BEGIN_METHOD_CODE__

GDBAgent::handle_input(string& answer)
{
    handle_echo(answer);
    handle_more(answer);
    handle_reply(answer);

     
    switch(state)
    {
    case ReadyWithPrompt:
	 
	 
	 
	strip_control(answer);
	callHandlers(AsyncAnswer, (void *)&answer);
	break;

    case BusyOnInitialCmds:
    case BusyOnCmd:
	complete_answer += answer;

	if(_on_answer != 0)
	{
	    if(ends_with_prompt(complete_answer))
		normalize_answer(answer);
	    else
		strip_control(answer);
	    _on_answer(answer, _user_data);
	}

	if(ends_with_prompt(complete_answer))
	{
             

             
	    if(state == BusyOnInitialCmds)
	    {
		if(!questions_waiting) 
		{
		    state = ReadyWithPrompt;
		    callHandlers(ReadyForCmd, (void *)true);
		    callHandlers(ReadyForQuestion, (void *)true);

		    if(_on_answer_completion != 0)
			_on_answer_completion(_user_data);
		}
		else
		{
		    state = BusyOnQuArray;

		     
		    write(cmd_array[_ARGS_]);
		    flush();
		}
	    }
	    else if(!questions_waiting)
	    {
		state = ReadyWithPrompt;
		callHandlers(ReadyForQuestion, (void *)true);

		if(_on_answer_completion != 0)
		    _on_answer_completion(_user_data);
	    }
	    else
	    {
		state = BusyOnQuArray;
		callHandlers(ReadyForCmd, (void *)false);

		 
		write(cmd_array[_ARGS_]);
		flush();
	    }
	}
	break;

    case BusyOnQuestion:
	complete_answer += answer;

	if(ends_with_prompt(complete_answer))
	{
             
	    normalize_answer(complete_answer);

             
	    state = ReadyWithPrompt;
	    callHandlers(ReadyForQuestion, (void *)true);
	    callHandlers(ReadyForCmd, (void *)true);

	    if(_on_question_completion != 0)
	    {
		 
		 
		 
		string c(complete_answer);
		_on_question_completion(c, _qu_data);
	    }
	}
	break;

    case BusyOnQuArray:
	complete_answers[_ARGS_] += answer;

	if(ends_with_prompt(complete_answers[_ARGS_]))
	{
             
	    normalize_answer(complete_answers[_ARGS_]);

	    if(qu_index == _qu_count - 1)
	    {
		 
		state = ReadyWithPrompt;
		callHandlers(ReadyForQuestion, (void *)true);
		callHandlers(ReadyForCmd, (void *)true);

		if(questions_waiting || _on_qu_array_completion != 0)
		{
		     
		     
		     
		    StringArray answers(complete_answers);
		    VoidArray datas(_qu_datas);
		    OQACProc array_completion  = _on_qu_array_completion;
		    OACProc  answer_completion = _on_answer_completion;
		    void *array_data           = _qa_data;

		    if(questions_waiting)
		    {
			 
			questions_waiting = false;

			if(answer_completion != 0)
			    answer_completion(_user_data);
		    }
		    if(array_completion != 0)
			array_completion(answers, datas, array_data);
		}
	    }
	    else
	    {
		 
		write(cmd_array[_ARGS_]);
		flush();
	    }
	}
	break;

    default:
	 ;
	break;
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!DiedHP
		CALLS
		handle_died : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 1
			METHOD DiedHP
			METHODID 159
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:4 LT:1 METHOD:DiedHP METHODID:159 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 159-DiedHP

__BEGIN_METHOD_CODE__

GDBAgent::DiedHP(Agent *agent, void *, void *)
{
    GDBAgent *gdb = dynamic_cast< GDBAgent  *>(  agent ) ;
    gdb->handle_died();
}

__END_METHOD_CODE__


	METHOD GDBAgent!handle_died
		CALLS
		_on_answer_completion : _SYSTEM_OR_USER_,
		_on_question_completion : _SYSTEM_OR_USER_,
		_on_qu_array_completion : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_,
		callHandlers : _SYSTEM_OR_USER_



		METRICS
			state REFERRED 2 TIMES,
			_user_data REFERRED 1 TIMES,
			_qu_data REFERRED 1 TIMES,
			complete_answers REFERRED 1 TIMES,
			_qu_datas REFERRED 1 TIMES,
			_qa_data REFERRED 1 TIMES,
			_on_answer_completion REFERRED 2 TIMES,
			_on_question_completion REFERRED 2 TIMES,
			_on_qu_array_completion REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 13
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 10
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 33
			LT 0
			METHOD handle_died
			METHODID 155
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 9

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:13 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:10 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:33 LT:0 METHOD:handle_died METHODID:155 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:9 
		;


#ID 155-handle_died

__BEGIN_METHOD_CODE__

GDBAgent::handle_died()
{
     
    last_prompt = _REMOVED_STR_;

     
    switch(state)
    {
    case ReadyWithPrompt:
	break;

    case BusyOnInitialCmds:
    case BusyOnCmd:
	if(_on_answer_completion != 0)
	    _on_answer_completion(_user_data);
	break;

    case BusyOnQuestion:
	if(_on_question_completion != 0)
	    _on_question_completion(complete_answer, _qu_data);
	break;

    case BusyOnQuArray:
	if(_on_qu_array_completion != 0)
	    _on_qu_array_completion(complete_answers, _qu_datas, _qa_data);
	break;
    }

     
    state = BusyOnCmd;
    complete_answer = _REMOVED_STR_;
    callHandlers(ReadyForQuestion, (void *)false);
    callHandlers(ReadyForCmd,      (void *)false);
}

__END_METHOD_CODE__


	METHOD GDBAgent!print_command
		CALLS
		type : GDBAgent,
		has_output_command : GDBAgent,
		has_print_r_option : GDBAgent,
		has_named_values : GDBAgent,
		type : GDBAgent,
		quote : _SYSTEM_OR_USER_,
		echo_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 10
			AVVARLEN 0
			CALLEDN 7
			CLASS GDBAgent
			CLASSID 89
			CYCLO 16
			DOTS 0
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 53
			LT 0
			METHOD print_command
			METHODID 107
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:0 CALLEDN:7 CLASS:GDBAgent CLASSID:89 CYCLO:16 DOTS:0 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:53 LT:0 METHOD:print_command METHODID:107 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:0 
		;


#ID 107-print_command

__BEGIN_METHOD_CODE__

GDBAgent::print_command(string expr, bool internal)
{
    string cmd;

    switch(type())
    {
    case GDB:
    case DBX:
	if(internal && has_output_command())
	    cmd = _REMOVED_STR_;
	else
	    cmd = _REMOVED_STR_;
	if(has_print_r_option())
	    cmd += _REMOVED_STR_;
	break;

    case XDB:
	cmd = _REMOVED_STR_;
	break;

    case JDB:
	if(internal)
	    cmd = _REMOVED_STR_;
	else
	    cmd = _REMOVED_STR_;
	break;
    }

    if(expr != _REMOVED_STR_)
    {
	if(!has_named_values())
	{
	    switch(type())
	    {
	    case DBX:
		cmd += _REMOVED_STR_ + quote(expr + _REMOVED_STR_) + _REMOVED_STR_;
		break;

	    case GDB:
	    case XDB:
		cmd = echo_command(expr + _REMOVED_STR_) + _REMOVED_STR_ + cmd;
		break;

	    case JDB:
		 
		break;
	    }
	}

	cmd += _REMOVED_STR_ + expr;
    }

    return cmd;
}

__END_METHOD_CODE__


	METHOD GDBAgent!display_command
		CALLS
		has_display_command : GDBAgent,
		has_print_r_option : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 15
			LT 0
			METHOD display_command
			METHODID 109
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:15 LT:0 METHOD:display_command METHODID:109 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 109-display_command

__BEGIN_METHOD_CODE__

GDBAgent::display_command(string expr)
{
    if(!has_display_command())
	return _REMOVED_STR_;

    string cmd;
    if(has_print_r_option() && expr != _REMOVED_STR_)
	cmd = _REMOVED_STR_;
    else
	cmd = _REMOVED_STR_;

    if(expr != _REMOVED_STR_)
	cmd += _REMOVED_STR_ + expr;

    return cmd;
}

__END_METHOD_CODE__


	METHOD GDBAgent!where_command
		CALLS
		type : GDBAgent,
		has_where_h_option : GDBAgent,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 0
			METHOD where_command
			METHODID 110
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:23 LT:0 METHOD:where_command METHODID:110 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 110-where_command

__BEGIN_METHOD_CODE__

GDBAgent::where_command(int count)
{
    string cmd;
    switch(type())
    {
    case GDB:
    case DBX:
    case JDB:
	if(has_where_h_option())
	    cmd = _REMOVED_STR_;
	else
	    cmd = _REMOVED_STR_;
	break;
	
    case XDB:
	cmd = _REMOVED_STR_;
	break;
    }

    if(count != 0)
	cmd += _REMOVED_STR_ + itostring(count);

    return cmd;
}

__END_METHOD_CODE__


	METHOD GDBAgent!info_locals_command
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 0
			METHOD info_locals_command
			METHODID 121
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:0 METHOD:info_locals_command METHODID:121 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 121-info_locals_command

__BEGIN_METHOD_CODE__

GDBAgent::info_locals_command()
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_;

    case DBX:
	return _REMOVED_STR_;

    case XDB:
	return _REMOVED_STR_;

    case JDB:
	return _REMOVED_STR_;
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!info_args_command
		CALLS
		type : GDBAgent,
		info_locals_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD info_args_command
			METHODID 122
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:info_args_command METHODID:122 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 122-info_args_command

__BEGIN_METHOD_CODE__

GDBAgent::info_args_command()
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_;

    default:
	return info_locals_command();
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!info_display_command
		CALLS
		type : GDBAgent,
		display_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD info_display_command
			METHODID 123
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:info_display_command METHODID:123 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 123-info_display_command

__BEGIN_METHOD_CODE__

GDBAgent::info_display_command()
{
    if(type() == GDB)
	return _REMOVED_STR_;
    else
	return display_command();
}

__END_METHOD_CODE__


	METHOD GDBAgent!pwd_command
		CALLS
		type : GDBAgent,
		has_pwd_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 0
			METHOD pwd_command
			METHODID 111
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:0 METHOD:pwd_command METHODID:111 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 111-pwd_command

__BEGIN_METHOD_CODE__

GDBAgent::pwd_command()
{
    switch(type())
    {
    case GDB:
    case DBX:
	if(has_pwd_command())
	    return _REMOVED_STR_;
	else
	    return _REMOVED_STR_;

    case XDB:
	return _REMOVED_STR_;

    case JDB:
	return _REMOVED_STR_;
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!make_command
		CALLS
		type : GDBAgent,
		has_make_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 25
			LT 0
			METHOD make_command
			METHODID 125
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:25 LT:0 METHOD:make_command METHODID:125 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 125-make_command

__BEGIN_METHOD_CODE__

GDBAgent::make_command(string args)
{
    string cmd;
    switch(type())
    {
    case GDB:
    case DBX:
	if(has_make_command())
	    cmd = _REMOVED_STR_;
	else
	    cmd = _REMOVED_STR_;
	break;

    case XDB:
	cmd = _REMOVED_STR_;
	break;

    case JDB:
	return _REMOVED_STR_;		 
    }

    if(args == _REMOVED_STR_)
	return cmd;
    else
	return cmd + _REMOVED_STR_ + args;
}

__END_METHOD_CODE__


	METHOD GDBAgent!jump_command
		CALLS
		has_jump_command : GDBAgent,
		type : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		after : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 2
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 25
			LT 0
			METHOD jump_command
			METHODID 126
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:2 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:25 LT:0 METHOD:jump_command METHODID:126 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 126-jump_command

__BEGIN_METHOD_CODE__

GDBAgent::jump_command(string pos)
{
    if(!has_jump_command())
	return _REMOVED_STR_;

    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + pos;
   
    case XDB:
    {
	if(pos.contains('*', 0))
	    pos = pos.after('*');
	return _REMOVED_STR_ + pos;
    }

    case DBX:
	return _REMOVED_STR_ + pos;

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!regs_command
		CALLS
		has_regs_command : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 9
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 25
			LT 0
			METHOD regs_command
			METHODID 127
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 7
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:9 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:25 LT:0 METHOD:regs_command METHODID:127 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:7 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 127-regs_command

__BEGIN_METHOD_CODE__

GDBAgent::regs_command(bool all)
{
    if(!has_regs_command())
	return _REMOVED_STR_;

    switch(type())
    {
    case GDB:
	if(all)
	    return _REMOVED_STR_;
	else
	    return _REMOVED_STR_;
   
    case DBX:
	if(all)
	    return _REMOVED_STR_;	 
	else
	    return _REMOVED_STR_;	

    case XDB:
    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!watch_command
		CALLS
		has_watch_command : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 11
			DOTS 0
			EQTEST 4
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 31
			LT 0
			METHOD watch_command
			METHODID 128
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 10
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:11 DOTS:0 EQTEST:4 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:31 LT:0 METHOD:watch_command METHODID:128 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:10 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 128-watch_command

__BEGIN_METHOD_CODE__

GDBAgent::watch_command(string expr, WatchMode w)
{
    if((has_watch_command() & w) != w)
	return _REMOVED_STR_;

    switch(type())
    {
    case GDB:
	if((w & WATCH_CHANGE) == WATCH_CHANGE)
	    return _REMOVED_STR_ + expr;
	if((w & WATCH_ACCESS) == WATCH_ACCESS)
	    return _REMOVED_STR_ + expr;
	if((w & WATCH_READ) == WATCH_READ)
	    return _REMOVED_STR_ + expr;
	return _REMOVED_STR_;
   
    case DBX:
	if((w & WATCH_CHANGE) == WATCH_CHANGE)
	    return _REMOVED_STR_ + expr;
	return _REMOVED_STR_;

    case XDB:
	 
	 
	return _REMOVED_STR_;

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!kill_command
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD kill_command
			METHODID 129
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:kill_command METHODID:129 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 129-kill_command

__BEGIN_METHOD_CODE__

GDBAgent::kill_command()
{
    switch(type())
    {
    case GDB:
    case DBX:
	return _REMOVED_STR_;
   
    case XDB:
	return _REMOVED_STR_;

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!frame_command
		CALLS
		type : GDBAgent,
		has_frame_command : GDBAgent,
		where_command : GDBAgent,
		print_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 0
			METHOD frame_command
			METHODID 113
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:0 METHOD:frame_command METHODID:113 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 113-frame_command

__BEGIN_METHOD_CODE__

GDBAgent::frame_command()
{
    switch(type())
    {
    case GDB:
    case DBX:
	if(has_frame_command())
	    return _REMOVED_STR_;
	else
	    return where_command(1);

    case XDB:
	return print_command(_REMOVED_STR_);

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!frame_command
		CALLS
		has_frame_command : GDBAgent,
		type : GDBAgent,
		frame_command : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 0
			METHOD frame_command
			METHODID 112
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:0 METHOD:frame_command METHODID:112 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 112-frame_command

__BEGIN_METHOD_CODE__

GDBAgent::frame_command(int num)
{
    if(!has_frame_command())
	return _REMOVED_STR_;

    switch(type())
    {
    case GDB:
    case DBX:
	return frame_command() + _REMOVED_STR_ + itostring(num);

    case XDB:
	return _REMOVED_STR_ + itostring(num);

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!func_command
		CALLS
		type : GDBAgent,
		frame_command : GDBAgent,
		has_func_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 0
			METHOD func_command
			METHODID 114
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:0 METHOD:func_command METHODID:114 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:1 USEDVARS:0 
		;


#ID 114-func_command

__BEGIN_METHOD_CODE__

GDBAgent::func_command()
{
    switch(type())
    {
    case GDB:
    case XDB:
    case JDB:
	return frame_command();

    case DBX:
	return has_func_command() ? _REMOVED_STR_ : _REMOVED_STR_;
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!echo_command
		CALLS
		type : GDBAgent,
		cook : _SYSTEM_OR_USER_,
		print_command : GDBAgent,
		quote : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 0
			METHOD echo_command
			METHODID 115
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:0 METHOD:echo_command METHODID:115 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 115-echo_command

__BEGIN_METHOD_CODE__

GDBAgent::echo_command(string text)
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + cook(text);

    case DBX:
	return print_command() + _REMOVED_STR_ + quote(text);

    case XDB:
	return quote(text);

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!whatis_command
		CALLS
		type : GDBAgent,
		has_print_r_option : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 0
			METHOD whatis_command
			METHODID 116
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:21 LT:0 METHOD:whatis_command METHODID:116 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 116-whatis_command

__BEGIN_METHOD_CODE__

GDBAgent::whatis_command(string text)
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + text;

    case DBX:
	if(has_print_r_option())
	    return _REMOVED_STR_ + text;
	else
	    return _REMOVED_STR_ + text;

    case XDB:
	return _REMOVED_STR_ + text + _REMOVED_STR_;

    case JDB:
	return _REMOVED_STR_ + text;	 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!enable_command
		CALLS
		prepend : _SYSTEM_OR_USER_,
		type : GDBAgent,
		has_handler_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 1
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 24
			LT 0
			METHOD enable_command
			METHODID 130
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:1 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:24 LT:0 METHOD:enable_command METHODID:130 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 130-enable_command

__BEGIN_METHOD_CODE__

GDBAgent::enable_command(string bp)
{
    if(bp != _REMOVED_STR_)
	bp.prepend(' ');

    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + bp;

    case DBX:
	if(has_handler_command())
	    return _REMOVED_STR_ + bp;
	else
	    return _REMOVED_STR_;

    case XDB:
	return _REMOVED_STR_ + bp;

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!disable_command
		CALLS
		prepend : _SYSTEM_OR_USER_,
		type : GDBAgent,
		has_handler_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 1
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 24
			LT 0
			METHOD disable_command
			METHODID 131
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:1 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:24 LT:0 METHOD:disable_command METHODID:131 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 131-disable_command

__BEGIN_METHOD_CODE__

GDBAgent::disable_command(string bp)
{
    if(bp != _REMOVED_STR_)
	bp.prepend(' ');

    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + bp;

    case DBX:
	if(has_handler_command())
	    return _REMOVED_STR_ + bp;
	else
	    return _REMOVED_STR_;

    case XDB:
	return _REMOVED_STR_ + bp;

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!delete_command
		CALLS
		prepend : _SYSTEM_OR_USER_,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 19
			LT 0
			METHOD delete_command
			METHODID 132
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:19 LT:0 METHOD:delete_command METHODID:132 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 132-delete_command

__BEGIN_METHOD_CODE__

GDBAgent::delete_command(string bp)
{
    if(bp != _REMOVED_STR_)
	bp.prepend(' ');

    switch(type())
    {
    case DBX:
    case GDB:
	return _REMOVED_STR_ + bp;

    case XDB:
	return _REMOVED_STR_ + bp;

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!ignore_command
		CALLS
		type : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		has_handler_command : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 0
			METHOD ignore_command
			METHODID 133
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:21 LT:0 METHOD:ignore_command METHODID:133 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 133-ignore_command

__BEGIN_METHOD_CODE__

GDBAgent::ignore_command(string bp, int count)
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + bp + _REMOVED_STR_ + itostring(count);

    case DBX:
	if(has_handler_command())
	    return _REMOVED_STR_ + bp + _REMOVED_STR_ + itostring(count);
	else
	    return _REMOVED_STR_;

    case XDB:
	return _REMOVED_STR_ + bp + _REMOVED_STR_ + itostring(count);

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!condition_command
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 0
			METHOD condition_command
			METHODID 134
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:0 METHOD:condition_command METHODID:134 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 134-condition_command

__BEGIN_METHOD_CODE__

GDBAgent::condition_command(string bp, string expr)
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + bp + _REMOVED_STR_ + expr;

    case DBX:
    case XDB:
    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!shell_command
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 0
			METHOD shell_command
			METHODID 135
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:17 LT:0 METHOD:shell_command METHODID:135 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 135-shell_command

__BEGIN_METHOD_CODE__

GDBAgent::shell_command(string cmd)
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + cmd;

    case DBX:
	return _REMOVED_STR_ + cmd;

    case XDB:
	return _REMOVED_STR_ + cmd;

    case JDB:
	return _REMOVED_STR_;		 
    }
    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!debug_command
		CALLS
		type : GDBAgent,
		has_givenfile_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 20
			LT 0
			METHOD debug_command
			METHODID 136
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:20 LT:0 METHOD:debug_command METHODID:136 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 136-debug_command

__BEGIN_METHOD_CODE__

GDBAgent::debug_command(string program)
{
    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + program;

    case DBX:
	if(has_givenfile_command())
	    return _REMOVED_STR_ + program;  
	else
	    return _REMOVED_STR_ + program;      

    case XDB:
	return _REMOVED_STR_ + program;  

    case JDB:
	return _REMOVED_STR_ + program;
    }
    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!signal_command
		CALLS
		itostring : _SYSTEM_OR_USER_,
		type : GDBAgent,
		has_cont_sig_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 0
			METHOD signal_command
			METHODID 137
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:23 LT:0 METHOD:signal_command METHODID:137 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 137-signal_command

__BEGIN_METHOD_CODE__

GDBAgent::signal_command(int sig)
{
    string n = itostring(sig);

    switch(type())
    {
    case GDB:
	return _REMOVED_STR_ + n;

    case DBX:
	if(has_cont_sig_command())
	    return _REMOVED_STR_ + n;  
	else
	    return _REMOVED_STR_ + n;      

    case XDB:
	return _REMOVED_STR_ + n + _REMOVED_STR_;

    case JDB:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!nop_command

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD nop_command
			METHODID 138
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:nop_command METHODID:138 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 138-nop_command

__BEGIN_METHOD_CODE__

GDBAgent::nop_command(string comment)
{
    return _REMOVED_STR_ + comment;	 
}

__END_METHOD_CODE__


	METHOD GDBAgent!prepend_prefix
		CALLS
		matches : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 3
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD prepend_prefix
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:3 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:prepend_prefix METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-prepend_prefix

__BEGIN_METHOD_CODE__

GDBAgent::prepend_prefix(const string& prefix, const string& expr)
{
    if(expr.matches(rxidentifier)
	|| expr.contains(_REMOVED_STR_, 0) && expr.contains(_REMOVED_STR_, -1))
	return prefix + expr;
    else if(expr == _REMOVED_STR_)
	return prefix;
    else
	return prefix + _REMOVED_STR_ + expr + _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD GDBAgent!append_suffix
		CALLS
		matches : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 3
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD append_suffix
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:3 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:append_suffix METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-append_suffix

__BEGIN_METHOD_CODE__

GDBAgent::append_suffix(const string& expr, const string& suffix)
{
    if(expr.matches(rxidentifier)
	|| expr.contains(_REMOVED_STR_, 0) && expr.contains(_REMOVED_STR_, -1))
	return expr + suffix;
    else if(expr == _REMOVED_STR_)
	return suffix;
    else
	return _REMOVED_STR_ + expr + _REMOVED_STR_ + suffix;
}

__END_METHOD_CODE__


	METHOD GDBAgent!dereferenced_expr
		CALLS
		program_language : GDBAgent,
		prepend_prefix : GDBAgent,
		prepend_prefix : GDBAgent,
		type : GDBAgent,
		prepend_prefix : GDBAgent,
		append_suffix : GDBAgent,
		append_suffix : GDBAgent,
		prepend_prefix : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 8
			CLASS GDBAgent
			CLASSID 89
			CYCLO 10
			DOTS 0
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 39
			LT 0
			METHOD dereferenced_expr
			METHODID 117
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 9
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:8 CLASS:GDBAgent CLASSID:89 CYCLO:10 DOTS:0 EQTEST:1 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:39 LT:0 METHOD:dereferenced_expr METHODID:117 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:9 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 117-dereferenced_expr

__BEGIN_METHOD_CODE__

GDBAgent::dereferenced_expr(string expr)
{
    switch(program_language())
    {
    case LANGUAGE_C:
	return prepend_prefix(_REMOVED_STR_, expr);

    case LANGUAGE_FORTRAN:
	 
	return prepend_prefix(_REMOVED_STR_, expr);

    case LANGUAGE_JAVA:
	if(type() == GDB)
	{
	     
	    return prepend_prefix(_REMOVED_STR_, expr);
	}
	else
	{
	     
	    return expr;
	}
	break;

    case LANGUAGE_CHILL:
	return append_suffix(expr, _REMOVED_STR_);

    case LANGUAGE_PASCAL:
	return append_suffix(expr, _REMOVED_STR_);

    case LANGUAGE_ADA:
	 
	return prepend_prefix(_REMOVED_STR_, expr);

    case LANGUAGE_OTHER:
	return expr;		 
    }

    return expr;		 
}

__END_METHOD_CODE__


	METHOD GDBAgent!address_expr
		CALLS
		contains : _SYSTEM_OR_USER_,
		after : string,
		program_language : GDBAgent,
		prepend_prefix : GDBAgent,
		prepend_prefix : GDBAgent,
		prepend_prefix : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 6
			CLASS GDBAgent
			CLASSID 89
			CYCLO 10
			DOTS 2
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 30
			LT 0
			METHOD address_expr
			METHODID 118
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 8
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:6 CLASS:GDBAgent CLASSID:89 CYCLO:10 DOTS:2 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:30 LT:0 METHOD:address_expr METHODID:118 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:8 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 118-address_expr

__BEGIN_METHOD_CODE__

GDBAgent::address_expr(string expr)
{
    if(expr.contains('/', 0))
	expr = expr.after(' ');

    switch(program_language())
    {
    case LANGUAGE_C:
	return prepend_prefix(_REMOVED_STR_, expr);

    case LANGUAGE_PASCAL:
	return _REMOVED_STR_ + expr + _REMOVED_STR_;  

    case LANGUAGE_CHILL:	 
	return prepend_prefix(_REMOVED_STR_, expr);

    case LANGUAGE_FORTRAN:
	return prepend_prefix(_REMOVED_STR_, expr);

    case LANGUAGE_JAVA:
	return _REMOVED_STR_;		 

    case LANGUAGE_ADA:
	return _REMOVED_STR_;		 

    case LANGUAGE_OTHER:
	return _REMOVED_STR_;		 
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!index_expr
		CALLS
		program_language : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD index_expr
			METHODID 119
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:index_expr METHODID:119 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 119-index_expr

__BEGIN_METHOD_CODE__

GDBAgent::index_expr(string expr, string index)
{
    switch(program_language())
    {
    case LANGUAGE_FORTRAN:
    case LANGUAGE_ADA:
	return expr + _REMOVED_STR_ + index + _REMOVED_STR_;

    default:
	return expr + _REMOVED_STR_ + index + _REMOVED_STR_;
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!default_index_base
		CALLS
		program_language : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 9
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 0
			METHOD default_index_base
			METHODID 120
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:9 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:17 LT:0 METHOD:default_index_base METHODID:120 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 120-default_index_base

__BEGIN_METHOD_CODE__

GDBAgent::default_index_base()
{
    switch(program_language())
    {
    case LANGUAGE_FORTRAN:
    case LANGUAGE_PASCAL:
    case LANGUAGE_CHILL:
	return 1;

    case LANGUAGE_ADA:
    case LANGUAGE_C:
    case LANGUAGE_JAVA:
    case LANGUAGE_OTHER:
	return 0;
    }

    return 0;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!assign_command
		CALLS
		type : GDBAgent,
		program_language : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 14
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 41
			LT 0
			METHOD assign_command
			METHODID 108
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:14 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:41 LT:0 METHOD:assign_command METHODID:108 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 108-assign_command

__BEGIN_METHOD_CODE__

GDBAgent::assign_command(string var, string expr)
{
    string cmd;

    switch(type())
    {
    case GDB:
	cmd = _REMOVED_STR_;
	break;

    case DBX:
	cmd = _REMOVED_STR_;
	break;

    case XDB:
	cmd = _REMOVED_STR_;
	break;

    case JDB:
	return _REMOVED_STR_;		 
    }

    cmd += _REMOVED_STR_ + var + _REMOVED_STR_;

    switch(program_language())
    {
    case LANGUAGE_C:
    case LANGUAGE_JAVA:
    case LANGUAGE_FORTRAN:
    case LANGUAGE_OTHER:
	cmd += _REMOVED_STR_;
	break;

    case LANGUAGE_ADA:
    case LANGUAGE_PASCAL:
    case LANGUAGE_CHILL:
	cmd += _REMOVED_STR_;
	break;
    }

    return cmd + _REMOVED_STR_ + expr;
}

__END_METHOD_CODE__


	METHOD GDBAgent!normalize_address
		CALLS
		downcase : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		prepend : _SYSTEM_OR_USER_,
		upcase : string,
		upcase : string



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 14
			CLASS GDBAgent
			CLASSID 89
			CYCLO 14
			DOTS 11
			EQTEST 0
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 36
			LT 0
			METHOD normalize_address
			METHODID 150
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:14 CLASS:GDBAgent CLASSID:89 CYCLO:14 DOTS:11 EQTEST:0 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:36 LT:0 METHOD:normalize_address METHODID:150 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 150-normalize_address

__BEGIN_METHOD_CODE__

GDBAgent::normalize_address(string& addr)
{
     
     
     
    addr.downcase();
    if(addr.contains(_REMOVED_STR_, 0))
	addr = addr.after(_REMOVED_STR_);
    if(addr.contains(_REMOVED_STR_, 0))
	addr = addr.after(_REMOVED_STR_);
    if(addr.contains(_REMOVED_STR_, 0))
	addr = addr.after(_REMOVED_STR_);
    if(addr.contains(_REMOVED_STR_, -1))
	addr = addr.before(int(addr.length()) - 1);

    if(addr != _REMOVED_STR_)
    {
	switch(program_language())
	{
	case LANGUAGE_C:
	case LANGUAGE_JAVA:
	case LANGUAGE_FORTRAN:
	case LANGUAGE_ADA:
	case LANGUAGE_OTHER:
	    addr.prepend(_REMOVED_STR_);
	    break;

	case LANGUAGE_CHILL:
	    addr = _REMOVED_STR_ + upcase(addr);
	    break;

	case LANGUAGE_PASCAL:
	    addr = _REMOVED_STR_ + upcase(addr) + _REMOVED_STR_;
	    break;
	}
    }
}

__END_METHOD_CODE__


	METHOD GDBAgent!disassemble_command
		CALLS
		type : GDBAgent,
		normalize_address : GDBAgent,
		normalize_address : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 0
			METHOD disassemble_command
			METHODID 124
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:0 METHOD:disassemble_command METHODID:124 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 124-disassemble_command

__BEGIN_METHOD_CODE__

GDBAgent::disassemble_command(string start, string end)
{
    if(type() != GDB)
	return _REMOVED_STR_;

    normalize_address(start);
    string cmd = _REMOVED_STR_ + start;

    if(end != _REMOVED_STR_)
    {
	normalize_address(end);
	cmd += _REMOVED_STR_ + end;
    }
    return cmd;
}

__END_METHOD_CODE__


	METHOD GDBAgent!history_file
		CALLS
		type : GDBAgent,
		getenv : _SYSTEM_OR_USER_,
		getenv : _SYSTEM_OR_USER_,
		string : string,
		gethome : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 5
			CLASS GDBAgent
			CLASSID 89
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 28
			LT 0
			METHOD history_file
			METHODID 139
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:5 CLASS:GDBAgent CLASSID:89 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:28 LT:0 METHOD:history_file METHODID:139 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 139-history_file

__BEGIN_METHOD_CODE__

GDBAgent::history_file()
{
    switch(type())
    {
    case GDB:
    {
	char *g = getenv(_REMOVED_STR_);
	if(g != 0)
	    return g;
	else
	    return _REMOVED_STR_;
    }

    case DBX:
    case JDB:
	return _REMOVED_STR_;		 

    case XDB:
    {
	char *g = getenv(_REMOVED_STR_);
	if(g != 0)
	    return g;
	else
	    return string(gethome()) + _REMOVED_STR_;
    }
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD GDBAgent!program_language
		CALLS
		downcase : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		contains : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		program_language : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 24
			CLASS GDBAgent
			CLASSID 89
			CYCLO 11
			DOTS 15
			EQTEST 0
			EXPRORCALL 35
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 55
			LT 0
			METHOD program_language
			METHODID 69
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:24 CLASS:GDBAgent CLASSID:89 CYCLO:11 DOTS:15 EQTEST:0 EXPRORCALL:35 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:55 LT:0 METHOD:program_language METHODID:69 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 69-program_language

__BEGIN_METHOD_CODE__

GDBAgent::program_language(string text)
{
    text.downcase();

    if(text.contains(_REMOVED_STR_))
    {
	text = text.after(_REMOVED_STR_);
	text = text.before(_REMOVED_STR_);

	if(text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_FORTRAN);
	}
	else if(text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_JAVA);
	}
	else if(text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_CHILL);
	}
	else if(text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_PASCAL);
	}
	else if(text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_ADA);
	}
	else if(text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_C);
	}
	else if(text.contains(_REMOVED_STR_)
	    || text.contains(_REMOVED_STR_)
	    || text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_PASCAL);
	}
	else if(text.contains(_REMOVED_STR_))
	{
	    program_language(LANGUAGE_C);
	}
	else if(text.contains(_REMOVED_STR_))
	{
	     
	}
	else
	{
	     
	    program_language(LANGUAGE_C);
	}
    }

    return program_language();
}

__END_METHOD_CODE__


	METHOD GDBAgent!PanicHP
		CALLS
		path : Agent,
		downcase : string,
		title : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 8
			LT 9
			METHOD PanicHP
			METHODID 157
			MMINUS 0
			OUT 4
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:8 LT:9 METHOD:PanicHP METHODID:157 MMINUS:0 OUT:4 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 157-PanicHP

__BEGIN_METHOD_CODE__

GDBAgent::PanicHP(Agent *source, void *, void *call_data)
{
    string msg = (char *)call_data;
    string path = source->path();
    GDBAgent *gdb = dynamic_cast< GDBAgent  *>(  source ) ;
    if(gdb != 0)
	path = downcase(gdb->title());
    cerr << path << _REMOVED_STR_ << msg << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD GDBAgent!StrangeHP
		CALLS
		prepend : string,
		PanicHP : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD StrangeHP
			METHODID 158
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:StrangeHP METHODID:158 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 158-StrangeHP

__BEGIN_METHOD_CODE__

GDBAgent::StrangeHP(Agent *source, void *client_data, void *call_data)
{
    string msg = (char *)call_data;
    msg.prepend(_REMOVED_STR_);
    PanicHP(source, client_data, (char *)msg);
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/GDBAgent.o.nu.met	  Methods Number  69
#======================================================================
#Process file ../../code/ddd-3.0/ddd/HelpCB.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/HistoryF.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/MinMaxA.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/PosBuffer.o.nu.met ... 


	METHOD PosBuffer!filter
		CALLS
		length : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		has_prefix : _SYSTEM_OR_USER_,
		has_prefix : _SYSTEM_OR_USER_,
		has_prefix : _SYSTEM_OR_USER_,
		has_prefix : _SYSTEM_OR_USER_,
		has_prefix : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		has_prefix : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		has_prefix : _SYSTEM_OR_USER_,
		program_language : GDBAgent,
		has_prefix : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		has_prefix : _SYSTEM_OR_USER_,
		index : string,
		matches : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : QueueRec,
		contains : _SYSTEM_OR_USER_,
		through : string,
		after : string,
		has_prefix : _SYSTEM_OR_USER_,
		index : string,
		from : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		through : string,
		from : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		after : string,
		type : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		atoi : _SYSTEM_OR_USER_,
		filter_line : _SYSTEM_OR_USER_,
		prepend : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		fetch_address : _SYSTEM_OR_USER_,
		index : string,
		from : _SYSTEM_OR_USER_,
		at : string,
		index : string,
		index : string,
		fetch_address : _SYSTEM_OR_USER_,
		fetch_in_function : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		fetch_address : _SYSTEM_OR_USER_,
		fetch_in_function : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		fetch_address : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		after : string,
		is_address_start : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		index : string,
		fetch_address : _SYSTEM_OR_USER_,
		fetch_in_function : _SYSTEM_OR_USER_,
		index : string,
		fetch_function : _SYSTEM_OR_USER_,
		index : string,
		fetch_function : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		length : _SYSTEM_OR_USER_,
		fetch_function : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		length : _SYSTEM_OR_USER_,
		index : string,
		after : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		at : string,
		contains : QueueRec,
		after : QueueRec,
		index : QueueRec,
		after : QueueRec,
		contains : QueueRec,
		through : QueueRec,
		at : string,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		read_positive_nr : _SYSTEM_OR_USER_,
		bp_pos : SourceView,
		after : string,
		matches : _SYSTEM_OR_USER_,
		after : string,
		through : string,
		after : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		through : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		unquote : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		from : _SYSTEM_OR_USER_,
		after : string,
		through : string,
		after : string,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		through : string,
		contains : _SYSTEM_OR_USER_,
		filter_line : _SYSTEM_OR_USER_,
		atoi : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		through : string,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		itostring : _SYSTEM_OR_USER_,
		atoi : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		through : string,
		after : string,
		from : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		strip_trailing_space : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		from : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		strip_leading_space : _SYSTEM_OR_USER_,
		through : string,
		index : string,
		length : _SYSTEM_OR_USER_,
		at : string,
		index : string,
		index : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		from : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		strip_trailing_space : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		index : string,
		from : _SYSTEM_OR_USER_,
		strip_trailing_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		index : string



		METRICS
			already_read REFERRED 23 TIMES,
			started REFERRED 2 TIMES,
			terminated REFERRED 4 TIMES,
			signaled REFERRED 3 TIMES,
			recompiled REFERRED 2 TIMES,
			check_pc REFERRED 5 TIMES,
			check_func REFERRED 6 TIMES,
			ARRAYOP 9
			ASS 215
			AVVARLEN 9
			CALLEDN 175
			CLASS PosBuffer
			CLASSID 120
			CYCLO 110
			DOTS 149
			EQTEST 22
			EXPRORCALL 298
			GE 18
			GT 25
			IN 0
			INDR 6
			LE 0
			LOC 707
			LT 4
			METHOD filter
			METHODID 2
			MMINUS 4
			OUT 0
			PARNUM 1
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 219
			TERNINSTR 0
			USEDVARS 7

#METRICS ARRAYOP:9 ASS:215 AVVARLEN:9 CALLEDN:175 CLASS:PosBuffer CLASSID:120 CYCLO:110 DOTS:149 EQTEST:22 EXPRORCALL:298 GE:18 GT:25 IN:0 INDR:6 LE:0 LOC:707 LT:4 METHOD:filter METHODID:2 MMINUS:4 OUT:0 PARNUM:1 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:219 TERNINSTR:0 USEDVARS:7 
		;


#ID 2-filter

__BEGIN_METHOD_CODE__

PosBuffer::filter(string& answer)
{
    if(answer.length() == 0)
	return;

    switch(gdb->type())
    {
    case GDB:
    {
	 
	 
	if(has_prefix(answer, _REMOVED_STR_))
	    already_read = Null;

	 
	if(has_prefix(answer, _REMOVED_STR_))
	    started = true;

	if(has_prefix(answer, _REMOVED_STR_))
	    terminated = true;

	if(has_prefix(answer, _REMOVED_STR_))
	    signaled = true;

	if(has_prefix(answer, _REMOVED_STR_))
	    signaled = terminated = true;

	if(answer.contains(_REMOVED_STR_))
	    recompiled = true;

	if(has_prefix(answer, _REMOVED_STR_))
	    gdb->program_language(answer);

	if(has_prefix(answer, _REMOVED_STR_))
	    gdb->program_language(answer);
    }
    break;

    case DBX:
    {
	if(has_prefix(answer, _REMOVED_STR_))
	    started = true;

	if(answer.contains(_REMOVED_STR_))
	    recompiled = true;

	if(has_prefix(answer, _REMOVED_STR_))
	    signaled = true;
    }
    break;
    
    case XDB:
    case JDB:
	break;			 
    }

     
    int i = -1;
    while((i = answer.index(_REMOVED_STR_, i + 1)) > 0)
    {
	int j = i;
	while(j > 0 && answer[_ARGS_] != '\n')
	    j--;
	





	if(answer.matches(rxterminated, j))
	    terminated = true;
    }

    if(answer.contains(_REMOVED_STR_) 
	|| answer.contains(_REMOVED_STR_)
	|| answer.contains(_REMOVED_STR_))
	terminated = true;

     
    if(app_data.auto_commands)
    {
	if(auto_cmd_buffer != _REMOVED_STR_ && !auto_cmd_buffer.contains('\n', -1))
	{
	     
	    if(answer.contains('\n'))
	    {
		auto_cmd_buffer += answer.through('\n');
		answer = answer.after('\n');
	    }
	    else
	    {
		auto_cmd_buffer += answer;
		answer = _REMOVED_STR_;
	    }
	}

	while(has_prefix(answer, app_data.auto_command_prefix))
	{
	    int index = answer.index(app_data.auto_command_prefix);
	    string cmd = answer.from(index);
	    if(cmd.contains('\n'))
		cmd = cmd.through('\n');
	    answer = 
		answer.before(index) + answer.from(int(index + cmd.length()));
	    cmd = cmd.after(app_data.auto_command_prefix);
	    auto_cmd_buffer += cmd;
	}
    }

     
    switch(already_read)
    {
    case PosComplete:
	 
	 ;

	 
	switch(gdb->type())
	{
	case GDB:
	    break;

	case DBX:
	    {
		string line_s = pos_buffer;
		if(line_s.contains(':'))
		    line_s = line_s.after(':');
		int line = atoi(line_s);
		filter_line(answer, line);
	    }

	case XDB:
	case JDB:
	    break;		 
	}
	break;

    case PosPart:
	answer.prepend(answer_buffer);
	answer_buffer = _REMOVED_STR_;
	already_read = Null;
	 

    case Null:
    {
	switch(gdb->type())
	{
	case GDB:
	{
	     

	    if(check_pc && pc_buffer == _REMOVED_STR_)
	    {
		 



		int pc_index = index(answer, rxpc, _REMOVED_STR_);
		if(pc_index >= 0)
		{
		    int addr_index = answer.index('=');
		    fetch_address(answer, addr_index, pc_buffer);
		    
		     
		    int end_line = answer.index('\n', pc_index);
		    int start_line = pc_index;
		    while(start_line > 0 
			   && answer[_ARGS_] != '\n')
			start_line--;
		    
		    if(end_line < 0)
			answer.from(start_line) = _REMOVED_STR_;
		    else
			answer.at(start_line, end_line - start_line + 1) 
			    = _REMOVED_STR_;
		}
	    }
	    
	    if(check_pc && pc_buffer == _REMOVED_STR_ || 
		check_func && func_buffer == _REMOVED_STR_)
	    {
		 




		int pc_index = index(answer, rxstopped_addr, _REMOVED_STR_);
		if(pc_index >= 0)
		{
		    pc_index = answer.index(',');
		    fetch_address(answer, pc_index, pc_buffer);
		    fetch_in_function(answer, pc_index, func_buffer);
		}
	    }
	    
	    if(check_pc && pc_buffer == _REMOVED_STR_ || 
		check_func && func_buffer == _REMOVED_STR_)
	    {
		 



		
		int pc_index = index(answer, rxframe_addr, _REMOVED_STR_);
		if(pc_index == 0
		    || pc_index > 0 && answer[_ARGS_] == '\n')
		{
		    pc_index = answer.index(' ');
		    fetch_address(answer, pc_index, pc_buffer);
		    fetch_in_function(answer, pc_index, func_buffer);
		}
	    }
	    
	    if(check_pc && pc_buffer == _REMOVED_STR_ || 
		check_func && func_buffer == _REMOVED_STR_)
	    {
		 
		 



		
		int pc_index = index(answer, rxaddr, _REMOVED_STR_);
		if(pc_index >= 0)
		{
		    pc_index = answer.index(' ');
		    fetch_address(answer, pc_index, pc_buffer);
		    if(func_buffer == _REMOVED_STR_)
		    {
			string line = answer.from(pc_index);
			line = line.after('<');
			line = line.before('>');
			if(line != _REMOVED_STR_)
			    func_buffer = line;
		    }
		}
	    }

	    if(check_pc && pc_buffer == _REMOVED_STR_ && answer != _REMOVED_STR_)
	    {
		 



		int pc_index = -1;
		if(is_address_start(answer[_ARGS_]) 
		    && answer.contains(rxaddress_in, 0))
		{
		    pc_index = 0;
		}
		else
		{



		    pc_index = index(answer, rxnladdress_in, _REMOVED_STR_);
		}
		
		if(pc_index >= 0)
		{
		    fetch_address(answer, pc_index, pc_buffer);
		    fetch_in_function(answer, pc_index, func_buffer);
		}
	    }

	     
	     
	    if(check_func && func_buffer == _REMOVED_STR_)
	    {
		 



		int bp_index = index(answer, rxstopped_func, _REMOVED_STR_);
		if(bp_index >= 0)
		    fetch_function(answer, bp_index, func_buffer);
	    }

	    if(check_func && func_buffer == _REMOVED_STR_)
	    {
		 



		int frame_index = index(answer, rxframe_addr, _REMOVED_STR_);
		if(frame_index == 0
		    || frame_index > 0 && answer[_ARGS_] == '\n')
		{
		    fetch_function(answer, frame_index, func_buffer);
		}
	    }

	    if(check_func && func_buffer == _REMOVED_STR_)
	    {
		 
		int at_index = answer.index(_REMOVED_STR_);
		if(at_index > 0)
		{
		    int nl_index = 
			answer.index('\n', at_index - answer.length() - 1) + 1;
		    fetch_function(answer, nl_index, func_buffer);
		}
	    }
	    
	     
	    int index1 = answer.index(_REMOVED_STR_);
	    
	    if(index1 < 0) 
	    {
		int index_p = answer.index(_REMOVED_STR_);
		if(index_p >= 0 && index_p == int(answer.length()) - 1)
		{
		     
		    already_read = PosPart;
		    answer_buffer = _REMOVED_STR_;
		    answer = answer.before(index_p);
		    
		    return;
		}
		
		 
		 
		 




		index_p = index(answer, rxout_of_range, _REMOVED_STR_);
		if(index_p >= 0)
		{
		    string file = answer.after('0', index_p);
		    file = file.before('0');
		    pos_buffer = file + _REMOVED_STR_;
		    already_read = PosComplete;
		    return;
		}
		
		 
		return;
	    }
	    
	     
	    int index2 = answer.index(_REMOVED_STR_, index1);
	    
	    if(index2 == -1)
	    {
		 
		already_read = PosPart;
		answer_buffer = answer.from(index1);
		answer = answer.before(index1);
		return;
	    }
	    
	     ;
	    
	     
	    pos_buffer = answer.at(index1 + 2, index2 - (index1 + 2));

	    if(pos_buffer.contains(_REMOVED_STR_, 0))
	    {
		 
		pos_buffer = pos_buffer.after(_REMOVED_STR_);
	    }

	    int last_colon = pos_buffer.index(':', -1);
	    pc_buffer = pos_buffer.after(last_colon);
	    if(!pc_buffer.contains(rxaddress_start, 0))
		pc_buffer = _REMOVED_STR_ + pc_buffer;
	    pc_buffer = pc_buffer.through(rxaddress);
	    answer.at(index1, index2 - index1 + 1) = _REMOVED_STR_;
	    already_read = PosComplete;
	}
	break;
	
	case DBX:
	{
	    string file;	 
	    string line;	 
	    
	    if(answer.contains('(', 0) || answer.contains('[', 0))
	    {
		 
		string ans = answer;
		int num = read_positive_nr(ans);
		string pos = source_view->bp_pos(num);
		if(pos != _REMOVED_STR_)
		{
		    file = pos.before(':');
		    line = pos.after(':');
		}
	    }
	    




	    if(already_read != PosComplete && answer.matches(rxdbxfunc2))
	    {
		 
		 
		 
		 

		line = answer.after(_REMOVED_STR_);
		line = line.through(rxint);
		
		file = answer.after('0');
		file = file.before('0');

		if(line != _REMOVED_STR_)
		{
		    already_read = PosComplete;
		     
		}
	    }
	    



	    int dbxpos_index = -1;
	    if(already_read != PosComplete && 
		(dbxpos_index = index(answer, rxdbxpos, _REMOVED_STR_)) >= 0)
	    {
		 
		 
		
		line = answer.from(dbxpos_index);
		
		 
		while(line.contains(_REMOVED_STR_))
		    line = line.after(_REMOVED_STR_);
		line = line.after(_REMOVED_STR_);
		line = line.through(rxint);
		if(line != _REMOVED_STR_)
		{
		    already_read = PosComplete;
		
		    if(!answer.contains('[', 0))
			answer = answer.after(_REMOVED_STR_);
		}
	    }

	    if(already_read != PosComplete && 
		(answer.contains(_REMOVED_STR_) || 
		 answer.contains(_REMOVED_STR_)))
	    {
		int stopped_index = answer.index(_REMOVED_STR_);

		 
		int in_file_index = answer.index(_REMOVED_STR_, stopped_index);
		int bracket_index = answer.index(_REMOVED_STR_, stopped_index);

		if(in_file_index >= 0)
		{
		     
		    file = answer.from(in_file_index);
		    file = file.after(_REMOVED_STR_);
		    if(file.contains('\n'))
			file = file.before('\n');
		    file = unquote(file);
		}
		else if(bracket_index >= 0)
		{
		     
		     
		     
		    line = answer.after(bracket_index);
		    func_buffer = line;
		    while(line.contains(_REMOVED_STR_))
			line = line.after(_REMOVED_STR_);
		    line = line.from(_REMOVED_STR_);
		    func_buffer = func_buffer.before(line);
		    line = line.after(_REMOVED_STR_);
		    line = line.through(rxint);
		     
		}
		else
		{
		     
		    string func = answer.after(stopped_index);
		    func = func.after(_REMOVED_STR_);
		    if(func.contains(_REMOVED_STR_))
			func = func.before(_REMOVED_STR_);
		    func_buffer = func;
		}
		
		if(line == _REMOVED_STR_)
		{
		    line = answer.after(_REMOVED_STR_, stopped_index);
		    line = line.through(rxint);
		    if((file != _REMOVED_STR_ || func_buffer != _REMOVED_STR_) &&
			!answer.contains(_REMOVED_STR_))
			line = _REMOVED_STR_;
		}

		if(line != _REMOVED_STR_)
		{
		    already_read = PosComplete;
		    filter_line(answer, atoi(line));
		}
	    }
	    



	    if(already_read != PosComplete && answer.matches(rxdbxfunc))
	    {
		 
		 
		
		 
		string line = answer;
		while(line.contains(_REMOVED_STR_))
		    line = line.after(_REMOVED_STR_);

		line = line.after(_REMOVED_STR_);
		line = line.through(rxint);
		if(line != _REMOVED_STR_)
		{
		    already_read = PosComplete;
		    answer = answer.after(_REMOVED_STR_);
		}
	    }

	    if(already_read != PosComplete && 
		answer.contains(_REMOVED_STR_))
	    {
		 
		string nr = answer.after(_REMOVED_STR_);
		if(nr != _REMOVED_STR_)
		{
		    line = itostring(atoi(nr));
		    already_read = PosComplete;
		    
		     
		    answer = answer.from(_REMOVED_STR_);
		    answer = answer.through(_REMOVED_STR_);
		    func_buffer = answer.after(_REMOVED_STR_);
		    func_buffer = func_buffer.before(_REMOVED_STR_);
		}
		else
		{
		    answer_buffer = answer;
		    answer = _REMOVED_STR_;
		    already_read = PosPart;
		}
	    }

	    if(already_read == PosComplete && line != _REMOVED_STR_)
	    {
		if(file != _REMOVED_STR_)
		    pos_buffer = file + _REMOVED_STR_ + line;
		else
		    pos_buffer = line;
	    }
	}
	break;
	
	case XDB:
	{
	     
	    int index = 0;
	    while(index >= 0 && answer != _REMOVED_STR_)
	    {
		string line = answer.from(index);
		if(line.contains('\n'))
		    line = line.before('\n');
		strip_trailing_space(line);
		
		 



		if(line.matches(rxxdbpos))
		{
		    string file = line.before(':');
		    line = line.after(':');
		    
		     
		    string func = line;
		    while(line.contains(_REMOVED_STR_))
			line = line.after(_REMOVED_STR_);
		    line = line.from(':');
		    func = func.before(line);
		    
		    line = line.after(':');
		    string line_no = line.before(':');
		    
		    strip_leading_space(func);
		    strip_leading_space(line_no);
		    line_no = line_no.through(rxint);
		    
		    pos_buffer   = file + _REMOVED_STR_ + line_no;
		    func_buffer  = func;
		    already_read = PosComplete;
		    
		     
		    int next_index = answer.index('\n', index);
		    if(next_index < 0)
			next_index = answer.length();
		    else
			next_index++;
		    answer.at(index, next_index - index) = _REMOVED_STR_;
		    break;
		}
		else
		{
		     
		    index = answer.index('\n', index);
		    if(index >= 0)
			index++;
		}
	    }
	    
	     
	    index = answer.index('\n', -1) + 1;
	    if(already_read != PosComplete 
		&& answer.index(':', index) >= 0)
	    {
		answer_buffer = answer.from(index);
		answer.from(index) = _REMOVED_STR_;
		already_read = PosPart;
	    }
	    
	    break;
	}
	
	case JDB:
	{
	    int index = 0;
	    while(index >= 0 && answer != _REMOVED_STR_)
	    {
		string line = answer.from(index);
		if(line.contains('\n'))
		    line = line.before('\n');
		strip_trailing_space(line);

		 
		 
		 

		 
		 
		 
		 





		if(line.matches(rxjdbpos))
		{
		    string file = line.after('(');
		    file = file.before(')');
		    string line_no = _REMOVED_STR_;
		    if(file.contains(':'))
		    {
			line_no = file.after(':');
			file = file.before(':');
		    }
 
		     
		    int class_index = line.index('(') - 1;
		    while(class_index >= 0 && line[_ARGS_] == ' ')
			class_index--;
		    while(class_index >= 1 && line[_ARGS_] != ' ')
			class_index--;
		    if(class_index >= 0)
		    {
			string class_name = line.from(class_index);
			class_name = class_name.before('(');
			strip_trailing_space(class_name);
			if(class_name.contains('.') && 
			    class_name.matches(rxchain))
			{
			     
			    class_name = class_name.before('.', -1);

			    if(class_name.contains(_REMOVED_STR_ + file), -1)
			    {
				 
				file = class_name;
			    }
			}
		    }

		    pos_buffer	 = file + _REMOVED_STR_ + line_no;
		    already_read = PosComplete;



		    break;
		}
		else
		{
		     
		    index = answer.index('\n', index);
		    if(index >= 0)
			index++;
		}
	    }
	    break;
	}
	}
    }
    break;
    }
}

__END_METHOD_CODE__


	METHOD PosBuffer!answer_ended

		METRICS
			already_read REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD answer_ended
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:answer_ended METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-answer_ended

__BEGIN_METHOD_CODE__

PosBuffer::answer_ended()
{
    switch(already_read) {
    case PosPart:
	 ;
	return answer_buffer;
		
    case Null:
	 ;
	return _REMOVED_STR_;
	
    case PosComplete:
	 ;
	return _REMOVED_STR_;
    }
    return _REMOVED_STR_;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/PosBuffer.o.nu.met	  Methods Number  2
#======================================================================
#Process file ../../code/ddd-3.0/ddd/SmartC.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/SourceView.o.nu.met ... 


	METHOD SourceView!is_code_widget

		METRICS
			code_form_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 11
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 0
			METHOD is_code_widget
			METHODID 107
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:11 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:10 LT:0 METHOD:is_code_widget METHODID:107 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 107-is_code_widget

__BEGIN_METHOD_CODE__

SourceView::is_code_widget(Widget w)
{
    while(w != 0)
    {
	if(w == code_form_w)
	    return true;
	else
	    w = (( w )->core.parent) ;
    }
    return false;
}

__END_METHOD_CODE__


	METHOD SourceView!is_source_widget

		METRICS
			source_form_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 13
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 0
			METHOD is_source_widget
			METHODID 106
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:13 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:10 LT:0 METHOD:is_source_widget METHODID:106 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 106-is_source_widget

__BEGIN_METHOD_CODE__

SourceView::is_source_widget(Widget w)
{
    while(w != 0)
    {
	if(w == source_form_w)
	    return true;
	else
	    w = (( w )->core.parent) ;
    }
    return false;
}

__END_METHOD_CODE__


	METHOD SourceView!current_text
		CALLS
		is_code_widget : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD current_text
			METHODID 108
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:current_text METHODID:108 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 108-current_text

__BEGIN_METHOD_CODE__

SourceView::current_text(Widget w)
{
     ;

    if(is_code_widget(w))
	return current_code;
    else
	return current_source;
}

__END_METHOD_CODE__


	METHOD SourceView!indent_amount
		CALLS
		is_code_widget : SourceView,
		current_text : SourceView,
		length : string



		METRICS
			display_line_numbers REFERRED 1 TIMES,
			source_indent_amount REFERRED 2 TIMES,
			code_indent_amount REFERRED 1 TIMES,
			line_indent_amount REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 6
			AVVARLEN 19
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 1
			EQTEST 1
			EXPRORCALL 8
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 1
			METHOD indent_amount
			METHODID 109
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 1
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:1 ASS:6 AVVARLEN:19 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:1 EQTEST:1 EXPRORCALL:8 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:23 LT:1 METHOD:indent_amount METHODID:109 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:1 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:4 
		;


#ID 109-indent_amount

__BEGIN_METHOD_CODE__

SourceView::indent_amount(Widget w, int pos)
{
     ;

    int indent = 0;
    if(is_code_widget(w))
	indent = code_indent_amount;
    else if(display_line_numbers)
	indent = source_indent_amount + line_indent_amount;
    else
	indent = source_indent_amount;

    if(pos >= 0)
    {
	const string& text = current_text(w);
	while(pos < int(text.length()) && text[_ARGS_] == ' ')
	{
	    pos++;
	    indent++;
	}
    }

    return indent;
}

__END_METHOD_CODE__


	METHOD SourceView!line_popup_setCB
		CALLS
		create_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD line_popup_setCB
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:line_popup_setCB METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-line_popup_setCB

__BEGIN_METHOD_CODE__

SourceView::line_popup_setCB(Widget w,
				   XtPointer client_data,
				   XtPointer)
{
    string address = *((string *)client_data);
    create_bp(address, w);
}

__END_METHOD_CODE__


	METHOD SourceView!line_popup_set_tempCB
		CALLS
		create_temp_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD line_popup_set_tempCB
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:line_popup_set_tempCB METHODID:6 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-line_popup_set_tempCB

__BEGIN_METHOD_CODE__

SourceView::line_popup_set_tempCB(Widget w,
					XtPointer client_data,
					XtPointer)
{
    string address = *((string *)client_data);
    create_temp_bp(address, w);
}

__END_METHOD_CODE__


	METHOD SourceView!set_bp
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		clear_command : SourceView,
		type : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		has_handler_command : GDBAgent,
		contains : string,
		after : string,
		gdb_command : _SYSTEM_OR_USER_,
		syncCommandQueue : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		command_list : SourceView,
		clear_command : SourceView,
		matches : string,
		gdb_command : _SYSTEM_OR_USER_,
		is_file_pos : _SYSTEM_OR_USER_,
		index : string,
		after : string,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		dbx_lookup : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		syncCommandQueue : _SYSTEM_OR_USER_,
		clear_command : SourceView,
		gdb_command : _SYSTEM_OR_USER_,
		command_list : SourceView,
		contains : string,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		contains : string,
		after : string,
		has_condition_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		has_condition_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		condition_command : GDBAgent,
		itostring : _SYSTEM_OR_USER_



		METRICS
			max_breakpoint_number_seen REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 25
			AVVARLEN 26
			CALLEDN 41
			CLASS SourceView
			CLASSID 107
			CYCLO 22
			DOTS 12
			EQTEST 1
			EXPRORCALL 60
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 137
			LT 0
			METHOD set_bp
			METHODID 190
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 43
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:25 AVVARLEN:26 CALLEDN:41 CLASS:SourceView CLASSID:107 CYCLO:22 DOTS:12 EQTEST:1 EXPRORCALL:60 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:137 LT:0 METHOD:set_bp METHODID:190 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:43 TERNINSTR:0 USEDVARS:1 
		;


#ID 190-set_bp

__BEGIN_METHOD_CODE__

SourceView::set_bp(const string& a, bool set, bool temp, 
			const string& cond, Widget w)
{
    int new_bps = max_breakpoint_number_seen + 1;
    string address = a;

    if(address != _REMOVED_STR_ && address[_ARGS_] == '0')
	address = _REMOVED_STR_ + address;  

    if(!set)
    {
	 
	gdb_command(clear_command(address), w);
    }
    else
    {
	 
	switch(gdb->type())
	{
	case GDB:
	    if(temp)
		gdb_command(_REMOVED_STR_ + address, w);
	    else
		gdb_command(_REMOVED_STR_ + address, w);

	    break;


	case DBX:
	{
	    string cond_suffix = _REMOVED_STR_;
	    if(cond != _REMOVED_STR_)
	    {
		if(gdb->has_handler_command())
		    cond_suffix = _REMOVED_STR_ + cond;
		else
		    cond_suffix = _REMOVED_STR_ + cond;
	    }

	    if(address.contains('*', 0))
	    {
		 
		address = address.after('*');
		gdb_command(_REMOVED_STR_ + address + cond_suffix, w);

		if(temp)
		{
		    syncCommandQueue();
		    gdb_command(_REMOVED_STR_ + address + _REMOVED_STR_
				+ command_list(clear_command(address, true, 
							     new_bps)),
				w);
		}
	    }
	    else
	    {
		string line = _REMOVED_STR_;
		if(address.matches(rxint))
		{
		     
		    line = address;
		    gdb_command(_REMOVED_STR_ + address + cond_suffix, w);
		}
		else if(is_file_pos(address))
		{
		     
		    int colon_index = address.index(':', -1);
		    string file = address.before(colon_index);
		    line = address.after(colon_index);

		    gdb_command(_REMOVED_STR_ + file, w);
		    gdb_command(_REMOVED_STR_ + line + cond_suffix, w);
		}
		else
		{
		     
		    string pos = dbx_lookup(address);

		    if(pos.contains(':'))
		    {
			string file = pos.before(':');
			line = pos.after(':');

			gdb_command(_REMOVED_STR_ + file, w);
			gdb_command(_REMOVED_STR_ + line + cond_suffix, w);
		    }
		    else
		    {
			 
			gdb_command(_REMOVED_STR_ + address + cond_suffix, w);
		    }
		}

		if(temp && line != _REMOVED_STR_)
		{
		    syncCommandQueue();
		    string clear_cmd = clear_command(line, true, new_bps);
		    gdb_command(_REMOVED_STR_ + line + _REMOVED_STR_ 
				+ command_list(clear_cmd), w);
		}
	    }
	    break;
	}

	case JDB:
	{
	    if(address.contains(_REMOVED_STR_))
		gdb_command(_REMOVED_STR_ + address);
	    else
		gdb_command(_REMOVED_STR_ + address);
	    break;
	}

	case XDB:
	{
	    string command;
	    if(address.contains('*', 0))
		command = _REMOVED_STR_ + address.after('*');
	    else
		command = _REMOVED_STR_ + address;

	    if(temp)
		command += _REMOVED_STR_;

	    if(cond != _REMOVED_STR_ && !gdb->has_condition_command())
		command += _REMOVED_STR_ + cond + _REMOVED_STR_;

	    gdb_command(command, w);
	    break;
	}
	}

	if(cond != _REMOVED_STR_ && gdb->has_condition_command())
	{
	     
	    gdb_command(gdb->condition_command(itostring(new_bps), cond), w);
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!clearBP
		CALLS
		get : BreakPointMap,
		delete_bp : SourceView



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 6
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD clearBP
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:6 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:clearBP METHODID:-1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID -1-clearBP

__BEGIN_METHOD_CODE__

SourceView::clearBP(XtPointer client_data, XtIntervalId *)
{
    int bp_nr = int(client_data);
    BreakPoint *bp = bp_map.get(bp_nr);
    if(bp != 0)
	delete_bp(bp_nr);
}

__END_METHOD_CODE__


	METHOD SourceView!clearJumpBP
		CALLS
		set_status : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		show_execution_position : SourceView,




		METRICS
			source_text_w REFERRED 1 TIMES,
			max_breakpoint_number_seen REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 19
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 1
			LOC 19
			LT 1
			METHOD clearJumpBP
			METHODID 65
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:19 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:1 LOC:19 LT:1 METHOD:clearJumpBP METHODID:65 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:2 
		;


#ID 65-clearJumpBP

__BEGIN_METHOD_CODE__

SourceView::clearJumpBP(const string& msg, void *data)
{
    set_status(msg);

    if(gdb->type() == XDB && msg == _REMOVED_STR_)
    {
	 
	show_execution_position(last_jump_address, true);
    }

    int old_max_breakpoint_number_seen = int(data);

    for(int i = old_max_breakpoint_number_seen + 1;
	 i <= max_breakpoint_number_seen; i++)
    {
	 
	XtAppAddTimeOut(XtWidgetToApplicationContext(source_text_w),
			0, clearBP, XtPointer(i));
    }
}

__END_METHOD_CODE__


	METHOD SourceView!line_popup_temp_n_contCB
		CALLS
		temp_n_cont : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD line_popup_temp_n_contCB
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:line_popup_temp_n_contCB METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-line_popup_temp_n_contCB

__BEGIN_METHOD_CODE__

SourceView::line_popup_temp_n_contCB(Widget w,
					   XtPointer client_data,
					   XtPointer)
{
    string address = *((string *)client_data);
    temp_n_cont(address, w);
}

__END_METHOD_CODE__


	METHOD SourceView!temp_n_cont
		CALLS
		type : _SYSTEM_OR_USER_,
		create_temp_bp : SourceView,
		c : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		contains : string,
		after : string,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			max_breakpoint_number_seen REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 5
			AVVARLEN 26
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 7
			DOTS 4
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 34
			LT 0
			METHOD temp_n_cont
			METHODID 194
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:26 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:7 DOTS:4 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:34 LT:0 METHOD:temp_n_cont METHODID:194 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 194-temp_n_cont

__BEGIN_METHOD_CODE__

SourceView::temp_n_cont(const string& a, Widget w)
{
    string address = a;

    switch(gdb->type())
    {
    case GDB:




    
    case DBX:
    case JDB:
    {
	int old_max_breakpoint_number_seen = max_breakpoint_number_seen;

	 
	create_temp_bp(address, w);

	 
	Command c(_REMOVED_STR_, w);
	c.callback = clearJumpBP;
	c.data     = XtPointer(old_max_breakpoint_number_seen);
	gdb_command(c);
	break;
    }

    case XDB:
	if(address.contains('*', 0))
	    address = address.after('*');
	gdb_command(_REMOVED_STR_ + address, w);
	break;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!line_popup_set_pcCB
		CALLS
		move_pc : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD line_popup_set_pcCB
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:line_popup_set_pcCB METHODID:8 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-line_popup_set_pcCB

__BEGIN_METHOD_CODE__

SourceView::line_popup_set_pcCB(Widget w, 
				     XtPointer client_data,
				     XtPointer)
{
    string address = *((string *)client_data);
    move_pc(address, w);
}

__END_METHOD_CODE__


	METHOD SourceView!move_pc
		CALLS
		contains : string,
		compare_address : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		after : string,
		file_matches : SourceView,
		has_jump_command : GDBAgent,
		type : _SYSTEM_OR_USER_,
		create_temp_bp : SourceView,
		gdb_command : _SYSTEM_OR_USER_,
		after : string,
		create_temp_bp : SourceView,
		c : _SYSTEM_OR_USER_,
		jump_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		has_assign_command : GDBAgent,
		contains : string,
		after : string,
		lookup : SourceView,
		syncCommandQueue : _SYSTEM_OR_USER_,
		set_status : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		assign_command : GDBAgent



		METRICS
			last_execution_line REFERRED 1 TIMES,
			max_breakpoint_number_seen REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 11
			AVVARLEN 22
			CALLEDN 24
			CLASS SourceView
			CLASSID 107
			CYCLO 13
			DOTS 10
			EQTEST 3
			EXPRORCALL 35
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 88
			LT 0
			METHOD move_pc
			METHODID 208
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 27
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:22 CALLEDN:24 CLASS:SourceView CLASSID:107 CYCLO:13 DOTS:10 EQTEST:3 EXPRORCALL:35 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:88 LT:0 METHOD:move_pc METHODID:208 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:27 TERNINSTR:0 USEDVARS:2 
		;


#ID 208-move_pc

__BEGIN_METHOD_CODE__

SourceView::move_pc(const string& a, Widget w)
{
    string address = a;

    if(address.contains('*', 0))
    {
	if(compare_address(address.after('*'), last_execution_pc) == 0)
	    return false;	 
    }
    else
    {
	string file = address.before(':');
	int line    = get_positive_nr(address.after(':'));

	if(file_matches(file, last_execution_file)
	    && line == last_execution_line)
	    return false;	 
    }

    if(gdb->has_jump_command())
    {
	int old_max_breakpoint_number_seen = max_breakpoint_number_seen;

	 
	 
	 

	switch(gdb->type())
	{
	case DBX:
	     
	     
	    create_temp_bp(address, w);

	     
	    gdb_command(_REMOVED_STR_ + address.before(':'));
	     

	case XDB:
	     
	    address = address.after(':');
	    break;

	case GDB:
	     
	     
	    create_temp_bp(address, w);
	    break;

	case JDB:
	    break;		 
	}

	 
	last_jump_address = a;
	Command c(gdb->jump_command(address), w);
	c.callback = clearJumpBP;
	c.data     = XtPointer(old_max_breakpoint_number_seen);
	gdb_command(c);

	return true;
    }
    else if(gdb->type() != JDB && gdb->has_assign_command())
    {
	 
	if(address.contains('*', 0))
	{
	    address = address.after('*');
	}
	else
	{
	    lookup(address, true);
	    syncCommandQueue();
	    address = last_shown_pc;
	}

	if(address == _REMOVED_STR_)
	{
	    set_status(_REMOVED_STR_ + a);
	}
	else
	{
	    gdb_command(gdb->assign_command(_REMOVED_STR_, address), w);
	    return true;
	}
    }

    return false;
}

__END_METHOD_CODE__


	METHOD SourceView!move_bp
		CALLS
		get : BreakPointMap,
		contains : string,
		compare_address : _SYSTEM_OR_USER_,
		after : string,
		address : BreakPoint,
		get_positive_nr : _SYSTEM_OR_USER_,
		after : string,
		bp_matches : SourceView,
		get_state : _SYSTEM_OR_USER_,
		next_breakpoint_number : SourceView,
		commands : BreakPoint,
		gsub : string,
		itostring : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		after : string,
		copy_breakpoint_properties : SourceView,
		move_breakpoint_properties : SourceView,
		delete_bp : SourceView



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 9
			AVVARLEN 6
			CALLEDN 18
			CLASS SourceView
			CLASSID 107
			CYCLO 9
			DOTS 8
			EQTEST 2
			EXPRORCALL 28
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 60
			LT 0
			METHOD move_bp
			METHODID 66
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 20
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:6 CALLEDN:18 CLASS:SourceView CLASSID:107 CYCLO:9 DOTS:8 EQTEST:2 EXPRORCALL:28 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:60 LT:0 METHOD:move_bp METHODID:66 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:20 TERNINSTR:0 USEDVARS:1 
		;


#ID 66-move_bp

__BEGIN_METHOD_CODE__

SourceView::move_bp(int bp_nr, const string& a, Widget w, bool copy)
{
    string address = a;

     

    BreakPoint *bp = bp_map.get(bp_nr);
    if(bp == 0)
	return false;		 

    if(!copy)
    {
	if(address.contains('*', 0))
	{
	    if(compare_address(address.after('*'), bp->address()) == 0)
		return false;	 
	}
	else
	{
	    string file = address.before(':');
	    int line    = get_positive_nr(address.after(':'));

	    if(bp_matches(bp, file, line))
		return false;	 
	}
    }

     
     
    ostrstream os;
    bool ok = bp->get_state(os, 0, false, address);
    if(!ok)
	return false;		 

    int new_bp_nr = next_breakpoint_number();
    string commands(os);
    commands.gsub(_REMOVED_STR_, itostring(new_bp_nr));

    while(commands != _REMOVED_STR_)
    {
	string command = commands.before('\n');
	gdb_command(command, w);
	commands = commands.after('\n');
    }

    if(copy)
    {
	 
	copy_breakpoint_properties(bp_nr, new_bp_nr);
    }
    else
    {
	 
	move_breakpoint_properties(bp_nr, new_bp_nr);

	 
	delete_bp(bp_nr);
    }

    return true;
}

__END_METHOD_CODE__


	METHOD SourceView!_set_bps_cond
		CALLS
		nrs : _SYSTEM_OR_USER_,
		size : IntArray,
		get : BreakPointMap,
		char : _SYSTEM_OR_USER_,
		condition : BreakPoint,
		enabled : _SYSTEM_OR_USER_,
		has_enable_command : GDBAgent,
		make_false : BreakPoint,
		has_condition_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		condition_command : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		get_state : _SYSTEM_OR_USER_,
		next_breakpoint_number : SourceView,
		commands : BreakPoint,
		gsub : string,
		itostring : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		after : string,
		move_breakpoint_properties : SourceView,
		delete_bp : SourceView



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 14
			AVVARLEN 6
			CALLEDN 21
			CLASS SourceView
			CLASSID 107
			CYCLO 9
			DOTS 5
			EQTEST 2
			EXPRORCALL 31
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 58
			LT 2
			METHOD _set_bps_cond
			METHODID 68
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 2
			RETPOINT 0
			SCOPEOP 1
			STMNT 25
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:14 AVVARLEN:6 CALLEDN:21 CLASS:SourceView CLASSID:107 CYCLO:9 DOTS:5 EQTEST:2 EXPRORCALL:31 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:58 LT:2 METHOD:_set_bps_cond METHODID:68 MMINUS:0 OUT:0 PARNUM:4 PPLUS:2 RETPOINT:0 SCOPEOP:1 STMNT:25 TERNINSTR:0 USEDVARS:1 
		;


#ID 68-_set_bps_cond

__BEGIN_METHOD_CODE__

SourceView::_set_bps_cond(IntArray& _nrs, string cond,
			       int make_false, Widget w)
{
     
     
    IntArray nrs(_nrs);

    int count = 0;
    for(int i = 0; i < nrs.size(); i++)
    {
	int bp_nr = nrs[_ARGS_];
	BreakPoint *bp = bp_map.get(bp_nr);
	if(bp == 0)
	    continue;		 

	string c = cond;
	if(c == char(-1))
	    c = bp->condition();

	int m = make_false;
	if(m < 0)
	    m = (!bp->enabled() && !gdb->has_enable_command());
	if(m)
	    c = BreakPoint::make_false(c);

	if(gdb->has_condition_command())
	{
	     
	    gdb_command(gdb->condition_command(itostring(bp_nr), c), w);
	}
	else
	{
	     
	     
	    ostrstream os;
	    bool ok = bp->get_state(os, 0, false, _REMOVED_STR_, c);
	    if(!ok)
		continue;		 

	    int new_bp_nr = next_breakpoint_number() + count;
	    string commands(os);
	    commands.gsub(_REMOVED_STR_, itostring(new_bp_nr));

	    while(commands != _REMOVED_STR_)
	    {
		string command = commands.before('\n');
		gdb_command(command, w);
		commands = commands.after('\n');
	    }

	    move_breakpoint_properties(bp_nr, new_bp_nr);

	     
	    delete_bp(bp_nr);

	     
	    count++;
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!bp_popup_deleteCB
		CALLS
		delete_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD bp_popup_deleteCB
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:bp_popup_deleteCB METHODID:10 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-bp_popup_deleteCB

__BEGIN_METHOD_CODE__

SourceView::bp_popup_deleteCB(Widget w,
				    XtPointer client_data,
				    XtPointer)
{
    int bp_nr = *((int *)client_data);
    delete_bp(bp_nr, w);
}

__END_METHOD_CODE__


	METHOD SourceView!bp_popup_disableCB
		CALLS
		get : BreakPointMap,
		enabled : _SYSTEM_OR_USER_,
		disable_bp : SourceView,
		enable_bp : SourceView



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 6
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 11
			LT 0
			METHOD bp_popup_disableCB
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:6 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:11 LT:0 METHOD:bp_popup_disableCB METHODID:11 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-bp_popup_disableCB

__BEGIN_METHOD_CODE__

SourceView::bp_popup_disableCB(Widget w, 
				     XtPointer client_data,
				     XtPointer)
{
    int bp_nr = *((int *)client_data);
    BreakPoint *bp = bp_map.get(bp_nr);
    if(bp != 0)
    {
	if(bp->enabled())
	    disable_bp(bp_nr, w);
	else
	    enable_bp(bp_nr, w);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!numbers
		CALLS
		size : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 4
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 1
			METHOD numbers
			METHODID 205
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:10 LT:1 METHOD:numbers METHODID:205 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 205-numbers

__BEGIN_METHOD_CODE__

SourceView::numbers(const IntArray& nrs)
{
    string cmd = _REMOVED_STR_; 
    for(int i = 0; i < nrs.size(); i++)
    {
	if(i > 0)
	    cmd += _REMOVED_STR_;
	cmd += itostring(nrs[_ARGS_]);
    }
    return cmd;
}

__END_METHOD_CODE__


	METHOD SourceView!all_numbers
		CALLS
		type : _SYSTEM_OR_USER_,
		all_bps : SourceView,
		numbers : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD all_numbers
			METHODID 206
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:all_numbers METHODID:206 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 206-all_numbers

__BEGIN_METHOD_CODE__

SourceView::all_numbers(const IntArray& nrs)
{
    if(gdb->type() == GDB && all_bps(nrs))
	return _REMOVED_STR_;		 
    else
	return numbers(nrs);
}

__END_METHOD_CODE__


	METHOD SourceView!all_bps
		CALLS
		type : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		size : _SYSTEM_OR_USER_,
		number : BreakPoint



		METRICS
			bp_map REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 8
			AVVARLEN 6
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 4
			EQTEST 1
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 21
			LT 2
			METHOD all_bps
			METHODID 207
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:8 AVVARLEN:6 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:4 EQTEST:1 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:21 LT:2 METHOD:all_bps METHODID:207 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 207-all_bps

__BEGIN_METHOD_CODE__

SourceView::all_bps(const IntArray& nrs)
{
    if(gdb->type() != GDB || nrs.size() < 2)
	return false;

    MapRef ref;
    BreakPoint *bp = 0;
    for(bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
    {
	bool found = false;
	for(int i = 0; !found && i < nrs.size(); i++)
	{
	    if(bp->number() == nrs[_ARGS_])
		found = true;
	}

	if(!found)
	    return false;
    }

    return true;
}

__END_METHOD_CODE__


	METHOD SourceView!enable_bps
		CALLS
		has_enable_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		enable_command : GDBAgent,
		all_numbers : SourceView,
		has_conditions : GDBAgent,
		enable_bps_cond : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 11
			LT 0
			METHOD enable_bps
			METHODID 195
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:11 LT:0 METHOD:enable_bps METHODID:195 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 195-enable_bps

__BEGIN_METHOD_CODE__

SourceView::enable_bps(IntArray& nrs, Widget w)
{
    if(gdb->has_enable_command())
    {
	gdb_command(gdb->enable_command(all_numbers(nrs)), w);
    }
    else if(gdb->has_conditions())
    {
	 
	enable_bps_cond(nrs, w);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!disable_bps
		CALLS
		has_disable_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		disable_command : GDBAgent,
		all_numbers : SourceView,
		has_conditions : GDBAgent,
		disable_bps_cond : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 11
			LT 0
			METHOD disable_bps
			METHODID 196
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:11 LT:0 METHOD:disable_bps METHODID:196 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 196-disable_bps

__BEGIN_METHOD_CODE__

SourceView::disable_bps(IntArray& nrs, Widget w)
{
    if(gdb->has_disable_command())
    {
	gdb_command(gdb->disable_command(all_numbers(nrs)), w);
    }
    else if(gdb->has_conditions())
    {
	 
	disable_bps_cond(nrs, w);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!delete_bps
		CALLS
		recording : GDBAgent,
		has_clear_command : GDBAgent,
		size : _SYSTEM_OR_USER_,
		get : BreakPointMap,
		gdb_command : _SYSTEM_OR_USER_,
		clear_command : SourceView,
		pos : _SYSTEM_OR_USER_,
		has_delete_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		delete_command : _SYSTEM_OR_USER_,
		all_numbers : SourceView,
		size : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		delete_command : SourceView



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 4
			AVVARLEN 6
			CALLEDN 14
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 3
			EQTEST 0
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 21
			LT 2
			METHOD delete_bps
			METHODID 197
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:4 AVVARLEN:6 CALLEDN:14 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:3 EQTEST:0 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:21 LT:2 METHOD:delete_bps METHODID:197 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:1 
		;


#ID 197-delete_bps

__BEGIN_METHOD_CODE__

SourceView::delete_bps(IntArray& nrs, Widget w)
{
    if(gdb->recording() && gdb->has_clear_command())
    {
	 
        for(int i = 0; i < nrs.size(); i++)
	{
	    BreakPoint *bp = bp_map.get(nrs[_ARGS_]);
	    if(bp != 0)
		gdb_command(clear_command(bp->pos()));
	}
    }
    else if(gdb->has_delete_command())
    {
	gdb_command(gdb->delete_command(all_numbers(nrs)), w);
    }
    else
    {
        for(int i = 0; i < nrs.size(); i++)
	    gdb_command(delete_command(nrs[_ARGS_]));
    }
}

__END_METHOD_CODE__


	METHOD SourceView!delete_command
		CALLS
		has_delete_command : GDBAgent,
		delete_command : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		has_clear_command : GDBAgent,
		get : BreakPointMap,
		clear_command : SourceView,
		pos : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 6
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 1
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 14
			LT 0
			METHOD delete_command
			METHODID 210
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:6 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:1 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:14 LT:0 METHOD:delete_command METHODID:210 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 210-delete_command

__BEGIN_METHOD_CODE__

SourceView::delete_command(int bp_nr)
{
    if(gdb->has_delete_command())
    {
	return gdb->delete_command(itostring(bp_nr));
    }
    else if(gdb->has_clear_command())
    {
	BreakPoint *bp = bp_map.get(bp_nr);
	if(bp != 0)
	    return clear_command(bp->pos());
    }

    return _REMOVED_STR_;			 
}

__END_METHOD_CODE__


	METHOD SourceView!clear_command
		CALLS
		type : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		dbx_lookup : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		atoi : _SYSTEM_OR_USER_,
		has_clear_command : GDBAgent,
		type : _SYSTEM_OR_USER_,
		file_matches : SourceView,
		first : BreakPointMap,
		next : BreakPointMap,
		number : BreakPoint,
		bp_matches : SourceView,
		wants_delete_comma : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		number : BreakPoint,
		max : DynArray,
		number : BreakPoint,
		wants_delete_comma : GDBAgent,
		itostring : _SYSTEM_OR_USER_,
		delete_command : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 19
			AVVARLEN 6
			CALLEDN 22
			CLASS SourceView
			CLASSID 107
			CYCLO 15
			DOTS 7
			EQTEST 2
			EXPRORCALL 34
			GE 2
			GT 3
			IN 0
			INDR 9
			LE 0
			LOC 61
			LT 0
			METHOD clear_command
			METHODID 209
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 22
			TERNINSTR 2
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:19 AVVARLEN:6 CALLEDN:22 CLASS:SourceView CLASSID:107 CYCLO:15 DOTS:7 EQTEST:2 EXPRORCALL:34 GE:2 GT:3 IN:0 INDR:9 LE:0 LOC:61 LT:0 METHOD:clear_command METHODID:209 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:22 TERNINSTR:2 USEDVARS:1 
		;


#ID 209-clear_command

__BEGIN_METHOD_CODE__

SourceView::clear_command(string pos, bool clear_next, int first_bp)
{
    string file = current_file_name;
    string line = pos;

    if(gdb->type() == DBX && !pos.contains(':') && !pos.matches(rxint))
	pos = dbx_lookup(pos);

    if(pos.contains(':'))
    {
	file = pos.before(':');
	line = pos.after(':');
    }

    int line_no = atoi(line);

    if(!clear_next && gdb->has_clear_command())
    {
	switch(gdb->type())
	{
	case GDB:
	case JDB:
	    return _REMOVED_STR_ + pos;

	case DBX:
	    if(line_no > 0 && file_matches(file, current_file_name))
		return _REMOVED_STR_ + line;
	    break;

	case XDB:
	    break;
	}
    }

    int max_bp_nr = -1;
    string bps = _REMOVED_STR_;
    MapRef ref;
    for(BreakPoint* bp = bp_map.first(ref);
	 bp != 0;
	 bp = bp_map.next(ref))
    {
	if(bp->number() >= first_bp
	    && bp_matches(bp, file, line_no))
	    {
		if(bps != _REMOVED_STR_)
		    bps += gdb->wants_delete_comma() ? _REMOVED_STR_ : _REMOVED_STR_;
		bps += itostring(bp->number());
		max_bp_nr = max(max_bp_nr, bp->number());
	    }
    }

    if(bps == _REMOVED_STR_)
	return _REMOVED_STR_;

    if(clear_next && max_bp_nr >= 0)
    {
	bps += (gdb->wants_delete_comma() ? _REMOVED_STR_ : _REMOVED_STR_);
	bps += itostring(max_bp_nr + 1);
    }

    return gdb->delete_command(bps);
}

__END_METHOD_CODE__


	METHOD SourceView!bp_popup_set_pcCB
		CALLS
		get : BreakPointMap,
		address : BreakPoint,
		string : string,
		address : BreakPoint,
		line_popup_set_pcCB : SourceView



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 5
			AVVARLEN 6
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD bp_popup_set_pcCB
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:6 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:bp_popup_set_pcCB METHODID:12 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-bp_popup_set_pcCB

__BEGIN_METHOD_CODE__

SourceView::bp_popup_set_pcCB(Widget w, XtPointer client_data, 
				   XtPointer call_data)
{
    int bp_nr = *((int *)client_data);
    BreakPoint *bp = bp_map.get(bp_nr);
    if(bp != 0 && bp->address() != _REMOVED_STR_)
    {
	string address = string('*') + bp->address();
	line_popup_set_pcCB(w, XtPointer(&address), call_data);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_breakCB
		CALLS
		create_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD text_popup_breakCB
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:text_popup_breakCB METHODID:21 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-text_popup_breakCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_breakCB(Widget w,
				     XtPointer client_data,
				     XtPointer)
{
    string* word_ptr = (string*)client_data;
    create_bp(fortranize(*word_ptr, true), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_clearCB
		CALLS
		clear_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD text_popup_clearCB
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:text_popup_clearCB METHODID:22 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-text_popup_clearCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_clearCB(Widget w, 
				     XtPointer client_data, 
				     XtPointer)
{
    string* word_ptr = (string*)client_data;
    clear_bp(fortranize(*word_ptr, true), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_printCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		print_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 0
			METHOD text_popup_printCB
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:0 METHOD:text_popup_printCB METHODID:13 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-text_popup_printCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_printCB(Widget w, 
				     XtPointer client_data, 
				     XtPointer)
{
    string* word_ptr = (string*)client_data;

    gdb_command(gdb->print_command(fortranize(*word_ptr), false), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_print_refCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		print_command : GDBAgent,
		dereferenced_expr : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 6
			LT 0
			METHOD text_popup_print_refCB
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:6 LT:0 METHOD:text_popup_print_refCB METHODID:16 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-text_popup_print_refCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_print_refCB(Widget w, 
					 XtPointer client_data, XtPointer)
{
    string* word_ptr = (string*)client_data;

    gdb_command(gdb->print_command(gdb->dereferenced_expr(
	fortranize(*word_ptr)), false), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_watchCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		watch_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 0
			METHOD text_popup_watchCB
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:0 METHOD:text_popup_watchCB METHODID:15 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-text_popup_watchCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_watchCB(Widget w, 
				     XtPointer client_data, 
				     XtPointer)
{
    string* word_ptr = (string*)client_data;

    gdb_command(gdb->watch_command(fortranize(*word_ptr)), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_watch_refCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		watch_command : GDBAgent,
		dereferenced_expr : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 6
			LT 0
			METHOD text_popup_watch_refCB
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:6 LT:0 METHOD:text_popup_watch_refCB METHODID:18 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-text_popup_watch_refCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_watch_refCB(Widget w, 
					 XtPointer client_data, XtPointer)
{
    string* word_ptr = (string*)client_data;

    gdb_command(gdb->watch_command(gdb->dereferenced_expr(
	fortranize(*word_ptr))), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_dispCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD text_popup_dispCB
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:text_popup_dispCB METHODID:14 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-text_popup_dispCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_dispCB(Widget w, XtPointer client_data, XtPointer)
{
    string* word_ptr = (string*)client_data;

    gdb_command(_REMOVED_STR_ + fortranize(*word_ptr), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_disp_refCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		dereferenced_expr : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD text_popup_disp_refCB
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:text_popup_disp_refCB METHODID:17 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-text_popup_disp_refCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_disp_refCB(Widget w, 
					XtPointer client_data, XtPointer)
{
    string* word_ptr = (string*)client_data;

    gdb_command(_REMOVED_STR_ + 
		gdb->dereferenced_expr(fortranize(*word_ptr)), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_whatisCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		whatis_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 0
			METHOD text_popup_whatisCB
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:0 METHOD:text_popup_whatisCB METHODID:19 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-text_popup_whatisCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_whatisCB(Widget w, XtPointer client_data, 
				      XtPointer)
{
    string* word_ptr = (string*)client_data;

    gdb_command(gdb->whatis_command(fortranize(*word_ptr)), w);
}

__END_METHOD_CODE__


	METHOD SourceView!text_popup_lookupCB
		CALLS
		lookup : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD text_popup_lookupCB
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:text_popup_lookupCB METHODID:20 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-text_popup_lookupCB

__BEGIN_METHOD_CODE__

SourceView::text_popup_lookupCB(Widget, XtPointer client_data, XtPointer)
{
    string* word_ptr = (string*)client_data;
    lookup(fortranize(*word_ptr, true));
}

__END_METHOD_CODE__


	METHOD SourceView!full_path
		CALLS
		contains : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		gsub : string,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		gsub : string,
		length : _SYSTEM_OR_USER_,
		gsub : string,
		contains : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 11
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 64
			LT 0
			METHOD full_path
			METHODID 237
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:11 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:64 LT:0 METHOD:full_path METHODID:237 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 237-full_path

__BEGIN_METHOD_CODE__

SourceView::full_path(string file)
{
     





















    file += '/';

    if(!file.contains('/', 0))
        file = current_pwd + _REMOVED_STR_ + file;

     





    unsigned int file_length = file.length();
    unsigned int prev_file_length;
    do {
        prev_file_length = file_length;
        file.gsub(rxdotdot, _REMOVED_STR_);
        file_length = file.length();
    } while(file_length != prev_file_length);

     







    file_length = file.length();
    do {
        prev_file_length = file_length;
        file.gsub(_REMOVED_STR_, _REMOVED_STR_);
        file_length = file.length();
    } while(file_length != prev_file_length);

    file.gsub(_REMOVED_STR_, _REMOVED_STR_);

    if(file.contains('/', -1))
	file = file.before(int(file.length() - 1));

    return file;
}

__END_METHOD_CODE__


	METHOD SourceView!basename

		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD basename
			METHODID 238
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:basename METHODID:238 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 238-basename

__BEGIN_METHOD_CODE__

SourceView::basename(const char *name)
{
    const char *base = name;

    while(*name)
    {
	if(*name++ == '/')
	    base = name;
    }

    return base;
}

__END_METHOD_CODE__


	METHOD SourceView!file_matches
		CALLS
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		full_path : SourceView,
		full_path : SourceView,
		base_matches : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 5
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD file_matches
			METHODID 90
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:5 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:file_matches METHODID:90 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 90-file_matches

__BEGIN_METHOD_CODE__

SourceView::file_matches(const string& file1, const string& file2)
{
    if(gdb->type() == JDB)
	return file1 == file2;

    if(gdb->type() == GDB || app_data.use_source_path)
	return file1 == file2 || full_path(file1) == full_path(file2);

    return base_matches(file1, file2);
}

__END_METHOD_CODE__


	METHOD SourceView!is_current_file
		CALLS
		type : _SYSTEM_OR_USER_,
		current_source_name : SourceView,
		file_matches : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD is_current_file
			METHODID 92
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:is_current_file METHODID:92 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 92-is_current_file

__BEGIN_METHOD_CODE__

SourceView::is_current_file(const string& file)
{
    if(gdb->type() == JDB)
	return file == current_source_name();
    else
	return file_matches(file, current_file_name);
}

__END_METHOD_CODE__


	METHOD SourceView!base_matches
		CALLS
		string : string,
		basename : SourceView,
		chars : _SYSTEM_OR_USER_,
		string : string,
		basename : SourceView,
		chars : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 2
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD base_matches
			METHODID 91
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:2 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:base_matches METHODID:91 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 91-base_matches

__BEGIN_METHOD_CODE__

SourceView::base_matches(const string& file1, const string& file2)
{
    return string(basename(file1.chars())) == string(basename(file2.chars()));
}

__END_METHOD_CODE__


	METHOD SourceView!bp_matches
		CALLS
		bp_matches : SourceView,
		current_source_name : SourceView,
		bp_matches : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD bp_matches
			METHODID 88
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:bp_matches METHODID:88 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 88-bp_matches

__BEGIN_METHOD_CODE__

SourceView::bp_matches(BreakPoint *bp, int line)
{
    return bp_matches(bp, current_source_name(), line) || 
	bp_matches(bp, current_file_name, line);
}

__END_METHOD_CODE__


	METHOD SourceView!bp_matches
		CALLS
		type : _SYSTEM_OR_USER_,
		line_nr : BreakPoint,
		file_name : BreakPoint,
		file_matches : SourceView,
		file_name : BreakPoint



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 4
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 5
			LT 0
			METHOD bp_matches
			METHODID 89
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:4 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:5 LT:0 METHOD:bp_matches METHODID:89 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 89-bp_matches

__BEGIN_METHOD_CODE__

SourceView::bp_matches(BreakPoint *bp, const string& file, int line)
{
    return bp->type() == BREAKPOINT && 
	(line == 0 || bp->line_nr() == line) &&
	(bp->file_name() == _REMOVED_STR_ || file_matches(bp->file_name(), file));
}

__END_METHOD_CODE__


	METHOD SourceView!set_source_argCB
		CALLS
		current_text : SourceView,
		bool : _SYSTEM_OR_USER_,
		find_word_bounds : SourceView,
		index : string,
		length : string,
		index : string,
		length : string,
		length : string,
		length : string,
		get_line_of_pos : SourceView,
		current_source_name : SourceView,
		itostring : _SYSTEM_OR_USER_,
		set_string : ArgField,
		first : BreakPointMap,
		next : BreakPointMap,
		selected : _SYSTEM_OR_USER_,
		bp_matches : SourceView,
		indent_amount : SourceView,
		indent_amount : SourceView,
		address_index : _SYSTEM_OR_USER_,
		from : string,
		through : string,
		set_string : ArgField,
		first : BreakPointMap,
		next : BreakPointMap,
		selected : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		compare_address : _SYSTEM_OR_USER_,
		address : BreakPoint,
		process_breakpoints : SourceView,
		length : string,
		length : string,
		text : ArgField,
		contains : string,
		after : string,
		set_string : ArgField



		METRICS
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 1 TIMES,
			bp_map REFERRED 4 TIMES,
			ARRAYOP 2
			ASS 45
			AVVARLEN 10
			CALLEDN 36
			CLASS SourceView
			CLASSID 107
			CYCLO 22
			DOTS 21
			EQTEST 12
			EXPRORCALL 71
			GE 1
			GT 3
			IN 0
			INDR 16
			LE 2
			LOC 161
			LT 6
			METHOD set_source_argCB
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 47
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:2 ASS:45 AVVARLEN:10 CALLEDN:36 CLASS:SourceView CLASSID:107 CYCLO:22 DOTS:21 EQTEST:12 EXPRORCALL:71 GE:1 GT:3 IN:0 INDR:16 LE:2 LOC:161 LT:6 METHOD:set_source_argCB METHODID:4 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:47 TERNINSTR:0 USEDVARS:3 
		;


#ID 4-set_source_argCB

__BEGIN_METHOD_CODE__

SourceView::set_source_argCB(Widget text_w, 
				  XtPointer client_data, 
				  XtPointer call_data)
{
    string& text = current_text(text_w);
    if(text == _REMOVED_STR_)
	return;

    XmTextVerifyCallbackStruct *cbs = (XmTextVerifyCallbackStruct *)call_data;
    if(bool(client_data))
	selection_click = false;

    XmTextPosition startPos, endPos;
    Boolean have_selection = 
	XmTextGetSelectionPosition(text_w, &startPos, &endPos);

    if(!have_selection || (app_data.source_editing && startPos == endPos))
    {
	 
	 
	if(cbs != 0 && cbs->reason == XmCR_MOVING_INSERT_CURSOR)
	{
	    XEvent *event = cbs->event;
	    if(event == 0)
	    {
		 

		 
		event = XtLastEventProcessed((( ( text_w )->core.screen )->display)  );




		selection_click = true;
	    }

	     
	     
	    if(event != 0 && 
		(event->type == 4  || event->type == 5 ) &&
		event->xbutton.button != 4  &&
		event->xbutton.button != 5 )
	    {
		find_word_bounds(text_w, cbs->newInsert, 
				 startPos, endPos);
		have_selection = 1 ;
	    }
	}
    }

    if(!have_selection && cbs == 0)
    {
	 
	 
	startPos = selection_startpos;
	endPos   = selection_endpos;
	have_selection = 1 ;
    }

     
    selection_event.type = 2 ;

    if(!have_selection)
    {
	 
	return;
    }

    int startIndex = 0;
    if(startPos > 0)
	startIndex = text.index('\n', startPos - text.length()) + 1;

    int endIndex = 0;
    if(endPos > 0)
	endIndex = text.index('\n', endPos - text.length()) + 1;

    bool in_bp_area = false;
    if(selection_click
	&& startIndex == endIndex
	&& startPos < XmTextPosition(text.length())
	&& endPos < XmTextPosition(text.length())
	&& text[_ARGS_] != '\n'
	&& text[_ARGS_] != '\n')
    {
	string pos = _REMOVED_STR_;

	if(text_w == source_text_w)
	{
	    int line_nr = 0;
	    bool in_text;
	    int bp_nr;
	    string address;

	    if(get_line_of_pos(source_text_w, startPos, line_nr, address, 
				in_text, bp_nr) 
		&& !in_text)
	    {
		in_bp_area = true;

		 
		pos = current_source_name() + _REMOVED_STR_ + itostring(line_nr);
		source_arg->set_string(pos);

		 
		MapRef ref;
		for(BreakPoint* bp = bp_map.first(ref);
		     bp != 0;
		     bp = bp_map.next(ref))
		{
		    bp->selected() = (bp_matches(bp, line_nr));
		}
	    }
	}
	else if(text_w == code_text_w
		 && startPos - startIndex <= indent_amount(text_w)
		 && endPos - endIndex <= indent_amount(text_w))
	{
	     
	    int index = address_index(text, startPos);
	    if(index >= 0)
	    {
		in_bp_area = true;

		pos = text.from(index);
		pos = pos.through(rxaddress);

		source_arg->set_string(pos);

		 
		MapRef ref;
		for(BreakPoint* bp = bp_map.first(ref);
		     bp != 0;
		     bp = bp_map.next(ref))
		{
		    bp->selected() = 
			(bp->type() == BREAKPOINT && 
			 compare_address(pos, bp->address()) == 0);
		}
	    }
	}
    }

    if(in_bp_area)
    {
	 
	process_breakpoints(last_info_output);
    }
    else
    {
	 
	string s;
	if(startPos < XmTextPosition(text.length())
	    && endPos < XmTextPosition(text.length()))
	{
	    s = text(startPos, endPos - startPos);
	}

	while(s.contains('\n'))
	    s = s.after('\n');

	if(s != _REMOVED_STR_)
	    source_arg->set_string(s);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!breakpoint_at
		CALLS
		first : BreakPointMap,
		next : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		matches : _SYSTEM_OR_USER_,
		bp_matches : SourceView,
		atoi : _SYSTEM_OR_USER_,
		is_file_pos : _SYSTEM_OR_USER_,
		arg : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		dbx_lookup : _SYSTEM_OR_USER_,
		is_file_pos : _SYSTEM_OR_USER_,
		after : string,
		bp_matches : SourceView,
		atoi : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 8
			AVVARLEN 6
			CALLEDN 14
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 5
			EQTEST 2
			EXPRORCALL 24
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 41
			LT 0
			METHOD breakpoint_at
			METHODID 225
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:6 CALLEDN:14 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:5 EQTEST:2 EXPRORCALL:24 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:41 LT:0 METHOD:breakpoint_at METHODID:225 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:1 
		;


#ID 225-breakpoint_at

__BEGIN_METHOD_CODE__

SourceView::breakpoint_at(string arg)
{
    MapRef ref;
    for(BreakPoint* bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
    {
	if(bp->type() != BREAKPOINT)
	    continue;

	if(arg.matches(rxint))
	{
	     
	    if(bp_matches(bp, atoi(arg)))
		return bp;
	}
	else
	{
	    string pos = arg;

	    if(!is_file_pos(pos))
	    {
		 
		if(bp->arg() == pos)
		    return bp;

		if(gdb->type() == DBX)
		    pos = dbx_lookup(arg);
	    }
	    
	    if(is_file_pos(pos))
	    {
		 
		string file = pos.before(':');
		string line = pos.after(':');

		if(bp_matches(bp, file, atoi(line)))
		    return bp;
	    }
	}
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD SourceView!watchpoint_at
		CALLS
		first : BreakPointMap,
		next : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 6
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 6
			EQTEST 2
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 1
			LOC 41
			LT 1
			METHOD watchpoint_at
			METHODID 226
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 4
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:6 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:6 EQTEST:2 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:6 LE:1 LOC:41 LT:1 METHOD:watchpoint_at METHODID:226 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:4 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 226-watchpoint_at

__BEGIN_METHOD_CODE__

SourceView::watchpoint_at(string expr)
{
    for(int trial = 0; trial <= 2; trial++)
    {
	MapRef ref;
	for(BreakPoint* bp = bp_map.first(ref); bp != 0; 
	     bp = bp_map.next(ref))
	{
	    if(bp->type() != WATCHPOINT)
		continue;

	    switch(trial)
	    {
	    case 0:
		if(bp->expr() == expr)
		{
		     
		    return bp;
		}
		break;

	    case 1:
		if(bp->expr().contains('(') && bp->expr().before('(') == expr)
		{
		     
		    return bp;
		}

	    case 2:
		if(bp->expr().contains(_REMOVED_STR_ + expr, -1) ||
		    bp->expr().contains(_REMOVED_STR_ + expr, -1))
		{
		     
		     
		    return bp;
		}
	    }
	}
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD SourceView!ShowPosition
		CALLS
		current_text : SourceView,
		length : string,
		min : _SYSTEM_OR_USER_,
		length : string



		METRICS
			lines_above_cursor REFERRED 3 TIMES,
			lines_below_cursor REFERRED 3 TIMES,
			ARRAYOP 4
			ASS 15
			AVVARLEN 18
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 2
			EQTEST 3
			EXPRORCALL 23
			GE 2
			GT 4
			IN 0
			INDR 0
			LE 3
			LOC 42
			LT 3
			METHOD ShowPosition
			METHODID 105
			MMINUS 4
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:15 AVVARLEN:18 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:2 EQTEST:3 EXPRORCALL:23 GE:2 GT:4 IN:0 INDR:0 LE:3 LOC:42 LT:3 METHOD:ShowPosition METHODID:105 MMINUS:4 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:2 
		;


#ID 105-ShowPosition

__BEGIN_METHOD_CODE__

SourceView::ShowPosition(Widget text_w, XmTextPosition pos, bool fromTop)
{
    string& text = current_text(text_w);
    if(text.length() == 0)
	return;			 

    short rows = 0;
    XmTextPosition current_top = 0;
    XtVaGetValues(text_w,
		  ((char *)&_XmStrings[_ARGS_]) , &rows,
		  ((char *)&_XmStrings[_ARGS_]) , &current_top,
		  __null );

     
    short relative_row = 1;
    for(XmTextPosition p = min(text.length() - 1, pos); p > current_top; p--)
	if(text[_ARGS_] == '\n')
	    relative_row++;

    if(relative_row <= lines_above_cursor 
	|| relative_row >= rows - (lines_below_cursor + 1))
    {
	 
	short n = rows / 2;	 
	if(fromTop || relative_row <= lines_above_cursor)
	    n = lines_above_cursor;
	else if(relative_row >= rows - (lines_below_cursor + 1))
	    n = rows - (lines_below_cursor + 1);

	XmTextPosition new_top = pos;
	for(;) {
	    while(new_top > 0 && text[_ARGS_] != '\n')
		new_top--;
	    if(new_top == 0 || n-- <= 0)
		break;
	    new_top--;
	}

	XmTextSetTopCharacter(text_w, new_top);
    }

    XmTextShowPosition(text_w, pos);	 
}

__END_METHOD_CODE__


	METHOD SourceView!SetInsertionPosition
		CALLS
		ShowPosition : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD SetInsertionPosition
			METHODID 104
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:SetInsertionPosition METHODID:104 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 104-SetInsertionPosition

__BEGIN_METHOD_CODE__

SourceView::SetInsertionPosition(Widget text_w, 
				      XmTextPosition pos, bool fromTop)
{
    ShowPosition(text_w, pos, fromTop);
    XmTextSetInsertionPosition(text_w, pos);
}

__END_METHOD_CODE__


	METHOD SourceView!new_bad_file
		CALLS
		size : StringArray



		METRICS
			bad_files REFERRED 3 TIMES,
			ARRAYOP 1
			ASS 2
			AVVARLEN 9
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 1
			METHOD new_bad_file
			METHODID 94
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:9 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:1 METHOD:new_bad_file METHODID:94 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 94-new_bad_file

__BEGIN_METHOD_CODE__

SourceView::new_bad_file(const string& file_name)
{
    for(int i = 0; i < bad_files.size(); i++)
	if(file_name == bad_files[_ARGS_])
	    return false;
    bad_files += file_name;
    return true;
}

__END_METHOD_CODE__


	METHOD SourceView!post_file_error
		CALLS
		new_bad_file : SourceView,
		post_error : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD post_file_error
			METHODID 95
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:post_file_error METHODID:95 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 95-post_file_error

__BEGIN_METHOD_CODE__

SourceView::post_file_error(const string& file_name,
				 string text, String name,
				 Widget origin)
{
    if(new_bad_file(file_name))
	post_error(text, name, origin);
}

__END_METHOD_CODE__


	METHOD SourceView!post_file_warning
		CALLS
		new_bad_file : SourceView,
		post_warning : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD post_file_warning
			METHODID 96
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:post_file_warning METHODID:96 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 96-post_file_warning

__BEGIN_METHOD_CODE__

SourceView::post_file_warning(const string& file_name,
				   string text, String name,
				   Widget origin)
{
    if(new_bad_file(file_name))
	post_warning(text, name, origin);
}

__END_METHOD_CODE__


	METHOD SourceView!read_local
		CALLS
		delay : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		open : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		post_file_error : SourceView,
		fstat : _SYSTEM_OR_USER_,
		__errno_location : _SYSTEM_OR_USER_,
		post_file_error : SourceView,
		post_file_error : SourceView,
		unsigned : _SYSTEM_OR_USER_,
		read : VSLLib,
		post_file_error : SourceView,
		close : _SYSTEM_OR_USER_,
		post_file_warning : SourceView



		METRICS
			source_text_w REFERRED 5 TIMES,
			ARRAYOP 1
			ASS 11
			AVVARLEN 13
			CALLEDN 16
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 15
			EQTEST 2
			EXPRORCALL 36
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 65
			LT 2
			METHOD read_local
			METHODID 98
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:11 AVVARLEN:13 CALLEDN:16 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:15 EQTEST:2 EXPRORCALL:36 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:65 LT:2 METHOD:read_local METHODID:98 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:1 
		;


#ID 98-read_local

__BEGIN_METHOD_CODE__

SourceView::read_local(const string& file_name, long& length,
			      bool silent)
{
    StatusDelay delay(_REMOVED_STR_ + quote(file_name));
    length = 0;

     
    int fd;
    if((fd = open(file_name, 00 )) < 0)
    {
	delay.outcome = strerror((*__errno_location()) );
	if(!silent)
	    post_file_error(file_name, 
			    file_name + _REMOVED_STR_ + delay.outcome, 
			    _REMOVED_STR_, source_text_w);
        return 0;
    }

    stat statb;
    if(fstat(fd, &statb) < 0)
    {
	delay.outcome = strerror((*__errno_location()) );
	if(!silent)
	    post_file_error(file_name,
			    file_name + _REMOVED_STR_ + delay.outcome, 
			    _REMOVED_STR_, source_text_w);
	return 0;
    }

     
    if(! ((( ( statb.st_mode ) ) & 0170000 ) == (  0100000  ))  )
    {
	delay.outcome = _REMOVED_STR_;
	if(!silent)
	    post_file_error(file_name,
			    file_name + _REMOVED_STR_ + delay.outcome, 
			    _REMOVED_STR_, source_text_w);
	return 0;
    }

     
     
     
    char* text = XtMalloc(unsigned(statb.st_size + 1));
    if((length = read(fd, text, statb.st_size)) != statb.st_size)
    {
	delay.outcome = _REMOVED_STR_;
	if(!silent)
	    post_file_error(file_name,
			    file_name + _REMOVED_STR_ + delay.outcome,
			    _REMOVED_STR_, source_text_w);
    }
    close(fd);

    text[_ARGS_] = '\0';  

    if(statb.st_size == 0)
    {
	delay.outcome = _REMOVED_STR_;
	if(!silent)
	    post_file_warning(file_name,
			      file_name + _REMOVED_STR_ + delay.outcome,
			      _REMOVED_STR_, source_text_w);
    }

    return text;
}

__END_METHOD_CODE__


	METHOD SourceView!read_remote
		CALLS
		delay : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		sh_command : _SYSTEM_OR_USER_,
		cat : _SYSTEM_OR_USER_,
		start : Agent,
		inputfp : Agent,
		fread : _SYSTEM_OR_USER_,
		feof : _SYSTEM_OR_USER_,
		post_file_error : SourceView,
		quote : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 9
			AVVARLEN 13
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 4
			EQTEST 2
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 37
			LT 0
			METHOD read_remote
			METHODID 99
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:9 AVVARLEN:13 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:4 EQTEST:2 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:37 LT:0 METHOD:read_remote METHODID:99 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:1 
		;


#ID 99-read_remote

__BEGIN_METHOD_CODE__

SourceView::read_remote(const string& file_name, long& length, 
			       bool silent)
{
    StatusDelay delay(_REMOVED_STR_ + 
		      quote(file_name) + _REMOVED_STR_ + gdb_host);
    length = 0;

    string cat_command = sh_command(_REMOVED_STR_ + file_name);

    Agent cat(cat_command);
    cat.start();

    FILE *fp = cat.inputfp();
    if(fp == 0)
    {
	delay.outcome = _REMOVED_STR_;
	return 0;
    }

    String text = XtMalloc(1);

    do {
	text = XtRealloc(text, length + 8192    + 1);
	length += fread(text + length, sizeof(char), 8192   , fp);
    } while(!feof(fp));

    text[_ARGS_] = '\0';   

    if(length == 0)
    {
	if(!silent)
	    post_file_error(file_name,
			    _REMOVED_STR_ + quote(file_name), 
			    _REMOVED_STR_, source_text_w);
	delay.outcome = _REMOVED_STR_;
    }

    return text;
}

__END_METHOD_CODE__


	METHOD SourceView!read_class
		CALLS
		delay : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		java_class_file : _SYSTEM_OR_USER_,
		remote_gdb : _SYSTEM_OR_USER_,
		read_remote : SourceView,
		full_path : SourceView,
		read_local : SourceView,
		remote_gdb : _SYSTEM_OR_USER_,
		post_file_error : SourceView,
		quote : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			source_name_cache REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 14
			AVVARLEN 15
			CALLEDN 10
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 1
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 40
			LT 0
			METHOD read_class
			METHODID 100
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 15
			TERNINSTR 1
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:14 AVVARLEN:15 CALLEDN:10 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:1 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:40 LT:0 METHOD:read_class METHODID:100 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:15 TERNINSTR:1 USEDVARS:2 
		;


#ID 100-read_class

__BEGIN_METHOD_CODE__

SourceView::read_class(const string& class_name, 
			      string& file_name, SourceOrigin& origin,
			      long& length, bool silent)
{
    StatusDelay delay(_REMOVED_STR_ + quote(class_name));
    
    String text = 0;
    length = 0;

    file_name = java_class_file(class_name);

    if(file_name != _REMOVED_STR_)
    {
	if(remote_gdb())
	    text = read_remote(file_name, length, true);
	else
	{
	    file_name = full_path(file_name);
	    text = read_local(file_name, length, true);
	}
    }

    if(text != 0 && length != 0)
    {
	 
	source_name_cache[_ARGS_] = class_name;
	origin = remote_gdb() ? ORIGIN_REMOTE : ORIGIN_LOCAL;
	return text;
    }
    else
    {
	 
	file_name = class_name;
	origin = ORIGIN_NONE;
	delay.outcome = _REMOVED_STR_;
	if(!silent)
	    post_file_error(class_name,
			    _REMOVED_STR_ + quote(class_name),
			    _REMOVED_STR_, source_text_w);

	return 0;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!read_from_gdb
		CALLS
		isReadyWithPrompt : GDBAgent,
		type : _SYSTEM_OR_USER_,
		delay : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		title : GDBAgent,
		type : _SYSTEM_OR_USER_,
		gdb_question : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		from : string,
		contains : string,
		post_gdb_message : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 18
			ASS 20
			AVVARLEN 13
			CALLEDN 31
			CLASS SourceView
			CLASSID 107
			CYCLO 20
			DOTS 15
			EQTEST 8
			EXPRORCALL 64
			GE 0
			GT 1
			IN 0
			INDR 4
			LE 0
			LOC 102
			LT 14
			METHOD read_from_gdb
			METHODID 101
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 12
			RETPOINT 3
			SCOPEOP 0
			STMNT 35
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:18 ASS:20 AVVARLEN:13 CALLEDN:31 CLASS:SourceView CLASSID:107 CYCLO:20 DOTS:15 EQTEST:8 EXPRORCALL:64 GE:0 GT:1 IN:0 INDR:4 LE:0 LOC:102 LT:14 METHOD:read_from_gdb METHODID:101 MMINUS:0 OUT:0 PARNUM:3 PPLUS:12 RETPOINT:3 SCOPEOP:0 STMNT:35 TERNINSTR:0 USEDVARS:1 
		;


#ID 101-read_from_gdb

__BEGIN_METHOD_CODE__

SourceView::read_from_gdb(const string& file_name, long& length, 
				 bool  )
{
    length = 0;
    if(!gdb->isReadyWithPrompt())
	return 0;
    if(gdb->type() == JDB)
	return 0;		 

    StatusDelay delay(_REMOVED_STR_ + quote(file_name) + 
		      _REMOVED_STR_ + gdb->title());

    string command;
    switch(gdb->type())
    {
    case GDB:
	command = _REMOVED_STR_ + file_name + _REMOVED_STR_;
	break;

    case DBX:
	command = _REMOVED_STR_;
	break;

    case JDB:
	command = _REMOVED_STR_ + file_name;
	break;

    case XDB:
	command = _REMOVED_STR_;
	break;
    }
    string listing = gdb_question(command, -1, true);

     
     
     
    String text = XtMalloc(listing.length());

    int i = 0;
    length = 0;
    while(i < int(listing.length()))
    {
	int count = 0;

	 
	 
	while(count < 8
	       && i < int(listing.length())
	       && ((__ctype_b[(int) ( ( listing[_ARGS_] ) )] & (unsigned short int)   _ISspace )  
		   || listing[_ARGS_] == '=' 
		   || listing[_ARGS_] == '*'
		   || listing[_ARGS_] == '>'))
	    i++, count++;

	if(i < int(listing.length()) && (__ctype_b[(int) ( ( listing[_ARGS_] ) )] & (unsigned short int)   _ISdigit )  )
	{
	     
	    while(i < int(listing.length()) && (__ctype_b[(int) ( ( listing[_ARGS_] ) )] & (unsigned short int)   _ISdigit )  )
		i++, count++;

	     
	    if(count < 8 && i < int(listing.length()) && listing[_ARGS_] == ':')
		i++, count++;

	     
	    while(count < 8 && i < int(listing.length()) && listing[_ARGS_] == ' ')
		i++, count++;

	     
	    if(count < 8 && i < int(listing.length()) && listing[_ARGS_] == '\t')
		i++;

	     
	    while(i < int(listing.length()) && listing[_ARGS_] != '\n')
		text[_ARGS_] = listing[_ARGS_];

	     
	    text[_ARGS_] = '\n';
	    i++;
	}
	else
	{
	    int start = i;

	     
	    while(i < int(listing.length()) && listing[_ARGS_] != '\n')
		i++;
	    if(i < int(listing.length()))
		i++;

	    string msg = listing.from(start);
	    msg = msg.before('\n');
	    if(!msg.contains(_REMOVED_STR_))  
		post_gdb_message(msg, true, source_text_w);
	}
    }

    text[_ARGS_] = '\0';   

    if(length == 0)
	delay.outcome = _REMOVED_STR_;

    return text;
}

__END_METHOD_CODE__


	METHOD SourceView!read_indented
		CALLS
		type : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		read_class : SourceView,
		full_path : SourceView,
		full_path : SourceView,
		dbx_path : _SYSTEM_OR_USER_,
		full_path : SourceView,
		remote_gdb : _SYSTEM_OR_USER_,
		read_remote : SourceView,
		remote_gdb : _SYSTEM_OR_USER_,
		read_local : SourceView,
		remote_gdb : _SYSTEM_OR_USER_,
		read_local : SourceView,
		current_source_name : SourceView,
		read_from_gdb : SourceView,
		type : _SYSTEM_OR_USER_,
		read_class : SourceView,
		remote_gdb : _SYSTEM_OR_USER_,
		read_local : SourceView,
		read_remote : SourceView,
		indent_amount : SourceView,
		indent_amount : SourceView,
		indent_amount : SourceView,
		indent_amount : SourceView



		METRICS
			source_text_w REFERRED 4 TIMES,
			display_line_numbers REFERRED 1 TIMES,
			ARRAYOP 10
			ASS 58
			AVVARLEN 16
			CALLEDN 24
			CLASS SourceView
			CLASSID 107
			CYCLO 32
			DOTS 1
			EQTEST 22
			EXPRORCALL 60
			GE 1
			GT 2
			IN 0
			INDR 2
			LE 1
			LOC 177
			LT 7
			METHOD read_indented
			METHODID 102
			MMINUS 1
			OUT 0
			PARNUM 4
			PPLUS 11
			RETPOINT 2
			SCOPEOP 0
			STMNT 68
			TERNINSTR 1
			USEDVARS 2

#METRICS ARRAYOP:10 ASS:58 AVVARLEN:16 CALLEDN:24 CLASS:SourceView CLASSID:107 CYCLO:32 DOTS:1 EQTEST:22 EXPRORCALL:60 GE:1 GT:2 IN:0 INDR:2 LE:1 LOC:177 LT:7 METHOD:read_indented METHODID:102 MMINUS:1 OUT:0 PARNUM:4 PPLUS:11 RETPOINT:2 SCOPEOP:0 STMNT:68 TERNINSTR:1 USEDVARS:2 
		;


#ID 102-read_indented

__BEGIN_METHOD_CODE__

SourceView::read_indented(string& file_name, long& length, 
				 SourceOrigin& origin, bool silent)
{
    length = 0;
    Delay delay;
    long t;
	
    String text = 0;
    origin = ORIGIN_NONE;
    string full_file_name = file_name;

    if(gdb->type() == JDB && !file_name.contains('/'))
    {
	 
	text = read_class(file_name, full_file_name, origin, length, true);
    }

    if(text == 0 || length == 0)
    {
	for(int trial = 1; (text == 0 || length == 0) && trial <= 2; trial++)
	{
	    switch(trial)
	    {
	    case 1:
		 
		full_file_name = full_path(file_name);
		break;

	    case 2:
		 
		full_file_name = full_path(dbx_path(file_name));
		if(full_file_name == full_path(file_name))
		    continue;
		break;
	    }

	     
	    if((text == 0 || length == 0) && remote_gdb())
	    {
		text = read_remote(full_file_name, length, true);
		if(text != 0)
		    origin = ORIGIN_REMOTE;
	    }

	     
	    if((text == 0 || length == 0) && !remote_gdb())
	    {
		text = read_local(full_file_name, length, true);
		if(text != 0)
		    origin = ORIGIN_LOCAL;
	    }

	     
	    if((text == 0 || length == 0) && remote_gdb())
	    {
		text = read_local(full_file_name, length, true);
		if(text != 0)
		    origin = ORIGIN_LOCAL;
	    }
	}
    }

     
    if(text == 0 || length == 0)
    {
	string saved_current_file_name = current_file_name;
	current_file_name = full_file_name;
	string source_name = current_source_name();
	current_file_name = saved_current_file_name;

	text = read_from_gdb(source_name, length, silent);

	if(text != 0 && length != 0)
	{
	     
	    full_file_name = source_name;
	    if(text != 0)
		origin = ORIGIN_GDB;
	}
    }

    if((text == 0 || length == 0) && !silent)
    {
	 
	if(gdb->type() == JDB)
	    text = read_class(file_name, full_file_name, origin, 
			      length, false);
	else if(!remote_gdb())
	    text = read_local(full_file_name, length, false);
	else
	    text = read_remote(full_file_name, length, false);
    }

    if(text == 0 || length == 0)
    {
	origin = ORIGIN_NONE;
	return 0;
    }

     
    file_name = full_file_name;

     
    int lines = 0;
    for(t = 0; t < length; t++)
	if(text[_ARGS_] == '\n')
	    lines++;

    int indented_text_length = length;
    if(length > 0 && text[_ARGS_] != '\n')
    {
	 
	 
	indented_text_length += 1;

	 
	lines++;
    }

     
    indented_text_length += indent_amount(source_text_w) * lines;

    String indented_text = XtMalloc(indented_text_length + 1);

    char *line_no_s = new char[_ARGS_];
    for(int i = 0; i < indent_amount(source_text_w); i++)
	line_no_s[_ARGS_] = ' ';

    t = 0;
    char *pos_ptr = indented_text;  
    while(t < length)
    {
	 
	int i;
	for(i = indent_amount(source_text_w) - 2; i >= 0; i--)
	{
	    char& c = line_no_s[_ARGS_];
	    if(c == ' ')
	    {
		c = '1';
		break;
	    }
	    else if(c < '9')
	    {
		c++;
		break;
	    }
	    else
		c = '0';
	}

	 
	for(i = 0; i < indent_amount(source_text_w); i++)
	    *pos_ptr++ = display_line_numbers ? line_no_s[_ARGS_] : ' ';

	 
	while(t < length && text[_ARGS_] != '\n')
	    *pos_ptr++ = text[_ARGS_];

	 
	if(t == length)
	{
	     
	    *pos_ptr++ = '\n';
	}
	else
	{
	    *pos_ptr++ = text[_ARGS_];
	}
    }

    delete[] line_no_s;
    *pos_ptr = '\0';

    XtFree(text);

    length = indented_text_length;
    return indented_text;
}

__END_METHOD_CODE__


	METHOD SourceView!read_current
		CALLS
		has : StringStringAssoc,
		type : _SYSTEM_OR_USER_,
		read_indented : SourceView,
		string : string,
		length : AssocRec,
		freq : AssocRec,
		post_warning : _SYSTEM_OR_USER_,
		indent_amount : SourceView,
		freq : AssocRec,
		TextPositionArray : _SYSTEM_OR_USER_,
		length : AssocRec,
		length : AssocRec



		METRICS
			source_text_w REFERRED 2 TIMES,
			tab_width REFERRED 1 TIMES,
			line_count REFERRED 2 TIMES,
			_pos_of_line REFERRED 4 TIMES,
			file_cache REFERRED 4 TIMES,
			origin_cache REFERRED 3 TIMES,
			current_origin REFERRED 4 TIMES,
			source_name_cache REFERRED 1 TIMES,
			file_name_cache REFERRED 3 TIMES,
			cache_source_files REFERRED 1 TIMES,
			ARRAYOP 11
			ASS 23
			AVVARLEN 13
			CALLEDN 13
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 9
			EQTEST 5
			EXPRORCALL 30
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 69
			LT 1
			METHOD read_current
			METHODID 103
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 3
			SCOPEOP 0
			STMNT 30
			TERNINSTR 0
			USEDVARS 10

#METRICS ARRAYOP:11 ASS:23 AVVARLEN:13 CALLEDN:13 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:9 EQTEST:5 EXPRORCALL:30 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:69 LT:1 METHOD:read_current METHODID:103 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:3 SCOPEOP:0 STMNT:30 TERNINSTR:0 USEDVARS:10 
		;


#ID 103-read_current

__BEGIN_METHOD_CODE__

SourceView::read_current(string& file_name, bool force_reload, bool silent)
{
    string requested_file_name = file_name;

    if(cache_source_files && !force_reload && file_cache.has(file_name))
    {
	current_source = file_cache[_ARGS_];
	current_origin = origin_cache[_ARGS_];
	file_name      = file_name_cache[_ARGS_];

	if(gdb->type() == JDB)
	{
	     
	     
	    source_name_cache[_ARGS_] = requested_file_name;
	}
    }
    else
    {
	long length = 0;
	SourceOrigin orig;
	String indented_text = read_indented(file_name, length, orig, silent);
	if(indented_text == 0 || length == 0)
	    return -1;		 

	current_source = string(indented_text, length);
	current_origin = orig;
	XtFree(indented_text);

	if(current_source.length() > 0)
	{
	    file_cache[_ARGS_]             = current_source;
	    origin_cache[_ARGS_]           = current_origin;
	    file_name_cache[_ARGS_]        = file_name;

	    if(file_name != requested_file_name)
	    {
		file_cache[_ARGS_]      = current_source;
		origin_cache[_ARGS_]    = current_origin;
		file_name_cache[_ARGS_] = file_name;
	    }
	}

	int null_count = current_source.freq('\0');
	if(null_count > 0 && !silent)
	    post_warning(file_name + _REMOVED_STR_,
			 _REMOVED_STR_, source_text_w);
    }

     
    untabify_if_needed(current_source, tab_width, 
		       indent_amount(source_text_w));

     

     
    line_count   = current_source.freq('\n');
    _pos_of_line = TextPositionArray(line_count + 2);
    _pos_of_line.operator += (XmTextPosition(0));
    _pos_of_line.operator += (XmTextPosition(0));

    for(int i = 0; i < int(current_source.length()); i++)
	if(current_source[_ARGS_] == '\n')
	    _pos_of_line.operator += (XmTextPosition(i + 1));

    if(current_source.length() == 0)
	return -1;
    else
	return 0;
}

__END_METHOD_CODE__


	METHOD SourceView!pos_of_line
		CALLS
		size : TextPositionArray



		METRICS
			line_count REFERRED 1 TIMES,
			_pos_of_line REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 11
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 1
			METHOD pos_of_line
			METHODID 87
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:11 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:1 GT:2 IN:0 INDR:0 LE:0 LOC:6 LT:1 METHOD:pos_of_line METHODID:87 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 87-pos_of_line

__BEGIN_METHOD_CODE__

SourceView::pos_of_line(int line)
{
    if(line < 0 || line > line_count || line >= _pos_of_line.size())
	return 0;
    else
	return _pos_of_line[_ARGS_];
}

__END_METHOD_CODE__


	METHOD SourceView!clear_file_cache

		METRICS
			file_cache REFERRED 1 TIMES,
			origin_cache REFERRED 1 TIMES,
			source_name_cache REFERRED 1 TIMES,
			file_name_cache REFERRED 1 TIMES,
			bad_files REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 5
			AVVARLEN 12
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD clear_file_cache
			METHODID 218
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 5

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:12 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:clear_file_cache METHODID:218 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:5 
		;


#ID 218-clear_file_cache

__BEGIN_METHOD_CODE__

SourceView::clear_file_cache()
{
    static StringStringAssoc string_empty;
    file_cache        = string_empty;
    source_name_cache = string_empty;
    file_name_cache   = string_empty;

    static StringOriginAssoc origin_empty;
    origin_cache      = origin_empty;

    static StringArray bad_files_empty;
    bad_files         = bad_files_empty;
}

__END_METHOD_CODE__


	METHOD SourceView!reload
		CALLS
		type : _SYSTEM_OR_USER_,
		line_of_cursor : SourceView,
		file_of_cursor : SourceView,
		after : string,
		read_file : SourceView,
		atoi : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 2
			EQTEST 2
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 18
			LT 0
			METHOD reload
			METHODID 166
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:2 EQTEST:2 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:18 LT:0 METHOD:reload METHODID:166 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 166-reload

__BEGIN_METHOD_CODE__

SourceView::reload()
{
     
    if(current_file_name == _REMOVED_STR_)
	return;

    string file;
    if(gdb->type() == JDB)
	file = line_of_cursor();
    else
	file = file_of_cursor();

    string line = file.after(':');
    file        = file.before(':');

     

    read_file(file, atoi(line), true);
}

__END_METHOD_CODE__


	METHOD SourceView!set_tab_width
		CALLS
		delay : _SYSTEM_OR_USER_,
		reload : SourceView



		METRICS
			tab_width REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 9
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 15
			LT 1
			METHOD set_tab_width
			METHODID 186
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:9 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:15 LT:1 METHOD:set_tab_width METHODID:186 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 186-set_tab_width

__BEGIN_METHOD_CODE__

SourceView::set_tab_width(int width)
{
    if(width <= 0)
	return;

    if(tab_width != width)
    {
	tab_width = width;

	if(current_file_name != _REMOVED_STR_)
	{
	    StatusDelay delay(_REMOVED_STR_);
	    reload();
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!set_indent
		CALLS
		delay : _SYSTEM_OR_USER_,
		reload : SourceView,
		clear_code_cache : SourceView,
		show_pc : SourceView



		METRICS
			source_indent_amount REFERRED 3 TIMES,
			code_indent_amount REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 5
			AVVARLEN 19
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 0
			EQTEST 2
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 26
			LT 2
			METHOD set_indent
			METHODID 187
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:19 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:0 EQTEST:2 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:26 LT:2 METHOD:set_indent METHODID:187 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:2 
		;


#ID 187-set_indent

__BEGIN_METHOD_CODE__

SourceView::set_indent(int source_indent, int code_indent)
{
    if(source_indent < 0 || code_indent < 0)
	return;

    if(source_indent == source_indent_amount &&
	code_indent == code_indent_amount)
	return;

    if(source_indent != source_indent_amount)
    {
	source_indent_amount = source_indent;
	if(current_file_name != _REMOVED_STR_)
	{
	    StatusDelay delay(_REMOVED_STR_);
	    reload();
	}
    }

    if(code_indent != code_indent_amount)
    {
	code_indent_amount = code_indent;

	clear_code_cache();
	show_pc(last_shown_pc);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!read_file
		CALLS
		gsub : string,
		read_current : SourceView,
		add_to_history : SourceView,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		SetInsertionPosition : SourceView,
		update_title : SourceView,
		refresh_bp_disp : SourceView,
		rm : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		remote_gdb : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		title : GDBAgent,
		tt : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		length : AssocRec,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		length : AssocRec,
		set_status_mstring : _SYSTEM_OR_USER_,
		update_glyphs : SourceView,
		initial_popup_shell : _SYSTEM_OR_USER_,
		initial_popup_shell : _SYSTEM_OR_USER_,
		gdbOpenSourceWindowCB : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 10 TIMES,
			line_count REFERRED 3 TIMES,
			bps_in_line REFERRED 1 TIMES,
			bp_addresses REFERRED 1 TIMES,
			current_origin REFERRED 1 TIMES,
			last_top REFERRED 1 TIMES,
			last_pos REFERRED 1 TIMES,
			last_start_highlight REFERRED 1 TIMES,
			last_end_highlight REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 28
			AVVARLEN 12
			CALLEDN 34
			CLASS SourceView
			CLASSID 107
			CYCLO 17
			DOTS 7
			EQTEST 3
			EXPRORCALL 58
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 1
			LOC 132
			LT 1
			METHOD read_file
			METHODID 165
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 46
			TERNINSTR 1
			USEDVARS 9

#METRICS ARRAYOP:0 ASS:28 AVVARLEN:12 CALLEDN:34 CLASS:SourceView CLASSID:107 CYCLO:17 DOTS:7 EQTEST:3 EXPRORCALL:58 GE:0 GT:1 IN:0 INDR:3 LE:1 LOC:132 LT:1 METHOD:read_file METHODID:165 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:46 TERNINSTR:1 USEDVARS:9 
		;


#ID 165-read_file

__BEGIN_METHOD_CODE__

SourceView::read_file(string file_name, 
			    int initial_line,
			    bool force_reload,
			    bool silent)
{
    if(file_name == _REMOVED_STR_)
	return;

     






















    file_name.gsub(_REMOVED_STR_, _REMOVED_STR_);

     
    int error = read_current(file_name, force_reload, silent);
    if(error)
	return;

    add_to_history(file_name, initial_line);

     
    Delay delay;

     
    XmTextSetString(source_text_w, (String)current_source);

    XmTextPosition initial_pos = 0;
    if(initial_line > 0 && initial_line <= line_count)
	initial_pos = pos_of_line(initial_line) + indent_amount(source_text_w);

    SetInsertionPosition(source_text_w, initial_pos, true);

     
    current_file_name = file_name;

     
    update_title();

     
    static IntIntArrayAssoc empty_bps;
    bps_in_line = empty_bps;
    static StringArray empty_addresses;
    bp_addresses = empty_addresses;
    refresh_bp_disp();

    XtManageChild(source_text_w);

    MString msg;
    switch(current_origin)
    {
    case ORIGIN_LOCAL:
	msg += rm(_REMOVED_STR_ + quote(file_name));
	if(remote_gdb())
	    msg += rm(_REMOVED_STR_);
	break;

    case ORIGIN_REMOTE:
	msg += rm(_REMOVED_STR_ + quote(file_name));
	msg += rm(_REMOVED_STR_ + gdb_host + _REMOVED_STR_);
	break;

    case ORIGIN_GDB:
	msg += rm(_REMOVED_STR_ + quote(file_name));
	msg += rm(_REMOVED_STR_ + gdb->title() + _REMOVED_STR_);
	break;

    case ORIGIN_NONE:
	msg += tt(file_name);
	break;
    }
    msg += rm(_REMOVED_STR_);

    if(line_count == 1)
	msg += rm(_REMOVED_STR_);
    else
	msg += rm(itostring(line_count) + _REMOVED_STR_);
    if(current_source.length() == 1)
	msg += rm(_REMOVED_STR_);
    else
	msg += rm(itostring(current_source.length()) + _REMOVED_STR_);

    set_status_mstring(msg);

    XmTextClearSelection(source_text_w, 
			 XtLastTimestampProcessed((( ( source_text_w )->core.screen )->display)  ));
    XmTextSetHighlight(source_text_w,
		       0, XmTextGetLastPosition(source_text_w),
		       XmHIGHLIGHT_NORMAL);
    last_top = last_pos = last_start_highlight = last_end_highlight = 0;
    update_glyphs(source_text_w);

    if(app_data.source_window)
    {
	static bool popped_up = false;

	if(!popped_up)
	{
	     
	    Widget shell = (source_view_shell != 0) ? 
		source_view_shell : command_shell;

	    if(source_view_shell != 0 || app_data.tty_mode)
	    {
		initial_popup_shell(shell);
	    }

	    if(!app_data.command_toolbar)
		initial_popup_shell(tool_shell);

	    if(!started_iconified(shell))
		gdbOpenSourceWindowCB(source_text_w, 0, 0);
	}

	popped_up = true;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!update_title
		CALLS
		string : string,
		basename : SourceView,
		chars : AssocRec



		METRICS
			toplevel_w REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 4
			AVVARLEN 10
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD update_title
			METHODID 57
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:4 AVVARLEN:10 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:update_title METHODID:57 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:1 
		;


#ID 57-update_title

__BEGIN_METHOD_CODE__

SourceView::update_title()
{
    if(toplevel_w == 0)
	return;

    string title   = _REMOVED_STR_  _REMOVED_STR_ + current_file_name;
    String title_s = title;

    string icon   = 
	_REMOVED_STR_  _REMOVED_STR_ + string(basename(current_file_name.chars()));
    String icon_s = icon;

    XtVaSetValues(toplevel_w,
		  ((char*)&XtShellStrings[_ARGS_])  , title_s,
		  ((char*)&XtShellStrings[_ARGS_])  , icon_s,
		  __null );
}

__END_METHOD_CODE__


	METHOD SourceView!refresh_bp_disp
		CALLS
		refresh_source_bp_disp : SourceView,
		refresh_code_bp_disp : SourceView,
		update_glyphs : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD refresh_bp_disp
			METHODID 61
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:refresh_bp_disp METHODID:61 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 61-refresh_bp_disp

__BEGIN_METHOD_CODE__

SourceView::refresh_bp_disp()
{
    refresh_source_bp_disp();
    refresh_code_bp_disp();
    update_glyphs();
}

__END_METHOD_CODE__


	METHOD SourceView!refresh_source_bp_disp
		CALLS
		b_i_l_iter : _SYSTEM_OR_USER_,
		ok : _SYSTEM_OR_USER_,
		key : AssocIter,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		s : _SYSTEM_OR_USER_,
		at : AssocRec,
		length : string,
		pos_of_line : SourceView,
		pos_of_line : SourceView,
		length : string,
		first : BreakPointMap,
		next : BreakPointMap,
		bp_matches : SourceView,
		number : BreakPoint,
		b_i_l_iter2 : _SYSTEM_OR_USER_,
		ok : _SYSTEM_OR_USER_,
		key : AssocIter,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		size : VarIntArray,
		get : BreakPointMap,
		symbol : BreakPoint,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 4 TIMES,
			display_glyphs REFERRED 1 TIMES,
			bp_map REFERRED 3 TIMES,
			line_count REFERRED 2 TIMES,
			bps_in_line REFERRED 5 TIMES,
			ARRAYOP 4
			ASS 20
			AVVARLEN 10
			CALLEDN 27
			CLASS SourceView
			CLASSID 107
			CYCLO 15
			DOTS 15
			EQTEST 0
			EXPRORCALL 46
			GE 1
			GT 7
			IN 0
			INDR 2
			LE 0
			LOC 84
			LT 4
			METHOD refresh_source_bp_disp
			METHODID 62
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 4
			RETPOINT 0
			SCOPEOP 0
			STMNT 33
			TERNINSTR 0
			USEDVARS 5

#METRICS ARRAYOP:4 ASS:20 AVVARLEN:10 CALLEDN:27 CLASS:SourceView CLASSID:107 CYCLO:15 DOTS:15 EQTEST:0 EXPRORCALL:46 GE:1 GT:7 IN:0 INDR:2 LE:0 LOC:84 LT:4 METHOD:refresh_source_bp_disp METHODID:62 MMINUS:0 OUT:0 PARNUM:0 PPLUS:4 RETPOINT:0 SCOPEOP:0 STMNT:33 TERNINSTR:0 USEDVARS:5 
		;


#ID 62-refresh_source_bp_disp

__BEGIN_METHOD_CODE__

SourceView::refresh_source_bp_disp()
{
     
    for(IntIntArrayAssocIter b_i_l_iter(bps_in_line);
	 b_i_l_iter.ok(); 
	 b_i_l_iter++)
    {
	int line_nr = b_i_l_iter.key();
	if(line_nr < 0 || line_nr > line_count)
	    continue;

	int pos = pos_of_line(line_nr);
	int indent = indent_amount(source_text_w, pos);

	if(indent > 0)
	{
	    string s(current_source.at(pos, indent - 1));

	    if(s.length() > 0)
		XmTextReplace(source_text_w,
			      pos_of_line(line_nr),
			      pos_of_line(line_nr) + s.length(),
			      (String)s);
	}
    }

    static IntIntArrayAssoc empty_bps;
    bps_in_line = empty_bps;

    if(display_glyphs)
	return;

     
    MapRef ref;
    for(BreakPoint* bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
    {
	if(bp_matches(bp))
	    bps_in_line[_ARGS_] += bp->number();
    }

     
    for(IntIntArrayAssocIter b_i_l_iter2(bps_in_line);
	 b_i_l_iter2.ok();
	 b_i_l_iter2++)
    {
	int line_nr = b_i_l_iter2.key();
	if(line_nr < 0 || line_nr > line_count)
	    continue;

	XmTextPosition pos = pos_of_line(line_nr);
	int indent = indent_amount(source_text_w, pos);

	if(indent > 0)
	{
	     
	    VarIntArray& bps = bps_in_line[_ARGS_];

	    string insert_string = _REMOVED_STR_;
	    for(int i = 0; i < bps.size(); i++)
	    {
		BreakPoint *bp = bp_map.get(bps[_ARGS_]);
		insert_string += bp->symbol();
	    }

	    if(int(insert_string.length()) >= indent - 1)
	    {
		insert_string = insert_string.before(indent - 1);
	    }
	    else
	    {
		for(int i = insert_string.length(); i < indent - 1; i++)
		{
		    insert_string += current_source[_ARGS_];
		}
	    }

	     ;

	    if(insert_string.length() > 0)
		XmTextReplace(source_text_w, pos, 
			      pos + indent - 1,
			      (String)insert_string);
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!refresh_code_bp_disp
		CALLS
		size : StringArray,
		find_pc : SourceView,
		indent_amount : SourceView,
		replicate : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		address : BreakPoint,
		size : StringArray,
		find_pc : SourceView,
		first : BreakPointMap,
		next : BreakPointMap,
		address : BreakPoint,
		symbol : BreakPoint,
		indent_amount : SourceView,
		replicate : _SYSTEM_OR_USER_



		METRICS
			code_text_w REFERRED 4 TIMES,
			display_glyphs REFERRED 1 TIMES,
			bp_map REFERRED 4 TIMES,
			bp_addresses REFERRED 6 TIMES,
			ARRAYOP 2
			ASS 22
			AVVARLEN 10
			CALLEDN 16
			CLASS SourceView
			CLASSID 107
			CYCLO 12
			DOTS 7
			EQTEST 3
			EXPRORCALL 34
			GE 0
			GT 2
			IN 0
			INDR 4
			LE 0
			LOC 65
			LT 2
			METHOD refresh_code_bp_disp
			METHODID 63
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 30
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:2 ASS:22 AVVARLEN:10 CALLEDN:16 CLASS:SourceView CLASSID:107 CYCLO:12 DOTS:7 EQTEST:3 EXPRORCALL:34 GE:0 GT:2 IN:0 INDR:4 LE:0 LOC:65 LT:2 METHOD:refresh_code_bp_disp METHODID:63 MMINUS:0 OUT:0 PARNUM:0 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:30 TERNINSTR:0 USEDVARS:4 
		;


#ID 63-refresh_code_bp_disp

__BEGIN_METHOD_CODE__

SourceView::refresh_code_bp_disp()
{
     
    int i;
    for(i = 0; i < bp_addresses.size(); i++)
    {
	const string& address = bp_addresses[_ARGS_];
	XmTextPosition pos = find_pc(address);
	if(pos == XmTextPosition(-1))
	    continue;

	 
	int indent = indent_amount(code_text_w, pos);
	if(indent > 0)
	{
	    string spaces = replicate(' ', indent);
	    XmTextReplace(code_text_w, pos, pos + indent, (String)spaces);
	}
    }

    static StringArray empty;
    bp_addresses = empty;

    if(display_glyphs)
	return;

     
    MapRef ref;
    for(BreakPoint *bp = bp_map.first(ref); bp != 0;
	 bp = bp_map.next(ref))
    {
	if(bp->type() != BREAKPOINT)
	    continue;

	bp_addresses += bp->address();
    }

     
    for(i = 0; i < bp_addresses.size(); i++)
    {
	const string& address = bp_addresses[_ARGS_];
	XmTextPosition pos = find_pc(address);
	if(pos == XmTextPosition(-1))
	    continue;

	 
	string insert_string = _REMOVED_STR_;
	for(BreakPoint *bp = bp_map.first(ref);
	     bp != 0;
	     bp = bp_map.next(ref))
	{
	    if(bp->address() == address)
		insert_string += bp->symbol();
	}

	int indent = indent_amount(code_text_w, pos);
	if(indent > 0)
	{
	    insert_string += replicate(' ', indent);
	    insert_string = insert_string.before(indent);

	    XmTextReplace(code_text_w, pos, pos + indent, 
			  (String)insert_string);
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!get_line_of_pos
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView,
		first : BreakPointMap,
		next : BreakPointMap,
		source_glyph : BreakPoint,
		code_glyph : BreakPoint,
		line_nr : BreakPoint,
		address : BreakPoint,
		number : BreakPoint,
		current_text : SourceView,
		length : _SYSTEM_OR_USER_,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		current_text : SourceView,
		length : _SYSTEM_OR_USER_,
		indent_amount : SourceView,
		max : DynArray,
		size : VarIntArray,
		size : VarIntArray,
		size : VarIntArray,
		get : BreakPointMap,
		number_str : BreakPoint,
		length : _SYSTEM_OR_USER_,
		indent_amount : SourceView,
		address_index : _SYSTEM_OR_USER_,
		from : AssocRec,
		through : string,
		first : BreakPointMap,
		next : BreakPointMap,
		compare_address : _SYSTEM_OR_USER_,
		address : BreakPoint,
		number : BreakPoint,
		size : VarIntArray,
		size : VarIntArray,
		size : VarIntArray,
		get : BreakPointMap,
		number_str : BreakPoint,
		length : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 2 TIMES,
			bp_map REFERRED 6 TIMES,
			line_count REFERRED 3 TIMES,
			bps_in_line REFERRED 1 TIMES,
			ARRAYOP 10
			ASS 61
			AVVARLEN 10
			CALLEDN 40
			CLASS SourceView
			CLASSID 107
			CYCLO 27
			DOTS 18
			EQTEST 9
			EXPRORCALL 75
			GE 5
			GT 7
			IN 0
			INDR 9
			LE 0
			LOC 179
			LT 11
			METHOD get_line_of_pos
			METHODID 73
			MMINUS 1
			OUT 0
			PARNUM 6
			PPLUS 5
			RETPOINT 4
			SCOPEOP 0
			STMNT 70
			TERNINSTR 1
			USEDVARS 5

#METRICS ARRAYOP:10 ASS:61 AVVARLEN:10 CALLEDN:40 CLASS:SourceView CLASSID:107 CYCLO:27 DOTS:18 EQTEST:9 EXPRORCALL:75 GE:5 GT:7 IN:0 INDR:9 LE:0 LOC:179 LT:11 METHOD:get_line_of_pos METHODID:73 MMINUS:1 OUT:0 PARNUM:6 PPLUS:5 RETPOINT:4 SCOPEOP:0 STMNT:70 TERNINSTR:1 USEDVARS:5 
		;


#ID 73-get_line_of_pos

__BEGIN_METHOD_CODE__

SourceView::get_line_of_pos(Widget   w,
				  XmTextPosition pos,
				  int&     line_nr,
				  string&  address,
				  bool&    in_text,
				  int&     bp_nr)
{
    bool found = false;

    line_nr = 0;
    address = _REMOVED_STR_;
    in_text = true;
    bp_nr   = 0;

    Widget text_w;
    if(is_source_widget(w))
	text_w = source_text_w;
    else if(is_code_widget(w))
	text_w = code_text_w;
    else
	return false;

    if(w != text_w)
    {
	 

	MapRef ref;
	for(BreakPoint *bp = bp_map.first(ref);
	     bp != 0;
	     bp = bp_map.next(ref))
	{
	    if(w == bp->source_glyph() || w == bp->code_glyph())
	    {
		 
		line_nr = bp->line_nr();
		address = bp->address();
		in_text = false;
		bp_nr   = bp->number();
		return true;
	    }
	}
    }

    if(pos >= int(current_text(text_w).length()))
    {
	 
	in_text = false;
	line_nr = line_count;
	return true;
    }

    if(text_w == source_text_w)
    {
	 
	XmTextPosition line_pos = 0;
	XmTextPosition next_line_pos = 0;

	while(!found && line_count >= line_nr)
	{
	    next_line_pos = (line_count >= line_nr + 1) ?
		pos_of_line(line_nr + 1) :
		XmTextGetLastPosition(text_w) + 1;

	    bool left_of_first_nonblank = false;
	    if(pos < next_line_pos)
	    {
		 
		int first_nonblank = line_pos + indent_amount(text_w);
		const string& text = current_text(text_w);
		while(first_nonblank < next_line_pos
		       && first_nonblank < int(text.length())
		       && (__ctype_b[(int) ( ( text[_ARGS_] ) )] & (unsigned short int)   _ISspace )  )
		    first_nonblank++;
		left_of_first_nonblank = (pos < first_nonblank);
	    }

	    if(pos == line_pos
		|| left_of_first_nonblank
		|| pos < (line_pos + indent_amount(text_w) - 1))
	    {
		 
		found = true;
		in_text = false;
		line_nr = max(line_nr, 1);

		 
		VarIntArray& bps = bps_in_line[_ARGS_];
		if(bps.size() == 1)
		{
		     
		    bp_nr = bps[_ARGS_];
		}
		else if(bps.size() > 1)
		{
		     
		    XmTextPosition bp_disp_pos = line_pos;
		    int i;
		    for(i = 0; i < bps.size(); i++)
		    {
			BreakPoint* bp = bp_map.get(bps[_ARGS_]);

			bp_disp_pos += 2;  
			bp_disp_pos += bp->number_str().length();
			if(pos < bp_disp_pos)
			{
			    bp_nr = bps[_ARGS_];
			    break;  
			}
		    }
		}
	    }
	    else if(pos < next_line_pos)
	    {
		 
		found   = true;
		in_text = true;
	    }
	    else
	    {
		 
		line_pos = next_line_pos;
		line_nr++;
	    }
	}
    }
    else if(text_w == code_text_w)
    {
	 
	XmTextPosition line_pos = pos;
	while(line_pos >= 0 && current_code[_ARGS_] != '\n')
	    line_pos--;
	line_pos++;

	if(pos == line_pos || pos - line_pos < indent_amount(text_w))
	{
	     
	    in_text = false;

	     
	    int index = address_index(current_code, pos);
	    if(index >= 0)
	    {
		address = current_code.from(index);
		address = address.through(rxaddress);

		VarIntArray bps;

		MapRef ref;
		for(BreakPoint *bp = bp_map.first(ref);
		     bp != 0;
		     bp = bp_map.next(ref))
		{
		    if(compare_address(address, bp->address()) == 0)
			bps += bp->number();
		}
		if(bps.size() == 1)
		{
		     
		    bp_nr = bps[_ARGS_];
		}
		else if(bps.size() > 1)
		{
		     
		    int i;
		    XmTextPosition bp_disp_pos = line_pos;
		    for(i = 0; i < bps.size(); i++)
		    {
			BreakPoint* bp = bp_map.get(bps[_ARGS_]);
			bp_disp_pos += 2;  
			bp_disp_pos += bp->number_str().length();
			if(pos < bp_disp_pos)
			{
			    bp_nr = bps[_ARGS_];
			    break;  
			}
		    }
		}
	    }
	}

	found = true;
    }

    return found;
}

__END_METHOD_CODE__


	METHOD SourceView!find_word_bounds
		CALLS
		current_text : SourceView,
		length : string,
		indent_amount : SourceView,
		length : string,
		isid : _SYSTEM_OR_USER_,
		length : string,
		length : string,
		isid : _SYSTEM_OR_USER_,
		isid : _SYSTEM_OR_USER_,
		isid : _SYSTEM_OR_USER_,
		isid : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 11
			ASS 11
			AVVARLEN 0
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 5
			EQTEST 6
			EXPRORCALL 25
			GE 1
			GT 8
			IN 0
			INDR 0
			LE 0
			LOC 57
			LT 3
			METHOD find_word_bounds
			METHODID 74
			MMINUS 2
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:11 ASS:11 AVVARLEN:0 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:5 EQTEST:6 EXPRORCALL:25 GE:1 GT:8 IN:0 INDR:0 LE:0 LOC:57 LT:3 METHOD:find_word_bounds METHODID:74 MMINUS:2 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 74-find_word_bounds

__BEGIN_METHOD_CODE__

SourceView::find_word_bounds(Widget text_w,
				   const XmTextPosition pos,
				   XmTextPosition& startpos,
				   XmTextPosition& endpos)
{
    startpos = endpos = pos;

    string& text = current_text(text_w);

    XmTextPosition line_pos = pos;
    if(line_pos < XmTextPosition(text.length()))
	while(line_pos > 0 && text[_ARGS_] != '\n')
	    line_pos--;

    int offset = pos - line_pos;
    if(offset == 0 || offset < indent_amount(text_w))
    {
	 
	return;
    }

     
    while(endpos < XmTextPosition(text.length()) && isid(text[_ARGS_]))
	endpos++;

     
    if(startpos >= XmTextPosition(text.length()))
	startpos = XmTextPosition(text.length() - 1);

    while(startpos > 0)
    {
	while(startpos > 0 && isid(text[_ARGS_]))
	    startpos--;

	if(startpos > 2 && 
	    isid(text[_ARGS_]) &&
	    text[_ARGS_] == '.')
	{
	     
	    startpos -= 1;
	}
	else if(startpos > 3 && 
		 isid(text[_ARGS_]) &&
		 text[_ARGS_] == '-' &&
		 text[_ARGS_] == '>')
	{
	     
	    startpos -= 2;
	}
	else if(startpos > 3 && 
		 isid(text[_ARGS_]) &&
		 text[_ARGS_] == ':' &&
		 text[_ARGS_] == ':')
	{
	     
	    startpos -= 2;
	}
	else
	    break;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!get_word_at_event
		CALLS
		point : _SYSTEM_OR_USER_,
		get_word_at_pos : SourceView



		METRICS
			ARRAYOP 2
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD get_word_at_event
			METHODID 227
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:get_word_at_event METHODID:227 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 227-get_word_at_event

__BEGIN_METHOD_CODE__

SourceView::get_word_at_event(Widget text_w,
				     XEvent *event,
				     XmTextPosition& startpos,
				     XmTextPosition& endpos)
{
    BoxPoint event_pos = point(event);
    XmTextPosition pos = XmTextXYToPos(text_w, event_pos[_ARGS_], event_pos[_ARGS_]);

    return get_word_at_pos(text_w, pos, startpos, endpos);
}

__END_METHOD_CODE__


	METHOD SourceView!get_word_at_pos
		CALLS
		current_text : SourceView,
		find_word_bounds : SourceView,
		length : string,
		at : string,
		strip_space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 2
			EQTEST 1
			EXPRORCALL 12
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 3
			METHOD get_word_at_pos
			METHODID 228
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:2 EQTEST:1 EXPRORCALL:12 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:21 LT:3 METHOD:get_word_at_pos METHODID:228 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 228-get_word_at_pos

__BEGIN_METHOD_CODE__

SourceView::get_word_at_pos(Widget text_w,
				   XmTextPosition pos,
				   XmTextPosition& startpos,
				   XmTextPosition& endpos)
{
    string& text = current_text(text_w);
    if(text == _REMOVED_STR_)
	return _REMOVED_STR_;

    if(!XmTextGetSelectionPosition(text_w, &startpos, &endpos)
	|| pos < startpos
	|| pos > endpos)
    {
	find_word_bounds(text_w, pos, startpos, endpos);
    }

    string word = _REMOVED_STR_;
    if(startpos < XmTextPosition(text.length())
	&& startpos < endpos)
	word = text.at(int(startpos), int(endpos - startpos));

    strip_space(word);

    return word;
}

__END_METHOD_CODE__


	METHOD SourceView!SourceView
		CALLS
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		InstallImage : _SYSTEM_OR_USER_,
		create_text : SourceView,
		create_text : SourceView



		METRICS
			toplevel_w REFERRED 5 TIMES,
			source_form_w REFERRED 2 TIMES,
			source_text_w REFERRED 1 TIMES,
			code_form_w REFERRED 2 TIMES,
			code_text_w REFERRED 1 TIMES,
			disassemble REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 4
			AVVARLEN 11
			CALLEDN 17
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 4
			EQTEST 0
			EXPRORCALL 32
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 52
			LT 0
			METHOD SourceView
			METHODID 144
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:11 CALLEDN:17 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:4 EQTEST:0 EXPRORCALL:32 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:52 LT:0 METHOD:SourceView METHODID:144 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:6 
		;


#ID 144-SourceView

__BEGIN_METHOD_CODE__

SourceView::SourceView(Widget parent)
{
    XtAppContext app_context = XtWidgetToApplicationContext(parent);

     
    toplevel_w = parent;
    while(toplevel_w != 0 && ! (((Object)( toplevel_w ))->object.widget_class->core_class.class_inited & 0x40) )
	toplevel_w = (( toplevel_w )->core.parent) ;

     
    InstallImage(arrow_bits, 14 , 15 , 
		 _REMOVED_STR_);
    InstallImage(grey_arrow_bits, 14 , 15 , 
		 _REMOVED_STR_);
    InstallImage(signal_arrow_bits, 14 , 15 , 
		 _REMOVED_STR_);
    InstallImage(drag_arrow_bits, 14 , 15 , 
		 _REMOVED_STR_);

    InstallImage(stop_bits, 15 , 15 , 
		 _REMOVED_STR_);
    InstallImage(cond_bits, 15 , 15 , 
		 _REMOVED_STR_);
    InstallImage(temp_bits, 15 , 15 , 
		 _REMOVED_STR_);

    InstallImage(grey_stop_bits, 15 , 15 , 
		 _REMOVED_STR_);
    InstallImage(grey_cond_bits, 15 , 15 , 
		 _REMOVED_STR_);
    InstallImage(grey_temp_bits, 15 , 15 , 
		 _REMOVED_STR_);

    InstallImage(drag_stop_bits, 15 , 15 , 
		 _REMOVED_STR_);
    InstallImage(drag_cond_bits, 15 , 15 , 
		 _REMOVED_STR_);
    InstallImage(drag_temp_bits, 15 , 15 , 
		 _REMOVED_STR_);

     
    XtAppAddActions(app_context, actions, ((Cardinal) (sizeof( actions ) / sizeof( actions [_ARGS_]))) );

     
    create_text(parent, _REMOVED_STR_, app_data.source_editing,
		source_form_w, source_text_w);
    XtManageChild(source_form_w);

     
    create_text(parent, _REMOVED_STR_, false, code_form_w, code_text_w);
    if(disassemble)
	XtManageChild(code_form_w);
}

__END_METHOD_CODE__


	METHOD SourceView!create_shells
		CALLS
		createTopLevelSelectionDialog : _SYSTEM_OR_USER_,
		register_shell : Delay,
		MMcreateWorkArea : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		createTopLevelSelectionDialog : _SYSTEM_OR_USER_,
		register_shell : Delay,
		createTopLevelSelectionDialog : _SYSTEM_OR_USER_,
		register_shell : Delay,
		createTopLevelSelectionDialog : _SYSTEM_OR_USER_,
		register_shell : Delay,
		type : _SYSTEM_OR_USER_



		METRICS
			bp_area REFERRED 4 TIMES,
			source_form_w REFERRED 1 TIMES,
			edit_breakpoints_dialog_w REFERRED 13 TIMES,
			breakpoint_list_w REFERRED 6 TIMES,
			stack_dialog_w REFERRED 15 TIMES,
			frame_list_w REFERRED 6 TIMES,
			up_w REFERRED 2 TIMES,
			down_w REFERRED 2 TIMES,
			register_dialog_w REFERRED 12 TIMES,
			register_list_w REFERRED 6 TIMES,
			int_registers_w REFERRED 2 TIMES,
			all_registers_w REFERRED 3 TIMES,
			thread_dialog_w REFERRED 13 TIMES,
			thread_list_w REFERRED 6 TIMES,
			all_registers REFERRED 2 TIMES,
			ARRAYOP 60
			ASS 47
			AVVARLEN 13
			CALLEDN 12
			CLASS SourceView
			CLASSID 107
			CYCLO 7
			DOTS 14
			EQTEST 1
			EXPRORCALL 256
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 248
			LT 0
			METHOD create_shells
			METHODID 145
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 7
			RETPOINT 0
			SCOPEOP 4
			STMNT 108
			TERNINSTR 0
			USEDVARS 15

#METRICS ARRAYOP:60 ASS:47 AVVARLEN:13 CALLEDN:12 CLASS:SourceView CLASSID:107 CYCLO:7 DOTS:14 EQTEST:1 EXPRORCALL:256 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:248 LT:0 METHOD:create_shells METHODID:145 MMINUS:0 OUT:0 PARNUM:0 PPLUS:7 RETPOINT:0 SCOPEOP:4 STMNT:108 TERNINSTR:0 USEDVARS:15 
		;


#ID 145-create_shells

__BEGIN_METHOD_CODE__

SourceView::create_shells()
{
    Widget parent = (( source_form_w )->core.parent) ;
    XtAppContext app_context = XtWidgetToApplicationContext(parent);

     
    Arg args[_ARGS_];
    Cardinal arg = 0;

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ; arg++;
    edit_breakpoints_dialog_w =
	verify(createTopLevelSelectionDialog(parent, _REMOVED_STR_,
					     args, arg));
    Delay::register_shell(edit_breakpoints_dialog_w);

    XtUnmanageChild(XmSelectionBoxGetChild(edit_breakpoints_dialog_w,
					   XmDIALOG_TEXT));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_breakpoints_dialog_w,
					   XmDIALOG_CANCEL_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_breakpoints_dialog_w,
					   XmDIALOG_APPLY_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_breakpoints_dialog_w,
					   XmDIALOG_SELECTION_LABEL));
    XtUnmanageChild(XmSelectionBoxGetChild(edit_breakpoints_dialog_w,
					   XmDIALOG_LIST_LABEL));

    breakpoint_list_w = 
	XmSelectionBoxGetChild(edit_breakpoints_dialog_w, XmDIALOG_LIST);

    if(app_data.flat_dialog_buttons)
    {
	for(MMDesc *item = bp_area; item != 0 && item->name != 0; item++)
	{
	    if((item->type & MMTypeMask) == MMPush)
		item->type = (MMFlatPush | (item->type & ~MMTypeMask));
	}
    }

    Widget buttons = verify(MMcreateWorkArea(edit_breakpoints_dialog_w, 
					     _REMOVED_STR_, bp_area));
    XtVaSetValues(buttons,
		  ((char *)&_XmStrings[_ARGS_]) ,     0, 
		  ((char *)&_XmStrings[_ARGS_]) ,    0, 
		  ((char*)&XtStrings[_ARGS_])  ,     0,
		  ((char *)&_XmStrings[_ARGS_]) , 0, 
		  ((char *)&_XmStrings[_ARGS_]) ,         0,
		  __null );

    MMaddCallbacks(bp_area);
    MMaddHelpCallback(bp_area, ImmediateHelpCB);

    if(breakpoint_list_w != 0)
    {
	XtAddCallback(breakpoint_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateBreakpointButtonsCB,
		      0);
	XtAddCallback(breakpoint_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateBreakpointButtonsCB,
		      0);






	XtAddCallback(breakpoint_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateBreakpointButtonsCB,
		      0);
	XtAddCallback(breakpoint_list_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UpdateBreakpointButtonsCB,
		      0);
    }

    if(edit_breakpoints_dialog_w != 0)
    {
	XtAddCallback(edit_breakpoints_dialog_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      UnmanageThisCB,
		      edit_breakpoints_dialog_w);
	XtAddCallback(edit_breakpoints_dialog_w,
		      ((char *)&_XmStrings[_ARGS_]) ,
		      ImmediateHelpCB,
		      0);
    }

     
    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0  ) )) ; arg++;
    stack_dialog_w =
	verify(createTopLevelSelectionDialog(parent, 
					     _REMOVED_STR_, args, arg));
    Delay::register_shell(stack_dialog_w);

    XtUnmanageChild(XmSelectionBoxGetChild(stack_dialog_w, 
					   XmDIALOG_TEXT));
    XtUnmanageChild(XmSelectionBoxGetChild(stack_dialog_w, 
					   XmDIALOG_SELECTION_LABEL));

    up_w   = XmSelectionBoxGetChild(stack_dialog_w, XmDIALOG_OK_BUTTON);
    down_w = XmSelectionBoxGetChild(stack_dialog_w, XmDIALOG_APPLY_BUTTON);

    XtSetSensitive(up_w,   0 );
    XtSetSensitive(down_w, 0 );

    arg = 0;
    frame_list_w = XmSelectionBoxGetChild(stack_dialog_w, XmDIALOG_LIST);
    XtVaSetValues(frame_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , XmSINGLE_SELECT,
		  __null );

    XtAddCallback(frame_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectFrameCB, 0);
    XtAddCallback(frame_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectFrameCB, 0);
    XtAddCallback(frame_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectFrameCB, 0);
    XtAddCallback(frame_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectFrameCB, 0);

    XtAddCallback(stack_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , gdbCommandCB, _REMOVED_STR_);
    XtAddCallback(stack_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , gdbCommandCB, _REMOVED_STR_);
    XtAddCallback(stack_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , UnmanageThisCB, stack_dialog_w);
    XtAddCallback(stack_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , StackDialogPoppedDownCB, 0);
    XtAddCallback(stack_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , ImmediateHelpCB, 0);

    Widget cancel_w = XmSelectionBoxGetChild(stack_dialog_w, 
					     XmDIALOG_CANCEL_BUTTON);

    XtVaSetValues(stack_dialog_w, ((char *)&_XmStrings[_ARGS_]) , cancel_w, 0);

     
    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0  ) )) ; arg++;
    register_dialog_w = 
	verify(createTopLevelSelectionDialog(parent, 
					     _REMOVED_STR_, args, arg));
    Delay::register_shell(register_dialog_w);

    XtUnmanageChild(XmSelectionBoxGetChild(register_dialog_w, 
					   XmDIALOG_TEXT));
    XtUnmanageChild(XmSelectionBoxGetChild(register_dialog_w, 
					   XmDIALOG_SELECTION_LABEL));
    XtUnmanageChild(XmSelectionBoxGetChild(register_dialog_w, 
					   XmDIALOG_APPLY_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(register_dialog_w, 
					   XmDIALOG_CANCEL_BUTTON));

    arg = 0;
    Widget box = XmCreateRadioBox(register_dialog_w, _REMOVED_STR_, args, arg);
    XtManageChild(box);

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  !all_registers ) )) ; arg++;
    int_registers_w = 
	XmCreateToggleButton(box, _REMOVED_STR_, args, arg);
    XtManageChild(int_registers_w);

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  all_registers ) )) ; arg++;
    all_registers_w = 
	XmCreateToggleButton(box, _REMOVED_STR_, args, arg);
    XtManageChild(all_registers_w);

    XtAddCallback(all_registers_w, ((char *)&_XmStrings[_ARGS_]) , 
		  sourceToggleAllRegistersCB, XtPointer(0));

    arg = 0;
    register_list_w = XmSelectionBoxGetChild(register_dialog_w, XmDIALOG_LIST);
    XtVaSetValues(register_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , XmSINGLE_SELECT,
		  __null );

    XtAddCallback(register_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectRegisterCB, 0);
    XtAddCallback(register_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectRegisterCB, 0);
    XtAddCallback(register_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectRegisterCB, 0);
    XtAddCallback(register_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectRegisterCB, 0);

    XtAddCallback(register_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , UnmanageThisCB, register_dialog_w);
    XtAddCallback(register_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , RegisterDialogPoppedDownCB, 0);
    XtAddCallback(register_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , ImmediateHelpCB, 0);


     
    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0  ) )) ; arg++;
    thread_dialog_w = 
	verify(createTopLevelSelectionDialog(parent, 
					     _REMOVED_STR_, args, arg));
    Delay::register_shell(thread_dialog_w);

    XtUnmanageChild(XmSelectionBoxGetChild(thread_dialog_w, 
					   XmDIALOG_TEXT));
    XtUnmanageChild(XmSelectionBoxGetChild(thread_dialog_w, 
					   XmDIALOG_SELECTION_LABEL));

    if(gdb->type() != JDB)
    {
	XtUnmanageChild(XmSelectionBoxGetChild(thread_dialog_w, 
					       XmDIALOG_OK_BUTTON));
	XtUnmanageChild(XmSelectionBoxGetChild(thread_dialog_w, 
					       XmDIALOG_APPLY_BUTTON));
    }

    arg = 0;
    thread_list_w = XmSelectionBoxGetChild(thread_dialog_w, XmDIALOG_LIST);
    XtVaSetValues(thread_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , XmSINGLE_SELECT,
		  __null );

    XtAddCallback(thread_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectThreadCB, 0);
    XtAddCallback(thread_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectThreadCB, 0);
    XtAddCallback(thread_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectThreadCB, 0);
    XtAddCallback(thread_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , SelectThreadCB, 0);

    XtAddCallback(thread_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , UnmanageThisCB, thread_dialog_w);
    XtAddCallback(thread_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , ThreadDialogPoppedDownCB, 0);
    XtAddCallback(thread_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) ,     ThreadCommandCB, _REMOVED_STR_);
    XtAddCallback(thread_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) ,  ThreadCommandCB, _REMOVED_STR_);
    XtAddCallback(thread_dialog_w,
		  ((char *)&_XmStrings[_ARGS_]) , ImmediateHelpCB, 0);

     
    XtAppAddWorkProc(app_context, CreateGlyphsWorkProc, XtPointer(0));
}

__END_METHOD_CODE__


	METHOD SourceView!CheckModificationCB
		CALLS
		bool : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD CheckModificationCB
			METHODID 47
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:CheckModificationCB METHODID:47 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 47-CheckModificationCB

__BEGIN_METHOD_CODE__

SourceView::CheckModificationCB(Widget, XtPointer client_data, 
				     XtPointer call_data)
{
    bool editable = bool(client_data);
    XmTextVerifyCallbackStruct *cbs = (XmTextVerifyCallbackStruct *)call_data;
    if(!editable && cbs != 0 && cbs->event != 0)
    {
	cbs->doit = 0 ;
	return;
    }

     
}

__END_METHOD_CODE__


	METHOD SourceView!create_text
		CALLS
		set_scrolled_window_size : _SYSTEM_OR_USER_,
		InstallTextTips : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 59
			ASS 38
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 30
			EQTEST 0
			EXPRORCALL 204
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 1
			LOC 86
			LT 2
			METHOD create_text
			METHODID 60
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 14
			RETPOINT 0
			SCOPEOP 0
			STMNT 54
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:59 ASS:38 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:30 EQTEST:0 EXPRORCALL:204 GE:0 GT:0 IN:0 INDR:2 LE:1 LOC:86 LT:2 METHOD:create_text METHODID:60 MMINUS:0 OUT:0 PARNUM:5 PPLUS:14 RETPOINT:0 SCOPEOP:0 STMNT:54 TERNINSTR:0 USEDVARS:0 
		;


#ID 60-create_text

__BEGIN_METHOD_CODE__

SourceView::create_text(Widget parent, const string& base, bool editable,
			     Widget& form, Widget& text)
{
    Arg args[_ARGS_];
    int arg = 0;

     
    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ;    arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ;    arg++;
    string form_name = base + _REMOVED_STR_;
    form = verify(XmCreateForm(parent, form_name, args, arg));

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  1 ) )) ;               arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(      XmATTACH_FORM ) )) ;     arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   XmATTACH_FORM ) )) ;     arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(     XmATTACH_FORM ) )) ;     arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(    XmATTACH_FORM ) )) ;     arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(        1  ) )) ;              arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(           XmMULTI_LINE_EDIT ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  1  ) )) ;          arg++;

    if(lesstif_version <= 82)
    {
	 
	 
	 
	 
	 
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0  ) )) ;    arg++;
    }
    else
    {
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  1  ) )) ;     arg++;
    }

    if(lesstif_version < 1000)
    {
	 
	 
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  1  ) )) ; arg++;
    }
    else
    {
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  editable ) )) ; arg++;
    }

    string text_name = base + _REMOVED_STR_;
    text = verify(XmCreateScrolledText(form, text_name, args, arg));
    XtManageChild(text);

     
    XtVaSetValues((( text )->core.parent) ,
		  ((char *)&_XmStrings[_ARGS_]) ,         0,
		  ((char*)&XtStrings[_ARGS_])  ,     0,
		  ((char *)&_XmStrings[_ARGS_]) , 0,
		  __null );

     
    set_scrolled_window_size(text, form);

     
    XtAddCallback(text, ((char *)&_XmStrings[_ARGS_]) , 
		  set_source_argCB, XtPointer(false));
    XtAddCallback(text, ((char *)&_XmStrings[_ARGS_]) ,
		  set_source_argCB, XtPointer(true));
    XtAddCallback(text, ((char *)&_XmStrings[_ARGS_]) , 
		  CheckScrollCB, XtPointer(0));
    XtAddCallback(text, ((char *)&_XmStrings[_ARGS_]) ,
		  CheckModificationCB, XtPointer(editable));
    InstallTextTips(text);

     
    Widget scrollbar = 0;
    XtVaGetValues((( text )->core.parent) , ((char *)&_XmStrings[_ARGS_]) , &scrollbar, __null );
    if(scrollbar != 0)
    {
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) ,     CheckScrollCB, 0);
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) ,     CheckScrollCB, 0);
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) , CheckScrollCB, 0);
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) , CheckScrollCB, 0);
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) ,         CheckScrollCB, 0);
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) ,      CheckScrollCB, 0);
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) ,          CheckScrollCB, 0);
	XtAddCallback(scrollbar, ((char *)&_XmStrings[_ARGS_]) ,  CheckScrollCB, 0);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!show_execution_position
		CALLS
		indent_amount : SourceView,
		length : string,
		update_glyphs : SourceView,
		contains : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		is_current_file : SourceView,
		read_file : SourceView,
		is_current_file : SourceView,
		indent_amount : SourceView,
		length : string,
		_show_execution_position : SourceView



		METRICS
			source_text_w REFERRED 5 TIMES,
			display_glyphs REFERRED 2 TIMES,
			at_lowest_frame REFERRED 1 TIMES,
			signal_received REFERRED 1 TIMES,
			last_pos REFERRED 7 TIMES,
			last_start_highlight REFERRED 3 TIMES,
			last_end_highlight REFERRED 2 TIMES,
			last_execution_line REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 15
			AVVARLEN 15
			CALLEDN 12
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 5
			EQTEST 1
			EXPRORCALL 28
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 68
			LT 1
			METHOD show_execution_position
			METHODID 146
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 8

#METRICS ARRAYOP:0 ASS:15 AVVARLEN:15 CALLEDN:12 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:5 EQTEST:1 EXPRORCALL:28 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:68 LT:1 METHOD:show_execution_position METHODID:146 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:8 
		;


#ID 146-show_execution_position

__BEGIN_METHOD_CODE__

SourceView::show_execution_position(string position, bool stopped,
					  bool signaled, bool silent)
{
    if(stopped)
    {
	at_lowest_frame = true;
	signal_received = signaled;
    }

    if(position == _REMOVED_STR_)
    {
	if(!display_glyphs)
	{
	     
	    int indent = indent_amount(source_text_w, last_pos);
	    if(indent > 0)
	    {
		string no_marker = _REMOVED_STR_;
		XmTextReplace(source_text_w,
			       last_pos + indent - no_marker.length(),
			       last_pos + indent,
			       (String)no_marker);
	    }

	    if(last_start_highlight)
		XmTextSetHighlight(source_text_w,
				    last_start_highlight, last_end_highlight,
				    XmHIGHLIGHT_NORMAL);

	}
	last_pos = last_start_highlight = last_end_highlight = 0;
	last_execution_file = _REMOVED_STR_;
	last_execution_line = 0;
	update_glyphs();
	return;
    }

    string file_name = current_file_name;

    if(position.contains(':'))
    {
	file_name = position.before(_REMOVED_STR_);
	position  = position.after(_REMOVED_STR_);
    }

    int line = get_positive_nr(position);
    if(line < 0)
	return;

    if(!is_current_file(file_name))
	read_file(file_name, line, silent);

    if(is_current_file(file_name))
    {
	int indent = indent_amount(source_text_w, last_pos);

	if(!display_glyphs && indent > 0)
	{
	     
	    string no_marker = _REMOVED_STR_;
	    XmTextReplace(source_text_w,
			   last_pos + indent - no_marker.length(),
			   last_pos + indent,
			   (String)no_marker);
	}

	 
	_show_execution_position(file_name, line, silent);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!clear_execution_position
		CALLS
		show_execution_position : SourceView,
		update_glyphs : SourceView



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD clear_execution_position
			METHODID 147
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:clear_execution_position METHODID:147 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 147-clear_execution_position

__BEGIN_METHOD_CODE__

SourceView::clear_execution_position()
{
    show_execution_position();
    last_execution_pc = _REMOVED_STR_;
    last_shown_pc     = _REMOVED_STR_;
    update_glyphs();
}

__END_METHOD_CODE__


	METHOD SourceView!_show_execution_position
		CALLS
		is_current_file : SourceView,
		read_file : SourceView,
		is_current_file : SourceView,
		add_to_history : SourceView,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		SetInsertionPosition : SourceView,
		length : string,
		index : AssocRec,
		update_glyphs : SourceView



		METRICS
			source_text_w REFERRED 5 TIMES,
			display_glyphs REFERRED 2 TIMES,
			line_count REFERRED 1 TIMES,
			last_pos REFERRED 1 TIMES,
			last_start_highlight REFERRED 4 TIMES,
			last_end_highlight REFERRED 3 TIMES,
			last_execution_line REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 13
			AVVARLEN 14
			CALLEDN 10
			CLASS SourceView
			CLASSID 107
			CYCLO 7
			DOTS 2
			EQTEST 0
			EXPRORCALL 21
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 52
			LT 1
			METHOD _show_execution_position
			METHODID 97
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 18
			TERNINSTR 0
			USEDVARS 7

#METRICS ARRAYOP:0 ASS:13 AVVARLEN:14 CALLEDN:10 CLASS:SourceView CLASSID:107 CYCLO:7 DOTS:2 EQTEST:0 EXPRORCALL:21 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:52 LT:1 METHOD:_show_execution_position METHODID:97 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:18 TERNINSTR:0 USEDVARS:7 
		;


#ID 97-_show_execution_position

__BEGIN_METHOD_CODE__

SourceView::_show_execution_position(string file, int line, bool silent)
{
    last_execution_file = file;
    last_execution_line = line;

    if(!is_current_file(file))
	read_file(file, line, silent);

    if(!is_current_file(file) || line < 1 || line > line_count)
	return;

    add_to_history(file, line);

    XmTextPosition pos = pos_of_line(line);
    int indent = indent_amount(source_text_w, pos);
    SetInsertionPosition(source_text_w, pos + indent, false);

     
    if(!display_glyphs && indent > 0)
    {
	 
	string marker = _REMOVED_STR_;
	XmTextReplace(source_text_w,
		       pos + indent - marker.length(),
		       pos + indent,
		       (String)marker);
    }

    XmTextPosition pos_line_end = 0;
    if(current_source != _REMOVED_STR_)
	pos_line_end = current_source.index('\n', pos) + 1;

    if(!display_glyphs && 
	(pos != last_start_highlight || pos_line_end != last_end_highlight))
    {
	if(last_start_highlight)
	{
	    XmTextSetHighlight(source_text_w,
				last_start_highlight, last_end_highlight,
				XmHIGHLIGHT_NORMAL);
	}

	XmTextSetHighlight(source_text_w,
			    pos, pos_line_end,
			    XmHIGHLIGHT_SELECTED);
    }

    last_pos             = pos;
    last_start_highlight = pos;
    last_end_highlight   = pos_line_end;

    update_glyphs();
}

__END_METHOD_CODE__


	METHOD SourceView!show_position
		CALLS
		contains : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		is_current_file : SourceView,
		read_file : SourceView,
		is_current_file : SourceView,
		type : _SYSTEM_OR_USER_,
		java_class_start : _SYSTEM_OR_USER_,
		current_source_name : SourceView,
		get_line_of_pos : SourceView,
		add_to_history : SourceView,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		SetInsertionPosition : SourceView



		METRICS
			source_text_w REFERRED 3 TIMES,
			line_count REFERRED 1 TIMES,
			last_pos REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 13
			AVVARLEN 10
			CALLEDN 14
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 3
			EQTEST 3
			EXPRORCALL 23
			GE 1
			GT 2
			IN 0
			INDR 1
			LE 1
			LOC 52
			LT 1
			METHOD show_position
			METHODID 148
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:13 AVVARLEN:10 CALLEDN:14 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:3 EQTEST:3 EXPRORCALL:23 GE:1 GT:2 IN:0 INDR:1 LE:1 LOC:52 LT:1 METHOD:show_position METHODID:148 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:3 
		;


#ID 148-show_position

__BEGIN_METHOD_CODE__

SourceView::show_position(string position, bool silent)
{
    string file_name = current_file_name;

    if(position.contains(':'))
    {
	file_name = position.before(':');
	position  = position.after(':');
    }
    int line = get_positive_nr(position);

     
     
    bool force_reload = (line == 1);
    if(!is_current_file(file_name) || force_reload)
	read_file(file_name, line, force_reload, silent);


     
    if(is_current_file(file_name))
    {
	if(line == 0 && gdb->type() == JDB)
	{
	     
	    int pos = java_class_start(current_source, current_source_name());

	    if(pos >= 0)
	    {
		int line_nr = 0;
		bool in_text;
		int bp_nr;
		string address;

		if(get_line_of_pos(source_text_w, pos, line_nr, address, 
				    in_text, bp_nr))
		{
		    line = line_nr;
		}
	    }
	}
	   
	if(line > 0 && line <= line_count)
	{
 	    add_to_history(file_name, line);
    
	    XmTextPosition pos = pos_of_line(line);
	    int indent = indent_amount(source_text_w, pos);
	    SetInsertionPosition(source_text_w, pos + indent, true);
		
	    last_pos = pos;
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!process_info_bp
		CALLS
		gsub : string,
		gsub : string,
		type : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		check_remainder : SourceView,
		first_key : BreakPointMap,
		next_key : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		has_nr : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		get_positive_nr : _SYSTEM_OR_USER_,
		jdb_breakpoint : SourceView,
		contains : _SYSTEM_OR_USER_,
		after : string,
		after : string,
		contains : BreakPointMap,
		get : BreakPointMap,
		update : _SYSTEM_OR_USER_,
		get : BreakPointMap,
		position_changed : BreakPoint,
		get : BreakPointMap,
		enabled_changed : BreakPoint,
		BreakPoint : BreakPoint,
		insert : BreakPointMap,
		first : BreakPointMap,
		next : BreakPointMap,
		selected : _SYSTEM_OR_USER_,
		selected : BreakPoint,
		max : DynArray,
		size : VarIntArray,
		get : BreakPointMap,
		del : BreakPointMap,
		refresh_bp_disp : SourceView,
		process_breakpoints : SourceView,
		update_properties_panels : SourceView



		METRICS
			bp_map REFERRED 11 TIMES,
			max_breakpoint_number_seen REFERRED 3 TIMES,
			ARRAYOP 3
			ASS 38
			AVVARLEN 16
			CALLEDN 45
			CLASS SourceView
			CLASSID 107
			CYCLO 27
			DOTS 27
			EQTEST 1
			EXPRORCALL 66
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 1
			LOC 163
			LT 3
			METHOD process_info_bp
			METHODID 150
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 59
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:3 ASS:38 AVVARLEN:16 CALLEDN:45 CLASS:SourceView CLASSID:107 CYCLO:27 DOTS:27 EQTEST:1 EXPRORCALL:66 GE:0 GT:0 IN:0 INDR:7 LE:1 LOC:163 LT:3 METHOD:process_info_bp METHODID:150 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:59 TERNINSTR:0 USEDVARS:2 
		;


#ID 150-process_info_bp

__BEGIN_METHOD_CODE__

SourceView::process_info_bp(string& info_output,
				  const string& break_arg)
{
     
    info_output.gsub(_REMOVED_STR_, _REMOVED_STR_);

     



    info_output.gsub(rxprocess1, _REMOVED_STR_);

    last_info_output = info_output;
    string keep_me = _REMOVED_STR_;

    switch(gdb->type())
    {
    case GDB:
	 
	if(!info_output.contains(_REMOVED_STR_, 0) && 
	    !info_output.contains(_REMOVED_STR_, 0))
	    check_remainder(info_output);
	break;

    case DBX:
    case XDB:
    case JDB:
	break;
    }
				    
    VarIntArray bps_not_read;
    MapRef ref;
    int i;
    for(i = bp_map.first_key(ref); i != 0; i = bp_map.next_key(ref))
	bps_not_read += i;

    bool changed = false;
    bool added   = false;

    while(info_output != _REMOVED_STR_)
    {
	int bp_nr = -1;
	switch(gdb->type())
	{
	case GDB:
	    if(!has_nr(info_output))
	    {
		 
		info_output = info_output.after('\n');
		continue;
	    }
	    bp_nr = get_positive_nr(info_output);
	    break;

	case DBX:
	    {
		 
		 



		if(info_output.contains(rxprocess2, 0))
		    info_output = info_output.after(':');
		strip_leading_space(info_output);
		    
		if(!info_output.contains('(', 0)
		    && !info_output.contains('[', 0))
		{
		     
		    info_output = info_output.after('\n');
		    continue;
		}
		string bp_nr_s = info_output.after(0);
		bp_nr = get_positive_nr(bp_nr_s);
	    }
	    break;


	case XDB:
	    bp_nr = get_positive_nr(info_output);
	    break;

	case JDB:
	{
	     
	    bp_nr = jdb_breakpoint(info_output);
	    if(bp_nr == 0)
		bp_nr = max_breakpoint_number_seen + 1;	 
	    if(bp_nr < 0)
	    {
		 
		string line = info_output.before('\n');
		if(!line.contains(_REMOVED_STR_))
		    keep_me += line;
		
		 
		info_output = info_output.after('\n');
		continue;
	    }
	    break;
	}
	}

	if(bp_nr <= 0)
	{
	    info_output = info_output.after('\n');
	    continue;
	}

	if(bp_map.contains(bp_nr))
	{
	     
	    bps_not_read -= bp_nr;
	    if(bp_map.get(bp_nr)->update(info_output)
		&& (bp_map.get(bp_nr)->position_changed()
		    || bp_map.get(bp_nr)->enabled_changed()))
	    {
		changed = true;
	    }
	}
	else
	{
	     
	    changed = true;
	    BreakPoint* new_bp = new BreakPoint(info_output, break_arg, bp_nr);
	    bp_map.insert(bp_nr, new_bp);

	    if(!added)
	    {
		added = true;
		 
		MapRef ref;
		for(BreakPoint* bp = bp_map.first(ref);
		     bp != 0;
		     bp = bp_map.next(ref))
		{
		    bp->selected() = false;
		}
	    }
	    new_bp->selected() = true;
	}

	max_breakpoint_number_seen = max(max_breakpoint_number_seen, bp_nr);
    }

     
    info_output = keep_me;

     
    for(i = 0; i < bps_not_read.size(); i++)
    {
	delete bp_map.get(bps_not_read[_ARGS_]);
	bp_map.del(bps_not_read[_ARGS_]);
	changed = true;
    }

    if(changed)
	refresh_bp_disp();

     
    process_breakpoints(last_info_output);

     
    update_properties_panels();
}

__END_METHOD_CODE__


	METHOD SourceView!next_breakpoint_number

		METRICS
			max_breakpoint_number_seen REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 26
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD next_breakpoint_number
			METHODID 189
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:26 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:next_breakpoint_number METHODID:189 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 189-next_breakpoint_number

__BEGIN_METHOD_CODE__

SourceView::next_breakpoint_number()
{
    return max_breakpoint_number_seen + 1;
}

__END_METHOD_CODE__


	METHOD SourceView!process_info_line_main
		CALLS
		clear_file_cache : SourceView,
		clear_code_cache : SourceView,
		clear_dbx_lookup_cache : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		filter : PosBuffer,
		answer_ended : PosBuffer,
		pos_found : PosBuffer,
		show_position : SourceView,
		get_position : PosBuffer,
		pc_found : PosBuffer,
		show_pc : SourceView,
		get_pc : PosBuffer,
		show_position : SourceView,
		index : string,
		index : string,
		info_output : _SYSTEM_OR_USER_,
		check_remainder : SourceView



		METRICS
			ARRAYOP 3
			ASS 9
			AVVARLEN 0
			CALLEDN 20
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 8
			EQTEST 0
			EXPRORCALL 29
			GE 2
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 47
			LT 1
			METHOD process_info_line_main
			METHODID 151
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 20
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:9 AVVARLEN:0 CALLEDN:20 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:8 EQTEST:0 EXPRORCALL:29 GE:2 GT:2 IN:0 INDR:1 LE:0 LOC:47 LT:1 METHOD:process_info_line_main METHODID:151 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:20 TERNINSTR:0 USEDVARS:0 
		;


#ID 151-process_info_line_main

__BEGIN_METHOD_CODE__

SourceView::process_info_line_main(string& info_output)
{
    clear_file_cache();
    clear_code_cache();
    clear_dbx_lookup_cache();
    current_file_name = _REMOVED_STR_;

    switch(gdb->type())
    {
    case GDB:
    case XDB:
    case JDB:
	{
	    PosBuffer pos_buffer;
	    pos_buffer.filter(info_output);
	    pos_buffer.answer_ended();
	    if(pos_buffer.pos_found())
		show_position(pos_buffer.get_position());
	    if(pos_buffer.pc_found())
		show_pc(pos_buffer.get_pc());
	}
	break;

    case DBX:
	{
	    show_position(info_output);
	    info_output = _REMOVED_STR_;
	}
	break;
    }

     
     
    String strips[] = {_REMOVED_STR_, _REMOVED_STR_};

    for(int i = 0; i < int(((Cardinal) (sizeof( strips ) / sizeof( strips [_ARGS_]))) ); i++)
    {
	int line = info_output.index(strips[_ARGS_]);
	if(line >= 0)
	{
	    int end_line = info_output.index('\n', line);
	    if(end_line >= 0)
		info_output(line, end_line - line) = _REMOVED_STR_;
	}
    }

    check_remainder(info_output);
}

__END_METHOD_CODE__


	METHOD SourceView!check_remainder
		CALLS
		length : _SYSTEM_OR_USER_,
		after : string,
		length : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		post_gdb_message : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 13
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 5
			EQTEST 2
			EXPRORCALL 9
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD check_remainder
			METHODID 160
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:13 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:5 EQTEST:2 EXPRORCALL:9 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:check_remainder METHODID:160 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 160-check_remainder

__BEGIN_METHOD_CODE__

SourceView::check_remainder(string& info_output)
{
     
     

    while(info_output.length() > 0 && 
	   info_output[_ARGS_] == '\n')
	info_output = info_output.after(0);
    while(info_output.length() > 0 && 
	   info_output[_ARGS_] == '\n')
	info_output = info_output.before(int(info_output.length() - 1));

    post_gdb_message(info_output, true, source_text_w);
}

__END_METHOD_CODE__


	METHOD SourceView!lookup
		CALLS
		after : string,
		show_pc : SourceView,
		SetInsertionPosition : SourceView,
		_show_execution_position : SourceView,
		SetInsertionPosition : SourceView,
		atoi : _SYSTEM_OR_USER_,
		add_current_to_history : SourceView,
		type : _SYSTEM_OR_USER_,
		c : _SYSTEM_OR_USER_,
		current_source_name : SourceView,
		itostring : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		show_position : SourceView,
		current_source_name : SourceView,
		itostring : _SYSTEM_OR_USER_,
		show_position : SourceView,
		full_path : SourceView,
		itostring : _SYSTEM_OR_USER_,
		post_error : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		number : BreakPoint,
		add_current_to_history : SourceView,
		show_position : SourceView,
		pos : _SYSTEM_OR_USER_,
		show_pc : SourceView,
		address : BreakPoint,
		post_error : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		is_file_pos : _SYSTEM_OR_USER_,
		add_current_to_history : SourceView,
		type : _SYSTEM_OR_USER_,
		c : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		show_position : SourceView,
		add_current_to_history : SourceView,
		type : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		string : string,
		c : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		dbx_lookup : _SYSTEM_OR_USER_,
		show_position : SourceView,
		c : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 4 TIMES,
			code_text_w REFERRED 2 TIMES,
			bp_map REFERRED 2 TIMES,
			line_count REFERRED 1 TIMES,
			last_execution_line REFERRED 1 TIMES,
			ARRAYOP 9
			ASS 31
			AVVARLEN 11
			CALLEDN 48
			CLASS SourceView
			CLASSID 107
			CYCLO 28
			DOTS 17
			EQTEST 6
			EXPRORCALL 79
			GE 1
			GT 3
			IN 0
			INDR 6
			LE 1
			LOC 155
			LT 1
			METHOD lookup
			METHODID 164
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 54
			TERNINSTR 0
			USEDVARS 5

#METRICS ARRAYOP:9 ASS:31 AVVARLEN:11 CALLEDN:48 CLASS:SourceView CLASSID:107 CYCLO:28 DOTS:17 EQTEST:6 EXPRORCALL:79 GE:1 GT:3 IN:0 INDR:6 LE:1 LOC:155 LT:1 METHOD:lookup METHODID:164 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:54 TERNINSTR:0 USEDVARS:5 
		;


#ID 164-lookup

__BEGIN_METHOD_CODE__

SourceView::lookup(string s, bool silent)
{
    if(s != _REMOVED_STR_ && (__ctype_b[(int) ( ( s[_ARGS_] ) )] & (unsigned short int)   _ISspace )  )
	s = s.after(rxwhite);

    if(s == _REMOVED_STR_)
    {
	 
	if(last_execution_pc != _REMOVED_STR_)
	{
	     
	    show_pc(last_execution_pc, XmHIGHLIGHT_SELECTED);
	}
	else
	{
	     
	    SetInsertionPosition(code_text_w,
				 XmTextGetInsertionPosition(code_text_w));
	}

	if(last_execution_file != _REMOVED_STR_)
	{
	     
	    _show_execution_position(last_execution_file, 
				     last_execution_line,
				     silent);
	}
	else
	{
	     
	    SetInsertionPosition(source_text_w,
				 XmTextGetInsertionPosition(source_text_w));
	}
    }
    else if(s[_ARGS_] != '0' && (__ctype_b[(int) ( ( s[_ARGS_] ) )] & (unsigned short int)   _ISdigit )  )
    {
	 
	int line = atoi(s);
	if(line > 0 && line <= line_count)
	{
	    add_current_to_history();

	    switch(gdb->type())
	    {
	    case GDB:
	    {
		Command c(_REMOVED_STR_ + current_source_name() + _REMOVED_STR_ + 
			  itostring(line));
		c.verbose = !silent;
		c.echo    = !silent;
		c.prompt  = !silent;
		gdb_command(c);
		break;
	    }
		
	    case JDB:
		show_position(current_source_name()
			      + _REMOVED_STR_ + itostring(line));
		break;

	    case DBX:
	    case XDB:
		show_position(full_path(current_file_name) 
			      + _REMOVED_STR_ + itostring(line));
		break;
	    }
	}
	else
	{
	    if(!silent)
		post_error(_REMOVED_STR_ 
			   + itostring(line) + _REMOVED_STR_,
			   _REMOVED_STR_, source_text_w);
	}
    }
    else if(s[_ARGS_] == '#')
    {
	 
	string nr_str = s.after('#');
	int nr = get_positive_nr(nr_str);
	if(nr >= 0)
	{
	    MapRef ref;
	    BreakPoint *bp;
	    for(bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
	    {
		if(nr == bp->number())
		{
		    add_current_to_history();
		    show_position(bp->pos());
		    show_pc(bp->address());
		    break;
		}
	    }

	    if(bp == 0 && !silent)
		post_error(_REMOVED_STR_ + itostring(nr) + _REMOVED_STR_, 
			   _REMOVED_STR_, source_text_w);
	}
    }
    else if(is_file_pos(s))
    {
	 
	add_current_to_history();
	if(gdb->type() == GDB)
	{
	    Command c(_REMOVED_STR_ + s);
	    c.verbose = !silent;
	    c.echo    = !silent;
	    c.prompt  = !silent;
	    gdb_command(c);
	}
	else
	    show_position(s);
    }
    else
    {
	 
	add_current_to_history();
	switch(gdb->type())
	{
	case GDB:
	{
	    if(s[_ARGS_] == '0')	 
		s = _REMOVED_STR_ + s;
	    if(s.length() > 0 && s[_ARGS_] != '\'' && s[_ARGS_] != '*')
		s = string('\'') + s + '\'';
	    Command c(_REMOVED_STR_ + s);
	    c.verbose = !silent;
	    c.echo    = !silent;
	    c.prompt  = !silent;
	    gdb_command(c);
	    break;
	}

	case DBX:
	case JDB:
	{
	    string pos = dbx_lookup(s, silent);
	    if(pos != _REMOVED_STR_)
		show_position(pos);
	    break;
	}

	case XDB:
	{
	    Command c(_REMOVED_STR_ + s);
	    c.verbose = !silent;
	    c.echo    = !silent;
	    c.prompt  = !silent;
	    gdb_command(c);
	    break;
	}
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!process_pwd
		CALLS
		strip_trailing_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		type : _SYSTEM_OR_USER_,
		contains : string,
		after : string,
		contains : string,
		contains : string,
		process_cd : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 9
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 9
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 40
			LT 0
			METHOD process_pwd
			METHODID 158
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:9 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:9 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:40 LT:0 METHOD:process_pwd METHODID:158 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 158-process_pwd

__BEGIN_METHOD_CODE__

SourceView::process_pwd(string& pwd_output)
{
    strip_trailing_space(pwd_output);

    while(pwd_output != _REMOVED_STR_)
    {
	string pwd;
	if(pwd_output.contains('\n'))
	{
	    pwd        = pwd_output.before('\n');
	    pwd_output = pwd_output.after('\n');
	}
	else
	{
	    pwd        = pwd_output;
	    pwd_output = _REMOVED_STR_;
	}

	switch(gdb->type())
	{
	case GDB:			 
	    if(pwd.contains(_REMOVED_STR_, 0))
	    {
		pwd = pwd.before('.', -1);
		pwd = pwd.after(' ', -1);
	    }
	     

	case XDB:
	case DBX:		 
	case JDB:
	    if(pwd.contains('/', 0) && !pwd.contains(_REMOVED_STR_))
	    {
		current_pwd = pwd;
		process_cd(current_pwd);
		return;
	    }
	    break;
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!process_use
		CALLS
		strip_space : _SYSTEM_OR_USER_,
		clear_file_cache : SourceView,
		reload : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD process_use
			METHODID 159
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:process_use METHODID:159 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 159-process_use

__BEGIN_METHOD_CODE__

SourceView::process_use(string& use_output)
{
    strip_space(use_output);
    current_class_path = use_output;

    clear_file_cache();
    reload();
}

__END_METHOD_CODE__


	METHOD SourceView!add_to_history
		CALLS
		type : _SYSTEM_OR_USER_,
		has : StringStringAssoc,
		itostring : _SYSTEM_OR_USER_,
		size : StringArray,
		freq : string,
		index : string,
		size : StringArray,
		size : StringArray



		METRICS
			history REFERRED 8 TIMES,
			history_position REFERRED 4 TIMES,
			source_history_locked REFERRED 2 TIMES,
			source_name_cache REFERRED 2 TIMES,
			ARRAYOP 4
			ASS 15
			AVVARLEN 15
			CALLEDN 8
			CLASS SourceView
			CLASSID 107
			CYCLO 13
			DOTS 7
			EQTEST 1
			EXPRORCALL 17
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 61
			LT 2
			METHOD add_to_history
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:4 ASS:15 AVVARLEN:15 CALLEDN:8 CLASS:SourceView CLASSID:107 CYCLO:13 DOTS:7 EQTEST:1 EXPRORCALL:17 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:61 LT:2 METHOD:add_to_history METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:4 
		;


#ID 0-add_to_history

__BEGIN_METHOD_CODE__

SourceView::add_to_history(const string& file_name, int line)
{
    if(source_history_locked)
    {
	source_history_locked = false;
	return;
    }

    string source_name = file_name;
    switch(gdb->type())
    {
    case GDB:
    case JDB:
	 
	if(source_name_cache.has(file_name))
	    source_name = source_name_cache[_ARGS_];
	break;

    case DBX:
    case XDB:
	break;
    }

    string entry = source_name + _REMOVED_STR_ + itostring(line);

    string current_entry = _REMOVED_STR_;
    if(history.size() > 0 && history_position > 0)
    {
	current_entry = history[_ARGS_];
	if(current_entry.freq(':') == 2)
	{
	    int last_colon = current_entry.index(':', -1);
	    current_entry = current_entry.before(last_colon);
	}
    }

    if(entry != current_entry)
    {
	if(history_position < history.size())
	{
	    history[_ARGS_] = entry;
	}
	else
	{
	    history += entry;
	    history_position = history.size();
	}

	StringArray new_history;
	for(int i = 0; i < history_position; i++)
	    new_history += history[_ARGS_];
	history = new_history;
    }








}

__END_METHOD_CODE__


	METHOD SourceView!add_to_history
		CALLS
		size : StringArray,
		freq : string,
		index : string,
		after : string,
		through : string,
		size : StringArray,
		size : StringArray



		METRICS
			history REFERRED 8 TIMES,
			history_position REFERRED 3 TIMES,
			code_history_locked REFERRED 2 TIMES,
			ARRAYOP 3
			ASS 16
			AVVARLEN 14
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 7
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 62
			LT 3
			METHOD add_to_history
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:3 ASS:16 AVVARLEN:14 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:7 EQTEST:0 EXPRORCALL:14 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:62 LT:3 METHOD:add_to_history METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:3 
		;


#ID 1-add_to_history

__BEGIN_METHOD_CODE__

SourceView::add_to_history(const string& address)
{
    if(code_history_locked)
    {
	code_history_locked = false;
	return;
    }

    string new_entry = _REMOVED_STR_;

    if(history.size() > 0)
    {
	string& current_entry = history[_ARGS_];
	if(current_entry.freq(':') < 2)
	{
	     
	    current_entry += _REMOVED_STR_ + address;
	}
	else
	{
	     
	    int last_colon = current_entry.index(':', -1);
	    string current_address = current_entry.after(last_colon);
	    if(address != current_address)
	    {
		 
		new_entry = current_entry.through(last_colon) + address;
	    }
	}
    }
    else
    {
	 
	new_entry = _REMOVED_STR_ + address;
    }

    if(new_entry != _REMOVED_STR_)
    {
	if(history_position < history.size())
	{
	    history[_ARGS_] = new_entry;
	}
	else
	{
	    history += new_entry;
	    history_position = history.size();
	}

	StringArray new_history;
	for(int i = 0; i < history_position; i++)
	    new_history += history[_ARGS_];
	history = new_history;
    }









}

__END_METHOD_CODE__


	METHOD SourceView!add_current_to_history
		CALLS
		get_line_of_pos : SourceView,
		add_to_history : SourceView,
		current_source_name : SourceView,
		get_line_of_pos : SourceView,
		add_to_history : SourceView



		METRICS
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 5
			AVVARLEN 12
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 0
			METHOD add_current_to_history
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:12 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:23 LT:0 METHOD:add_current_to_history METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-add_current_to_history

__BEGIN_METHOD_CODE__

SourceView::add_current_to_history()
{
    XmTextPosition pos;
    int line_nr;
    bool in_text;
    int bp_nr;
    string address;
    bool pos_found;

     
    pos = XmTextGetInsertionPosition(source_text_w);
    pos_found = get_line_of_pos(source_text_w, pos, line_nr, address, 
				in_text, bp_nr);
    if(pos_found)
	add_to_history(current_source_name(), line_nr);


     
    pos = XmTextGetInsertionPosition(code_text_w);
    pos_found = get_line_of_pos(code_text_w, pos, line_nr, address, 
				in_text, bp_nr);
    if(pos_found && address != _REMOVED_STR_)
	add_to_history(address);
}

__END_METHOD_CODE__


	METHOD SourceView!goto_entry
		CALLS
		after : string,
		atoi : _SYSTEM_OR_USER_,
		after : string,
		quote : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		set_status : _SYSTEM_OR_USER_,
		is_current_file : SourceView,
		read_file : SourceView,
		is_current_file : SourceView,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		SetInsertionPosition : SourceView,
		show_pc : SourceView



		METRICS
			source_history_locked REFERRED 1 TIMES,
			code_history_locked REFERRED 1 TIMES,
			source_text_w REFERRED 2 TIMES,
			line_count REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 22
			AVVARLEN 15
			CALLEDN 13
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 3
			EQTEST 3
			EXPRORCALL 23
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 1
			LOC 63
			LT 1
			METHOD goto_entry
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 20
			TERNINSTR 1
			USEDVARS 4

#METRICS ARRAYOP:0 ASS:22 AVVARLEN:15 CALLEDN:13 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:3 EQTEST:3 EXPRORCALL:23 GE:0 GT:1 IN:0 INDR:0 LE:1 LOC:63 LT:1 METHOD:goto_entry METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:20 TERNINSTR:1 USEDVARS:4 
		;


#ID 3-goto_entry

__BEGIN_METHOD_CODE__

SourceView::goto_entry(string entry)
{
    string file_name = entry.before(':');
    string line_str  = entry.after(':');
    int line         = atoi(line_str);
    string address   = line_str.after(':');

     
    string msg = _REMOVED_STR_;
    if(file_name != _REMOVED_STR_)
	msg = _REMOVED_STR_ + quote(file_name);
    if(line != 0)
    {
	if(msg == _REMOVED_STR_)
	    msg = _REMOVED_STR_;
	else
	    msg += _REMOVED_STR_;
	msg += itostring(line);
    }
    if(address != _REMOVED_STR_)
    {
	if(msg == _REMOVED_STR_)
	    msg = _REMOVED_STR_;
	else
	    msg += _REMOVED_STR_;
	msg += address;
    }
    set_status(msg);


    if(file_name != _REMOVED_STR_)
    {
	 
	if(!is_current_file(file_name))
	{
	    source_history_locked = true;
	    read_file(file_name, line);
	}

	if(is_current_file(file_name) && line > 0 && line <= line_count)
	{
	    XmTextPosition pos = pos_of_line(line);
	    int indent = indent_amount(source_text_w, pos);
	    SetInsertionPosition(source_text_w, pos + indent, true);
	}
    }

    if(address != _REMOVED_STR_)
    {
	 
	code_history_locked = true;
	show_pc(address, 
		address == last_execution_pc ? 
		XmHIGHLIGHT_SELECTED : XmHIGHLIGHT_NORMAL);
    }








}

__END_METHOD_CODE__


	METHOD SourceView!go_back
		CALLS
		size : StringArray,
		goto_entry : SourceView,
		set_status : _SYSTEM_OR_USER_



		METRICS
			history REFERRED 2 TIMES,
			history_position REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 11
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD go_back
			METHODID 167
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:11 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:go_back METHODID:167 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 167-go_back

__BEGIN_METHOD_CODE__

SourceView::go_back()
{
    if(history_position > 1 && history.size() > 0)
    {
	const string& entry = history[_ARGS_];
	goto_entry(entry);
    }
    else
    {
	set_status(_REMOVED_STR_);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!go_forward
		CALLS
		size : StringArray,
		goto_entry : SourceView,
		set_status : _SYSTEM_OR_USER_



		METRICS
			history REFERRED 2 TIMES,
			history_position REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 11
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 1
			METHOD go_forward
			METHODID 168
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:11 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:1 METHOD:go_forward METHODID:168 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 168-go_forward

__BEGIN_METHOD_CODE__

SourceView::go_forward()
{
    if(history_position < history.size())
    {
	const string& entry = history[_ARGS_];
	goto_entry(entry);
    }
    else
    {
	set_status(_REMOVED_STR_);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!clear_history

		METRICS
			history REFERRED 1 TIMES,
			history_position REFERRED 1 TIMES,
			source_history_locked REFERRED 1 TIMES,
			code_history_locked REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 15
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD clear_history
			METHODID 220
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:15 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:clear_history METHODID:220 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:4 
		;


#ID 220-clear_history

__BEGIN_METHOD_CODE__

SourceView::clear_history()
{
    static StringArray empty;
    history               = empty;
    history_position      = 1;
    code_history_locked   = false;
    source_history_locked = false;
}

__END_METHOD_CODE__


	METHOD SourceView!find
		CALLS
		length : _SYSTEM_OR_USER_,
		have_source : SourceView,
		post_error : _SYSTEM_OR_USER_,
		downcase : string,
		downcase : string,
		length : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		index : string,
		length : _SYSTEM_OR_USER_,
		index : string,
		length : _SYSTEM_OR_USER_,
		isid : _SYSTEM_OR_USER_,
		isid : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		isid : _SYSTEM_OR_USER_,
		isid : _SYSTEM_OR_USER_,
		SetInsertionPosition : SourceView,
		quote : _SYSTEM_OR_USER_,
		get_line_of_pos : SourceView,
		current_source : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_,
		line_of_cursor : SourceView,
		set_status : _SYSTEM_OR_USER_,
		post_warning : _SYSTEM_OR_USER_,
		quote : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 7 TIMES,
			line_count REFERRED 1 TIMES,
			ARRAYOP 4
			ASS 18
			AVVARLEN 11
			CALLEDN 28
			CLASS SourceView
			CLASSID 107
			CYCLO 30
			DOTS 11
			EQTEST 3
			EXPRORCALL 55
			GE 0
			GT 3
			IN 0
			INDR 0
			LE 0
			LOC 141
			LT 6
			METHOD find
			METHODID 163
			MMINUS 1
			OUT 0
			PARNUM 5
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 48
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:18 AVVARLEN:11 CALLEDN:28 CLASS:SourceView CLASSID:107 CYCLO:30 DOTS:11 EQTEST:3 EXPRORCALL:55 GE:0 GT:3 IN:0 INDR:0 LE:0 LOC:141 LT:6 METHOD:find METHODID:163 MMINUS:1 OUT:0 PARNUM:5 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:48 TERNINSTR:0 USEDVARS:2 
		;


#ID 163-find

__BEGIN_METHOD_CODE__

SourceView::find(const string& s, 
		      SourceView::SearchDirection direction,
		      bool words_only,
		      bool case_sensitive,
		      Time time)
{
    int matchlen = s.length();
    int pos = -1;
    XmTextPosition cursor = XmTextGetInsertionPosition(source_text_w);
    XmTextPosition initial_cursor = cursor;
    int wraps = 0;

    if(!have_source())
    {
	post_error(_REMOVED_STR_, _REMOVED_STR_, source_text_w);
	return;
    }

    string key  = s;
    string text = current_source;
    if(!case_sensitive)
    {
	 
	key.downcase();
	text.downcase();
    }

     
    XmTextPosition startpos;
    XmTextPosition endpos;

    if(XmTextGetSelectionPosition(source_text_w, &startpos, &endpos))
    {
	switch(direction)
	{
	case forward:
	    if(cursor == startpos
		&& cursor < XmTextPosition(text.length()))
		cursor++;
	    break;
	case backward:
	    if(cursor == endpos && cursor > 0)
		cursor--;
	    break;
	}
    }

     
    for(;) {
	switch(direction)
	{
	case forward:
	    pos = text.index(key, cursor);
	    if(pos < 0)
	    {
		if(wraps++)
		    break;
		pos = text.index(key, 0);
	    }
	    break;
	case backward:
	    pos = text.index(key, cursor - text.length() - 1);
	    if(pos < 0)
	    {
		if(wraps++)
		    break;
		pos = text.index(key, -1);
	    }
	    break;
	}

	if(pos < 0)
	    break;		 

	 
	switch(direction)
	{
	case forward:
	    cursor = pos + matchlen;
	    break;
	case backward:
	    cursor = pos;
	    break;
	}

	if(words_only)
	{
	     
	    if(pos > 0 && pos < int(text.length()))
	    {
		if(isid(text[_ARGS_]) && isid(text[_ARGS_]))
		    continue;
	    }

	    if(pos + matchlen < int(text.length()))
	    {
		if(isid(text[_ARGS_]) && 
		    isid(text[_ARGS_]))
		    continue;
	    }
	}

	 
	break;
    }

    if(pos > 0)
    {
	string msg;

	 
	XmTextSetSelection(source_text_w, pos, pos + matchlen, time);

	 
	SetInsertionPosition(source_text_w, cursor, false);

	if(cursor == initial_cursor)
	{
	     
	    msg = _REMOVED_STR_ + quote(s) + _REMOVED_STR_;
	}
	else
	{
	    int line_nr;
	    bool in_text;
	    int bp_nr;
	    string address;

	    if(!get_line_of_pos(source_text_w, pos, line_nr, 
				 address, in_text, bp_nr))
		line_nr = line_count;

	    string occurrence = current_source(pos, matchlen);
	    msg = _REMOVED_STR_ + quote(occurrence) + _REMOVED_STR_ + line_of_cursor();
	    if(wraps)
		msg += _REMOVED_STR_;
	}

	set_status(msg);
    }
    else
    {
	post_warning(quote(s) + _REMOVED_STR_, _REMOVED_STR_, 
		     source_text_w);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!current_source_name
		CALLS
		type : _SYSTEM_OR_USER_,
		gdb_question : _SYSTEM_OR_USER_,
		after : string,
		base_matches : SourceView,
		get_gdb_sources : _SYSTEM_OR_USER_,
		size : StringArray,
		size : StringArray,
		freq : string,
		split : _SYSTEM_OR_USER_,
		base_matches : SourceView,
		basename : SourceView,
		chars : AssocRec,
		full_path : SourceView,
		has : StringStringAssoc,
		basename : SourceView,
		chars : AssocRec,
		strip_java_suffix : _SYSTEM_OR_USER_,
		basename : SourceView,
		chars : AssocRec



		METRICS
			source_name_cache REFERRED 11 TIMES,
			ARRAYOP 15
			ASS 25
			AVVARLEN 17
			CALLEDN 19
			CLASS SourceView
			CLASSID 107
			CYCLO 20
			DOTS 10
			EQTEST 5
			EXPRORCALL 35
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 107
			LT 2
			METHOD current_source_name
			METHODID 93
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 2
			RETPOINT 1
			SCOPEOP 0
			STMNT 35
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:15 ASS:25 AVVARLEN:17 CALLEDN:19 CLASS:SourceView CLASSID:107 CYCLO:20 DOTS:10 EQTEST:5 EXPRORCALL:35 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:107 LT:2 METHOD:current_source_name METHODID:93 MMINUS:0 OUT:0 PARNUM:0 PPLUS:2 RETPOINT:1 SCOPEOP:0 STMNT:35 TERNINSTR:0 USEDVARS:1 
		;


#ID 93-current_source_name

__BEGIN_METHOD_CODE__

SourceView::current_source_name()
{
    string source = _REMOVED_STR_;

    switch(gdb->type())
    {
    case GDB:
	 
	 
	if(source_name_cache[_ARGS_] == _REMOVED_STR_)
	{
	     
	    string ans = gdb_question(_REMOVED_STR_);
	    if(ans != NO_GDB_ANSWER)
	    {
		ans = ans.before('\n');
		ans = ans.after(' ', -1);

		if(base_matches(ans, current_file_name))
		{
		     
		     
		    source_name_cache[_ARGS_] = ans;
		}
		else
		{
		     
		     
		    static string all_sources = _REMOVED_STR_;

		    if(source_name_cache[_ARGS_] == _REMOVED_STR_)
		    {
			StringArray sources;
			get_gdb_sources(sources);

			if(sources.size() > 0)
			{
			    ans = _REMOVED_STR_;
			    for(int i = 0; i < sources.size(); i++)
				ans += sources[_ARGS_] + '\n';

			    source_name_cache[_ARGS_] = ans;
			}
		    }

		    ans = source_name_cache[_ARGS_];
		    if(ans != _REMOVED_STR_)
		    {
			int n = ans.freq('\n');
			string *sources = new string[_ARGS_];
			split(ans, sources, n + 1, '\n');

			for(int i = 0; i < n + 1; i++)
			{
			    if(base_matches(sources[_ARGS_], current_file_name))
			    {
				const string& src = sources[_ARGS_];
				source_name_cache[_ARGS_] = src;
				break;
			    }
			}
			
			delete[] sources;

			if(source_name_cache[_ARGS_] == _REMOVED_STR_)
			{
			     
			     
			    string base = basename(current_file_name.chars());
			    source_name_cache[_ARGS_] = base;
			}
		    }
		}
	    }
	}

	source = source_name_cache[_ARGS_];
	break;

    case DBX:
    case XDB:
	if(app_data.use_source_path)
	{
	     
	    source = full_path(current_file_name);
	}
	break;

    case JDB:
	if(source_name_cache.has(current_file_name))
	{
	     
	    source = source_name_cache[_ARGS_];
	}
	if(source == _REMOVED_STR_)
	{
	    source = basename(current_file_name.chars());
	    strip_java_suffix(source);
	}
	break;
    }

     
    if(source == _REMOVED_STR_)
	source = basename(current_file_name.chars());

    return source;
}

__END_METHOD_CODE__


	METHOD SourceView!line_of_cursor
		CALLS
		current_source_name : SourceView,
		get_line_of_pos : SourceView,
		itostring : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 2 TIMES,
			line_count REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 11
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 0
			METHOD line_of_cursor
			METHODID 169
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:11 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:17 LT:0 METHOD:line_of_cursor METHODID:169 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:2 
		;


#ID 169-line_of_cursor

__BEGIN_METHOD_CODE__

SourceView::line_of_cursor()
{
    XmTextPosition pos = XmTextGetInsertionPosition(source_text_w);

    string s = current_source_name();
    if(s == _REMOVED_STR_)
	return _REMOVED_STR_;		 

    int line_nr;
    bool in_text;
    int bp_nr;
    string address;

    if(get_line_of_pos(source_text_w, pos, line_nr, address, in_text, bp_nr))
	return s + _REMOVED_STR_ + itostring(line_nr);     
    else
	return s + _REMOVED_STR_ + itostring(line_count);	 
}

__END_METHOD_CODE__


	METHOD SourceView!file_of_cursor
		CALLS
		line_of_cursor : SourceView,
		full_path : SourceView,
		from : string



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD file_of_cursor
			METHODID 170
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:file_of_cursor METHODID:170 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 170-file_of_cursor

__BEGIN_METHOD_CODE__

SourceView::file_of_cursor()
{
    string pos = line_of_cursor();
    return full_path(current_file_name) + pos.from(':');
}

__END_METHOD_CODE__


	METHOD SourceView!setSelection
		CALLS
		set_source_argCB : SourceView



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD setSelection
			METHODID 84
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:setSelection METHODID:84 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 84-setSelection

__BEGIN_METHOD_CODE__

SourceView::setSelection(XtPointer client_data, XtIntervalId *)
{
    Widget w = (Widget)client_data;

    XmTextSetSelection(w, selection_startpos, selection_endpos, 
		       selection_time);

    selection_time = 0;
    set_source_argCB(w, XtPointer(false), 0);
}

__END_METHOD_CODE__


	METHOD SourceView!startSelectWordAct
		CALLS
		find_word_bounds : SourceView,
		time : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 12
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 27
			LT 0
			METHOD startSelectWordAct
			METHODID 76
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:12 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:27 LT:0 METHOD:startSelectWordAct METHODID:76 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:0 
		;


#ID 76-startSelectWordAct

__BEGIN_METHOD_CODE__

SourceView::startSelectWordAct(Widget text_w, XEvent* e, 
				     String *params, Cardinal *num_params)
{
    selection_event = *e;

    XtCallActionProc(text_w, _REMOVED_STR_, e, params, *num_params);

    if(e->type != 4  && e->type != 5 )
	return;

    XButtonEvent *event = &e->xbutton;

    XmTextPosition pos = XmTextXYToPos(text_w, event->x, event->y);

    XmTextPosition startpos, endpos;
    if(app_data.source_editing)
	startpos = endpos = pos;
    else
	find_word_bounds(text_w, pos, startpos, endpos);

    selection_click    = true;
    selection_startpos = startpos;
    selection_endpos   = endpos;
    selection_pos      = pos;
    selection_time     = time(e);

    XtAppAddTimeOut(XtWidgetToApplicationContext(text_w), 0, setSelection, 
		    (XtPointer)text_w);
}

__END_METHOD_CODE__


	METHOD SourceView!endSelectWordAct
		CALLS
		time : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 10
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 26
			LT 0
			METHOD endSelectWordAct
			METHODID 77
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:26 LT:0 METHOD:endSelectWordAct METHODID:77 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 77-endSelectWordAct

__BEGIN_METHOD_CODE__

SourceView::endSelectWordAct(Widget text_w, XEvent* e, 
				   String *params, Cardinal *num_params)
{
    selection_event = *e;
    selection_click = false;

    XtCallActionProc(text_w, _REMOVED_STR_, e, params, *num_params);
    
    if(e->type != 4  && e->type != 5 )
	return;
    
    XButtonEvent *event = &e->xbutton;

    XmTextPosition pos = XmTextXYToPos(text_w, event->x, event->y);

    XmTextPosition startpos, endpos;
    if(XmTextGetSelectionPosition(text_w, &startpos, &endpos))
    {
	selection_startpos = startpos;
	selection_endpos   = endpos;
    }

    selection_pos  = pos;
    selection_time = time(e);

    XtAppAddTimeOut(XtWidgetToApplicationContext(text_w), 0, setSelection,
		   (XtPointer)text_w);
}

__END_METHOD_CODE__


	METHOD SourceView!set_text_popup_label
		CALLS
		MString : MString,
		tt : _SYSTEM_OR_USER_,
		xmstring : MString



		METRICS
			text_popup REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 2
			AVVARLEN 10
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD set_text_popup_label
			METHODID 85
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:3 ASS:2 AVVARLEN:10 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:set_text_popup_label METHODID:85 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 85-set_text_popup_label

__BEGIN_METHOD_CODE__

SourceView::set_text_popup_label(int item, const string& arg, bool sens)
{
    Widget w = text_popup[_ARGS_].widget;
    MString label = MString(text_cmd_labels[_ARGS_]) + tt(arg);

    XtVaSetValues(w, ((char *)&_XmStrings[_ARGS_]) , label.xmstring(), __null );
    XtSetSensitive(w, sens);
}

__END_METHOD_CODE__


	METHOD SourceView!set_text_popup_resource
		CALLS
		string : string,
		chars : string



		METRICS
			text_popup REFERRED 1 TIMES,
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 4
			AVVARLEN 11
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 1
			LOC 14
			LT 1
			METHOD set_text_popup_resource
			METHODID 86
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:3 ASS:4 AVVARLEN:11 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:2 LE:1 LOC:14 LT:1 METHOD:set_text_popup_resource METHODID:86 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:2 
		;


#ID 86-set_text_popup_resource

__BEGIN_METHOD_CODE__

SourceView::set_text_popup_resource(int item, const string& arg)
{
    if(lesstif_version <= 82)
    {
	 
	string db = string(_REMOVED_STR_   _REMOVED_STR_) 
	    + text_popup[_ARGS_].name + _REMOVED_STR_ + ((char *)&_XmStrings[_ARGS_])  + _REMOVED_STR_
	    + _REMOVED_STR_ _REMOVED_STR_  _REMOVED_STR_ + text_cmd_labels[_ARGS_] 
	    + _REMOVED_STR_ _REMOVED_STR_  _REMOVED_STR_ + arg;

	XrmDatabase res = XrmGetStringDatabase(db.chars());
	XrmDatabase target = XtDatabase((( ( source_text_w )->core.screen )->display)  );
	XrmMergeDatabases(res, &target);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!translate_glyph_pos
		CALLS
		XTranslateCoordinates : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 10
			LT 0
			METHOD translate_glyph_pos
			METHODID 130
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:10 LT:0 METHOD:translate_glyph_pos METHODID:130 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 130-translate_glyph_pos

__BEGIN_METHOD_CODE__

SourceView::translate_glyph_pos(Widget glyph, Widget text, int& x, int& y)
{
    int dest_x, dest_y;
    Window child;
    XTranslateCoordinates((( ( glyph )->core.screen )->display)  , 
			  (( glyph )->core.window) , (( text )->core.window) , 
			  x, y, &dest_x, &dest_y, &child);

    x = dest_x;
    y = dest_y;
}

__END_METHOD_CODE__


	METHOD SourceView!srcpopupAct
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView,
		translate_glyph_pos : SourceView,
		time : _SYSTEM_OR_USER_,
		time : _SYSTEM_OR_USER_,
		get_line_of_pos : SourceView,
		current_text : SourceView,
		length : _SYSTEM_OR_USER_,
		current_text : SourceView,
		MMcreatePopupMenu : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		InstallButtonTips : _SYSTEM_OR_USER_,
		can_disable : GDBAgent,
		has_jump_command : GDBAgent,
		has_assign_command : GDBAgent,
		label : _SYSTEM_OR_USER_,
		get : BreakPointMap,
		enabled : _SYSTEM_OR_USER_,
		xmstring : MString,
		MMcreatePopupMenu : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		InstallButtonTips : _SYSTEM_OR_USER_,
		has_temporary_breakpoints : GDBAgent,
		has_jump_command : GDBAgent,
		has_assign_command : GDBAgent,
		is_source_widget : SourceView,
		current_source_name : SourceView,
		itostring : _SYSTEM_OR_USER_,
		string : string,
		get_word_at_pos : SourceView,
		shorten : _SYSTEM_OR_USER_,
		dereferenced_expr : GDBAgent,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		set_text_popup_resource : SourceView,
		MMcreatePopupMenu : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		InstallButtonTips : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		has_watch_command : GDBAgent,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView,
		set_text_popup_label : SourceView



		METRICS
			line_popup REFERRED 5 TIMES,
			bp_popup REFERRED 6 TIMES,
			text_popup REFERRED 10 TIMES,
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 2 TIMES,
			bp_map REFERRED 1 TIMES,
			max_popup_expr_length REFERRED 1 TIMES,
			ARRAYOP 15
			ASS 39
			AVVARLEN 11
			CALLEDN 60
			CLASS SourceView
			CLASSID 107
			CYCLO 16
			DOTS 17
			EQTEST 3
			EXPRORCALL 114
			GE 1
			GT 3
			IN 0
			INDR 15
			LE 2
			LOC 189
			LT 4
			METHOD srcpopupAct
			METHODID 75
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 20
			STMNT 92
			TERNINSTR 1
			USEDVARS 7

#METRICS ARRAYOP:15 ASS:39 AVVARLEN:11 CALLEDN:60 CLASS:SourceView CLASSID:107 CYCLO:16 DOTS:17 EQTEST:3 EXPRORCALL:114 GE:1 GT:3 IN:0 INDR:15 LE:2 LOC:189 LT:4 METHOD:srcpopupAct METHODID:75 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:20 STMNT:92 TERNINSTR:1 USEDVARS:7 
		;


#ID 75-srcpopupAct

__BEGIN_METHOD_CODE__

SourceView::srcpopupAct(Widget w, XEvent* e, String *, Cardinal *)
{
    if(e->type != 4  && e->type != 5 )
	return;

    Widget text_w;
    if(is_source_widget(w))
	text_w = source_text_w;
    else if(is_code_widget(w))
	text_w = code_text_w;
    else
	return;

    XButtonEvent* event = &e->xbutton;

    int x = event->x;
    int y = event->y;

    if(w != source_text_w && w != code_text_w)
    {
	 
	translate_glyph_pos(w, text_w, x, y);
    }

     
    XmTextPosition pos = XmTextXYToPos(text_w, x, y);

     
     
    XmTextPosition left, right;
    Boolean have_selection = XmTextGetSelectionPosition(text_w, &left, &right);
    if(have_selection && pos >= left && pos <= right)
    {
	 
	XmTextSetInsertionPosition(text_w, pos);
	XmTextSetSelection(text_w, left, right, time(e));
    }
    else
    {
	 
	XmTextClearSelection(text_w, time(e));
	XmTextSetInsertionPosition(text_w, pos);
    }

    int line_nr;
    bool in_text;
    static int bp_nr;
    static string address;
    bool pos_found = get_line_of_pos(w, pos, line_nr, address, in_text, bp_nr);
    bool right_of_text = 
	pos < XmTextPosition(current_text(w).length()) 
	&& current_text(w)[_ARGS_] == '\n';

    if(pos_found && bp_nr != 0)
    {
	 
	static Widget bp_popup_w      = 0;
	static Widget bp_popup_parent = 0;

	if(lesstif_version < 1000 && w != bp_popup_parent)
	{
	     
	     
	    if(bp_popup_w != 0)
		XtDestroyWidget(bp_popup_w);
	    bp_popup_w = 0;
	}

	if(bp_popup_w == 0)
	{
	    bp_popup_parent = w;
	    bp_popup_w = MMcreatePopupMenu(w, _REMOVED_STR_, bp_popup);
	    MMaddCallbacks(bp_popup, XtPointer(&bp_nr));
	    MMaddHelpCallback(bp_popup, ImmediateHelpCB);
	    InstallButtonTips(bp_popup_w);
	}

	 
	XtSetSensitive(bp_popup[_ARGS_].widget, gdb->can_disable());
	XtSetSensitive(bp_popup[_ARGS_].widget,
		       gdb->has_jump_command() || gdb->has_assign_command());

	MString label(bp_map.get(bp_nr)->enabled() ? 
		      _REMOVED_STR_ : _REMOVED_STR_);
	XtVaSetValues(bp_popup[_ARGS_].widget,
		      ((char *)&_XmStrings[_ARGS_]) , label.xmstring(),
		      __null );

	XmMenuPosition(bp_popup_w, event);
	XtManageChild(bp_popup_w);
    }
    else if(pos_found 
	     && (line_nr > 0 || address != _REMOVED_STR_) 
	     && (!in_text || right_of_text))
    {
	 
	static Widget line_popup_w = 0;
	if(line_popup_w == 0)
	{
	    line_popup_w = MMcreatePopupMenu(w, _REMOVED_STR_, line_popup);
	    MMaddCallbacks(line_popup, XtPointer(&address));
	    MMaddHelpCallback(line_popup, ImmediateHelpCB);
	    InstallButtonTips(line_popup_w);

	    XtSetSensitive(line_popup[_ARGS_].widget, 
			   gdb->has_temporary_breakpoints());
	    XtSetSensitive(line_popup[_ARGS_].widget,
			   gdb->has_jump_command() || 
			   gdb->has_assign_command());
	}

	if(is_source_widget(w))
	    address = current_source_name() + _REMOVED_STR_ + itostring(line_nr);
	else
	    address = string('*') + address;
	XmMenuPosition(line_popup_w, event);
	XtManageChild(line_popup_w);
    }
    else
    {
	 
	static string word;

	XmTextPosition startpos = 0;
	XmTextPosition endpos   = 0;

	if(pos_found)
	    word = get_word_at_pos(text_w, pos, startpos, endpos);

	 
	string current_arg = word;
	shorten(current_arg, max_popup_expr_length);
	string current_ref_arg = gdb->dereferenced_expr(current_arg);

	if(lesstif_version <= 82)
	{
	    set_text_popup_resource(TextItms::Print,    current_arg);
	    set_text_popup_resource(TextItms::Disp,     current_arg);
	    set_text_popup_resource(TextItms::Watch,    current_arg);
	    set_text_popup_resource(TextItms::PrintRef, current_ref_arg);
	    set_text_popup_resource(TextItms::DispRef,  current_ref_arg);
	    set_text_popup_resource(TextItms::WatchRef, current_ref_arg);
	    set_text_popup_resource(TextItms::Whatis,   current_arg);
	    set_text_popup_resource(TextItms::Lookup,   current_arg);
	    set_text_popup_resource(TextItms::Break,    current_arg);
	    set_text_popup_resource(TextItms::Clear,    current_arg);
	}

	Widget text_popup_w = 
	    MMcreatePopupMenu(text_w, _REMOVED_STR_, text_popup);
	MMaddCallbacks(text_popup, XtPointer(&word));
	MMaddHelpCallback(text_popup, ImmediateHelpCB);
	InstallButtonTips(text_popup_w);

	 
	Widget shell = (( text_popup_w )->core.parent) ;
	XtAddCallback(shell, ((char*)&XtStrings[_ARGS_]) , DestroyThisCB, shell);

	bool has_arg = (word.length() > 0);
	bool has_watch = has_arg && gdb->has_watch_command();
	set_text_popup_label(TextItms::Print,    current_arg, has_arg);
	set_text_popup_label(TextItms::Disp,     current_arg, has_arg);
	set_text_popup_label(TextItms::Watch,    current_arg, has_watch);
	set_text_popup_label(TextItms::PrintRef, current_ref_arg, has_arg);
	set_text_popup_label(TextItms::DispRef,  current_ref_arg, has_arg);
	set_text_popup_label(TextItms::WatchRef, current_ref_arg, has_watch);
	set_text_popup_label(TextItms::Whatis,   current_arg, has_arg);
	set_text_popup_label(TextItms::Lookup,   current_arg, has_arg);
	set_text_popup_label(TextItms::Break,    current_arg, has_arg);
	set_text_popup_label(TextItms::Clear,    current_arg, has_arg);

	if(current_arg != current_ref_arg)
	{
	    XtManageChild(text_popup[_ARGS_].widget);
	    XtManageChild(text_popup[_ARGS_].widget);
	    XtManageChild(text_popup[_ARGS_].widget);
	     
	}
	else
	{
	    XtUnmanageChild(text_popup[_ARGS_].widget);
	    XtUnmanageChild(text_popup[_ARGS_].widget);
	    XtUnmanageChild(text_popup[_ARGS_].widget);
	    XtUnmanageChild(text_popup[_ARGS_].widget);
	}

	XmMenuPosition(text_popup_w, event);
	XtManageChild(text_popup_w);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!doubleClickAct
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView,
		translate_glyph_pos : SourceView,
		time : _SYSTEM_OR_USER_,
		Time : _SYSTEM_OR_USER_,
		Time : _SYSTEM_OR_USER_,
		get_line_of_pos : SourceView,
		edit_bp : SourceView,
		get_string : ArgField,
		is_file_pos : _SYSTEM_OR_USER_,
		gdb_button_command : _SYSTEM_OR_USER_,
		gdb_button_command : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		bp_matches : SourceView,
		number : BreakPoint,
		first : BreakPointMap,
		next : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		compare_address : _SYSTEM_OR_USER_,
		address : BreakPoint,
		number : BreakPoint,
		size : IntArray,
		edit_bps : SourceView,
		gdb_button_command : _SYSTEM_OR_USER_,
		create_bp : SourceView,
		get_string : ArgField



		METRICS
			source_text_w REFERRED 4 TIMES,
			code_text_w REFERRED 3 TIMES,
			bp_map REFERRED 4 TIMES,
			ARRAYOP 2
			ASS 30
			AVVARLEN 10
			CALLEDN 27
			CLASS SourceView
			CLASSID 107
			CYCLO 18
			DOTS 6
			EQTEST 5
			EXPRORCALL 50
			GE 2
			GT 3
			IN 0
			INDR 13
			LE 1
			LOC 110
			LT 1
			METHOD doubleClickAct
			METHODID 83
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 39
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:2 ASS:30 AVVARLEN:10 CALLEDN:27 CLASS:SourceView CLASSID:107 CYCLO:18 DOTS:6 EQTEST:5 EXPRORCALL:50 GE:2 GT:3 IN:0 INDR:13 LE:1 LOC:110 LT:1 METHOD:doubleClickAct METHODID:83 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:39 TERNINSTR:0 USEDVARS:3 
		;


#ID 83-doubleClickAct

__BEGIN_METHOD_CODE__

SourceView::doubleClickAct(Widget w, XEvent *e, String *params, 
				Cardinal *num_params)
{
    if(e->type != 4  && e->type != 5 )
	return;

    Widget text_w;
    if(is_source_widget(w))
	text_w = source_text_w;
    else if(is_code_widget(w))
	text_w = code_text_w;
    else
	return;

    XButtonEvent* event = &e->xbutton;

    int x = event->x;
    int y = event->y;

    if(w != source_text_w && w != code_text_w)
    {
	 
	translate_glyph_pos(w, text_w, x, y);
    }

    if(w == source_text_w || w == code_text_w)
    {
	 
	Time selection_time = time(e);
	static Time last_selection_time = 0;

	bool double_click = 
	    last_selection_time != 0 &&
	    (Time(selection_time - last_selection_time) <= 
	     Time(XtGetMultiClickTime((( ( text_w )->core.screen )->display)  )));

	if(double_click)
	    last_selection_time = 0;
	else
	    last_selection_time = selection_time;

	if(!double_click)
	    return;
    }

     
    XmTextPosition pos = XmTextXYToPos(text_w, x, y);

    int line_nr;
    bool in_text;
    static int bp_nr;
    static string address;
    bool pos_found = get_line_of_pos(w, pos, line_nr, address, in_text, bp_nr);

    if(pos_found && bp_nr != 0)
    {
	 
	edit_bp(bp_nr, text_w);
	return;
    }

    string arg = source_arg->get_string();
    if(in_text && !is_file_pos(arg))
    {
	 
	if(*num_params >= 1)
	    gdb_button_command(params[_ARGS_]);
	else
	    gdb_button_command(_REMOVED_STR_);
	return;
    }

     
    IntArray bps;
    if(text_w == source_text_w)
    {
	MapRef ref;
	for(BreakPoint* bp = bp_map.first(ref);
	     bp != 0;
	     bp = bp_map.next(ref))
	{
	    if(bp_matches(bp, line_nr))
		bps += bp->number();
	}
    }
    else
    {
	MapRef ref;
	for(BreakPoint* bp = bp_map.first(ref);
	     bp != 0;
	     bp = bp_map.next(ref))
	{
	    if(bp->type() == BREAKPOINT && 
		compare_address(address, bp->address()) == 0)
		bps += bp->number();
	}
    }

    if(bps.size() > 0)
    {
	 
	edit_bps(bps, text_w);
    }
    else
    {
	 
	if(*num_params >= 2)
	    gdb_button_command(params[_ARGS_]);
	else
	    create_bp(source_arg->get_string(), w);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!NewBreakpointDCB
		CALLS
		Widget : _SYSTEM_OR_USER_,
		input : _SYSTEM_OR_USER_,
		create_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD NewBreakpointDCB
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:NewBreakpointDCB METHODID:23 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-NewBreakpointDCB

__BEGIN_METHOD_CODE__

SourceView::NewBreakpointDCB(Widget w, XtPointer client_data, XtPointer)
{
    Widget text = Widget(client_data);
    String _input = XmTextFieldGetString(text);
    string input(_input);
    XtFree(_input);
    if(input == _REMOVED_STR_)
	return;

    create_bp(input, w);
}

__END_METHOD_CODE__


	METHOD SourceView!NewBreakpointCB
		CALLS
		find_shell : _SYSTEM_OR_USER_,
		register_shell : Delay,
		CreateComboBox : _SYSTEM_OR_USER_,
		tie_combo_box_to_history : _SYSTEM_OR_USER_,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 12
			ASS 15
			AVVARLEN 0
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 6
			EQTEST 1
			EXPRORCALL 56
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 39
			LT 1
			METHOD NewBreakpointCB
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 3
			RETPOINT 0
			SCOPEOP 1
			STMNT 25
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:12 ASS:15 AVVARLEN:0 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:6 EQTEST:1 EXPRORCALL:56 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:39 LT:1 METHOD:NewBreakpointCB METHODID:24 MMINUS:0 OUT:0 PARNUM:3 PPLUS:3 RETPOINT:0 SCOPEOP:1 STMNT:25 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-NewBreakpointCB

__BEGIN_METHOD_CODE__

SourceView::NewBreakpointCB(Widget w, XtPointer, XtPointer)
{
    static Widget dialog = 0;
    if(dialog == 0)
    {
	Arg args[_ARGS_];
	Cardinal arg = 0;
	dialog = verify(XmCreatePromptDialog(find_shell(w),
					     _REMOVED_STR_,
					     args, arg));
	Delay::register_shell(dialog);

	if(lesstif_version <= 79)
	    XtUnmanageChild(XmSelectionBoxGetChild(dialog,
						   XmDIALOG_APPLY_BUTTON));
	XtUnmanageChild(XmSelectionBoxGetChild(dialog, 
					       XmDIALOG_SELECTION_LABEL));
	XtUnmanageChild(XmSelectionBoxGetChild(dialog, XmDIALOG_TEXT));

	arg = 0;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
	Widget box = XmCreateRowColumn(dialog, _REMOVED_STR_, args, arg);
	XtManageChild(box);

	Widget label = XmCreateLabel(box, _REMOVED_STR_, args, arg);
	XtManageChild(label);

	arg = 0;
	Widget text = CreateComboBox(box, _REMOVED_STR_, args, arg);
	tie_combo_box_to_history(text, break_history_filter);

	XtAddCallback(dialog, ((char *)&_XmStrings[_ARGS_]) , ImmediateHelpCB, __null );
	XtAddCallback(dialog, ((char *)&_XmStrings[_ARGS_]) , NewBreakpointDCB, 
		      XtPointer(text));
    }

    manage_and_raise(dialog);
}

__END_METHOD_CODE__


	METHOD SourceView!SetWatchModeCB
		CALLS
		WatchMode : _SYSTEM_OR_USER_



		METRICS
			selected_watch_mode REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 19
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 0
			METHOD SetWatchModeCB
			METHODID 56
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:19 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:0 METHOD:SetWatchModeCB METHODID:56 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 56-SetWatchModeCB

__BEGIN_METHOD_CODE__

SourceView::SetWatchModeCB(Widget, XtPointer client_data, 
				XtPointer call_data)
{
    XmToggleButtonCallbackStruct *info = 
	(XmToggleButtonCallbackStruct *)call_data;

    if(info->set)
	selected_watch_mode = WatchMode(client_data);
}

__END_METHOD_CODE__


	METHOD SourceView!NewWatchpointDCB
		CALLS
		Widget : _SYSTEM_OR_USER_,
		input : _SYSTEM_OR_USER_,
		strip_space : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		watch_command : GDBAgent



		METRICS
			selected_watch_mode REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 19
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 12
			LT 0
			METHOD NewWatchpointDCB
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:19 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:12 LT:0 METHOD:NewWatchpointDCB METHODID:25 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 25-NewWatchpointDCB

__BEGIN_METHOD_CODE__

SourceView::NewWatchpointDCB(Widget w, XtPointer client_data, XtPointer)
{
    Widget text = Widget(client_data);
    String _input = XmTextFieldGetString(text);
    string input(_input);
    XtFree(_input);

    strip_space(input);
    if(input == _REMOVED_STR_)
	return;

    gdb_command(gdb->watch_command(input, selected_watch_mode), w);
}

__END_METHOD_CODE__


	METHOD SourceView!NewWatchpointCB
		CALLS
		find_shell : _SYSTEM_OR_USER_,
		register_shell : Delay,
		MMcreateButtonPanel : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		MMaddHelpCallback : _SYSTEM_OR_USER_,
		has_watch_command : GDBAgent,
		has_watch_command : GDBAgent,
		has_watch_command : GDBAgent,
		CreateComboBox : _SYSTEM_OR_USER_,
		tie_combo_box_to_history : _SYSTEM_OR_USER_,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 32
			ASS 30
			AVVARLEN 0
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 18
			EQTEST 4
			EXPRORCALL 133
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 1
			LOC 81
			LT 1
			METHOD NewWatchpointCB
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 9
			RETPOINT 0
			SCOPEOP 1
			STMNT 47
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:32 ASS:30 AVVARLEN:0 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:18 EQTEST:4 EXPRORCALL:133 GE:0 GT:0 IN:0 INDR:3 LE:1 LOC:81 LT:1 METHOD:NewWatchpointCB METHODID:26 MMINUS:0 OUT:0 PARNUM:3 PPLUS:9 RETPOINT:0 SCOPEOP:1 STMNT:47 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-NewWatchpointCB

__BEGIN_METHOD_CODE__

SourceView::NewWatchpointCB(Widget w, XtPointer, XtPointer)
{
    static Widget dialog = 0;
    if(dialog == 0)
    {
	static Widget cwatch_w, rwatch_w, awatch_w;

	static MMDesc wp_modes[] =
	{
	    { _REMOVED_STR_,  MMPush, { SetWatchModeCB, XtPointer(WATCH_CHANGE) }, 
	      __null , &cwatch_w },
	    { _REMOVED_STR_,  MMPush, { SetWatchModeCB, XtPointer(WATCH_READ) }, 
	      __null , &rwatch_w },
	    { _REMOVED_STR_, MMPush, { SetWatchModeCB, XtPointer(WATCH_ACCESS)},
	      __null , &awatch_w},
	    { __null  } 
	};

	static MMDesc wp_menu[] = 
	{
	    { _REMOVED_STR_,      MMLabel },
	    { _REMOVED_STR_,   MMOptionMenu, { __null  } , wp_modes },
	    { _REMOVED_STR_,       MMLabel },
	    { __null  } 
	};

	Arg args[_ARGS_];
	Cardinal arg = 0;
	dialog = verify(XmCreatePromptDialog(find_shell(w),
					     _REMOVED_STR_,
					     args, arg));
	Delay::register_shell(dialog);

	if(lesstif_version <= 79)
	    XtUnmanageChild(XmSelectionBoxGetChild(dialog,
						   XmDIALOG_APPLY_BUTTON));
	XtUnmanageChild(XmSelectionBoxGetChild(dialog, 
					       XmDIALOG_SELECTION_LABEL));
	XtUnmanageChild(XmSelectionBoxGetChild(dialog, XmDIALOG_TEXT));

	arg = 0;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
	Widget box = XmCreateRowColumn(dialog, _REMOVED_STR_, args, arg);
	XtManageChild(box);

	arg = 0;
	((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(  XmHORIZONTAL ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(       0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   0 ) )) ; arg++;
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ; arg++;
	Widget panel = MMcreateButtonPanel(box, _REMOVED_STR_, wp_menu, args, arg);
	(void) panel;
	MMaddCallbacks(wp_menu);
	MMaddHelpCallback(wp_menu, ImmediateHelpCB);

	XtSetSensitive(cwatch_w, (gdb->has_watch_command() & WATCH_CHANGE) 
		       == WATCH_CHANGE);
	XtSetSensitive(rwatch_w, (gdb->has_watch_command() & WATCH_READ) 
		       == WATCH_READ);
	XtSetSensitive(awatch_w, (gdb->has_watch_command() & WATCH_ACCESS) 
		       == WATCH_ACCESS);

	 
	XtCallActionProc(cwatch_w, _REMOVED_STR_, 
			 (XEvent *)0, (String *)0, 0);

	arg = 0;
	Widget text = CreateComboBox(box, _REMOVED_STR_, args, arg);
	tie_combo_box_to_history(text, watch_history_filter);

	XtAddCallback(dialog, ((char *)&_XmStrings[_ARGS_]) , ImmediateHelpCB, __null );
	XtAddCallback(dialog, ((char *)&_XmStrings[_ARGS_]) , NewWatchpointDCB, 
		      XtPointer(text));

    }

    manage_and_raise(dialog);
}

__END_METHOD_CODE__


	METHOD SourceView!DeleteInfoCB
		CALLS
		removeHandler : _SYSTEM_OR_USER_,
		recording : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		EditBreakpointCommandsCB : SourceView,
		addHandler : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 13
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 1
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 20
			LT 0
			METHOD DeleteInfoCB
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:13 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:1 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:20 LT:0 METHOD:DeleteInfoCB METHODID:41 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:1 
		;


#ID 41-DeleteInfoCB

__BEGIN_METHOD_CODE__

SourceView::DeleteInfoCB(Widget, XtPointer client_data, 
			      XtPointer call_data)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    gdb->removeHandler(Recording, RecordingHP, (void *)info);
    if(gdb->recording())
	gdb_command(_REMOVED_STR_);	 

    if(XtIsManaged((( info->editor )->core.parent) ))
    {
	 
	 
	EditBreakpointCommandsCB(source_text_w, client_data, call_data);

	 
	gdb->addHandler(Recording, RecordingHP, XtPointer(0));
    }

    delete info;
}

__END_METHOD_CODE__


	METHOD SourceView!update_properties_panels
		CALLS
		update_properties_panel : SourceView



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 0
			METHOD update_properties_panels
			METHODID 120
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:0 METHOD:update_properties_panels METHODID:120 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 120-update_properties_panels

__BEGIN_METHOD_CODE__

SourceView::update_properties_panels()
{
     
    BreakpointPropertiesInfo *info = BreakpointPropertiesInfo::all;
    while(info != 0)
    {
	update_properties_panel(info);
	info = info->next;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!move_breakpoint_properties
		CALLS
		size : _SYSTEM_OR_USER_,
		sort : _SYSTEM_OR_USER_,
		update_properties_panels : SourceView



		METRICS
			ARRAYOP 2
			ASS 9
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 1
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 25
			LT 1
			METHOD move_breakpoint_properties
			METHODID 121
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 1
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:9 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:1 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:25 LT:1 METHOD:move_breakpoint_properties METHODID:121 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:1 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 121-move_breakpoint_properties

__BEGIN_METHOD_CODE__

SourceView::move_breakpoint_properties(int old_bp, int new_bp)
{
     
    bool update = false;
    BreakpointPropertiesInfo *info = BreakpointPropertiesInfo::all;
    while(info != 0)
    {
	bool changed = false;
	for(int i = 0; i < info->nrs.size(); i++)
	{
	    if(info->nrs[_ARGS_] == old_bp)
	    {
		info->nrs[_ARGS_] = new_bp;
		update = changed = true;
	    }
	}

	if(changed)
	    sort(info->nrs);	 

	info = info->next;
    }

    if(update)
	update_properties_panels();
}

__END_METHOD_CODE__


	METHOD SourceView!copy_breakpoint_properties
		CALLS
		size : _SYSTEM_OR_USER_,
		update_properties_panels : SourceView



		METRICS
			ARRAYOP 1
			ASS 7
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 1
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 22
			LT 1
			METHOD copy_breakpoint_properties
			METHODID 122
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 1
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:7 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:1 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:22 LT:1 METHOD:copy_breakpoint_properties METHODID:122 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:1 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 122-copy_breakpoint_properties

__BEGIN_METHOD_CODE__

SourceView::copy_breakpoint_properties(int old_bp, int new_bp)
{
     
    bool update = false;
    BreakpointPropertiesInfo *info = BreakpointPropertiesInfo::all;
    while(info != 0)
    {
	for(int i = 0; i < info->nrs.size(); i++)
	{
	    if(info->nrs[_ARGS_] == old_bp)
	    {
		info->nrs += new_bp;
		update = true;
		break;
	    }
	}

	info = info->next;
    }

    if(update)
	update_properties_panels();
}

__END_METHOD_CODE__


	METHOD SourceView!update_properties_panel
		CALLS
		size : _SYSTEM_OR_USER_,
		next_breakpoint_number : SourceView,
		get : BreakPointMap,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		get : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		set_label : _SYSTEM_OR_USER_,
		string : string,
		xmstring : MString,
		commands : BreakPoint,
		size : _SYSTEM_OR_USER_,
		commands : BreakPoint,
		strip_auto_command_prefix : _SYSTEM_OR_USER_,
		atoi : _SYSTEM_OR_USER_,
		ignore_count : BreakPoint,
		itostring : _SYSTEM_OR_USER_,
		ignore_count : BreakPoint,
		condition : BreakPoint,
		condition : BreakPoint,
		size : _SYSTEM_OR_USER_,
		get : BreakPointMap,
		enabled : _SYSTEM_OR_USER_,
		can_disable : GDBAgent,
		can_enable : GDBAgent,
		dispo : BreakPoint,
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		has_ignore_command : GDBAgent,
		set_sensitive : _SYSTEM_OR_USER_,
		has_ignore_command : GDBAgent,
		set_sensitive : _SYSTEM_OR_USER_,
		has_breakpoint_conditions : GDBAgent,
		set_sensitive : _SYSTEM_OR_USER_,
		has_breakpoint_conditions : GDBAgent,
		type : _SYSTEM_OR_USER_,
		recording : GDBAgent,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		recording : GDBAgent,
		set_sensitive : _SYSTEM_OR_USER_,
		set_sensitive : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		set_bp_commands : SourceView,
		commands : BreakPoint



		METRICS
			bp_map REFERRED 3 TIMES,
			ARRAYOP 12
			ASS 48
			AVVARLEN 6
			CALLEDN 55
			CLASS SourceView
			CLASSID 107
			CYCLO 28
			DOTS 16
			EQTEST 9
			EXPRORCALL 100
			GE 1
			GT 3
			IN 0
			INDR 71
			LE 0
			LOC 183
			LT 6
			METHOD update_properties_panel
			METHODID 119
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 6
			RETPOINT 0
			SCOPEOP 0
			STMNT 82
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:12 ASS:48 AVVARLEN:6 CALLEDN:55 CLASS:SourceView CLASSID:107 CYCLO:28 DOTS:16 EQTEST:9 EXPRORCALL:100 GE:1 GT:3 IN:0 INDR:71 LE:0 LOC:183 LT:6 METHOD:update_properties_panel METHODID:119 MMINUS:1 OUT:0 PARNUM:1 PPLUS:6 RETPOINT:0 SCOPEOP:0 STMNT:82 TERNINSTR:0 USEDVARS:1 
		;


#ID 119-update_properties_panel

__BEGIN_METHOD_CODE__

SourceView::update_properties_panel(BreakpointPropertiesInfo *info)
{
     
    bool future = false;
    int i;
    for(i = 0; i < info->nrs.size(); i++)
    {
	if(info->nrs[_ARGS_] >= next_breakpoint_number())
	{
	     
	    future = true;
	    continue;
	}

	BreakPoint *bp = bp_map.get(info->nrs[_ARGS_]);
	if(bp == 0)
	{
	     
	    info->nrs[_ARGS_] = 0;
	}
    }
    IntArray new_nrs;

    for(i = 0; i < info->nrs.size(); i++)
    {
	if(info->nrs[_ARGS_] != 0)
	    new_nrs += info->nrs[_ARGS_];
    }

    info->nrs = new_nrs;

    if(info->nrs.size() == 0)
    {
	 
	XtUnmanageChild(info->dialog);
	return;
    }

    if(future)
	return;			 

     
    BreakPoint *bp = bp_map.get(info->nrs[_ARGS_]);

     
    string what;
    switch(bp->type())
    {
    case BREAKPOINT:
	what = _REMOVED_STR_;
	break;

    case WATCHPOINT:
	what = _REMOVED_STR_;
	break;
    }

    string label;
    if(info->nrs.size() == 1)
    {
	label = what + _REMOVED_STR_ + itostring(info->nrs[_ARGS_]);
    }
    else
    {
	label = what + _REMOVED_STR_;
	for(i = 0; i < info->nrs.size(); i++)
	{
	    if(i > 0)
	    {
		if(info->nrs.size() == 2)
		    label += _REMOVED_STR_;
		else if(i == info->nrs.size() - 1)
		    label += _REMOVED_STR_;
		else
		    label += _REMOVED_STR_;
	    }
	    label += itostring(info->nrs[_ARGS_]);
	}
    }

    set_label(info->title, label);

    MString title = string(_REMOVED_STR_ ) + _REMOVED_STR_ + label;
    XtVaSetValues(info->dialog, ((char *)&_XmStrings[_ARGS_]) ,
		  title.xmstring(), __null );

     
    string commands = _REMOVED_STR_;
    for(i = 0; i < bp->commands().size(); i++)
    {
	string cmd = bp->commands()[_ARGS_];
	strip_auto_command_prefix(cmd);
	commands += cmd + _REMOVED_STR_;
    }

    XmTextSetString(info->editor, commands);

    if(info->ignore_spin_update > 0)
    {
	info->ignore_spin_update--;
    }
    else
    {
	bool lock = info->spin_locked;
	info->spin_locked = true;







	{
	    String old_ignore = XmTextFieldGetString(info->ignore);
	    if(atoi(old_ignore) != bp->ignore_count())
	    {
		string ignore = itostring(bp->ignore_count());
		if(ignore == _REMOVED_STR_)
		    ignore = _REMOVED_STR_;

		XmTextFieldSetString(info->ignore, (String)ignore);
	    }
	    XtFree(old_ignore);
	}
	info->spin_locked = lock;
    }

     
     
    String old_condition = XmTextFieldGetString(info->condition);
    if(bp->condition() != old_condition)
    {
	XmTextFieldSetString(info->condition, (String)bp->condition());
    }
    XtFree(old_condition);

    bool can_enable   = false;
    bool can_disable  = false;
    bool can_maketemp = false;
    bool can_print    = false;

    for(i = 0; i < info->nrs.size(); i++)
    {
	BreakPoint *bp = bp_map.get(info->nrs[_ARGS_]);
	if(bp->enabled())
	    can_disable = gdb->can_disable();
	else
	    can_enable  = gdb->can_enable();

	if(bp->dispo() != BPDEL)
	    can_maketemp = (gdb->type() == GDB);

	if(bp->type() == WATCHPOINT)
	    can_print = true;
    }

    if(can_print)
	XtManageChild(info->print);
    else
	XtUnmanageChild(info->print);

    set_sensitive(info->enable,  can_enable);
    set_sensitive(info->disable, can_disable);
    set_sensitive(info->temp,    can_maketemp);

    set_sensitive(info->ignore,           gdb->has_ignore_command());
    set_sensitive((( info->ignore )->core.parent) , gdb->has_ignore_command());

    set_sensitive(info->condition,           gdb->has_breakpoint_conditions());
    set_sensitive((( info->condition )->core.parent) , gdb->has_breakpoint_conditions());

    bool can_record = gdb->type() == GDB && !gdb->recording();
    set_sensitive(info->record,    can_record);
    set_sensitive(info->end,       gdb->recording());
    set_sensitive(info->edit,      can_record);
    set_sensitive(info->editor,    can_record);

    if(info->sync_commands)
    {
	for(i = 1; i < info->nrs.size(); i++)
	    set_bp_commands(info->nrs[_ARGS_], bp->commands());
	info->sync_commands = false;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!EditBreakpointPropertiesCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		edit_bps : SourceView



		METRICS
			breakpoint_list_w REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 15
			LT 0
			METHOD EditBreakpointPropertiesCB
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:15 LT:0 METHOD:EditBreakpointPropertiesCB METHODID:30 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 30-EditBreakpointPropertiesCB

__BEGIN_METHOD_CODE__

SourceView::EditBreakpointPropertiesCB(Widget, 
					    XtPointer client_data, 
					    XtPointer)
{
    IntArray breakpoint_nrs;
    if(client_data == 0)
    {
	if(breakpoint_list_w == 0)
	    return;
	getDisplayNumbers(breakpoint_list_w, breakpoint_nrs);
    }
    else
    {
	breakpoint_nrs += *((int *)client_data);
    }

    edit_bps(breakpoint_nrs);
}

__END_METHOD_CODE__


	METHOD SourceView!edit_bps
		CALLS
		size : _SYSTEM_OR_USER_,
		sort : _SYSTEM_OR_USER_,
		get : BreakPointMap,
		Widget : _SYSTEM_OR_USER_,
		register_shell : Delay,
		MMcreatePanel : _SYSTEM_OR_USER_,
		MMaddCallbacks : _SYSTEM_OR_USER_,
		update_properties_panel : SourceView,
		InstallButtonTips : _SYSTEM_OR_USER_,
		MMadjustPanel : _SYSTEM_OR_USER_,
		tie_combo_box_to_history : _SYSTEM_OR_USER_,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			bp_map REFERRED 1 TIMES,
			ARRAYOP 27
			ASS 30
			AVVARLEN 9
			CALLEDN 12
			CLASS SourceView
			CLASSID 107
			CYCLO 7
			DOTS 13
			EQTEST 3
			EXPRORCALL 116
			GE 0
			GT 0
			IN 0
			INDR 42
			LE 1
			LOC 137
			LT 1
			METHOD edit_bps
			METHODID 198
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 4
			RETPOINT 0
			SCOPEOP 1
			STMNT 53
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:27 ASS:30 AVVARLEN:9 CALLEDN:12 CLASS:SourceView CLASSID:107 CYCLO:7 DOTS:13 EQTEST:3 EXPRORCALL:116 GE:0 GT:0 IN:0 INDR:42 LE:1 LOC:137 LT:1 METHOD:edit_bps METHODID:198 MMINUS:0 OUT:0 PARNUM:2 PPLUS:4 RETPOINT:0 SCOPEOP:1 STMNT:53 TERNINSTR:0 USEDVARS:2 
		;


#ID 198-edit_bps

__BEGIN_METHOD_CODE__

SourceView::edit_bps(IntArray& breakpoint_nrs, Widget  )
{
    if(breakpoint_nrs.size() == 0)
	return;			 

    sort(breakpoint_nrs);

     
    BreakPoint *bp = bp_map.get(breakpoint_nrs[_ARGS_]);
    if(bp == 0)
	return;			 

    BreakpointPropertiesInfo *info = new BreakpointPropertiesInfo;
    info->spin_locked = true;
    info->nrs = breakpoint_nrs;

    Arg args[_ARGS_];
    int arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0  ) )) ; arg++;
    info->dialog = 
	verify(XmCreatePromptDialog(source_text_w,
				    _REMOVED_STR_,
				    args, arg));
    XtVaSetValues(info->dialog, ((char *)&_XmStrings[_ARGS_]) , Widget(0), __null );


     
    Widget text = XmSelectionBoxGetChild(info->dialog, XmDIALOG_TEXT);
    XtUnmanageChild(text);
    Widget old_label = 
	XmSelectionBoxGetChild(info->dialog, XmDIALOG_SELECTION_LABEL);
    XtUnmanageChild(old_label);

    Delay::register_shell(info->dialog);

    if(lesstif_version <= 79)
	XtUnmanageChild(XmSelectionBoxGetChild(info->dialog, 
					       XmDIALOG_APPLY_BUTTON));
    XtUnmanageChild(XmSelectionBoxGetChild(info->dialog, 
					   XmDIALOG_CANCEL_BUTTON));

    MMDesc commands_menu[] =
    {
	{ _REMOVED_STR_, MMPush, 	  { RecordBreakpointCommandsCB, XtPointer(info) }, 0, &info->record },

	{ _REMOVED_STR_,    MMPush | MMInsensitive, 	  { EndBreakpointCommandsCB, XtPointer(info) }, 0, &info->end },

	{ _REMOVED_STR_,   MMPush | MMInsensitive, 	  { EditBreakpointCommandsCB, XtPointer(info) }, 0, &info->edit },

	{ __null  } 
    };

    MMDesc enabled_menu[] = 
    {
	{ _REMOVED_STR_,    MMPush,
	  { LookupBreakpointCB,    XtPointer(info) }, 0, &info->lookup },
	{ _REMOVED_STR_,     MMPush,
	  { PrintWatchpointCB,     XtPointer(info) }, 0, &info->print },
	{ _REMOVED_STR_,    MMPush,
	  { EnableBreakpointsCB,   XtPointer(info) }, 0, &info->enable },
	{ _REMOVED_STR_,   MMPush,
	  { DisableBreakpointsCB,  XtPointer(info) }, 0, &info->disable },
	{ _REMOVED_STR_, MMPush,
	  { MakeBreakpointsTempCB, XtPointer(info) }, 0, &info->temp },
	{ _REMOVED_STR_,    MMPush | MMHelp,
	  { DeleteBreakpointsCB,   XtPointer(info) }, 0, &info->del },
	{ __null  } 
    };

    if(app_data.flat_dialog_buttons)
    {
	for(MMDesc *item = enabled_menu; item != 0 && item->name != 0; item++)
	{
	    if((item->type & MMTypeMask) == MMPush)
		item->type = (MMFlatPush | (item->type & ~MMTypeMask));
	}
    }

    MMDesc panel_menu[] = 
    {
	{ _REMOVED_STR_, MMButtonPanel, { __null  } , enabled_menu },
	{ _REMOVED_STR_, MMComboBox,
	  { SetBreakpointConditionCB, XtPointer(info) }, 0, &info->condition },
	{ _REMOVED_STR_, MMSpinBox,
	  { SetBreakpointIgnoreCountCB, XtPointer(info) }, 0, &info->ignore },
	{ _REMOVED_STR_, MMButtonPanel, { __null  } , commands_menu },
	{ __null  } 
    };

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(  XmHORIZONTAL ) )) ; arg++;
    Widget form = XmCreateRowColumn(info->dialog, _REMOVED_STR_, args, arg);
    XtManageChild(form);

    Widget panel = MMcreatePanel(form, _REMOVED_STR_, panel_menu);

    XtVaSetValues(panel,
		  ((char *)&_XmStrings[_ARGS_]) ,    0,
		  ((char *)&_XmStrings[_ARGS_]) ,   0,
		  __null );

    Widget buttons = (( info->lookup )->core.parent) ;
    XtVaSetValues(buttons,
		  ((char *)&_XmStrings[_ARGS_]) ,     0, 
		  ((char *)&_XmStrings[_ARGS_]) ,    0, 
		  ((char*)&XtStrings[_ARGS_])  ,     0,
		  ((char *)&_XmStrings[_ARGS_]) , 0, 
		  ((char *)&_XmStrings[_ARGS_]) ,         0,
		  __null );

    arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  XmMULTI_LINE_EDIT ) )) ; arg++;
    info->editor = XmCreateScrolledText(form, _REMOVED_STR_, args, arg);
    XtUnmanageChild((( info->editor )->core.parent) );
    XtManageChild(info->editor);

    info->title = panel_menu[_ARGS_].label;
    MMaddCallbacks(panel_menu, XtPointer(info));

    update_properties_panel(info);
    InstallButtonTips(panel);

    MMadjustPanel(panel_menu);

    XtAddCallback(info->dialog, ((char *)&_XmStrings[_ARGS_]) ,
		  UnmanageThisCB, info->dialog);
    XtAddCallback(info->dialog, ((char *)&_XmStrings[_ARGS_]) ,    
		  ImmediateHelpCB, __null );
    XtAddCallback(info->dialog, ((char *)&_XmStrings[_ARGS_]) ,
		  DestroyThisCB, (( info->dialog )->core.parent) );
    XtAddCallback(info->dialog, ((char*)&XtStrings[_ARGS_])  ,
		  DeleteInfoCB,  XtPointer(info));

    tie_combo_box_to_history(info->condition, cond_filter);

    manage_and_raise(info->dialog);
    info->spin_locked = false;
}

__END_METHOD_CODE__


	METHOD SourceView!SetBreakpointConditionCB
		CALLS
		set_bps_cond : SourceView



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 22
			LT 0
			METHOD SetBreakpointConditionCB
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:22 LT:0 METHOD:SetBreakpointConditionCB METHODID:32 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-SetBreakpointConditionCB

__BEGIN_METHOD_CODE__

SourceView::SetBreakpointConditionCB(Widget w,
					  XtPointer client_data, 
					  XtPointer call_data)
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct *)call_data;
    switch(cbs->reason)
    {
    case XmCR_ACTIVATE:		 
    case XmCR_SINGLE_SELECT:	 
    case XmCR_MULTIPLE_SELECT:
    case XmCR_EXTENDED_SELECT:
    case XmCR_BROWSE_SELECT:
	break;

    default:
	return;			 
    }

    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    String cond = XmTextFieldGetString(info->condition);
    set_bps_cond(info->nrs, cond, w);
    XtFree(cond);
}

__END_METHOD_CODE__


	METHOD SourceView!SetBreakpointIgnoreCountCB

		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 23
			LT 0
			METHOD SetBreakpointIgnoreCountCB
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:23 LT:0 METHOD:SetBreakpointIgnoreCountCB METHODID:31 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-SetBreakpointIgnoreCountCB

__BEGIN_METHOD_CODE__

SourceView::SetBreakpointIgnoreCountCB(Widget w,
					    XtPointer client_data, 
					    XtPointer call_data)
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct *)call_data;
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    if(info->spin_locked)
	return;			 

    int delay = 500;		 
    if(cbs->reason == XmCR_ACTIVATE)
	delay = 0;

    if(info->timer != 0)
    {
	XtRemoveTimeOut(info->timer);
	info->timer = 0;
    }

    info->timer = XtAppAddTimeOut(XtWidgetToApplicationContext(w),
				  delay,
				  SetBreakpointIgnoreCountNowCB, 
				  client_data);
}

__END_METHOD_CODE__


	METHOD SourceView!SetBreakpointIgnoreCountNowCB
		CALLS
		atoi : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		ignore_command : GDBAgent,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 16
			LT 1
			METHOD SetBreakpointIgnoreCountNowCB
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:16 LT:1 METHOD:SetBreakpointIgnoreCountNowCB METHODID:40 MMINUS:0 OUT:0 PARNUM:2 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-SetBreakpointIgnoreCountNowCB

__BEGIN_METHOD_CODE__

SourceView::SetBreakpointIgnoreCountNowCB(XtPointer client_data, 
					       XtIntervalId *id)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;
    (void) id;			 
    info->timer = 0;

    String _count = XmTextFieldGetString(info->ignore);
    int count = atoi(_count);
    XtFree(_count);

    for(int i = 0; i < info->nrs.size(); i++)
    {
	gdb_command(gdb->ignore_command(itostring(info->nrs[_ARGS_]), count));
	info->ignore_spin_update++;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!MakeBreakpointsTempCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		numbers : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD MakeBreakpointsTempCB
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:MakeBreakpointsTempCB METHODID:35 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-MakeBreakpointsTempCB

__BEGIN_METHOD_CODE__

SourceView::MakeBreakpointsTempCB(Widget, XtPointer client_data, 
				       XtPointer)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    gdb_command(_REMOVED_STR_ + numbers(info->nrs));
}

__END_METHOD_CODE__


	METHOD SourceView!DeleteBreakpointsCB
		CALLS
		delete_bps : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD DeleteBreakpointsCB
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:DeleteBreakpointsCB METHODID:36 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-DeleteBreakpointsCB

__BEGIN_METHOD_CODE__

SourceView::DeleteBreakpointsCB(Widget, XtPointer client_data, XtPointer)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    delete_bps(info->nrs);
}

__END_METHOD_CODE__


	METHOD SourceView!EnableBreakpointsCB
		CALLS
		enable_bps : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD EnableBreakpointsCB
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:EnableBreakpointsCB METHODID:33 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-EnableBreakpointsCB

__BEGIN_METHOD_CODE__

SourceView::EnableBreakpointsCB(Widget, XtPointer client_data, XtPointer)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    enable_bps(info->nrs);
}

__END_METHOD_CODE__


	METHOD SourceView!DisableBreakpointsCB
		CALLS
		disable_bps : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD DisableBreakpointsCB
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:DisableBreakpointsCB METHODID:34 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-DisableBreakpointsCB

__BEGIN_METHOD_CODE__

SourceView::DisableBreakpointsCB(Widget, XtPointer client_data, XtPointer)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    disable_bps(info->nrs);
}

__END_METHOD_CODE__


	METHOD SourceView!RecordBreakpointCommandsCB
		CALLS
		removeHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 8
			LT 0
			METHOD RecordBreakpointCommandsCB
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:8 LT:0 METHOD:RecordBreakpointCommandsCB METHODID:37 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-RecordBreakpointCommandsCB

__BEGIN_METHOD_CODE__

SourceView::RecordBreakpointCommandsCB(Widget w,
					    XtPointer client_data, 
					    XtPointer)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    gdb->removeHandler(Recording, RecordingHP, (void *)info);
    gdb->addHandler(Recording, RecordingHP, (void *)info);
    gdb_command(_REMOVED_STR_ + itostring(info->nrs[_ARGS_]), w);
}

__END_METHOD_CODE__


	METHOD SourceView!EndBreakpointCommandsCB
		CALLS
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD EndBreakpointCommandsCB
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:EndBreakpointCommandsCB METHODID:38 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-EndBreakpointCommandsCB

__BEGIN_METHOD_CODE__

SourceView::EndBreakpointCommandsCB(Widget w, XtPointer, XtPointer)
{
    gdb_command(_REMOVED_STR_, w);
}

__END_METHOD_CODE__


	METHOD SourceView!RefreshBreakpointsHP
		CALLS
		bool : _SYSTEM_OR_USER_,
		recording : GDBAgent,
		gdb_question : _SYSTEM_OR_USER_,
		process_info_bp : SourceView,
		removeHandler : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 14
			LT 0
			METHOD RefreshBreakpointsHP
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:14 LT:0 METHOD:RefreshBreakpointsHP METHODID:42 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 42-RefreshBreakpointsHP

__BEGIN_METHOD_CODE__

SourceView::RefreshBreakpointsHP(Agent *, void *, void *call_data)
{
    bool gdb_ready = bool(call_data);
    if(gdb_ready && !gdb->recording())
    {
	string breakpoints = gdb_question(_REMOVED_STR_);
	if(breakpoints != NO_GDB_ANSWER)
	{
	    process_info_bp(breakpoints);

	     
	    gdb->removeHandler(ReadyForQuestion, RefreshBreakpointsHP);
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!RecordingHP
		CALLS
		bool : _SYSTEM_OR_USER_,
		update_properties_panels : SourceView,
		update_properties_panel : SourceView,
		removeHandler : _SYSTEM_OR_USER_,
		addHandler : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 26
			LT 0
			METHOD RecordingHP
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:26 LT:0 METHOD:RecordingHP METHODID:43 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 43-RecordingHP

__BEGIN_METHOD_CODE__

SourceView::RecordingHP(Agent *, void *client_data, void *call_data)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;
    bool recording = bool(call_data);

     
    if(info == 0)
	update_properties_panels();
    else
	update_properties_panel(info);

    if(!recording)
    {
	 
	gdb->removeHandler(Recording, RecordingHP, (void *)info);

	 
	gdb->addHandler(ReadyForQuestion, RefreshBreakpointsHP);

	if(info != 0)
	{
	     
	    info->sync_commands = true;
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!set_bp_commands
		CALLS
		size : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		number : BreakPoint,
		size : _SYSTEM_OR_USER_,
		commands : BreakPoint,
		size : _SYSTEM_OR_USER_,
		commands : BreakPoint,
		size : _SYSTEM_OR_USER_,
		commands : BreakPoint,
		strip_auto_command_prefix : _SYSTEM_OR_USER_,
		strip_auto_command_prefix : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 2 TIMES,
			ARRAYOP 5
			ASS 12
			AVVARLEN 6
			CALLEDN 17
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 7
			EQTEST 3
			EXPRORCALL 26
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 38
			LT 3
			METHOD set_bp_commands
			METHODID 203
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 22
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:5 ASS:12 AVVARLEN:6 CALLEDN:17 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:7 EQTEST:3 EXPRORCALL:26 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:38 LT:3 METHOD:set_bp_commands METHODID:203 MMINUS:0 OUT:0 PARNUM:3 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:22 TERNINSTR:0 USEDVARS:1 
		;


#ID 203-set_bp_commands

__BEGIN_METHOD_CODE__

SourceView::set_bp_commands(IntArray& nrs, const StringArray& commands,
				 Widget origin)
{
    for(int i = 0; i < nrs.size(); i++)
    {
	 
	MapRef ref;
	BreakPoint *bp = 0;
	for(bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
	{
	    if(bp->number() == nrs[_ARGS_])
		break;
	}
	if(bp == 0)
	    continue;		 

	if(commands.size() == bp->commands().size())
	{
	    bool same_commands = true;
	    for(int j = 0; same_commands && j < bp->commands().size(); j++)
	    {
		string c1 = bp->commands()[_ARGS_];
		strip_auto_command_prefix(c1);
		string c2 = commands[_ARGS_];
		strip_auto_command_prefix(c2);

		if(c1 != c2)
		    same_commands = false;
	    }

	    if(same_commands)
		continue;	 
	}

	gdb_command(_REMOVED_STR_ + itostring(nrs[_ARGS_]), origin);
	for(int j = 0; j < commands.size(); j++)
	    gdb_command(commands[_ARGS_], origin);
	gdb_command(_REMOVED_STR_, origin);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!EditBreakpointCommandsCB
		CALLS
		MString : MString,
		set_label : _SYSTEM_OR_USER_,
		contains : string,
		after : string,
		set_bp_commands : SourceView,
		MString : MString,
		set_label : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 6
			EQTEST 0
			EXPRORCALL 24
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 33
			LT 0
			METHOD EditBreakpointCommandsCB
			METHODID 39
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:6 EQTEST:0 EXPRORCALL:24 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:33 LT:0 METHOD:EditBreakpointCommandsCB METHODID:39 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 39-EditBreakpointCommandsCB

__BEGIN_METHOD_CODE__

SourceView::EditBreakpointCommandsCB(Widget w,
					  XtPointer client_data, 
					  XtPointer)
{
    BreakpointPropertiesInfo *info = 
	(BreakpointPropertiesInfo *)client_data;

    if(XtIsManaged((( info->editor )->core.parent) ))
    {
	XtUnmanageChild((( info->editor )->core.parent) );
	MString label = _REMOVED_STR_ + MString(_REMOVED_STR_, _REMOVED_STR_);
	set_label(info->edit, label);

	String _commands = XmTextGetString(info->editor);
	string cmd = _commands;
	XtFree(_commands);

	if(!cmd.contains('\n', -1))
	    cmd += '\n';
	StringArray commands;
	while(cmd != _REMOVED_STR_)
	{
	    string c = cmd.before('\n');
	    if(c != _REMOVED_STR_)
		commands += c;
	    cmd = cmd.after('\n');
	}
	set_bp_commands(info->nrs, commands, w);
    }
    else
    {
	XtManageChild((( info->editor )->core.parent) );
	MString label = _REMOVED_STR_ + MString(_REMOVED_STR_, _REMOVED_STR_);
	set_label(info->edit, label);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!edit_breakpoint_properties
		CALLS
		EditBreakpointPropertiesCB : SourceView



		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 13
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD edit_breakpoint_properties
			METHODID 239
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:13 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:edit_breakpoint_properties METHODID:239 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 239-edit_breakpoint_properties

__BEGIN_METHOD_CODE__

SourceView::edit_breakpoint_properties(int bp_nr)
{
    static int n;
    n = bp_nr;
    EditBreakpointPropertiesCB(source_text_w, XtPointer(&n), 0);
}

__END_METHOD_CODE__


	METHOD SourceView!BreakpointCmdCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		size : IntArray,
		delete_bps : SourceView,
		enable_bps : SourceView,
		disable_bps : SourceView



		METRICS
			breakpoint_list_w REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 1
			EQTEST 5
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 0
			METHOD BreakpointCmdCB
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:1 EQTEST:5 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:0 METHOD:BreakpointCmdCB METHODID:29 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:1 
		;


#ID 29-BreakpointCmdCB

__BEGIN_METHOD_CODE__

SourceView::BreakpointCmdCB(Widget,
				 XtPointer client_data,
				 XtPointer)
{
    if(breakpoint_list_w == 0)
	return;

    IntArray nrs;
    getDisplayNumbers(breakpoint_list_w, nrs);
    if(nrs.size() == 0)
        return;

    string cmd = (String)client_data;

    if(cmd == _REMOVED_STR_)
        delete_bps(nrs);
    else if(cmd == _REMOVED_STR_)
	enable_bps(nrs);
    else if(cmd == _REMOVED_STR_)
	disable_bps(nrs);
}

__END_METHOD_CODE__


	METHOD SourceView!LookupBreakpointCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		size : IntArray,
		get : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		lookup : SourceView,
		itostring : _SYSTEM_OR_USER_,
		lookup : SourceView,
		expr : _SYSTEM_OR_USER_



		METRICS
			breakpoint_list_w REFERRED 2 TIMES,
			bp_map REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 3
			AVVARLEN 11
			CALLEDN 8
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 2
			EQTEST 3
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 34
			LT 1
			METHOD LookupBreakpointCB
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:11 CALLEDN:8 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:2 EQTEST:3 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:34 LT:1 METHOD:LookupBreakpointCB METHODID:27 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:2 
		;


#ID 27-LookupBreakpointCB

__BEGIN_METHOD_CODE__

SourceView::LookupBreakpointCB(Widget, XtPointer client_data, XtPointer)
{
    if(breakpoint_list_w == 0)
	return;

    IntArray breakpoint_nrs;

    if(client_data == 0)
    {
	getDisplayNumbers(breakpoint_list_w, breakpoint_nrs);
    }
    else
    {
	BreakpointPropertiesInfo *info = 
	    (BreakpointPropertiesInfo *)client_data;
	breakpoint_nrs = info->nrs;
    }
    if(breakpoint_nrs.size() < 1)
	return;

    BreakPoint *bp = bp_map.get(breakpoint_nrs[_ARGS_]);
    if(bp == 0)
	return;

    switch(bp->type())
    {
    case BREAKPOINT:
	lookup(_REMOVED_STR_ + itostring(breakpoint_nrs[_ARGS_]));
	break;

    case WATCHPOINT:
	lookup(bp->expr());
	break;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!PrintWatchpointCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		size : IntArray,
		get : BreakPointMap,
		type : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		print_command : GDBAgent,
		expr : _SYSTEM_OR_USER_



		METRICS
			breakpoint_list_w REFERRED 2 TIMES,
			bp_map REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 3
			AVVARLEN 11
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 2
			EQTEST 3
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 34
			LT 1
			METHOD PrintWatchpointCB
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:11 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:2 EQTEST:3 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:34 LT:1 METHOD:PrintWatchpointCB METHODID:28 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:2 
		;


#ID 28-PrintWatchpointCB

__BEGIN_METHOD_CODE__

SourceView::PrintWatchpointCB(Widget w, XtPointer client_data, XtPointer)
{
    if(breakpoint_list_w == 0)
	return;

    IntArray breakpoint_nrs;

    if(client_data == 0)
    {
	getDisplayNumbers(breakpoint_list_w, breakpoint_nrs);
    }
    else
    {
	BreakpointPropertiesInfo *info = 
	    (BreakpointPropertiesInfo *)client_data;
	breakpoint_nrs = info->nrs;
    }
    if(breakpoint_nrs.size() < 1)
	return;

    BreakPoint *bp = bp_map.get(breakpoint_nrs[_ARGS_]);
    if(bp == 0)
	return;

    switch(bp->type())
    {
    case BREAKPOINT:
	 
	break;

    case WATCHPOINT:
	gdb_command(gdb->print_command(bp->expr(), false), w);
	break;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!jdb_breakpoint
		CALLS
		index : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		get_positive_nr : _SYSTEM_OR_USER_,
		after : string,
		contains : string,
		first : BreakPointMap,
		next : BreakPointMap,
		bp_matches : SourceView,
		number : BreakPoint



		METRICS
			bp_map REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 6
			CALLEDN 9
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 6
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 1
			LOC 18
			LT 2
			METHOD jdb_breakpoint
			METHODID 143
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:6 CALLEDN:9 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:6 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:1 LE:1 LOC:18 LT:2 METHOD:jdb_breakpoint METHODID:143 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 143-jdb_breakpoint

__BEGIN_METHOD_CODE__

SourceView::jdb_breakpoint(const string& bp_info)
{
    int colon = bp_info.index(':');
    if(colon < 0)
	return -1;		 

    string class_name = bp_info.before(colon);
    strip_leading_space(class_name);
    int line = get_positive_nr(bp_info.after(colon));
    if(line <= 0 || class_name.contains(' '))
	return -1;		 

    MapRef ref;
    for(BreakPoint* bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
	if(bp_matches(bp, class_name, line))
	    return bp->number();  

    return 0;		        
}

__END_METHOD_CODE__


	METHOD SourceView!process_breakpoints
		CALLS
		strip_space : _SYSTEM_OR_USER_,
		has_watch_command : GDBAgent,
		freq : else,
		split : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		jdb_breakpoint : SourceView,
		itostring : _SYSTEM_OR_USER_,
		prepend : string,
		at : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		number : BreakPoint,
		selected : _SYSTEM_OR_USER_,
		strip_auto_command_prefix : _SYSTEM_OR_USER_,
		setup_where_line : SourceView,
		setLabelList : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		UpdateBreakpointButtonsCB : SourceView



		METRICS
			breakpoint_list_w REFERRED 3 TIMES,
			bp_map REFERRED 2 TIMES,
			ARRAYOP 7
			ASS 16
			AVVARLEN 11
			CALLEDN 19
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 5
			EQTEST 6
			EXPRORCALL 31
			GE 0
			GT 4
			IN 0
			INDR 5
			LE 0
			LOC 67
			LT 1
			METHOD process_breakpoints
			METHODID 156
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 29
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:7 ASS:16 AVVARLEN:11 CALLEDN:19 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:5 EQTEST:6 EXPRORCALL:31 GE:0 GT:4 IN:0 INDR:5 LE:0 LOC:67 LT:1 METHOD:process_breakpoints METHODID:156 MMINUS:1 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:29 TERNINSTR:0 USEDVARS:2 
		;


#ID 156-process_breakpoints

__BEGIN_METHOD_CODE__

SourceView::process_breakpoints(string& info_breakpoints_output)
{
    if(breakpoint_list_w == 0)
	return;

    strip_space(info_breakpoints_output);
    if(info_breakpoints_output == _REMOVED_STR_)
    {
	if(gdb->has_watch_command())
	    info_breakpoints_output = _REMOVED_STR_;
	else
	    info_breakpoints_output = _REMOVED_STR_;
    }

    int count = info_breakpoints_output.freq('\n') + 1;

    string *breakpoint_list = new string[_ARGS_];
    bool *selected          = new bool[_ARGS_];

    split(info_breakpoints_output, breakpoint_list, count, '\n');

    while(count > 0 && breakpoint_list[_ARGS_] == _REMOVED_STR_)
	count--;

    bool select = false;
    for(int i = 0; i < count; i++)
    {
	string& bp_info = breakpoint_list[_ARGS_];
	if(gdb->type() == JDB)
	{
	     
	    int bp_nr = jdb_breakpoint(bp_info);
	    if(bp_nr > 0)
	    {
		string s = itostring(bp_nr) + _REMOVED_STR_;
		bp_info.prepend(s.at(0, 4));
	    }
	}

	 
	int bp_number = get_positive_nr(bp_info);
	if(bp_number > 0)
	{
	    MapRef ref;
	    for(BreakPoint* bp = bp_map.first(ref);
		 bp != 0;
		 bp = bp_map.next(ref))
	    {
		if(bp->number() == bp_number)
		{
		    select = bp->selected();
		    break;
		}
	    }
	}

	selected[_ARGS_] = select;
	strip_auto_command_prefix(bp_info);
	setup_where_line(bp_info);
    }

    setLabelList(breakpoint_list_w, breakpoint_list, selected, count,
		 gdb->type() == GDB && count > 1, false);
    UpdateBreakpointButtonsCB(breakpoint_list_w, XtPointer(0), XtPointer(0));

    delete[] breakpoint_list;
    delete[] selected;
}

__END_METHOD_CODE__


	METHOD SourceView!UpdateBreakpointButtonsCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		selected : _SYSTEM_OR_USER_,
		size : IntArray,
		first : BreakPointMap,
		next : BreakPointMap,
		number : BreakPoint,
		selected : _SYSTEM_OR_USER_,
		size : IntArray,
		first : BreakPointMap,
		next : BreakPointMap,
		selected : _SYSTEM_OR_USER_,
		enabled : _SYSTEM_OR_USER_,
		has_watch_command : GDBAgent,
		type : _SYSTEM_OR_USER_,
		can_enable : GDBAgent,
		can_disable : GDBAgent



		METRICS
			bp_area REFERRED 7 TIMES,
			edit_breakpoints_dialog_w REFERRED 1 TIMES,
			breakpoint_list_w REFERRED 1 TIMES,
			bp_map REFERRED 6 TIMES,
			ARRAYOP 8
			ASS 18
			AVVARLEN 13
			CALLEDN 18
			CLASS SourceView
			CLASSID 107
			CYCLO 9
			DOTS 15
			EQTEST 5
			EXPRORCALL 34
			GE 0
			GT 4
			IN 0
			INDR 9
			LE 0
			LOC 60
			LT 1
			METHOD UpdateBreakpointButtonsCB
			METHODID 44
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 3
			RETPOINT 0
			SCOPEOP 0
			STMNT 32
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:8 ASS:18 AVVARLEN:13 CALLEDN:18 CLASS:SourceView CLASSID:107 CYCLO:9 DOTS:15 EQTEST:5 EXPRORCALL:34 GE:0 GT:4 IN:0 INDR:9 LE:0 LOC:60 LT:1 METHOD:UpdateBreakpointButtonsCB METHODID:44 MMINUS:0 OUT:0 PARNUM:3 PPLUS:3 RETPOINT:0 SCOPEOP:0 STMNT:32 TERNINSTR:0 USEDVARS:4 
		;


#ID 44-UpdateBreakpointButtonsCB

__BEGIN_METHOD_CODE__

SourceView::UpdateBreakpointButtonsCB(Widget, XtPointer, 
					   XtPointer call_data)
{
    (void) call_data;		 

    if(edit_breakpoints_dialog_w == 0)
	return;

    IntArray breakpoint_nrs;
    getDisplayNumbers(breakpoint_list_w, breakpoint_nrs);

     
    MapRef ref;
    BreakPoint *bp;
    for(bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
	bp->selected() = false;

    for(int i = 0; i < breakpoint_nrs.size(); i++)
    {
	int bp_number = breakpoint_nrs[_ARGS_];
	for(bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
	{
	    if(bp->number() == bp_number)
	    {
		bp->selected() = true;
		break;
	    }
	}
    }




     
    BreakPoint *selected_bp = 0;
    int selected = breakpoint_nrs.size();
    int selected_enabled = 0;
    int selected_disabled = 0;
    for(bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
    {
	if(bp->selected())
	{
	    selected_bp = bp;
	    if(bp->enabled())
		selected_enabled++;
	    else
		selected_disabled++;
	}
    }

     
    XtSetSensitive(bp_area[_ARGS_].widget, gdb->has_watch_command());
    XtSetSensitive(bp_area[_ARGS_].widget, selected == 1);
    XtSetSensitive(bp_area[_ARGS_].widget, 
		   selected == 1 && selected_bp->type() == WATCHPOINT);
    XtSetSensitive(bp_area[_ARGS_].widget,
		   gdb->can_enable() && selected_disabled > 0);
    XtSetSensitive(bp_area[_ARGS_].widget,
		   gdb->can_disable() && selected_enabled > 0);
    XtSetSensitive(bp_area[_ARGS_].widget, selected > 0);
    XtSetSensitive(bp_area[_ARGS_].widget, selected > 0);
}

__END_METHOD_CODE__


	METHOD SourceView!EditBreakpointsCB
		CALLS
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			edit_breakpoints_dialog_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 25
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD EditBreakpointsCB
			METHODID 171
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:25 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:EditBreakpointsCB METHODID:171 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 171-EditBreakpointsCB

__BEGIN_METHOD_CODE__

SourceView::EditBreakpointsCB(Widget, XtPointer, XtPointer)
{
    manage_and_raise(edit_breakpoints_dialog_w);
}

__END_METHOD_CODE__


	METHOD SourceView!StackDialogPoppedDownCB

		METRICS
			stack_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 22
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD StackDialogPoppedDownCB
			METHODID 48
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:22 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:StackDialogPoppedDownCB METHODID:48 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 48-StackDialogPoppedDownCB

__BEGIN_METHOD_CODE__

SourceView::StackDialogPoppedDownCB(Widget, XtPointer, XtPointer)
{
    stack_dialog_popped_up = false;
}

__END_METHOD_CODE__


	METHOD SourceView!SelectFrameCB
		CALLS
		type : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		frame_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		frame_command : GDBAgent,
		has_frame_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		frame_command : GDBAgent,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		set_frame_pos : SourceView



		METRICS
			up_w REFERRED 1 TIMES,
			down_w REFERRED 1 TIMES,
			last_frame_pos REFERRED 1 TIMES,
			frame_pos_locked REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 6
			AVVARLEN 10
			CALLEDN 15
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 0
			EQTEST 2
			EXPRORCALL 28
			GE 0
			GT 2
			IN 0
			INDR 12
			LE 0
			LOC 54
			LT 2
			METHOD SelectFrameCB
			METHODID 52
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:1 ASS:6 AVVARLEN:10 CALLEDN:15 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:0 EQTEST:2 EXPRORCALL:28 GE:0 GT:2 IN:0 INDR:12 LE:0 LOC:54 LT:2 METHOD:SelectFrameCB METHODID:52 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:4 
		;


#ID 52-SelectFrameCB

__BEGIN_METHOD_CODE__

SourceView::SelectFrameCB(Widget w, XtPointer, XtPointer call_data)
{
    XmListCallbackStruct *cbs = (XmListCallbackStruct *)call_data;

    int count = 0;
    XtVaGetValues(w,
		  ((char *)&_XmStrings[_ARGS_]) , &count,
		  __null );

    XtSetSensitive(up_w,   cbs->item_position > 1);
    XtSetSensitive(down_w, cbs->item_position < count);

    switch(gdb->type())
    {
    case GDB:
	 
	gdb_command(gdb->frame_command(count - cbs->item_position));
	break;
    
    case XDB:
	 
	gdb_command(gdb->frame_command(cbs->item_position - 1));
	break;

    case DBX:
    case JDB:
	if(gdb->has_frame_command())
	{
	     
	    gdb_command(gdb->frame_command(count - cbs->item_position + 1));
	}
	else
	{
	     
	     
	    int offset = cbs->item_position - last_frame_pos;
	    if(offset == -1)
		gdb_command(_REMOVED_STR_);
	    else if(offset < 0)
		gdb_command(_REMOVED_STR_ + itostring(-offset));
	    else if(offset == 1)
		gdb_command(_REMOVED_STR_);
	    else if(offset > 0)
		gdb_command(_REMOVED_STR_ + itostring(offset));

	     
	    frame_pos_locked = false;
	    set_frame_pos(0, cbs->item_position);

	     
	    frame_pos_locked = (offset != 0);
	}
	break;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!refresh_stack_frames
		CALLS
		gdb_question : _SYSTEM_OR_USER_,
		where_command : GDBAgent,
		process_where : SourceView,
		has_frame_command : GDBAgent,
		gdb_question : _SYSTEM_OR_USER_,
		frame_command : GDBAgent,
		process_frame : SourceView



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 13
			LT 0
			METHOD refresh_stack_frames
			METHODID 175
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:13 LT:0 METHOD:refresh_stack_frames METHODID:175 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 175-refresh_stack_frames

__BEGIN_METHOD_CODE__

SourceView::refresh_stack_frames()
{
     
    string where_s = gdb_question(gdb->where_command(), -1, true);
    if(where_s == NO_GDB_ANSWER)
	where_s = _REMOVED_STR_;
    process_where(where_s);

    if(gdb->has_frame_command())
    {
	string frame = gdb_question(gdb->frame_command());
	process_frame(frame);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!ViewStackFramesCB
		CALLS
		refresh_stack_frames : SourceView,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			stack_dialog_w REFERRED 1 TIMES,
			stack_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 18
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD ViewStackFramesCB
			METHODID 172
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:18 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:ViewStackFramesCB METHODID:172 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 172-ViewStackFramesCB

__BEGIN_METHOD_CODE__

SourceView::ViewStackFramesCB(Widget, XtPointer, XtPointer)
{
    refresh_stack_frames();
    manage_and_raise(stack_dialog_w);
    stack_dialog_popped_up = true;
}

__END_METHOD_CODE__


	METHOD SourceView!setup_where_line
		CALLS
		type : _SYSTEM_OR_USER_,
		gsub : string,
		type : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		through : string,
		from : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		replicate : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 6
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 2
			IN 0
			INDR 2
			LE 0
			LOC 30
			LT 1
			METHOD setup_where_line
			METHODID 110
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:6 EQTEST:0 EXPRORCALL:16 GE:0 GT:2 IN:0 INDR:2 LE:0 LOC:30 LT:1 METHOD:setup_where_line METHODID:110 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 110-setup_where_line

__BEGIN_METHOD_CODE__

SourceView::setup_where_line(string& line)
{
    if(gdb->type() != JDB)
    {
	 
	 



	line.gsub(rxfilepath, _REMOVED_STR_);
    }

    if(gdb->type() != JDB)
    {
	 



	int start = index(line, rxarglist, _REMOVED_STR_);
	if(start > 0)
	{
	    int end = line.index(')', -1);
	    if(end > start)
		line = line.through(start) + line.from(end);
	}
    }

    const int min_width = 40;
    if(int(line.length()) < min_width)
	line += replicate(' ', min_width - line.length());
}

__END_METHOD_CODE__


	METHOD SourceView!process_where
		CALLS
		freq : string,
		split : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		setup_where_line : SourceView,
		type : _SYSTEM_OR_USER_,
		jdb_frame : _SYSTEM_OR_USER_,
		updateLabelList : _SYSTEM_OR_USER_,
		setLabelList : _SYSTEM_OR_USER_,
		set_frame_pos : SourceView



		METRICS
			frame_list_w REFERRED 2 TIMES,
			ARRAYOP 11
			ASS 11
			AVVARLEN 12
			CALLEDN 9
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 1
			EQTEST 2
			EXPRORCALL 14
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 39
			LT 2
			METHOD process_where
			METHODID 152
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 0
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:11 ASS:11 AVVARLEN:12 CALLEDN:9 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:1 EQTEST:2 EXPRORCALL:14 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:39 LT:2 METHOD:process_where METHODID:152 MMINUS:1 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:0 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:1 
		;


#ID 152-process_where

__BEGIN_METHOD_CODE__

SourceView::process_where(string& where_output)
{
    int count          = where_output.freq('\n') + 1;
    string *frame_list = new string[_ARGS_];
    bool *selected     = new bool[_ARGS_];

    split(where_output, frame_list, count, '\n');

    while(count > 0 && frame_list[_ARGS_] == _REMOVED_STR_)
	count--;

    if(gdb->type() != XDB)
    {
	 
	for(int i = 0; i < count / 2; i++)
	{
	    string tmp = frame_list[_ARGS_];
	    frame_list[_ARGS_] = frame_list[_ARGS_];
	    frame_list[_ARGS_] = tmp;
	}
    }

     
    for(int i = 0; i < count; i++)
    {
	selected[_ARGS_] = false;
	setup_where_line(frame_list[_ARGS_]);
    }

     
     
    if(gdb->type() == JDB && jdb_frame() != 1)
	updateLabelList(frame_list_w, frame_list, count);
    else
	setLabelList(frame_list_w, frame_list, selected, count, false, false);
    set_frame_pos(0, 0);

    delete[] frame_list;
    delete[] selected;
}

__END_METHOD_CODE__


	METHOD SourceView!process_frame
		CALLS
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		after : string,
		contains : string,
		after : string,
		after : string,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		ListSetAndSelectPos : _SYSTEM_OR_USER_,
		update_glyphs : SourceView



		METRICS
			frame_list_w REFERRED 2 TIMES,
			up_w REFERRED 2 TIMES,
			down_w REFERRED 2 TIMES,
			at_lowest_frame REFERRED 1 TIMES,
			current_frame REFERRED 2 TIMES,
			ARRAYOP 4
			ASS 17
			AVVARLEN 10
			CALLEDN 13
			CLASS SourceView
			CLASSID 107
			CYCLO 14
			DOTS 5
			EQTEST 4
			EXPRORCALL 31
			GE 0
			GT 1
			IN 0
			INDR 5
			LE 0
			LOC 75
			LT 1
			METHOD process_frame
			METHODID 153
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 30
			TERNINSTR 0
			USEDVARS 5

#METRICS ARRAYOP:4 ASS:17 AVVARLEN:10 CALLEDN:13 CLASS:SourceView CLASSID:107 CYCLO:14 DOTS:5 EQTEST:4 EXPRORCALL:31 GE:0 GT:1 IN:0 INDR:5 LE:0 LOC:75 LT:1 METHOD:process_frame METHODID:153 MMINUS:1 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:30 TERNINSTR:0 USEDVARS:5 
		;


#ID 153-process_frame

__BEGIN_METHOD_CODE__

SourceView::process_frame(string& frame_output)
{
    if(frame_output != _REMOVED_STR_ 
	&& (frame_output[_ARGS_] == '#' || gdb->type() != GDB))
    {
	string frame_nr;

	switch(gdb->type())
	{
	case GDB:
	    frame_nr = frame_output.after(0);
	    break;

	case DBX:
	    frame_nr = frame_output;

	     
	    if(frame_nr.contains(_REMOVED_STR_, 0))
		frame_nr = frame_nr.after(_REMOVED_STR_);
	    break;

	case XDB:
	    frame_nr = frame_output.after(_REMOVED_STR_, -1);
	    break;

	case JDB:
	    frame_nr = frame_output.after(_REMOVED_STR_);
	    break;
	}

	int frame = get_positive_nr(frame_nr);

	 
	if(gdb->type() == DBX || gdb->type() == JDB)
	    frame--;

	at_lowest_frame = (frame == 0);

	int count         = 0;
	int top_item      = 0;
	int visible_items = 0;
	XtVaGetValues(frame_list_w,
		      ((char *)&_XmStrings[_ARGS_]) , &count,
		      ((char *)&_XmStrings[_ARGS_]) , &top_item,
		      ((char *)&_XmStrings[_ARGS_]) , &visible_items,
		      __null );

	int pos = 1;
	switch(gdb->type())
	{
	case GDB:
	case DBX:
	case JDB:
	    pos = count - frame;
	    break;

	case XDB:
	    pos = frame + 1;
	    break;
	}

	ListSetAndSelectPos(frame_list_w, pos);

	XtSetSensitive(up_w,   pos > 1);
	XtSetSensitive(down_w, pos < count);

	update_glyphs();
	current_frame = frame;
    }
    else
    {
	XtSetSensitive(up_w,   0 );
	XtSetSensitive(down_w, 0 );
	current_frame = -1;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!set_frame_func
		CALLS
		item : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		set_frame_pos : SourceView



		METRICS
			frame_list_w REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 6
			AVVARLEN 12
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 15
			GE 2
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 29
			LT 2
			METHOD set_frame_func
			METHODID 162
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:3 ASS:6 AVVARLEN:12 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:15 GE:2 GT:2 IN:0 INDR:0 LE:0 LOC:29 LT:2 METHOD:set_frame_func METHODID:162 MMINUS:1 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:1 
		;


#ID 162-set_frame_func

__BEGIN_METHOD_CODE__

SourceView::set_frame_func(const string& func)
{
    int count = 0;
    XmStringTable items;

    XtVaGetValues(frame_list_w,
		  ((char *)&_XmStrings[_ARGS_]) , &count,
		  ((char *)&_XmStrings[_ARGS_]) , &items,
		  __null );

    for(int i = count - 1; i >= 0; i--)
    {
	String _item;
	XmStringGetLtoR(items[_ARGS_], _REMOVED_STR_  , &_item);
	string item(_item);
	XtFree(_item);

	int func_index  = item.index(func);
	int paren_index = item.index('(');

	if(func_index >= 0 &&
	    (func_index < paren_index || paren_index < 0))
	{
	    set_frame_pos(0, i + 1);
	    return true;
	}
    }

    return false;
}

__END_METHOD_CODE__


	METHOD SourceView!set_frame_pos
		CALLS
		ListSetAndSelectPos : _SYSTEM_OR_USER_



		METRICS
			frame_list_w REFERRED 3 TIMES,
			up_w REFERRED 1 TIMES,
			down_w REFERRED 1 TIMES,
			last_frame_pos REFERRED 1 TIMES,
			frame_pos_locked REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 7
			AVVARLEN 10
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 7
			DOTS 0
			EQTEST 2
			EXPRORCALL 15
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 35
			LT 2
			METHOD set_frame_pos
			METHODID 161
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 5

#METRICS ARRAYOP:2 ASS:7 AVVARLEN:10 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:7 DOTS:0 EQTEST:2 EXPRORCALL:15 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:35 LT:2 METHOD:set_frame_pos METHODID:161 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:5 
		;


#ID 161-set_frame_pos

__BEGIN_METHOD_CODE__

SourceView::set_frame_pos(int arg, int pos)
{
    if(frame_pos_locked)
    {
	frame_pos_locked = false;
	return;
    }

    int items = 0;
    XtVaGetValues(frame_list_w, ((char *)&_XmStrings[_ARGS_]) , &items, __null );

    if(pos == 0)
	pos = items;
    if(arg != 0)
    {
	int *position_list;
	int position_count;
	if(XmListGetSelectedPos(frame_list_w,
				 &position_list, &position_count))
	{
	    if(position_count == 1)
		pos = position_list[_ARGS_] + arg;
	    XtFree((char *)position_list);
	} else
	    return;
	if(position_count != 1 || pos < 1 || pos > items)
	    return;
    }

    ListSetAndSelectPos(frame_list_w, pos);

    last_frame_pos = pos;

    XtSetSensitive(up_w,   pos > 1);
    XtSetSensitive(down_w, pos < items);
}

__END_METHOD_CODE__


	METHOD SourceView!where_required

		METRICS
			stack_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 22
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD where_required
			METHODID 179
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:22 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:where_required METHODID:179 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 179-where_required

__BEGIN_METHOD_CODE__

SourceView::where_required()
{ return stack_dialog_popped_up; }

__END_METHOD_CODE__


	METHOD SourceView!register_required

		METRICS
			register_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 25
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD register_required
			METHODID 180
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:25 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:register_required METHODID:180 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 180-register_required

__BEGIN_METHOD_CODE__

SourceView::register_required()
{ return register_dialog_popped_up; }

__END_METHOD_CODE__


	METHOD SourceView!thread_required

		METRICS
			thread_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 23
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD thread_required
			METHODID 181
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:23 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:thread_required METHODID:181 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 181-thread_required

__BEGIN_METHOD_CODE__

SourceView::thread_required()
{ return thread_dialog_popped_up; }

__END_METHOD_CODE__


	METHOD SourceView!process_registers
		CALLS
		gsub : string,
		gsub : string,
		gsub : string,
		gsub : string,
		freq : string,
		split : _SYSTEM_OR_USER_,
		tabto : _SYSTEM_OR_USER_,
		setLabelList : _SYSTEM_OR_USER_



		METRICS
			register_list_w REFERRED 1 TIMES,
			ARRAYOP 8
			ASS 5
			AVVARLEN 15
			CALLEDN 8
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 5
			EQTEST 1
			EXPRORCALL 11
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 28
			LT 1
			METHOD process_registers
			METHODID 154
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 17
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:8 ASS:5 AVVARLEN:15 CALLEDN:8 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:5 EQTEST:1 EXPRORCALL:11 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:28 LT:1 METHOD:process_registers METHODID:154 MMINUS:1 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:17 TERNINSTR:0 USEDVARS:1 
		;


#ID 154-process_registers

__BEGIN_METHOD_CODE__

SourceView::process_registers(string& register_output)
{
    register_output.gsub(_REMOVED_STR_, _REMOVED_STR_);
    register_output.gsub(_REMOVED_STR_, _REMOVED_STR_);
    register_output.gsub(_REMOVED_STR_, _REMOVED_STR_);
    register_output.gsub(_REMOVED_STR_, _REMOVED_STR_);

    int count             = register_output.freq('\n') + 1;
    string *register_list = new string[_ARGS_];
    bool *selected        = new bool[_ARGS_];

    split(register_output, register_list, count, '\n');

    while(count > 0 && register_list[_ARGS_] == _REMOVED_STR_)
	count--;

    for(int i = 0; i < count; i++)
    {
	tabto(register_list[_ARGS_], 26);
	untabify_if_needed(register_list[_ARGS_]);
	selected[_ARGS_] = false;
    }

    setLabelList(register_list_w, register_list, selected, count,
		 false, false);

    delete[] register_list;
    delete[] selected;
}

__END_METHOD_CODE__


	METHOD SourceView!refresh_registers
		CALLS
		gdb_question : _SYSTEM_OR_USER_,
		refresh_registers_command : SourceView,
		process_registers : SourceView



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD refresh_registers
			METHODID 176
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:refresh_registers METHODID:176 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 176-refresh_registers

__BEGIN_METHOD_CODE__

SourceView::refresh_registers()
{
    string registers = gdb_question(refresh_registers_command());
    if(registers == NO_GDB_ANSWER)
	registers = _REMOVED_STR_;
    process_registers(registers);
}

__END_METHOD_CODE__


	METHOD SourceView!refresh_registers_command
		CALLS
		regs_command : GDBAgent



		METRICS
			all_registers REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 13
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD refresh_registers_command
			METHODID 178
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:13 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:refresh_registers_command METHODID:178 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 178-refresh_registers_command

__BEGIN_METHOD_CODE__

SourceView::refresh_registers_command()
{
    return gdb->regs_command(all_registers);
}

__END_METHOD_CODE__


	METHOD SourceView!ViewRegistersCB
		CALLS
		refresh_registers : SourceView,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			register_dialog_w REFERRED 1 TIMES,
			register_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 21
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD ViewRegistersCB
			METHODID 173
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:21 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:ViewRegistersCB METHODID:173 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 173-ViewRegistersCB

__BEGIN_METHOD_CODE__

SourceView::ViewRegistersCB(Widget, XtPointer, XtPointer)
{
    refresh_registers();
    manage_and_raise(register_dialog_w);
    register_dialog_popped_up = true;
}

__END_METHOD_CODE__


	METHOD SourceView!RegisterDialogPoppedDownCB

		METRICS
			register_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 25
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD RegisterDialogPoppedDownCB
			METHODID 50
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:25 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:RegisterDialogPoppedDownCB METHODID:50 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 50-RegisterDialogPoppedDownCB

__BEGIN_METHOD_CODE__

SourceView::RegisterDialogPoppedDownCB(Widget, XtPointer, XtPointer)
{
    register_dialog_popped_up = false;
}

__END_METHOD_CODE__


	METHOD SourceView!SelectRegisterCB
		CALLS
		item : _SYSTEM_OR_USER_,
		through : string,
		set_string : ArgField



		METRICS
			ARRAYOP 1
			ASS 4
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 15
			LT 0
			METHOD SelectRegisterCB
			METHODID 53
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:15 LT:0 METHOD:SelectRegisterCB METHODID:53 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 53-SelectRegisterCB

__BEGIN_METHOD_CODE__

SourceView::SelectRegisterCB(Widget, XtPointer, XtPointer call_data)
{
    XmListCallbackStruct *cbs = (XmListCallbackStruct *)call_data;

     
    String _item;
    XmStringGetLtoR(cbs->item, _REMOVED_STR_  , &_item);
    string item(_item);
    XtFree(_item);

    if(item != _REMOVED_STR_ && item[_ARGS_] != '.')
    {
	item = _REMOVED_STR_ + item.through(rxalphanum);
	source_arg->set_string(item);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!process_threads
		CALLS
		matches : _SYSTEM_OR_USER_,
		freq : string,
		split : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		setup_where_line : SourceView,
		jdb_thread : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		index : string,
		index : string,
		after : string,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		length : string,
		length : string,
		from : string,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		contains : _SYSTEM_OR_USER_,
		setLabelList : _SYSTEM_OR_USER_



		METRICS
			thread_list_w REFERRED 1 TIMES,
			ARRAYOP 18
			ASS 30
			AVVARLEN 13
			CALLEDN 27
			CLASS SourceView
			CLASSID 107
			CYCLO 22
			DOTS 19
			EQTEST 4
			EXPRORCALL 46
			GE 1
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 110
			LT 6
			METHOD process_threads
			METHODID 155
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 5
			RETPOINT 0
			SCOPEOP 0
			STMNT 44
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:18 ASS:30 AVVARLEN:13 CALLEDN:27 CLASS:SourceView CLASSID:107 CYCLO:22 DOTS:19 EQTEST:4 EXPRORCALL:46 GE:1 GT:2 IN:0 INDR:1 LE:0 LOC:110 LT:6 METHOD:process_threads METHODID:155 MMINUS:1 OUT:0 PARNUM:1 PPLUS:5 RETPOINT:0 SCOPEOP:0 STMNT:44 TERNINSTR:0 USEDVARS:1 
		;


#ID 155-process_threads

__BEGIN_METHOD_CODE__

SourceView::process_threads(string& threads_output)
{
    if(threads_output == NO_GDB_ANSWER 
	|| threads_output == _REMOVED_STR_
	|| threads_output.matches(rxwhite))
	threads_output = _REMOVED_STR_;

    int count           = threads_output.freq('\n') + 1;
    string *thread_list = new string[_ARGS_];
    bool *selected      = new bool[_ARGS_];

    split(threads_output, thread_list, count, '\n');

    while(count > 0 && thread_list[_ARGS_] == _REMOVED_STR_)
	count--;

    switch(gdb->type())
    {
    case GDB:
    {
	for(int i = 0; i < count; i++)
	{
	    selected[_ARGS_] = thread_list[_ARGS_].contains('*', 0);
	    if(selected[_ARGS_])
		thread_list[_ARGS_] = thread_list[_ARGS_].after(0);
	    strip_leading_space(thread_list[_ARGS_]);
	    setup_where_line(thread_list[_ARGS_]);
	}
	break;
    }

    case JDB:
    {
	string current_thread = jdb_thread();
	current_threadgroup = _REMOVED_STR_;
	for(int i = 0; i < count; i++)
	{
	    selected[_ARGS_] = false;
	    string& item = thread_list[_ARGS_];

	    if(item.contains(_REMOVED_STR_, 0))
	    {
		 

		if(current_threadgroup != _REMOVED_STR_)
		{
		     
		    current_threadgroup = _REMOVED_STR_;
		}
		else
		{
		    current_threadgroup = item.after(_REMOVED_STR_);
		    strip_leading_space(current_threadgroup);
		    current_threadgroup = current_threadgroup.before(_REMOVED_STR_);
		}
	    }
	    else
	    {
		 

		int addr_index = item.index(_REMOVED_STR_);
		if(addr_index < 0)
		    addr_index = item.index(_REMOVED_STR_);

		if(addr_index >= 0)
		{
		     
		    string thread = item.after(_REMOVED_STR_);
		    thread = thread.after(_REMOVED_STR_);
		    strip_leading_space(thread);

		    if(thread.contains(current_thread + _REMOVED_STR_, 0))
			selected[_ARGS_] = true;

		     
		    int info_index = addr_index;
		    while(info_index < int(item.length()) &&
			   item[_ARGS_] != ' ')
			info_index++;
		    while(info_index < int(item.length()) &&
			   item[_ARGS_] == ' ')
			info_index++;
		    item = item.before(addr_index) + item.from(info_index);

		     
		    if(item.contains(_REMOVED_STR_, -1))
			item += _REMOVED_STR_;
		    else if(item.contains(_REMOVED_STR_, -1))
			item += _REMOVED_STR_;
		    else if(item.contains(_REMOVED_STR_, -1))
			item += _REMOVED_STR_;
		}
	    }
	}
	break;
    }

    case DBX:
    case XDB:
    {
	for(int i = 0; i < count; i++)
	    selected[_ARGS_] = false;
	break;
    }
    }

    setLabelList(thread_list_w, thread_list, selected, count, false, false);

    delete[] thread_list;
    delete[] selected;
}

__END_METHOD_CODE__


	METHOD SourceView!refresh_threads
		CALLS
		type : _SYSTEM_OR_USER_,
		gdb_question : _SYSTEM_OR_USER_,
		process_threads : SourceView,
		gdb_command : _SYSTEM_OR_USER_,
		syncCommandQueue : _SYSTEM_OR_USER_,
		gdb_question : _SYSTEM_OR_USER_,
		process_threads : SourceView



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 30
			LT 0
			METHOD refresh_threads
			METHODID 177
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:30 LT:0 METHOD:refresh_threads METHODID:177 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 177-refresh_threads

__BEGIN_METHOD_CODE__

SourceView::refresh_threads(bool all_threadgroups)
{
    switch(gdb->type())
    {
    case GDB:
    {
	string threads = gdb_question(_REMOVED_STR_);
	process_threads(threads);
	break;
    }
    case JDB:
    {
	if(all_threadgroups)
	{
	     
	     
	     
	    gdb_command(_REMOVED_STR_);
	    syncCommandQueue();
	}

	string threads = gdb_question(_REMOVED_STR_);
	process_threads(threads);
	break;
    }
    case DBX:
    case XDB:
	 
	break;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!ViewThreadsCB
		CALLS
		refresh_threads : SourceView,
		manage_and_raise : _SYSTEM_OR_USER_



		METRICS
			thread_dialog_w REFERRED 1 TIMES,
			thread_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD ViewThreadsCB
			METHODID 174
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:ViewThreadsCB METHODID:174 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 174-ViewThreadsCB

__BEGIN_METHOD_CODE__

SourceView::ViewThreadsCB(Widget, XtPointer, XtPointer)
{
    refresh_threads(true);
    manage_and_raise(thread_dialog_w);
    thread_dialog_popped_up = true;
}

__END_METHOD_CODE__


	METHOD SourceView!ThreadDialogPoppedDownCB

		METRICS
			thread_dialog_popped_up REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 23
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ThreadDialogPoppedDownCB
			METHODID 51
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:23 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:ThreadDialogPoppedDownCB METHODID:51 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 51-ThreadDialogPoppedDownCB

__BEGIN_METHOD_CODE__

SourceView::ThreadDialogPoppedDownCB(Widget, XtPointer, XtPointer)
{
    thread_dialog_popped_up = false;
}

__END_METHOD_CODE__


	METHOD SourceView!ThreadCommandCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		size : IntArray,
		itostring : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			thread_list_w REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 3
			AVVARLEN 13
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 1
			METHOD ThreadCommandCB
			METHODID 55
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:3 AVVARLEN:13 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:1 METHOD:ThreadCommandCB METHODID:55 MMINUS:0 OUT:0 PARNUM:3 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 55-ThreadCommandCB

__BEGIN_METHOD_CODE__

SourceView::ThreadCommandCB(Widget w, XtPointer client_data, XtPointer)
{
    string command = (char *)client_data;

     
    IntArray threads;
    getDisplayNumbers(thread_list_w, threads);

    for(int i = 0; i < threads.size(); i++)
	command += _REMOVED_STR_ + itostring(threads[_ARGS_]);

    gdb_command(command, w);
}

__END_METHOD_CODE__


	METHOD SourceView!SelectThreadCB
		CALLS
		getDisplayNumbers : _SYSTEM_OR_USER_,
		size : IntArray,
		gdb_command : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		size : IntArray,
		type : _SYSTEM_OR_USER_,
		item : _SYSTEM_OR_USER_,
		contains : string,
		after : string,
		strip_leading_space : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			thread_list_w REFERRED 2 TIMES,
			ARRAYOP 4
			ASS 4
			AVVARLEN 13
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 5
			EQTEST 5
			EXPRORCALL 24
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 43
			LT 0
			METHOD SelectThreadCB
			METHODID 54
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:4 AVVARLEN:13 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:5 EQTEST:5 EXPRORCALL:24 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:43 LT:0 METHOD:SelectThreadCB METHODID:54 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:1 
		;


#ID 54-SelectThreadCB

__BEGIN_METHOD_CODE__

SourceView::SelectThreadCB(Widget w, XtPointer, XtPointer)
{
     
    IntArray threads;
    getDisplayNumbers(thread_list_w, threads);

    if(threads.size() == 1)
    {
	 
	gdb_command(_REMOVED_STR_ + itostring(threads[_ARGS_]), w);
    }
    else if(threads.size() == 0 && gdb->type() == JDB)
    {
	 
	XmStringTable selected_items;
	int selected_items_count = 0;

	XtVaGetValues(thread_list_w,
		      ((char *)&_XmStrings[_ARGS_]) , &selected_items_count,
		      ((char *)&_XmStrings[_ARGS_]) , &selected_items,
		      __null );

	if(selected_items_count == 1)
	{
	    String _item;
	    XmStringGetLtoR(selected_items[_ARGS_], _REMOVED_STR_  , &_item);
	    string item(_item);
	    XtFree(_item);
	    
	     
	    if(item.contains(_REMOVED_STR_, 0))
	    {
		string threadgroup = item.after(_REMOVED_STR_);
		strip_leading_space(threadgroup);
		threadgroup = threadgroup.before(_REMOVED_STR_);

		if(threadgroup == current_threadgroup)
		    threadgroup = _REMOVED_STR_;  

		gdb_command(_REMOVED_STR_ + threadgroup, w);
	    }
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!get_line
		CALLS
		contains : _SYSTEM_OR_USER_,
		after : string,
		get_positive_nr : _SYSTEM_OR_USER_,
		min : _SYSTEM_OR_USER_,
		is_current_file : SourceView,
		read_file : SourceView,
		is_current_file : SourceView,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		index : AssocRec,
		length : AssocRec,
		at : AssocRec,
		itostring : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			line_count REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 9
			AVVARLEN 11
			CALLEDN 14
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 6
			EQTEST 0
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 28
			LT 2
			METHOD get_line
			METHODID 221
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:11 CALLEDN:14 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:6 EQTEST:0 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:28 LT:2 METHOD:get_line METHODID:221 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:2 
		;


#ID 221-get_line

__BEGIN_METHOD_CODE__

SourceView::get_line(string position)
{
    string file_name = current_file_name;

    if(position.contains(':'))
    {
	file_name = position.before(':');
	position  = position.after(':');
    }
    int line = get_positive_nr(position);

     
    line = min(line, line_count);
    if(line < 1)
	return _REMOVED_STR_;

    if(!is_current_file(file_name))
	read_file(file_name, line);
    if(!is_current_file(file_name))
	return _REMOVED_STR_;

    XmTextPosition start = pos_of_line(line) + indent_amount(source_text_w);
    XmTextPosition end   = current_source.index('\n', start);
    if(end < 0)
	end = current_source.length();

    string text = current_source.at(int(start), end - start);
    return itostring(line) + _REMOVED_STR_ + text;
}

__END_METHOD_CODE__


	METHOD SourceView!set_max_glyphs
		CALLS
		empty : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		Widget : _SYSTEM_OR_USER_,
		Widget : _SYSTEM_OR_USER_,
		Widget : _SYSTEM_OR_USER_,
		Widget : _SYSTEM_OR_USER_,
		Widget : _SYSTEM_OR_USER_,
		Widget : _SYSTEM_OR_USER_



		METRICS
			plain_stops REFERRED 5 TIMES,
			grey_stops REFERRED 7 TIMES,
			plain_conds REFERRED 5 TIMES,
			grey_conds REFERRED 4 TIMES,
			plain_temps REFERRED 5 TIMES,
			grey_temps REFERRED 4 TIMES,
			ARRAYOP 42
			ASS 26
			AVVARLEN 10
			CALLEDN 13
			CLASS SourceView
			CLASSID 107
			CYCLO 15
			DOTS 6
			EQTEST 0
			EXPRORCALL 33
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 65
			LT 8
			METHOD set_max_glyphs
			METHODID 188
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 8
			RETPOINT 0
			SCOPEOP 0
			STMNT 36
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:42 ASS:26 AVVARLEN:10 CALLEDN:13 CLASS:SourceView CLASSID:107 CYCLO:15 DOTS:6 EQTEST:0 EXPRORCALL:33 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:65 LT:8 METHOD:set_max_glyphs METHODID:188 MMINUS:0 OUT:0 PARNUM:1 PPLUS:8 RETPOINT:0 SCOPEOP:0 STMNT:36 TERNINSTR:0 USEDVARS:6 
		;


#ID 188-set_max_glyphs

__BEGIN_METHOD_CODE__

SourceView::set_max_glyphs(int nmax)
{
    WidgetArray empty(nmax);

    for(int k = 0; k < 2; k++)
    {
	int i;

	 
	for(i = 0; i < plain_stops[_ARGS_].size(); i++)
	{
	    if(plain_stops[_ARGS_][_ARGS_] != 0)
		XtDestroyWidget(plain_stops[_ARGS_][_ARGS_]);
	}
	for(i = 0; i < grey_stops[_ARGS_].size(); i++)
	{
	    if(grey_stops[_ARGS_][_ARGS_] != 0)
		XtDestroyWidget(grey_stops[_ARGS_][_ARGS_]);
	}

	for(i = 0; i < plain_conds[_ARGS_].size(); i++)
	{
	    if(plain_conds[_ARGS_][_ARGS_] != 0)
		XtDestroyWidget(plain_conds[_ARGS_][_ARGS_]);
	}
	for(i = 0; i < grey_conds[_ARGS_].size(); i++)
	{
	    if(grey_stops[_ARGS_][_ARGS_] != 0)
		XtDestroyWidget(grey_conds[_ARGS_][_ARGS_]);
	}

	for(i = 0; i < plain_temps[_ARGS_].size(); i++)
	{
	    if(plain_temps[_ARGS_][_ARGS_] != 0)
		XtDestroyWidget(plain_temps[_ARGS_][_ARGS_]);
	}
	for(i = 0; i < grey_temps[_ARGS_].size(); i++)
	{
	    if(grey_stops[_ARGS_][_ARGS_] != 0)
		XtDestroyWidget(grey_temps[_ARGS_][_ARGS_]);
	}

	 
	plain_stops[_ARGS_] = empty;
	grey_stops[_ARGS_]  = empty;

	plain_conds[_ARGS_] = empty;
	grey_conds[_ARGS_]  = empty;

	plain_temps[_ARGS_] = empty;
	grey_temps[_ARGS_]  = empty;

	 
	for(i = 0; i < nmax + 1; i++)
	{
	    plain_stops[_ARGS_] += Widget(0);
	    grey_stops[_ARGS_]  += Widget(0);

	    plain_conds[_ARGS_] += Widget(0);
	    grey_conds[_ARGS_]  += Widget(0);

	    plain_temps[_ARGS_] += Widget(0);
	    grey_temps[_ARGS_]  += Widget(0);
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!ActivateGlyphCB

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 1
			IN 0
			INDR 3
			LE 0
			LOC 12
			LT 0
			METHOD ActivateGlyphCB
			METHODID 58
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:1 IN:0 INDR:3 LE:0 LOC:12 LT:0 METHOD:ActivateGlyphCB METHODID:58 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 58-ActivateGlyphCB

__BEGIN_METHOD_CODE__

SourceView::ActivateGlyphCB(Widget glyph, XtPointer, XtPointer call_data)
{
    XmPushButtonCallbackStruct *cbs = (XmPushButtonCallbackStruct *)call_data;
    XEvent *e = cbs->event;
    if(e->type != 5 )
	return;

    String *params = { 0 };
    XtCallActionProc(glyph, _REMOVED_STR_, e, params, 0);

    if(cbs->click_count > 1)
	XtCallActionProc(glyph, _REMOVED_STR_, e, params, 0);
}

__END_METHOD_CODE__


	METHOD SourceView!pixmap
		CALLS
		XCreatePixmapFromBitmapData : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 2
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 3
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 14
			LT 0
			METHOD pixmap
			METHODID 123
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:3 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:14 LT:0 METHOD:pixmap METHODID:123 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 123-pixmap

__BEGIN_METHOD_CODE__

SourceView::pixmap(Widget w, unsigned char *bits, int width, int height)
{
    Pixel foreground, background;

    XtVaGetValues(w,
		  ((char*)&XtStrings[_ARGS_])  , &foreground,
		  ((char*)&XtStrings[_ARGS_])  , &background,
		  __null );

    int depth = (( (( w )->core.screen)  )->root_depth) ;
    Pixmap pix = XCreatePixmapFromBitmapData((( ( w )->core.screen )->display)  , (( w )->core.window) , 
					     (char *)bits, width, height, 
					     foreground, background, depth);
    return pix;
}

__END_METHOD_CODE__


	METHOD SourceView!create_glyph
		CALLS
		pixmap : SourceView,
		InstallButtonTips : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			code_form_w REFERRED 1 TIMES,
			code_text_w REFERRED 1 TIMES,
			cache_glyph_images REFERRED 1 TIMES,
			ARRAYOP 72
			ASS 53
			AVVARLEN 13
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 46
			EQTEST 1
			EXPRORCALL 249
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 55
			LT 0
			METHOD create_glyph
			METHODID 124
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 23
			RETPOINT 1
			SCOPEOP 0
			STMNT 62
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:72 ASS:53 AVVARLEN:13 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:46 EQTEST:1 EXPRORCALL:249 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:55 LT:0 METHOD:create_glyph METHODID:124 MMINUS:0 OUT:0 PARNUM:5 PPLUS:23 RETPOINT:1 SCOPEOP:0 STMNT:62 TERNINSTR:0 USEDVARS:4 
		;


#ID 124-create_glyph

__BEGIN_METHOD_CODE__

SourceView::create_glyph(Widget form_w,
				String name,
				unsigned char *bits,
				int width, int height)
{
     
    Pixel background;
    Widget text_w;
    if(form_w == code_form_w)
	text_w = code_text_w;
    else
	text_w = source_text_w;
    XtVaGetValues(text_w, ((char*)&XtStrings[_ARGS_])  , &background, __null );

     
    Arg args[_ARGS_];
    Cardinal arg = 0;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(   0  ) )) ;         arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(       XmATTACH_FORM ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(      XmATTACH_FORM ) )) ; arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(       0  ) )) ;         arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(        0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(           0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(          0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(         0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(         0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(        0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(     0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(         0 ) )) ;             arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(   XmPIXMAP ) )) ;              arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  XmMULTICLICK_KEEP ) )) ;     arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  XmALIGNMENT_BEGINNING ) )) ;  arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(            XtPointer(0) ) )) ;  arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(           1  ) )) ;          arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(            background ) )) ;    arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(          background ) )) ;    arg++;
    Widget w = verify(XmCreatePushButton(form_w, name, args, arg));

    if((XtWindowOfObject( form_w ) != 0L ) )
	XtRealizeWidget(w);

    XtManageChild(w);

    arg = 0;
    if(!cache_glyph_images)
    {
	Pixmap pix = pixmap(w, bits, width, height);
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  pix ) )) ; arg++;
    }
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(   width ) )) ;  arg++;
    ((void)( ( args[_ARGS_] ).name = (  ((char*)&XtStrings[_ARGS_])   ), ( args[_ARGS_] ).value = (XtArgVal)(  height ) )) ; arg++;
    XtSetValues(w, args, arg);

    XtAddCallback(w, ((char *)&_XmStrings[_ARGS_]) , ActivateGlyphCB, 0);

    InstallButtonTips(w);
    return w;
}

__END_METHOD_CODE__


	METHOD SourceView!line_height
		CALLS
		current_text : SourceView,
		index : string,
		abs : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 10
			AVVARLEN 12
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 7
			DOTS 1
			EQTEST 4
			EXPRORCALL 12
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 32
			LT 0
			METHOD line_height
			METHODID 59
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 5
			SCOPEOP 0
			STMNT 18
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:12 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:7 DOTS:1 EQTEST:4 EXPRORCALL:12 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:32 LT:0 METHOD:line_height METHODID:59 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:5 SCOPEOP:0 STMNT:18 TERNINSTR:0 USEDVARS:2 
		;


#ID 59-line_height

__BEGIN_METHOD_CODE__

SourceView::line_height(Widget text_w)
{
    static int source_height = 0;
    static int code_height   = 0;
    if(text_w == source_text_w && source_height > 0)
	return source_height;
    else if(text_w == code_text_w && code_height > 0)
	return code_height;

    bool ok;

    XmTextPosition top = XmTextGetTopCharacter(text_w);
    Position top_x, top_y;
    ok = XmTextPosToXY(text_w, top, &top_x, &top_y);
    if(!ok)
	return 0;

    string& text = current_text(text_w);
    XmTextPosition second = text.index('\n', top) + 1;
    Position second_x, second_y;
    ok = XmTextPosToXY(text_w, second, &second_x, &second_y);
    if(!ok)
	return 0;

    int height = abs(second_y - top_y);

    if(text_w == source_text_w)
	source_height = height;
    else if(text_w == code_text_w)
	code_height = height;

    return height;
}

__END_METHOD_CODE__


	METHOD SourceView!unmap_glyph

		METRICS
			change_glyphs REFERRED 1 TIMES,
			changed_glyphs REFERRED 1 TIMES,
			ARRAYOP 4
			ASS 3
			AVVARLEN 13
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 0
			EQTEST 2
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 32
			LT 1
			METHOD unmap_glyph
			METHODID 126
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:3 AVVARLEN:13 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:0 EQTEST:2 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:32 LT:1 METHOD:unmap_glyph METHODID:126 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:2 
		;


#ID 126-unmap_glyph

__BEGIN_METHOD_CODE__

SourceView::unmap_glyph(Widget glyph)
{
    if(glyph == 0)
	return;

    XtPointer user_data;
    XtVaGetValues(glyph, ((char *)&_XmStrings[_ARGS_]) , &user_data, __null );
    if(user_data == 0)
	return;			 

    if(change_glyphs)
    {
	const Position invisible_x = -100;
	const Position invisible_y = -100;

	 
	 
	XtVaSetValues(glyph,
		      ((char *)&_XmStrings[_ARGS_]) , invisible_x,
		      ((char *)&_XmStrings[_ARGS_]) ,  invisible_y,
		      ((char *)&_XmStrings[_ARGS_]) , XtPointer(0),
		      __null );

	if(lesstif_version < 1000)
	{
	     
	    XtMoveWidget(glyph, invisible_x, invisible_y);
	}
	 
    }

    changed_glyphs += glyph;
}

__END_METHOD_CODE__


	METHOD SourceView!map_glyph
		CALLS
		CreateGlyphsWorkProc : SourceView,
		is_source_widget : SourceView,
		line_height : SourceView,
		XMapWindow : _SYSTEM_OR_USER_



		METRICS
			source_text_w REFERRED 1 TIMES,
			code_text_w REFERRED 1 TIMES,
			change_glyphs REFERRED 2 TIMES,
			changed_glyphs REFERRED 2 TIMES,
			ARRAYOP 11
			ASS 17
			AVVARLEN 12
			CALLEDN 4
			CLASS SourceView
			CLASSID 107
			CYCLO 9
			DOTS 2
			EQTEST 1
			EXPRORCALL 45
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 66
			LT 2
			METHOD map_glyph
			METHODID 125
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 23
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:11 ASS:17 AVVARLEN:12 CALLEDN:4 CLASS:SourceView CLASSID:107 CYCLO:9 DOTS:2 EQTEST:1 EXPRORCALL:45 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:66 LT:2 METHOD:map_glyph METHODID:125 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:23 TERNINSTR:0 USEDVARS:4 
		;


#ID 125-map_glyph

__BEGIN_METHOD_CODE__

SourceView::map_glyph(Widget& glyph, Position x, Position y)
{
    while(glyph == 0)
	CreateGlyphsWorkProc(0);

     

    Widget text_w;
    if(is_source_widget(glyph))
	text_w = source_text_w;
    else
	text_w = code_text_w;

    XtPointer user_data;
    Dimension height              = 0;
    Dimension border_width        = 0;
    Dimension margin_height       = 0;
    Dimension shadow_thickness    = 0;
    Dimension highlight_thickness = 0;
    int old_x                     = 0;
    int old_y                     = 0; 
    XtVaGetValues(glyph,
		  ((char*)&XtStrings[_ARGS_])  ,             &height,
		  ((char*)&XtStrings[_ARGS_])  ,        &border_width,
		  ((char *)&_XmStrings[_ARGS_]) ,       &margin_height,
		  ((char *)&_XmStrings[_ARGS_]) ,    &shadow_thickness,
		  ((char *)&_XmStrings[_ARGS_]) , &highlight_thickness,
		  ((char *)&_XmStrings[_ARGS_]) ,           &user_data,
		  ((char *)&_XmStrings[_ARGS_]) ,         &old_x,
		  ((char *)&_XmStrings[_ARGS_]) ,          &old_y,
		  __null );
    Dimension glyph_height = 
	height + border_width + margin_height
	+ shadow_thickness + highlight_thickness;

    y -= (line_height(text_w) + glyph_height) / 2 - 2;

    if(lesstif_version < 1000)
	x += 2;

    if(x != old_x || y != old_y)
    {
	if(change_glyphs)
	{
	    if(lesstif_version < 1000)
	    {
		 
		XtMoveWidget(glyph, x, y);
	    }

	    XtVaSetValues(glyph, ((char *)&_XmStrings[_ARGS_]) , x, ((char *)&_XmStrings[_ARGS_]) , y, __null );
	     
	}
	changed_glyphs += glyph;
    }

    if(user_data != 0)
	return;			 

    if(change_glyphs)
    {
	XMapWindow((( (  glyph  )->core.screen )->display)  , ((  glyph  )->core.window) ) ;
	XtVaSetValues(glyph, ((char *)&_XmStrings[_ARGS_]) , XtPointer(1), __null );
	 
	changed_glyphs += glyph;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!update_glyphs
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView



		METRICS
			source_text_w REFERRED 1 TIMES,
			update_code_glyphs REFERRED 2 TIMES,
			update_source_glyphs REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 17
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 0
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 0
			METHOD update_glyphs
			METHODID 240
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:17 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:0 EQTEST:1 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:17 LT:0 METHOD:update_glyphs METHODID:240 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:3 
		;


#ID 240-update_glyphs

__BEGIN_METHOD_CODE__

SourceView::update_glyphs(Widget glyph)
{
    static XtWorkProcId update_glyph_id = 0;

    if(glyph == 0)
	update_source_glyphs = update_code_glyphs = true;
    else if(is_source_widget(glyph))
	update_source_glyphs = true;
    else if(is_code_widget(glyph))
	update_code_glyphs = true;

    if(update_glyph_id != 0)
	XtRemoveTimeOut(update_glyph_id);

    update_glyph_id = 
	XtAppAddTimeOut(XtWidgetToApplicationContext(source_text_w), 1,
			UpdateGlyphsWorkProc, XtPointer(&update_glyph_id));
}

__END_METHOD_CODE__


	METHOD SourceView!updateGlyphsAct
		CALLS
		CheckScrollCB : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD updateGlyphsAct
			METHODID 78
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:updateGlyphsAct METHODID:78 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 78-updateGlyphsAct

__BEGIN_METHOD_CODE__

SourceView::updateGlyphsAct(Widget w, XEvent*, String *, Cardinal *)
{
    CheckScrollCB(w, 0, 0);
}

__END_METHOD_CODE__


	METHOD SourceView!CheckScrollCB

		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 13
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 0
			METHOD CheckScrollCB
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:13 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:0 METHOD:CheckScrollCB METHODID:45 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 45-CheckScrollCB

__BEGIN_METHOD_CODE__

SourceView::CheckScrollCB(Widget, XtPointer, XtPointer)
{
    static XtIntervalId check_scroll_id = 0;

    if(check_scroll_id != 0)
    {
	XtRemoveTimeOut(check_scroll_id);
	check_scroll_id = 0;
    }

    check_scroll_id = 
	XtAppAddTimeOut(XtWidgetToApplicationContext(source_text_w),
			app_data.glyph_update_delay,
			CheckScrollWorkProc, XtPointer(&check_scroll_id));
}

__END_METHOD_CODE__


	METHOD SourceView!CheckScrollWorkProc
		CALLS
		update_glyphs : SourceView,
		update_glyphs : SourceView,
		update_glyphs : SourceView



		METRICS
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 2 TIMES,
			last_top REFERRED 4 TIMES,
			last_top_pc REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 11
			AVVARLEN 10
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 23
			LT 0
			METHOD CheckScrollWorkProc
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:10 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:23 LT:0 METHOD:CheckScrollWorkProc METHODID:46 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:4 
		;


#ID 46-CheckScrollWorkProc

__BEGIN_METHOD_CODE__

SourceView::CheckScrollWorkProc(XtPointer client_data, XtIntervalId *id)
{
    (void) id;			 

    XtIntervalId *timer = (XtIntervalId *)client_data;
    if(timer != 0)
    {
	 ;
	*timer = 0;
    }

    XmTextPosition old_top = last_top;
    last_top = XmTextGetTopCharacter(source_text_w);

    XmTextPosition old_top_pc = last_top_pc;
    last_top_pc = XmTextGetTopCharacter(code_text_w);

    if(old_top != last_top && old_top_pc != last_top_pc)
	update_glyphs();
    else if(old_top != last_top)
	update_glyphs(source_text_w);
    else if(old_top_pc != last_top_pc)
	update_glyphs(code_text_w);
}

__END_METHOD_CODE__


	METHOD SourceView!CreateGlyphsWorkProc
		CALLS
		create_glyph : SourceView,
		create_glyph : SourceView,
		create_glyph : SourceView,
		create_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		create_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		create_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		create_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		create_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		create_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		create_glyph : SourceView,
		create_glyph : SourceView,
		create_glyph : SourceView,
		create_glyph : SourceView



		METRICS
			source_form_w REFERRED 2 TIMES,
			code_form_w REFERRED 2 TIMES,
			plain_arrows REFERRED 2 TIMES,
			grey_arrows REFERRED 2 TIMES,
			signal_arrows REFERRED 2 TIMES,
			drag_arrows REFERRED 2 TIMES,
			plain_stops REFERRED 3 TIMES,
			grey_stops REFERRED 3 TIMES,
			plain_conds REFERRED 3 TIMES,
			grey_conds REFERRED 3 TIMES,
			plain_temps REFERRED 3 TIMES,
			grey_temps REFERRED 3 TIMES,
			drag_stops REFERRED 2 TIMES,
			drag_conds REFERRED 2 TIMES,
			drag_temps REFERRED 2 TIMES,
			ARRAYOP 44
			ASS 23
			AVVARLEN 10
			CALLEDN 19
			CLASS SourceView
			CLASSID 107
			CYCLO 24
			DOTS 6
			EQTEST 15
			EXPRORCALL 42
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 174
			LT 8
			METHOD CreateGlyphsWorkProc
			METHODID 139
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 8
			RETPOINT 14
			SCOPEOP 0
			STMNT 49
			TERNINSTR 2
			USEDVARS 15

#METRICS ARRAYOP:44 ASS:23 AVVARLEN:10 CALLEDN:19 CLASS:SourceView CLASSID:107 CYCLO:24 DOTS:6 EQTEST:15 EXPRORCALL:42 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:174 LT:8 METHOD:CreateGlyphsWorkProc METHODID:139 MMINUS:0 OUT:0 PARNUM:1 PPLUS:8 RETPOINT:14 SCOPEOP:0 STMNT:49 TERNINSTR:2 USEDVARS:15 
		;


#ID 139-CreateGlyphsWorkProc

__BEGIN_METHOD_CODE__

SourceView::CreateGlyphsWorkProc(XtPointer)
{
    int k;
    for(k = 0; k < 2; k++)
    {
	 
	 
	 
	 

	Widget form_w = k ? code_form_w : source_form_w;

	if(form_w == 0)
	    continue;

	if(plain_arrows[_ARGS_] == 0)
	{
	    plain_arrows[_ARGS_] = 
		create_glyph(form_w, _REMOVED_STR_,
			     arrow_bits, 
			     14 ,
			     15 );
	    return 0 ;
	}

	if(grey_arrows[_ARGS_] == 0)
	{
	    grey_arrows[_ARGS_] = 
		create_glyph(form_w, _REMOVED_STR_,
			     grey_arrow_bits, 
			     14 , 
			     15 );
	    return 0 ;
	}

	if(signal_arrows[_ARGS_] == 0)
	{
	    signal_arrows[_ARGS_] = 
		create_glyph(form_w, _REMOVED_STR_,
			     signal_arrow_bits, 
			     14 ,
			     15 );
	    return 0 ;
	}

	if(drag_arrows[_ARGS_] == 0)
	{
	    drag_arrows[_ARGS_] = 
		create_glyph(form_w, _REMOVED_STR_,
			     drag_arrow_bits, 
			     14 ,
			     15 );
	    return 0 ;
	}
    }
   
    for(k = 0; k < 2; k++)
    {
	Widget form_w = k ? code_form_w : source_form_w;

	if(form_w == 0)
	    continue;

	int i;

	for(i = 0; i < plain_stops[_ARGS_].size() - 1; i++)
	{
	    if(plain_stops[_ARGS_][_ARGS_] == 0)
	    {
		plain_stops[_ARGS_][_ARGS_] = 
		    create_glyph(form_w, _REMOVED_STR_,
				 stop_bits, 
				 15 ,
				 15 );
		return 0 ;
	    }
	}

	for(i = 0; i < plain_temps[_ARGS_].size() - 1; i++)
	{
	    if(plain_temps[_ARGS_][_ARGS_] == 0)
	    {
		plain_temps[_ARGS_][_ARGS_] = 
		    create_glyph(form_w, _REMOVED_STR_,
				 temp_bits, 
				 15 ,
				 15 );
		return 0 ;
	    }
	}

	for(i = 0; i < plain_conds[_ARGS_].size() - 1; i++)
	{
	    if(plain_conds[_ARGS_][_ARGS_] == 0)
	    {
		plain_conds[_ARGS_][_ARGS_] = 
		    create_glyph(form_w, _REMOVED_STR_,
				 cond_bits, 
				 15 ,
				 15 );
		return 0 ;
	    }
	}
	for(i = 0; i < grey_stops[_ARGS_].size() - 1; i++)
	{
	    if(grey_stops[_ARGS_][_ARGS_] == 0)
	    {
		grey_stops[_ARGS_][_ARGS_] = 
		    create_glyph(form_w, _REMOVED_STR_,
				 grey_stop_bits, 
				 15 ,
				 15 );
		return 0 ;
	    }
	}

	for(i = 0; i < grey_temps[_ARGS_].size() - 1; i++)
	{
	    if(grey_temps[_ARGS_][_ARGS_] == 0)
	    {
		grey_temps[_ARGS_][_ARGS_] = 
		    create_glyph(form_w, _REMOVED_STR_,
				 grey_temp_bits, 
				 15 ,
				 15 );
		return 0 ;
	    }
	}

	for(i = 0; i < grey_conds[_ARGS_].size() - 1; i++)
	{
	    if(grey_conds[_ARGS_][_ARGS_] == 0)
	    {
		grey_conds[_ARGS_][_ARGS_] = 
		    create_glyph(form_w, _REMOVED_STR_,
				 grey_cond_bits, 
				 15 ,
				 15 );
		return 0 ;
	    }
	}

	if(drag_stops[_ARGS_] == 0)
	{
	    drag_stops[_ARGS_] = 
		create_glyph(form_w, _REMOVED_STR_,
			     drag_stop_bits, 
			     15 ,
			     15 );
	    return 0 ;
	}

	if(drag_temps[_ARGS_] == 0)
	{
	    drag_temps[_ARGS_] = 
		create_glyph(form_w, _REMOVED_STR_,
			     drag_temp_bits, 
			     15 ,
			     15 );
	    return 0 ;
	}

	if(drag_conds[_ARGS_] == 0)
	{
	    drag_conds[_ARGS_] = 
		create_glyph(form_w, _REMOVED_STR_,
			     drag_cond_bits, 
			     15 ,
			     15 );
	    return 0 ;
	}
    }

    return 1 ;		 
}

__END_METHOD_CODE__


	METHOD SourceView!map_stop_at
		CALLS
		CreateGlyphsWorkProc : SourceView,
		size : _SYSTEM_OR_USER_,
		map_glyph : SourceView,
		itostring : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		itostring : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		set_status : _SYSTEM_OR_USER_,
		post_warning : _SYSTEM_OR_USER_



		METRICS
			stop_x_offset REFERRED 1 TIMES,
			multiple_stop_x_offset REFERRED 1 TIMES,
			ARRAYOP 4
			ASS 9
			AVVARLEN 17
			CALLEDN 9
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 3
			EQTEST 2
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 46
			LT 1
			METHOD map_stop_at
			METHODID 131
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 17
			TERNINSTR 1
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:9 AVVARLEN:17 CALLEDN:9 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:3 EQTEST:2 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:46 LT:1 METHOD:map_stop_at METHODID:131 MMINUS:0 OUT:0 PARNUM:5 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:17 TERNINSTR:1 USEDVARS:2 
		;


#ID 131-map_stop_at

__BEGIN_METHOD_CODE__

SourceView::map_stop_at(Widget glyph, XmTextPosition pos,
			       WidgetArray& stops, int& count,
			       TextPositionArray& positions)
{
     ;

    Position x, y;
    Boolean pos_displayed = XmTextPosToXY(glyph, pos, &x, &y);
    if(pos_displayed)
    {
	while(stops[_ARGS_] == 0)
	{
	    if(CreateGlyphsWorkProc(0))
		break;
	}

	Widget glyph = stops[_ARGS_] ? stops[_ARGS_] : 0;

	if(glyph != 0)
	{
	    for(int i = 0; i < positions.size(); i++)
		if(pos == positions[_ARGS_])
		    x += multiple_stop_x_offset;

	    map_glyph(glyph, x + stop_x_offset, y);
	    positions += pos;
	    return glyph;
	}
	else
	{
	     
	    string msg = _REMOVED_STR_ + 
		itostring(stops.size() - 1) + _REMOVED_STR_ +
		itostring(stops.size() - 1) + _REMOVED_STR_;

	    set_status(msg);

	    static bool warning_posted = false;

	    if(!warning_posted)
	    {
		post_warning(msg, _REMOVED_STR_, glyph);
		warning_posted = true;
	    }
	}
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD SourceView!map_arrow_at
		CALLS
		is_code_widget : SourceView,
		CreateGlyphsWorkProc : SourceView,
		map_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		map_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		map_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView



		METRICS
			at_lowest_frame REFERRED 2 TIMES,
			signal_received REFERRED 1 TIMES,
			arrow_x_offset REFERRED 3 TIMES,
			plain_arrows REFERRED 1 TIMES,
			grey_arrows REFERRED 1 TIMES,
			signal_arrows REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 6
			AVVARLEN 13
			CALLEDN 15
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 0
			EQTEST 3
			EXPRORCALL 23
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 51
			LT 0
			METHOD map_arrow_at
			METHODID 132
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 4
			SCOPEOP 0
			STMNT 24
			TERNINSTR 0
			USEDVARS 6

#METRICS ARRAYOP:3 ASS:6 AVVARLEN:13 CALLEDN:15 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:0 EQTEST:3 EXPRORCALL:23 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:51 LT:0 METHOD:map_arrow_at METHODID:132 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:4 SCOPEOP:0 STMNT:24 TERNINSTR:0 USEDVARS:6 
		;


#ID 132-map_arrow_at

__BEGIN_METHOD_CODE__

SourceView::map_arrow_at(Widget glyph, XmTextPosition pos)
{
     ;

    Position x, y;
    Boolean pos_displayed = (pos != XmTextPosition(-1) 
			     && XmTextPosToXY(glyph, pos, &x, &y));

    int k = int(is_code_widget(glyph));

    Widget& signal_arrow = signal_arrows[_ARGS_];
    Widget& plain_arrow  = plain_arrows[_ARGS_];
    Widget& grey_arrow   = grey_arrows[_ARGS_];

    while(signal_arrow == 0 || plain_arrow == 0 || grey_arrow == 0)
    {
	if(CreateGlyphsWorkProc(0))
	    break;
    }

    if(pos_displayed)
    {
	if(at_lowest_frame && signal_received)
	{
	    map_glyph(signal_arrow, x + arrow_x_offset, y);
	    unmap_glyph(plain_arrow);
	    unmap_glyph(grey_arrow);
	    return signal_arrow;
	}
	else if(at_lowest_frame)
	{
	    map_glyph(plain_arrow, x + arrow_x_offset, y);
	    unmap_glyph(signal_arrow);
	    unmap_glyph(grey_arrow);
	    return plain_arrow;
	}
	else
	{
	    map_glyph(grey_arrow, x + arrow_x_offset, y);
	    unmap_glyph(signal_arrow);
	    unmap_glyph(plain_arrow);
	    return grey_arrow;
	}
    }
    else
    {
	unmap_glyph(signal_arrow);
	unmap_glyph(plain_arrow);
	unmap_glyph(grey_arrow);
    }
    return 0;
}

__END_METHOD_CODE__


	METHOD SourceView!copy_colors

		METRICS
			ARRAYOP 4
			ASS 2
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 2
			EQTEST 1
			EXPRORCALL 20
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 21
			LT 0
			METHOD copy_colors
			METHODID 137
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:2 EQTEST:1 EXPRORCALL:20 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:21 LT:0 METHOD:copy_colors METHODID:137 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 137-copy_colors

__BEGIN_METHOD_CODE__

SourceView::copy_colors(Widget glyph, Widget origin)
{
    if(origin == 0)
	return;

    Pixel background, foreground;
    XtVaGetValues(origin,
		  ((char*)&XtStrings[_ARGS_])  , &foreground,
		  ((char*)&XtStrings[_ARGS_])  , &background,
		  __null );

    Pixmap pixmap = 
	XmGetPixmap((( glyph )->core.screen) , XtName(glyph), foreground, background);
    if(pixmap != 2 )
    {
	Pixmap old_pixmap;
	XtVaGetValues(glyph, ((char *)&_XmStrings[_ARGS_]) , &old_pixmap, __null );
	XmDestroyPixmap((( glyph )->core.screen) , old_pixmap);

	XtVaSetValues(glyph, ((char *)&_XmStrings[_ARGS_]) , pixmap, __null );
    }
}

__END_METHOD_CODE__


	METHOD SourceView!map_drag_stop_at
		CALLS
		is_code_widget : SourceView,
		string : string,
		contains : _SYSTEM_OR_USER_,
		string : string,
		contains : _SYSTEM_OR_USER_,
		CreateGlyphsWorkProc : SourceView,
		copy_colors : SourceView,
		map_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView



		METRICS
			stop_x_offset REFERRED 1 TIMES,
			drag_stops REFERRED 4 TIMES,
			drag_conds REFERRED 4 TIMES,
			drag_temps REFERRED 4 TIMES,
			ARRAYOP 13
			ASS 10
			AVVARLEN 10
			CALLEDN 18
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 2
			EQTEST 1
			EXPRORCALL 35
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 65
			LT 1
			METHOD map_drag_stop_at
			METHODID 135
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 24
			TERNINSTR 2
			USEDVARS 4

#METRICS ARRAYOP:13 ASS:10 AVVARLEN:10 CALLEDN:18 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:2 EQTEST:1 EXPRORCALL:35 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:65 LT:1 METHOD:map_drag_stop_at METHODID:135 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:24 TERNINSTR:2 USEDVARS:4 
		;


#ID 135-map_drag_stop_at

__BEGIN_METHOD_CODE__

SourceView::map_drag_stop_at(Widget glyph, XmTextPosition pos, 
				    Widget origin)
{
     ;
    Position x, y;
    Boolean pos_displayed = (pos != XmTextPosition(-1) 
			     && XmTextPosToXY(glyph, pos, &x, &y));

    int k = int(is_code_widget(glyph));

    if(pos_displayed)
    {
	bool cond = (origin != 0 && string(XtName(origin)).contains(_REMOVED_STR_));
	bool temp = (origin != 0 && string(XtName(origin)).contains(_REMOVED_STR_));

	Widget& drag_stop = 
	    temp ? drag_temps[_ARGS_] : 
	    cond ? drag_conds[_ARGS_] : 
	    drag_stops[_ARGS_];
	
	while(drag_stop == 0)
	{
	    if(CreateGlyphsWorkProc(0))
		break;
	}

	copy_colors(drag_stop, origin);

	if(origin)
	{
 	    XtVaGetValues(origin, ((char*)&XtStrings[_ARGS_])  , &x, __null );
	    if(lesstif_version < 1000)
		x -= 2;
	}
	else
	{
	    x += stop_x_offset;
	}

	map_glyph(drag_stop, x, y);
	if(temp)
	{
	    unmap_glyph(drag_conds[_ARGS_]);
	    unmap_glyph(drag_stops[_ARGS_]);
	}
	else if(cond)
	{
	    unmap_glyph(drag_temps[_ARGS_]);
	    unmap_glyph(drag_stops[_ARGS_]);
	}
	else
	{
	    unmap_glyph(drag_conds[_ARGS_]);
	    unmap_glyph(drag_temps[_ARGS_]);
	}

	return drag_stop;
    }
    else
    {
	unmap_glyph(drag_conds[_ARGS_]);
	unmap_glyph(drag_temps[_ARGS_]);
	unmap_glyph(drag_stops[_ARGS_]);

	return 0;
    }
}

__END_METHOD_CODE__


	METHOD SourceView!map_drag_arrow_at
		CALLS
		is_code_widget : SourceView,
		CreateGlyphsWorkProc : SourceView,
		copy_colors : SourceView,
		map_glyph : SourceView,
		unmap_glyph : SourceView



		METRICS
			arrow_x_offset REFERRED 1 TIMES,
			drag_arrows REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 4
			AVVARLEN 12
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 25
			LT 0
			METHOD map_drag_arrow_at
			METHODID 133
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:12 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:25 LT:0 METHOD:map_drag_arrow_at METHODID:133 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:2 
		;


#ID 133-map_drag_arrow_at

__BEGIN_METHOD_CODE__

SourceView::map_drag_arrow_at(Widget glyph, XmTextPosition pos, 
				     Widget origin)
{
     ;
    Position x, y;
    Boolean pos_displayed = (pos != XmTextPosition(-1) 
			     && XmTextPosToXY(glyph, pos, &x, &y));

    int k = int(is_code_widget(glyph));

    Widget& drag_arrow = drag_arrows[_ARGS_];

    while(drag_arrow == 0)
    {
	if(CreateGlyphsWorkProc(0))
	    break;
    }

    copy_colors(drag_arrow, origin);

    if(pos_displayed)
	map_glyph(drag_arrow, x + arrow_x_offset, y);
    else
	unmap_glyph(drag_arrow);

    return drag_arrow;
}

__END_METHOD_CODE__


	METHOD SourceView!UpdateGlyphsWorkProc
		CALLS
		glyphs_to_be_updated : SourceView,
		size : WidgetArray,
		size : WidgetArray,
		unmap_glyph : SourceView,
		update_glyphs_now : SourceView



		METRICS
			source_text_w REFERRED 1 TIMES,
			change_glyphs REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 10
			AVVARLEN 13
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 2
			EQTEST 0
			EXPRORCALL 17
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 36
			LT 1
			METHOD UpdateGlyphsWorkProc
			METHODID 138
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:10 AVVARLEN:13 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:2 EQTEST:0 EXPRORCALL:17 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:36 LT:1 METHOD:UpdateGlyphsWorkProc METHODID:138 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:2 
		;


#ID 138-UpdateGlyphsWorkProc

__BEGIN_METHOD_CODE__

SourceView::UpdateGlyphsWorkProc(XtPointer client_data, XtIntervalId *id)
{
    (void) id;			 

     
    XtIntervalId *proc_id = ((XtIntervalId *) client_data);
    if(proc_id != 0)
    {
	 ;
	*proc_id = 0;
    }

    XtAppContext app_context = XtWidgetToApplicationContext(source_text_w);
    if(XtAppPending(app_context) & (1  | 4 ))
    {
	 
	const WidgetArray& glyphs = glyphs_to_be_updated();

	if(glyphs.size() > 0)
	{
	     
	     
	    for(int i = 0; i < glyphs.size(); i++)
		unmap_glyph(glyphs[_ARGS_]);

	    XtIntervalId new_id = 
		XtAppAddTimeOut(app_context, 10,
				UpdateGlyphsWorkProc, client_data);
	    if(proc_id != 0)
		*proc_id = new_id;
	    return;
	}
    }

    change_glyphs = true;
    update_glyphs_now();
}

__END_METHOD_CODE__


	METHOD SourceView!update_glyphs_now
		CALLS
		is_current_file : SourceView,
		base_matches : SourceView,
		pos_of_line : SourceView,
		map_arrow_at : SourceView,
		find_pc : SourceView,
		map_arrow_at : SourceView,
		first : BreakPointMap,
		next : BreakPointMap,
		code_glyph : BreakPoint,
		source_glyph : BreakPoint,
		bp_matches : SourceView,
		line_nr : BreakPoint,
		line_nr : BreakPoint,
		pos_of_line : SourceView,
		line_nr : BreakPoint,
		type : _SYSTEM_OR_USER_,
		find_pc : SourceView,
		address : BreakPoint,
		dispo : BreakPoint,
		enabled : _SYSTEM_OR_USER_,
		map_stop_at : SourceView,
		map_stop_at : SourceView,
		condition : BreakPoint,
		ignore_count : BreakPoint,
		enabled : _SYSTEM_OR_USER_,
		map_stop_at : SourceView,
		map_stop_at : SourceView,
		enabled : _SYSTEM_OR_USER_,
		map_stop_at : SourceView,
		map_stop_at : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView,
		unmap_glyph : SourceView



		METRICS
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 2 TIMES,
			display_glyphs REFERRED 3 TIMES,
			bp_map REFERRED 2 TIMES,
			line_count REFERRED 4 TIMES,
			last_execution_line REFERRED 3 TIMES,
			plain_stops REFERRED 2 TIMES,
			grey_stops REFERRED 2 TIMES,
			plain_conds REFERRED 2 TIMES,
			grey_conds REFERRED 2 TIMES,
			plain_temps REFERRED 2 TIMES,
			grey_temps REFERRED 2 TIMES,
			update_code_glyphs REFERRED 3 TIMES,
			update_source_glyphs REFERRED 3 TIMES,
			change_glyphs REFERRED 1 TIMES,
			changed_glyphs REFERRED 1 TIMES,
			ARRAYOP 18
			ASS 42
			AVVARLEN 12
			CALLEDN 36
			CLASS SourceView
			CLASSID 107
			CYCLO 25
			DOTS 2
			EQTEST 3
			EXPRORCALL 69
			GE 0
			GT 3
			IN 0
			INDR 13
			LE 3
			LOC 143
			LT 4
			METHOD update_glyphs_now
			METHODID 140
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 45
			TERNINSTR 2
			USEDVARS 16

#METRICS ARRAYOP:18 ASS:42 AVVARLEN:12 CALLEDN:36 CLASS:SourceView CLASSID:107 CYCLO:25 DOTS:2 EQTEST:3 EXPRORCALL:69 GE:0 GT:3 IN:0 INDR:13 LE:3 LOC:143 LT:4 METHOD:update_glyphs_now METHODID:140 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:45 TERNINSTR:2 USEDVARS:16 
		;


#ID 140-update_glyphs_now

__BEGIN_METHOD_CODE__

SourceView::update_glyphs_now()
{
     

    WidgetArray empty;
    changed_glyphs = empty;

    if(update_source_glyphs)
    {
	 
	XmTextPosition pos = XmTextPosition(-1);

	if(display_glyphs &&
	    (is_current_file(last_execution_file) ||
	     base_matches(last_execution_file, current_file_name)) &&
	     line_count > 0 &&
	     last_execution_line > 0 &&
	     last_execution_line <= line_count)
	{
	    pos = pos_of_line(last_execution_line);
	}

	map_arrow_at(source_text_w, pos);
    }

    if(update_code_glyphs)
    {
	 
	XmTextPosition pos = XmTextPosition(-1);

	if(display_glyphs && last_execution_pc != _REMOVED_STR_)
	    pos = find_pc(last_execution_pc);

	map_arrow_at(code_text_w, pos);
    }

     
    for(int k = 0; k < 2; k++)
    {
	if(k == 0 && !update_source_glyphs)
	    continue;
	if(k == 1 && !update_code_glyphs)
	    continue;

	int plain_stops_count = 0;
	int grey_stops_count  = 0;

	int plain_conds_count = 0;
	int grey_conds_count  = 0;

	int plain_temps_count = 0;
	int grey_temps_count  = 0;

	if(display_glyphs)
	{
	    TextPositionArray positions;
	    
	    MapRef ref;
	    for(BreakPoint *bp = bp_map.first(ref);
		 bp != 0;
		 bp = bp_map.next(ref))
	    {
		Widget& bp_glyph = k ? bp->code_glyph() : bp->source_glyph();
		Widget text_w    = k ? code_text_w      : source_text_w;
		bp_glyph = 0;

		XmTextPosition pos;
		if(k == 0)
		{
		     
		    if(!bp_matches(bp)
			|| line_count <= 0
			|| bp->line_nr() <= 0
			|| bp->line_nr() > line_count)
			continue;

		    pos = pos_of_line(bp->line_nr());
		}
		else
		{
		     
		    if(bp->type() != BREAKPOINT)
			continue;

		    pos = find_pc(bp->address());
		}

		if(bp->dispo() != BPKEEP)
		{
		     
		    if(bp->enabled())
			bp_glyph = map_stop_at(text_w, pos, plain_temps[_ARGS_],
					       plain_temps_count, positions);
		    else
			bp_glyph = map_stop_at(text_w, pos, grey_temps[_ARGS_],
					       grey_temps_count, positions);
		}
		else if(bp->condition() != _REMOVED_STR_ || bp->ignore_count() != 0)
		{
		     
		    if(bp->enabled())
			bp_glyph = map_stop_at(text_w, pos, plain_conds[_ARGS_],
					       plain_conds_count, positions);
		    else
			bp_glyph = map_stop_at(text_w, pos, grey_conds[_ARGS_],
					       grey_conds_count, positions);
		}
		else
		{
		     
		    if(bp->enabled())
			bp_glyph = map_stop_at(text_w, pos, plain_stops[_ARGS_],
					       plain_stops_count, positions);
		    else
			bp_glyph = map_stop_at(text_w, pos, grey_stops[_ARGS_],
					       grey_stops_count, positions);
		}
	    }
	}

	 
	Widget glyph;
	while((glyph = plain_stops[_ARGS_][_ARGS_]))
	    unmap_glyph(glyph);
	while((glyph = grey_stops[_ARGS_][_ARGS_]))
	    unmap_glyph(glyph);
	while((glyph = plain_conds[_ARGS_][_ARGS_]))
	    unmap_glyph(glyph);
	while((glyph = grey_conds[_ARGS_][_ARGS_]))
	    unmap_glyph(glyph);
	while((glyph = plain_temps[_ARGS_][_ARGS_]))
	    unmap_glyph(glyph);
	while((glyph = grey_temps[_ARGS_][_ARGS_]))
	    unmap_glyph(glyph);
    }

    if(change_glyphs)
    {
	update_source_glyphs = false;
	update_code_glyphs   = false;
    }

     
}

__END_METHOD_CODE__


	METHOD SourceView!glyphs_to_be_updated
		CALLS
		update_glyphs_now : SourceView



		METRICS
			change_glyphs REFERRED 2 TIMES,
			changed_glyphs REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 13
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD glyphs_to_be_updated
			METHODID 141
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:13 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:glyphs_to_be_updated METHODID:141 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:2 
		;


#ID 141-glyphs_to_be_updated

__BEGIN_METHOD_CODE__

SourceView::glyphs_to_be_updated()
{
    change_glyphs = false;
    update_glyphs_now();
    change_glyphs = true;

     
     
     
     

    return changed_glyphs;
}

__END_METHOD_CODE__


	METHOD SourceView!set_display_glyphs
		CALLS
		show_execution_position : SourceView,
		UpdateGlyphsWorkProc : SourceView,
		refresh_bp_disp : SourceView,
		delay : _SYSTEM_OR_USER_,
		refresh_bp_disp : SourceView,
		show_execution_position : SourceView,
		itostring : _SYSTEM_OR_USER_,
		show_pc : SourceView



		METRICS
			source_text_w REFERRED 2 TIMES,
			display_glyphs REFERRED 4 TIMES,
			at_lowest_frame REFERRED 1 TIMES,
			signal_received REFERRED 1 TIMES,
			last_execution_line REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 13
			AVVARLEN 15
			CALLEDN 8
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 35
			LT 0
			METHOD set_display_glyphs
			METHODID 182
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 15
			TERNINSTR 1
			USEDVARS 5

#METRICS ARRAYOP:0 ASS:13 AVVARLEN:15 CALLEDN:8 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:35 LT:0 METHOD:set_display_glyphs METHODID:182 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:15 TERNINSTR:1 USEDVARS:5 
		;


#ID 182-set_display_glyphs

__BEGIN_METHOD_CODE__

SourceView::set_display_glyphs(bool set)
{
    if(display_glyphs != set)
    {
	 
	string file   = last_execution_file;
	int    line   = last_execution_line;
	string pc     = last_execution_pc;
	bool stopped  = at_lowest_frame;
	bool signaled = signal_received;

	if((XtWindowOfObject( source_text_w ) != 0L ) )
	{
	    display_glyphs = false;	
	    show_execution_position();
	    UpdateGlyphsWorkProc(0, 0);

	    display_glyphs = true;
	    refresh_bp_disp();
	}

	display_glyphs = set;

	if((XtWindowOfObject( source_text_w ) != 0L ) )
	{
	    StatusDelay delay(set ? _REMOVED_STR_ : _REMOVED_STR_);

	    refresh_bp_disp();
	    if(file != _REMOVED_STR_)
		show_execution_position(file + _REMOVED_STR_ + itostring(line), 
					stopped, signaled);
	    if(pc != _REMOVED_STR_)
		show_pc(pc, XmHIGHLIGHT_SELECTED);
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!set_display_line_numbers
		CALLS
		delay : _SYSTEM_OR_USER_,
		reload : SourceView



		METRICS
			source_text_w REFERRED 1 TIMES,
			display_line_numbers REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 16
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD set_display_line_numbers
			METHODID 183
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 1
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:16 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:set_display_line_numbers METHODID:183 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:1 USEDVARS:2 
		;


#ID 183-set_display_line_numbers

__BEGIN_METHOD_CODE__

SourceView::set_display_line_numbers(bool set)
{
    if(display_line_numbers != set)
    {
	display_line_numbers = set;

	if((XtWindowOfObject( source_text_w ) != 0L ) )
	{
	    StatusDelay delay(set ? _REMOVED_STR_ : 
			      _REMOVED_STR_);
	    reload();
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!help_on_glyph
		CALLS
		help_on_pos : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD help_on_glyph
			METHODID 222
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:help_on_glyph METHODID:222 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 222-help_on_glyph

__BEGIN_METHOD_CODE__

SourceView::help_on_glyph(Widget glyph, bool detailed)
{
    XmTextPosition dummy;
    return help_on_pos(glyph, 0, dummy, detailed);
}

__END_METHOD_CODE__


	METHOD SourceView!help_on_pos
		CALLS
		MString : MString,
		get_line_of_pos : SourceView,
		MString : MString,
		pos_of_line : SourceView,
		indent_amount : SourceView,
		help_on_bp : SourceView



		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 13
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 16
			LT 0
			METHOD help_on_pos
			METHODID 223
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 3
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:13 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:16 LT:0 METHOD:help_on_pos METHODID:223 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:3 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:1 
		;


#ID 223-help_on_pos

__BEGIN_METHOD_CODE__

SourceView::help_on_pos(Widget w, XmTextPosition pos, 
				XmTextPosition& ref, bool detailed)
{
    if(w == 0)
	return MString(0, true);

    int line_nr;
    bool in_text;
    int bp_nr;
    string address;
    bool pos_found = get_line_of_pos(w, pos, line_nr, address, in_text, bp_nr);

    if(!pos_found || bp_nr == 0)
	return MString(0, true);

    ref = pos_of_line(line_nr) + indent_amount(source_text_w) - 1;
    return help_on_bp(bp_nr, detailed);
}

__END_METHOD_CODE__


	METHOD SourceView!help_on_bp
		CALLS
		get : BreakPointMap,
		MString : MString,
		type : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		tt : _SYSTEM_OR_USER_,
		number_str : BreakPoint,
		enabled : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		infos : BreakPoint,
		strip_space : _SYSTEM_OR_USER_,
		gsub : string,
		infos : BreakPoint,
		rm : _SYSTEM_OR_USER_,
		dispo : BreakPoint,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_,
		rm : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 12
			AVVARLEN 6
			CALLEDN 19
			CLASS SourceView
			CLASSID 107
			CYCLO 12
			DOTS 2
			EQTEST 1
			EXPRORCALL 25
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 47
			LT 0
			METHOD help_on_bp
			METHODID 114
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:12 AVVARLEN:6 CALLEDN:19 CLASS:SourceView CLASSID:107 CYCLO:12 DOTS:2 EQTEST:1 EXPRORCALL:25 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:47 LT:0 METHOD:help_on_bp METHODID:114 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:1 
		;


#ID 114-help_on_bp

__BEGIN_METHOD_CODE__

SourceView::help_on_bp(int bp_nr, bool detailed)
{
    BreakPoint *bp = bp_map.get(bp_nr);
    if(bp == 0)
	return MString(0, true);

    MString info;
    switch(bp->type())
    {
    case BREAKPOINT:
	info = rm(_REMOVED_STR_);
	break;
    case WATCHPOINT:
	info = rm(_REMOVED_STR_);
	break;
    }
    info += tt(bp->number_str());

    if(detailed)
    {
	if(bp->enabled())
	    info += rm(_REMOVED_STR_);
	else
	    info += rm(_REMOVED_STR_);

	string infos = bp->infos();
	strip_space(infos);
	infos.gsub(_REMOVED_STR_, _REMOVED_STR_);

	if(bp->infos() != _REMOVED_STR_)
	    info += rm(_REMOVED_STR_ + infos);

	switch(bp->dispo())
	{
	case BPKEEP:
	    break;
	case BPDEL:
	    info += rm(_REMOVED_STR_);
	    break;
	case BPDIS:
	    info += rm(_REMOVED_STR_);
	    break;
	}
	info += rm(_REMOVED_STR_);
    }

    return info;
}

__END_METHOD_CODE__


	METHOD SourceView!glyph_position
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView,
		point : _SYSTEM_OR_USER_,
		translate_glyph_pos : SourceView,
		current_text : SourceView,
		length : string,
		max : DynArray,
		min : _SYSTEM_OR_USER_,
		length : string,
		current_text : SourceView,
		min : _SYSTEM_OR_USER_,
		length : string



		METRICS
			source_text_w REFERRED 2 TIMES,
			code_text_w REFERRED 2 TIMES,
			ARRAYOP 8
			ASS 15
			AVVARLEN 12
			CALLEDN 13
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 3
			EQTEST 1
			EXPRORCALL 29
			GE 0
			GT 3
			IN 0
			INDR 0
			LE 0
			LOC 48
			LT 2
			METHOD glyph_position
			METHODID 129
			MMINUS 2
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 19
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:8 ASS:15 AVVARLEN:12 CALLEDN:13 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:3 EQTEST:1 EXPRORCALL:29 GE:0 GT:3 IN:0 INDR:0 LE:0 LOC:48 LT:2 METHOD:glyph_position METHODID:129 MMINUS:2 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:19 TERNINSTR:0 USEDVARS:2 
		;


#ID 129-glyph_position

__BEGIN_METHOD_CODE__

SourceView::glyph_position(Widget glyph, XEvent *e, 
					  bool normalize)
{
    Widget text_w;
    if(is_source_widget(glyph))
	text_w = source_text_w;
    else if(is_code_widget(glyph))
	text_w = code_text_w;
    else
	return XmTextPosition(-1);

    BoxPoint p = point(e);
    if(glyph != source_text_w && glyph != code_text_w)
    {
	 
	translate_glyph_pos(glyph, text_w, p[_ARGS_], p[_ARGS_]);
    }

     
    XmTextPosition pos = XmTextXYToPos(text_w, p[_ARGS_], p[_ARGS_]);

     
    short rows = 0;
    XmTextPosition current_top = 0;
    XtVaGetValues(text_w,
		  ((char *)&_XmStrings[_ARGS_]) , &rows,
		  ((char *)&_XmStrings[_ARGS_]) , &current_top,
		  __null );

    const string& text = current_text(text_w);
    XmTextPosition current_bottom = current_top;
    while(current_bottom < int(text.length()) && rows > 0)
	if(text[_ARGS_] == '\n')
	    rows--;

    if(pos < current_top)
	pos = max(current_top - 1, 0);
    else if(pos > current_bottom)
	pos = min(current_bottom + 1, text.length());

    if(normalize)
    {
	const string& text = current_text(glyph);
	pos = min(pos, text.length());
	while(pos > 0 && text[_ARGS_] != '\n')
	    pos--;
    }

    return pos;
}

__END_METHOD_CODE__


	METHOD SourceView!dragGlyphAct
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView,
		translate_glyph_pos : SourceView,
		has_jump_command : GDBAgent,
		has_assign_command : GDBAgent,
		XCreateFontCursor : _SYSTEM_OR_USER_,
		XDefineCursor : _SYSTEM_OR_USER_,
		unmap_drag_stop : SourceView,
		unmap_drag_arrow : SourceView,
		first : BreakPointMap,
		next : BreakPointMap,
		source_glyph : BreakPoint,
		code_glyph : BreakPoint,
		number : BreakPoint



		METRICS
			source_text_w REFERRED 1 TIMES,
			code_text_w REFERRED 1 TIMES,
			bp_map REFERRED 2 TIMES,
			current_drag_origin REFERRED 1 TIMES,
			current_drag_breakpoint REFERRED 2 TIMES,
			plain_arrows REFERRED 1 TIMES,
			grey_arrows REFERRED 1 TIMES,
			drag_arrows REFERRED 1 TIMES,
			drag_stops REFERRED 1 TIMES,
			drag_conds REFERRED 1 TIMES,
			drag_temps REFERRED 1 TIMES,
			ARRAYOP 6
			ASS 15
			AVVARLEN 12
			CALLEDN 14
			CLASS SourceView
			CLASSID 107
			CYCLO 12
			DOTS 6
			EQTEST 8
			EXPRORCALL 39
			GE 0
			GT 0
			IN 0
			INDR 17
			LE 0
			LOC 76
			LT 1
			METHOD dragGlyphAct
			METHODID 79
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 28
			TERNINSTR 0
			USEDVARS 11

#METRICS ARRAYOP:6 ASS:15 AVVARLEN:12 CALLEDN:14 CLASS:SourceView CLASSID:107 CYCLO:12 DOTS:6 EQTEST:8 EXPRORCALL:39 GE:0 GT:0 IN:0 INDR:17 LE:0 LOC:76 LT:1 METHOD:dragGlyphAct METHODID:79 MMINUS:0 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:28 TERNINSTR:0 USEDVARS:11 
		;


#ID 79-dragGlyphAct

__BEGIN_METHOD_CODE__

SourceView::dragGlyphAct(Widget glyph, XEvent *e, String *params, 
			      Cardinal *num_params)
{
    if(e->type != 4  && e->type != 5 )
	return;

    Widget text_w;
    if(is_source_widget(glyph))
	text_w = source_text_w;
    else if(is_code_widget(glyph))
	text_w = code_text_w;
    else
	return;			 

    if(! (XtWindowOfObject( text_w ) != 0L ) )
	return;

     
    XButtonEvent *event = &e->xbutton;
    translate_glyph_pos(glyph, text_w, event->x, event->y);
    event->window = (( text_w )->core.window) ;
    XtCallActionProc(text_w, _REMOVED_STR_, e, 
		     params, *num_params);

     
    XtCallActionProc(text_w, _REMOVED_STR_, e,
		     params, *num_params);

     
    int k;
    for(k = 0; k < 2; k++)
    {
	if(glyph == grey_arrows[_ARGS_])
	{
	     
	    return;
	}
	else if(glyph == plain_arrows[_ARGS_])
	{
	    if(!gdb->has_jump_command() && !gdb->has_assign_command())
	    {
		 
		return;
	    }
	}
	else if(glyph == drag_stops[_ARGS_] || 
		 glyph == drag_conds[_ARGS_] || 
		 glyph == drag_temps[_ARGS_] || 
		 glyph == drag_arrows[_ARGS_])
	{
	     
	    return;
	}
    }

    static Cursor move_cursor = XCreateFontCursor((( ( glyph )->core.screen )->display)  , 52 );

     

    XDefineCursor((( ( glyph )->core.screen )->display)  , (( glyph )->core.window) , move_cursor);

    unmap_drag_stop(text_w);
    unmap_drag_arrow(text_w);

    current_drag_origin     = glyph;
    current_drag_breakpoint = 0;

     
    MapRef ref;
    for(BreakPoint *bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
    {
	if(glyph == bp->source_glyph() || glyph == bp->code_glyph())
	{
	    current_drag_breakpoint = bp->number();
	    break;
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!followGlyphAct
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView,
		glyph_position : SourceView,
		ShowPosition : SourceView,
		CheckScrollCB : SourceView,
		map_drag_stop_at : SourceView,
		map_drag_arrow_at : SourceView



		METRICS
			source_text_w REFERRED 1 TIMES,
			code_text_w REFERRED 1 TIMES,
			current_drag_origin REFERRED 1 TIMES,
			current_drag_breakpoint REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 16
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 25
			LT 0
			METHOD followGlyphAct
			METHODID 80
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:16 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:25 LT:0 METHOD:followGlyphAct METHODID:80 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:4 
		;


#ID 80-followGlyphAct

__BEGIN_METHOD_CODE__

SourceView::followGlyphAct(Widget glyph, XEvent *e, String *, Cardinal *)
{
    if(glyph != current_drag_origin)
	return;

    Widget text_w;
    if(is_source_widget(glyph))
	text_w = source_text_w;
    else if(is_code_widget(glyph))
	text_w = code_text_w;
    else
	return;			 

    XmTextPosition pos = glyph_position(glyph, e);

     
    ShowPosition(text_w, pos);

     
    CheckScrollCB(glyph, XtPointer(0), XtPointer(0));

    if(current_drag_breakpoint)
	map_drag_stop_at(text_w, pos, glyph);
    else
	map_drag_arrow_at(text_w, pos, glyph);
}

__END_METHOD_CODE__


	METHOD SourceView!dropGlyphAct
		CALLS
		is_source_widget : SourceView,
		is_code_widget : SourceView,
		XUndefineCursor : _SYSTEM_OR_USER_,
		unmap_drag_stop : SourceView,
		unmap_drag_arrow : SourceView,
		update_glyphs : SourceView,
		glyph_position : SourceView,
		get_line_of_pos : SourceView,
		current_source_name : SourceView,
		itostring : _SYSTEM_OR_USER_,
		string : string,
		current_source_name : SourceView,
		itostring : _SYSTEM_OR_USER_,
		downcase : string,
		quote : _SYSTEM_OR_USER_,
		move_bp : SourceView,
		move_pc : SourceView,
		SetInsertionPosition : SourceView



		METRICS
			source_text_w REFERRED 1 TIMES,
			code_text_w REFERRED 3 TIMES,
			current_drag_origin REFERRED 2 TIMES,
			current_drag_breakpoint REFERRED 3 TIMES,
			grey_arrows REFERRED 1 TIMES,
			drag_arrows REFERRED 1 TIMES,
			drag_stops REFERRED 1 TIMES,
			drag_conds REFERRED 1 TIMES,
			drag_temps REFERRED 1 TIMES,
			ARRAYOP 6
			ASS 24
			AVVARLEN 13
			CALLEDN 18
			CLASS SourceView
			CLASSID 107
			CYCLO 22
			DOTS 3
			EQTEST 15
			EXPRORCALL 47
			GE 0
			GT 1
			IN 0
			INDR 5
			LE 0
			LOC 115
			LT 9
			METHOD dropGlyphAct
			METHODID 81
			MMINUS 0
			OUT 4
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 43
			TERNINSTR 0
			USEDVARS 9

#METRICS ARRAYOP:6 ASS:24 AVVARLEN:13 CALLEDN:18 CLASS:SourceView CLASSID:107 CYCLO:22 DOTS:3 EQTEST:15 EXPRORCALL:47 GE:0 GT:1 IN:0 INDR:5 LE:0 LOC:115 LT:9 METHOD:dropGlyphAct METHODID:81 MMINUS:0 OUT:4 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:43 TERNINSTR:0 USEDVARS:9 
		;


#ID 81-dropGlyphAct

__BEGIN_METHOD_CODE__

SourceView::dropGlyphAct(Widget glyph, XEvent *e, 
			       String *params, Cardinal *num_params)
{
    if(e->type != 4  && e->type != 5 )
	return;

    if(glyph != current_drag_origin)
	return;

    Widget text_w;
    if(is_source_widget(glyph))
	text_w = source_text_w;
    else if(is_code_widget(glyph))
	text_w = code_text_w;
    else
	return;			 

    if(! (XtWindowOfObject( text_w ) != 0L ) )
	return;

    XUndefineCursor((( ( glyph )->core.screen )->display)  , (( glyph )->core.window) );

     
    unmap_drag_stop(text_w);
    unmap_drag_arrow(text_w);

     
    update_glyphs();

    int k;
    for(k = 0; k < 2; k++)
	if(glyph == grey_arrows[_ARGS_] || 
	    glyph == drag_stops[_ARGS_] || 
	    glyph == drag_conds[_ARGS_] || 
	    glyph == drag_temps[_ARGS_] || 
	    glyph == drag_arrows[_ARGS_])
	    return;

    XmTextPosition pos = glyph_position(glyph, e);
    if(pos == XmTextPosition(-1))
	return;			 

    int line_nr = 0;
    bool in_text;
    int bp_nr;
    string address;
    if(!get_line_of_pos(text_w, pos, line_nr, address, in_text, bp_nr))
	return;			 

    if(text_w == code_text_w)
    {
	 
	if(address == _REMOVED_STR_)
	    return;		 
    }
    else
    {
	 
	if(line_nr == 0)
	    return;		 
	address = current_source_name() + ':' + itostring(line_nr);
    }

     
     

    if(text_w == code_text_w)
    {
	 
	if(address == _REMOVED_STR_)
	    return;		 
	address = string('*') + address;
    }
    else
    {
	 
	if(line_nr == 0)
	    return;		 
	address = current_source_name() + ':' + itostring(line_nr);
    }

    string p = _REMOVED_STR_;
    if(num_params != 0 && *num_params == 1)
	p = params[_ARGS_];
    if(num_params != 0 && *num_params > 1)
	cerr << _REMOVED_STR_;
    p.downcase();

    bool copy = false;
    if(p == _REMOVED_STR_)
	copy = false;
    else if(p == _REMOVED_STR_)
	copy = true;
    else
	cerr << _REMOVED_STR_ << quote(p) << _REMOVED_STR_;

    bool changed = false;
    if(current_drag_breakpoint)
    {
	 
	changed = move_bp(current_drag_breakpoint, address, text_w, copy);
    }
    else
    {
	 
	changed = move_pc(address, text_w);
    }

    if(changed)
    {
	 
	SetInsertionPosition(text_w, pos);
    }

    current_drag_origin     = 0;
    current_drag_breakpoint = 0;
}

__END_METHOD_CODE__


	METHOD SourceView!log_glyph

		METRICS
			ARRAYOP 5
			ASS 5
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 0
			EQTEST 1
			EXPRORCALL 15
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 29
			LT 32
			METHOD log_glyph
			METHODID 127
			MMINUS 0
			OUT 16
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:5 ASS:5 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:0 EQTEST:1 EXPRORCALL:15 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:29 LT:32 METHOD:log_glyph METHODID:127 MMINUS:0 OUT:16 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 127-log_glyph

__BEGIN_METHOD_CODE__

SourceView::log_glyph(Widget glyph, int n)
{
    if(glyph == 0)
	return;
    
    int left = 0;
    int top  = 0;
    Position x = 0;
    Position y = 0;
    XtPointer user_data;
    XtVaGetValues(glyph,
		  ((char *)&_XmStrings[_ARGS_]) ,           &user_data,
		  ((char *)&_XmStrings[_ARGS_]) ,         &left,
		  ((char *)&_XmStrings[_ARGS_]) ,          &top,
		  ((char*)&XtStrings[_ARGS_])  ,                  &x,
		  ((char*)&XtStrings[_ARGS_])  ,                  &y,
		  __null );

    clog << XtName(glyph);
    if(n >= 0)
	clog << _REMOVED_STR_ << n << _REMOVED_STR_;
    clog << _REMOVED_STR_;
    if(user_data)
	clog << _REMOVED_STR_;
    else
	clog << _REMOVED_STR_;

    clog << _REMOVED_STR_ << left << _REMOVED_STR_ << top << _REMOVED_STR_
	 << x << _REMOVED_STR_ << y << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD SourceView!log_glyphs
		CALLS
		size : _SYSTEM_OR_USER_,
		log_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		log_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		log_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		log_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		log_glyph : SourceView,
		size : _SYSTEM_OR_USER_,
		log_glyph : SourceView,
		log_glyph : SourceView,
		log_glyph : SourceView,
		log_glyph : SourceView,
		log_glyph : SourceView,
		log_glyph : SourceView,
		log_glyph : SourceView,
		log_glyph : SourceView



		METRICS
			disassemble REFERRED 1 TIMES,
			plain_arrows REFERRED 1 TIMES,
			grey_arrows REFERRED 1 TIMES,
			signal_arrows REFERRED 1 TIMES,
			drag_arrows REFERRED 1 TIMES,
			plain_stops REFERRED 2 TIMES,
			grey_stops REFERRED 2 TIMES,
			plain_conds REFERRED 2 TIMES,
			grey_conds REFERRED 2 TIMES,
			plain_temps REFERRED 2 TIMES,
			grey_temps REFERRED 2 TIMES,
			drag_stops REFERRED 1 TIMES,
			drag_conds REFERRED 1 TIMES,
			drag_temps REFERRED 1 TIMES,
			ARRAYOP 25
			ASS 7
			AVVARLEN 10
			CALLEDN 19
			CLASS SourceView
			CLASSID 107
			CYCLO 10
			DOTS 6
			EQTEST 1
			EXPRORCALL 28
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 37
			LT 11
			METHOD log_glyphs
			METHODID 128
			MMINUS 0
			OUT 2
			PARNUM 0
			PPLUS 7
			RETPOINT 0
			SCOPEOP 0
			STMNT 31
			TERNINSTR 0
			USEDVARS 14

#METRICS ARRAYOP:25 ASS:7 AVVARLEN:10 CALLEDN:19 CLASS:SourceView CLASSID:107 CYCLO:10 DOTS:6 EQTEST:1 EXPRORCALL:28 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:37 LT:11 METHOD:log_glyphs METHODID:128 MMINUS:0 OUT:2 PARNUM:0 PPLUS:7 RETPOINT:0 SCOPEOP:0 STMNT:31 TERNINSTR:0 USEDVARS:14 
		;


#ID 128-log_glyphs

__BEGIN_METHOD_CODE__

SourceView::log_glyphs()
{
    for(int k = 0; k < 2; k++)
    {
	if(k && !disassemble)
	    continue;

	if(k == 0)
	    clog << _REMOVED_STR_;
	else
	    clog << _REMOVED_STR_;

	int i;
	for(i = 0; i < plain_stops[_ARGS_].size() - 1; i++)
	    log_glyph(plain_stops[_ARGS_][_ARGS_], i);
	for(i = 0; i < grey_stops[_ARGS_].size() - 1; i++)
	    log_glyph(grey_stops[_ARGS_][_ARGS_], i);

	for(i = 0; i < plain_conds[_ARGS_].size() - 1; i++)
	    log_glyph(plain_conds[_ARGS_][_ARGS_], i);
	for(i = 0; i < grey_conds[_ARGS_].size() - 1; i++)
	    log_glyph(grey_conds[_ARGS_][_ARGS_], i);

	for(i = 0; i < plain_temps[_ARGS_].size() - 1; i++)
	    log_glyph(plain_temps[_ARGS_][_ARGS_], i);
	for(i = 0; i < grey_temps[_ARGS_].size() - 1; i++)
	    log_glyph(grey_temps[_ARGS_][_ARGS_], i);

	log_glyph(plain_arrows[_ARGS_]);
	log_glyph(grey_arrows[_ARGS_]);
	log_glyph(signal_arrows[_ARGS_]);
	log_glyph(drag_arrows[_ARGS_]);

	log_glyph(drag_stops[_ARGS_]);
	log_glyph(drag_conds[_ARGS_]);
	log_glyph(drag_temps[_ARGS_]);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!deleteGlyphAct
		CALLS
		first : BreakPointMap,
		next : BreakPointMap,
		source_glyph : BreakPoint,
		code_glyph : BreakPoint,
		number : BreakPoint,
		delete_bps : SourceView



		METRICS
			bp_map REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 6
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 2
			EQTEST 2
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 13
			LT 0
			METHOD deleteGlyphAct
			METHODID 82
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:6 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:2 EQTEST:2 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:13 LT:0 METHOD:deleteGlyphAct METHODID:82 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:1 
		;


#ID 82-deleteGlyphAct

__BEGIN_METHOD_CODE__

SourceView::deleteGlyphAct(Widget glyph, XEvent *, String *, Cardinal *)
{
    IntArray bps;
    MapRef ref;
    for(BreakPoint *bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
    {
	if(glyph == bp->source_glyph() || glyph == bp->code_glyph())
	{
	    bps += bp->number();
	}
    }

    delete_bps(bps, glyph);
}

__END_METHOD_CODE__


	METHOD SourceView!clear_code_cache
		CALLS
		process_disassemble : SourceView



		METRICS
			code_cache REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 10
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD clear_code_cache
			METHODID 219
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:10 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:clear_code_cache METHODID:219 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 219-clear_code_cache

__BEGIN_METHOD_CODE__

SourceView::clear_code_cache()
{
    static CodeCache empty;
    code_cache = empty;
    process_disassemble(_REMOVED_STR_);
}

__END_METHOD_CODE__


	METHOD SourceView!set_code
		CALLS
		length : _SYSTEM_OR_USER_



		METRICS
			code_text_w REFERRED 2 TIMES,
			last_pos_pc REFERRED 1 TIMES,
			last_start_highlight_pc REFERRED 1 TIMES,
			last_end_highlight_pc REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 16
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD set_code
			METHODID 113
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:16 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:set_code METHODID:113 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:4 
		;


#ID 113-set_code

__BEGIN_METHOD_CODE__

SourceView::set_code(const string& code,
			  const string& start,
			  const string& end)
{
    XmTextSetString(code_text_w, (String)code);
    XmTextSetHighlight(code_text_w, 0, code.length(), XmHIGHLIGHT_NORMAL);
    
    current_code       = code;
    current_code_start = start;
    current_code_end   = end;

    last_pos_pc             = 0;
    last_start_highlight_pc = 0;
    last_end_highlight_pc   = 0;
}

__END_METHOD_CODE__


	METHOD SourceView!process_disassemble
		CALLS
		freq : string,
		split : _SYSTEM_OR_USER_,
		length : string,
		replicate : _SYSTEM_OR_USER_,
		indent_amount : SourceView,
		set_code : SourceView,
		first_address : _SYSTEM_OR_USER_,
		last_address : _SYSTEM_OR_USER_,
		CodeCacheEntry : _SYSTEM_OR_USER_



		METRICS
			code_text_w REFERRED 1 TIMES,
			code_cache REFERRED 1 TIMES,
			cache_machine_code REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 9
			AVVARLEN 13
			CALLEDN 9
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 2
			EQTEST 1
			EXPRORCALL 16
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 27
			LT 1
			METHOD process_disassemble
			METHODID 157
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:3 ASS:9 AVVARLEN:13 CALLEDN:9 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:2 EQTEST:1 EXPRORCALL:16 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:27 LT:1 METHOD:process_disassemble METHODID:157 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:3 
		;


#ID 157-process_disassemble

__BEGIN_METHOD_CODE__

SourceView::process_disassemble(const string& disassemble_output)
{
    int count             = ((string&)disassemble_output).freq('\n') + 1;
    string *code_list     = new string[_ARGS_];

    split((string &)disassemble_output, code_list, count, '\n');

    string indented_code;
    for(int i = 0; i < count; i++)
    {
	string& line = code_list[_ARGS_];
	untabify_if_needed(line);
	if(line.length() > 0 && line[_ARGS_] == '0')
	    line = replicate(' ', indent_amount(code_text_w)) + line;
	indented_code += line + '\n';
    }

    set_code(indented_code,
	     first_address(disassemble_output),
	     last_address(disassemble_output));

    if(cache_machine_code
	&& current_code_start != _REMOVED_STR_
	&& current_code_end   != _REMOVED_STR_)
	code_cache += CodeCacheEntry(current_code_start, 
				     current_code_end, 
				     current_code);
}

__END_METHOD_CODE__


	METHOD SourceView!find_pc
		CALLS
		compare_address : _SYSTEM_OR_USER_,
		compare_address : _SYSTEM_OR_USER_,
		length : AssocRec,
		index : AssocRec,
		length : AssocRec,
		length : AssocRec,
		is_address_start : _SYSTEM_OR_USER_,
		at : AssocRec,
		length : _SYSTEM_OR_USER_,
		compare_address : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 5
			ASS 9
			AVVARLEN 0
			CALLEDN 14
			CLASS SourceView
			CLASSID 107
			CYCLO 8
			DOTS 7
			EQTEST 1
			EXPRORCALL 35
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 40
			LT 6
			METHOD find_pc
			METHODID 111
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 2
			RETPOINT 2
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:5 ASS:9 AVVARLEN:0 CALLEDN:14 CLASS:SourceView CLASSID:107 CYCLO:8 DOTS:7 EQTEST:1 EXPRORCALL:35 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:40 LT:6 METHOD:find_pc METHODID:111 MMINUS:0 OUT:0 PARNUM:1 PPLUS:2 RETPOINT:2 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 111-find_pc

__BEGIN_METHOD_CODE__

SourceView::find_pc(const string& pc)
{
    if(compare_address(pc, current_code_start) < 0
	|| compare_address(pc, current_code_end) > 0)
	return XmTextPosition(-1);

    XmTextPosition pos = XmTextPosition(-1);

    int i = 0;
    while(i < int(current_code.length()))
    {
	int eol = current_code.index('\n', i);
	if(eol < 0)
	    break;

	int j = i;
	while(j < int(current_code.length()) && (__ctype_b[(int) ( ( current_code[_ARGS_] ) )] & (unsigned short int)   _ISspace )  )
	    j++;

	if(j + 2 < int(current_code.length())
	    && (is_address_start(current_code[_ARGS_])))
	{
	     
	     
	    string address = current_code.at(j, eol - j);
	    int k = 0;
	    while(k < int(address.length()) && ! (__ctype_b[(int) ( ( address[_ARGS_] ) )] & (unsigned short int)   _ISspace )  )
		k++;
	    address = address.before(k);
	    if(compare_address(pc, address) == 0)
	    {
		pos = i;
		break;
	    }
	}

	i = eol + 1;
    }

    return pos;
}

__END_METHOD_CODE__


	METHOD RefreshInfo!RefreshInfo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RefreshInfo
			CLASSID 122
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD RefreshInfo
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RefreshInfo CLASSID:122 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:RefreshInfo METHODID:-1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID -1-RefreshInfo

__BEGIN_METHOD_CODE__

RefreshInfo::RefreshInfo(const string& p, XmHighlightMode m, const string& msg)
{}

__END_METHOD_CODE__


	METHOD SourceView!refresh_codeOQC
		CALLS
		process_disassemble : SourceView,
		find_pc : SourceView,
		show_pc : SourceView



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 18
			LT 0
			METHOD refresh_codeOQC
			METHODID 112
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:18 LT:0 METHOD:refresh_codeOQC METHODID:112 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 112-refresh_codeOQC

__BEGIN_METHOD_CODE__

SourceView::refresh_codeOQC(const string& answer, void *client_data)
{
    RefreshInfo *info = (RefreshInfo *)client_data;

    if(answer == NO_GDB_ANSWER)
    {
	info->delay->outcome = _REMOVED_STR_;
    }
    else
    {
	process_disassemble(answer);

	if(find_pc(info->pc) != XmTextPosition(-1))
	    show_pc(info->pc, info->mode);
    }

    delete info->delay;
    delete info;
}

__END_METHOD_CODE__


	METHOD SourceView!normalize_address
		CALLS
		downcase : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		after : string,
		contains : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_,
		prepend : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 11
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 11
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD normalize_address
			METHODID 115
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:11 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:11 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:normalize_address METHODID:115 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 115-normalize_address

__BEGIN_METHOD_CODE__

SourceView::normalize_address(string& addr)
{
    addr.downcase();
    if(addr.contains(_REMOVED_STR_, 0))
	addr = addr.after(_REMOVED_STR_);
    if(addr.contains(_REMOVED_STR_, 0))
	addr = addr.after(_REMOVED_STR_);
    if(addr.contains(_REMOVED_STR_, 0))
	addr = addr.after(_REMOVED_STR_);
    if(addr.contains(_REMOVED_STR_, -1))
	addr = addr.before(int(addr.length()) - 1);
    addr.prepend(_REMOVED_STR_);
}

__END_METHOD_CODE__


	METHOD SourceView!make_address
		CALLS
		string : string



		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD make_address
			METHODID 116
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:make_address METHODID:116 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 116-make_address

__BEGIN_METHOD_CODE__

SourceView::make_address(long pc)
{
    char buffer[_ARGS_];
    sprintf(buffer, _REMOVED_STR_, (unsigned long) pc);
    return string(buffer);
}

__END_METHOD_CODE__


	METHOD SourceView!get_func_at
		CALLS
		gdb_question : _SYSTEM_OR_USER_,
		after : string,
		index : string,
		atoi : _SYSTEM_OR_USER_,
		chars : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 5
			CLASS SourceView
			CLASSID 107
			CYCLO 3
			DOTS 5
			EQTEST 1
			EXPRORCALL 9
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 21
			LT 0
			METHOD get_func_at
			METHODID 117
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:5 CLASS:SourceView CLASSID:107 CYCLO:3 DOTS:5 EQTEST:1 EXPRORCALL:9 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:21 LT:0 METHOD:get_func_at METHODID:117 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:0 
		;


#ID 117-get_func_at

__BEGIN_METHOD_CODE__

SourceView::get_func_at(const string& address, string& func, int& offset)
{
     
     
     
    offset = 0;
    func = gdb_question(_REMOVED_STR_ + address);
    if(func == NO_GDB_ANSWER)
	return;

     
    func = func.after(_REMOVED_STR_);
    func = func.before(_REMOVED_STR_);

     
    int plus = func.index('+');
    if(plus >= 0)
    {
	offset = atoi(func.chars() + plus + 1);
	func = func.before(plus);
    }
}

__END_METHOD_CODE__


	METHOD SourceView!function_is_larger_than
		CALLS
		type : _SYSTEM_OR_USER_,
		normalize_address : SourceView,
		get_func_at : SourceView,
		strtol : _SYSTEM_OR_USER_,
		chars : _SYSTEM_OR_USER_,
		make_address : SourceView,
		get_func_at : SourceView



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 7
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 1
			EQTEST 3
			EXPRORCALL 12
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 40
			LT 0
			METHOD function_is_larger_than
			METHODID 118
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 6
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:7 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:1 EQTEST:3 EXPRORCALL:12 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:40 LT:0 METHOD:function_is_larger_than METHODID:118 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:6 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 118-function_is_larger_than

__BEGIN_METHOD_CODE__

SourceView::function_is_larger_than(string pc, int max_size)
{
    if(gdb->type() != GDB)
	return false;

     
    normalize_address(pc);
    string pc_func;
    int pc_offset;
    get_func_at(pc, pc_func, pc_offset);
    if(pc_func == NO_GDB_ANSWER)
	return true;		 

    if(pc_offset > max_size)
    {
	 
	 
	return true;
    }

     
     
    long pc_l = strtol(pc.chars(), __null , 0);
    long next_l = pc_l - pc_offset + max_size;
    string next = make_address(next_l);

    string next_func;
    int next_offset;
    get_func_at(next, next_func, next_offset);

    if(next_func == NO_GDB_ANSWER)
	return true;		 

    if(pc_func == next_func)
    {
	 
	return true;
    }

    return false;
}

__END_METHOD_CODE__


	METHOD SourceView!show_pc
		CALLS
		find_pc : SourceView,
		size : CodeCache,
		compare_address : _SYSTEM_OR_USER_,
		compare_address : _SYSTEM_OR_USER_,
		set_code : SourceView,
		find_pc : SourceView,
		function_is_larger_than : SourceView,
		strtol : _SYSTEM_OR_USER_,
		chars : _SYSTEM_OR_USER_,
		make_address : SourceView,
		RefreshInfo : RefreshInfo,
		gdb_command : _SYSTEM_OR_USER_,
		disassemble_command : GDBAgent,
		SetInsertionPosition : SourceView,
		indent_amount : SourceView,
		add_to_history : SourceView,
		index : AssocRec,
		indent_amount : SourceView,
		replicate : _SYSTEM_OR_USER_,
		length : string,
		length : string,
		length : string,
		update_glyphs : SourceView



		METRICS
			code_text_w REFERRED 8 TIMES,
			display_glyphs REFERRED 1 TIMES,
			disassemble REFERRED 1 TIMES,
			at_lowest_frame REFERRED 1 TIMES,
			signal_received REFERRED 1 TIMES,
			code_cache REFERRED 2 TIMES,
			last_pos_pc REFERRED 4 TIMES,
			last_start_highlight_pc REFERRED 4 TIMES,
			last_end_highlight_pc REFERRED 3 TIMES,
			ARRAYOP 1
			ASS 29
			AVVARLEN 14
			CALLEDN 23
			CLASS SourceView
			CLASSID 107
			CYCLO 17
			DOTS 14
			EQTEST 6
			EXPRORCALL 49
			GE 1
			GT 2
			IN 0
			INDR 1
			LE 1
			LOC 118
			LT 2
			METHOD show_pc
			METHODID 149
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 38
			TERNINSTR 0
			USEDVARS 9

#METRICS ARRAYOP:1 ASS:29 AVVARLEN:14 CALLEDN:23 CLASS:SourceView CLASSID:107 CYCLO:17 DOTS:14 EQTEST:6 EXPRORCALL:49 GE:1 GT:2 IN:0 INDR:1 LE:1 LOC:118 LT:2 METHOD:show_pc METHODID:149 MMINUS:0 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:38 TERNINSTR:0 USEDVARS:9 
		;


#ID 149-show_pc

__BEGIN_METHOD_CODE__

SourceView::show_pc(const string& pc, XmHighlightMode mode,
			 bool stopped, bool signaled)
{
    last_shown_pc = pc;
    if(mode == XmHIGHLIGHT_SELECTED)
	last_execution_pc = pc;

    if(stopped)
    {
	at_lowest_frame = true;
	signal_received = signaled;
    }

    if(!disassemble)
	return;

	
     

    XmTextPosition pos = find_pc(pc);

     
    for(int i = 0; 
	 pos == XmTextPosition(-1) && i < code_cache.size(); 
	 i++)
    {
	const CodeCacheEntry& cce = code_cache[_ARGS_];
	if(compare_address(pc, cce.start) >= 0 
	    && compare_address(pc, cce.end) <= 0)
	{
	    set_code(cce.code, cce.start, cce.end);
	    pos = find_pc(pc);
	}
    }

    if(pos == XmTextPosition(-1))
    {
	 

	string start = pc;
	string end   = _REMOVED_STR_;
	if(app_data.max_disassemble > 0 && 
	    function_is_larger_than(pc, app_data.max_disassemble))
	{
	     
	    long pc_l = strtol(pc.chars(), __null , 0);
	    end = make_address(pc_l + app_data.max_disassemble);
	}

	string msg = _REMOVED_STR_ + start;
	if(end != _REMOVED_STR_)
	    msg += _REMOVED_STR_ + end;

	RefreshInfo *info = new RefreshInfo(pc, mode, msg);

	gdb_command(gdb->disassemble_command(start, end), 0,
		    refresh_codeOQC, (void *)info);
	return;
    }

    if(pos == XmTextPosition(-1))
	return;

    SetInsertionPosition(code_text_w, pos + indent_amount(code_text_w));
    add_to_history(pc);

    XmTextPosition pos_line_end = 0;
    if(current_code != _REMOVED_STR_)
	pos_line_end = current_code.index('\n', pos) + 1;

     
    if(last_start_highlight_pc)
    {
	XmTextSetHighlight(code_text_w,
			    last_start_highlight_pc, 
			    last_end_highlight_pc,
			    XmHIGHLIGHT_NORMAL);
	last_start_highlight_pc = 0;
	last_end_highlight_pc   = 0;
    }

     
    if(mode == XmHIGHLIGHT_SELECTED)
    {
	if(!display_glyphs)
	{
	     
	    int indent = indent_amount(code_text_w);
	    string marker = _REMOVED_STR_;
	    if(last_pos_pc)
	    {
		string no_marker = replicate(' ', marker.length());
		XmTextReplace(code_text_w,
			       last_pos_pc + indent - no_marker.length(),
			       last_pos_pc + indent,
			       (String)no_marker);
	    }

	    XmTextReplace(code_text_w,
			   pos + indent - marker.length(),
			   pos + indent,
			   (String)marker);
    
	    if(pos_line_end)
	    {
		XmTextSetHighlight(code_text_w,
				    pos, pos_line_end,
				    XmHIGHLIGHT_SELECTED);

		last_start_highlight_pc = pos;
		last_end_highlight_pc   = pos_line_end;
	    }

	    last_pos_pc = pos;
	}
    }

    if(mode == XmHIGHLIGHT_SELECTED)
	update_glyphs(code_text_w);
}

__END_METHOD_CODE__


	METHOD SourceView!set_disassemble
		CALLS
		unmanage_paned_child : _SYSTEM_OR_USER_,
		manage_paned_child : _SYSTEM_OR_USER_,
		show_pc : SourceView,
		show_pc : SourceView,
		lookup : SourceView,
		line_of_cursor : SourceView



		METRICS
			code_form_w REFERRED 2 TIMES,
			disassemble REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 11
			CALLEDN 6
			CLASS SourceView
			CLASSID 107
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 22
			LT 0
			METHOD set_disassemble
			METHODID 184
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:11 CALLEDN:6 CLASS:SourceView CLASSID:107 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:22 LT:0 METHOD:set_disassemble METHODID:184 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:2 
		;


#ID 184-set_disassemble

__BEGIN_METHOD_CODE__

SourceView::set_disassemble(bool set)
{
    if(disassemble != set)
    {
	disassemble = set;

	if(!disassemble)
	{
	    unmanage_paned_child(code_form_w);
	}
	else
	{
	    manage_paned_child(code_form_w);

	    if(last_execution_pc != _REMOVED_STR_)
		show_pc(last_execution_pc, XmHIGHLIGHT_SELECTED);
	    else if(last_shown_pc != _REMOVED_STR_)
		show_pc(last_shown_pc);
	    else
		lookup(line_of_cursor());
	}
    }
}

__END_METHOD_CODE__


	METHOD SourceView!set_all_registers
		CALLS
		refresh_registers : SourceView



		METRICS
			int_registers_w REFERRED 2 TIMES,
			all_registers_w REFERRED 2 TIMES,
			all_registers REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 14
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 13
			LT 0
			METHOD set_all_registers
			METHODID 185
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:14 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:13 LT:0 METHOD:set_all_registers METHODID:185 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:3 
		;


#ID 185-set_all_registers

__BEGIN_METHOD_CODE__

SourceView::set_all_registers(bool set)
{
    if(all_registers != set)
    {
	all_registers = set;

	if(all_registers_w)
	    XmToggleButtonSetState(all_registers_w, (Boolean)set, 0 );
	if(int_registers_w)
	    XmToggleButtonSetState(int_registers_w, !(Boolean)set, 0 );

	refresh_registers();
    }
}

__END_METHOD_CODE__


	METHOD SourceView!command_list
		CALLS
		has_when_semicolon : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD command_list
			METHODID 211
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:command_list METHODID:211 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 211-command_list

__BEGIN_METHOD_CODE__

SourceView::command_list(string cmd)
{
    if(gdb->has_when_semicolon())
	return _REMOVED_STR_ + cmd + _REMOVED_STR_;
    else
	return _REMOVED_STR_ + cmd + _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD SourceView!bp_pos
		CALLS
		get : BreakPointMap,
		pos : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 6
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 0
			METHOD bp_pos
			METHODID 224
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:6 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:0 METHOD:bp_pos METHODID:224 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 224-bp_pos

__BEGIN_METHOD_CODE__

SourceView::bp_pos(int num)
{
    BreakPoint *bp = bp_map.get(num);
    if(bp == 0)
	return _REMOVED_STR_;
    else
	return bp->pos();
}

__END_METHOD_CODE__


	METHOD SourceView!have_selection

		METRICS
			source_text_w REFERRED 1 TIMES,
			code_text_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 12
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD have_selection
			METHODID 232
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:12 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:have_selection METHODID:232 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 232-have_selection

__BEGIN_METHOD_CODE__

SourceView::have_selection()
{
    XmTextPosition left, right;

    return(XmTextGetSelectionPosition(source_text_w, &left, &right)
	    || XmTextGetSelectionPosition(code_text_w, &left, &right)) 
	&& left != right;
}

__END_METHOD_CODE__


	METHOD SourceView!get_state
		CALLS
		first : BreakPointMap,
		next : BreakPointMap,
		number : BreakPoint,
		size : IntArray,
		sort : _SYSTEM_OR_USER_,
		size : IntArray,
		get : BreakPointMap,
		get_state : _SYSTEM_OR_USER_,
		get_state : _SYSTEM_OR_USER_,
		type : _SYSTEM_OR_USER_,
		line_of_cursor : SourceView,
		line_of_cursor : SourceView



		METRICS
			bp_map REFERRED 3 TIMES,
			max_breakpoint_number REFERRED 1 TIMES,
			ARRAYOP 3
			ASS 12
			AVVARLEN 13
			CALLEDN 12
			CLASS SourceView
			CLASSID 107
			CYCLO 11
			DOTS 5
			EQTEST 0
			EXPRORCALL 18
			GE 0
			GT 1
			IN 0
			INDR 4
			LE 0
			LOC 53
			LT 15
			METHOD get_state
			METHODID 235
			MMINUS 0
			OUT 6
			PARNUM 1
			PPLUS 3
			RETPOINT 1
			SCOPEOP 0
			STMNT 21
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:3 ASS:12 AVVARLEN:13 CALLEDN:12 CLASS:SourceView CLASSID:107 CYCLO:11 DOTS:5 EQTEST:0 EXPRORCALL:18 GE:0 GT:1 IN:0 INDR:4 LE:0 LOC:53 LT:15 METHOD:get_state METHODID:235 MMINUS:0 OUT:6 PARNUM:1 PPLUS:3 RETPOINT:1 SCOPEOP:0 STMNT:21 TERNINSTR:0 USEDVARS:2 
		;


#ID 235-get_state

__BEGIN_METHOD_CODE__

SourceView::get_state(ostream& os)
{
    IntArray breakpoint_nrs;
    bool ok = true;

     
    MapRef ref;
    for(BreakPoint *bp = bp_map.first(ref); bp != 0; bp = bp_map.next(ref))
	breakpoint_nrs += bp->number();

    if(breakpoint_nrs.size() > 0)
    {
	sort(breakpoint_nrs);

	 
	 
	 
	 
	 

	int max_number = breakpoint_nrs[_ARGS_];
	bool restore_old_numbers = max_number < max_breakpoint_number;

	int num = 1;
	for(int i = 0; i < breakpoint_nrs.size(); i++)
	{
	    BreakPoint *bp = bp_map.get(breakpoint_nrs[_ARGS_]);
	    if(restore_old_numbers)
	    {
		while(num < breakpoint_nrs[_ARGS_])
		    ok &= bp->get_state(os, num++, true);
	    }
	    ok &= bp->get_state(os, num++);
	}
    }

     
    switch(gdb->type())
    {
    case GDB:
	os << _REMOVED_STR_ << line_of_cursor() << '\n';
	break;

    case DBX:
    case JDB:
	break;			 

    case XDB:
	os << _REMOVED_STR_ << line_of_cursor() << '\n';
	break;
    }

    return ok;
}

__END_METHOD_CODE__


	METHOD SourceView!reset_done
		CALLS
		clear_file_cache : SourceView,
		clear_code_cache : SourceView,
		clear_dbx_lookup_cache : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD reset_done
			METHODID 142
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:reset_done METHODID:142 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 142-reset_done

__BEGIN_METHOD_CODE__

SourceView::reset_done(const string& answer, void *)
{
    (void) answer;

     
    clear_file_cache();
    clear_code_cache();
    clear_dbx_lookup_cache();
    current_file_name = _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD SourceView!reset
		CALLS
		has_delete_command : GDBAgent,
		delete_command : _SYSTEM_OR_USER_,
		first : BreakPointMap,
		next : BreakPointMap,
		itostring : _SYSTEM_OR_USER_,
		number : BreakPoint,
		c : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		has_clear_command : GDBAgent,
		first : BreakPointMap,
		next : BreakPointMap,
		c : _SYSTEM_OR_USER_,
		clear_command : SourceView,
		pos : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_



		METRICS
			bp_map REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 19
			AVVARLEN 6
			CALLEDN 15
			CLASS SourceView
			CLASSID 107
			CYCLO 6
			DOTS 14
			EQTEST 0
			EXPRORCALL 20
			GE 0
			GT 1
			IN 0
			INDR 5
			LE 0
			LOC 42
			LT 0
			METHOD reset
			METHODID 236
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 24
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:19 AVVARLEN:6 CALLEDN:15 CLASS:SourceView CLASSID:107 CYCLO:6 DOTS:14 EQTEST:0 EXPRORCALL:20 GE:0 GT:1 IN:0 INDR:5 LE:0 LOC:42 LT:0 METHOD:reset METHODID:236 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:24 TERNINSTR:0 USEDVARS:1 
		;


#ID 236-reset

__BEGIN_METHOD_CODE__

SourceView::reset()
{
     
    if(gdb->has_delete_command())
    {
	string del = gdb->delete_command();

	MapRef ref;
	int n = 0;
	for(BreakPoint *bp = bp_map.first(ref); bp != 0; 
	     bp = bp_map.next(ref))
	{
	    n++;
	    del += _REMOVED_STR_ + itostring(bp->number());
	}

	if(n > 0)
	{
	    Command c(del);
	    c.verbose  = false;
	    c.prompt   = false;
	    c.check    = true;
	    c.priority = 2 ;
	    c.callback = reset_done;
	    gdb_command(c);
	}
    }
    else if(gdb->has_clear_command())
    {
	MapRef ref;
	for(BreakPoint *bp = bp_map.first(ref); bp != 0; 
	     bp = bp_map.next(ref))
	{
	    Command c(clear_command(bp->pos()));
	    c.verbose  = false;
	    c.prompt   = false;
	    c.check    = true;
	    c.priority = 2 ;
	    c.callback = reset_done;
	    gdb_command(c);
	}
    }
}

__END_METHOD_CODE__

#=========================================================================
#File  ../../code/ddd-3.0/ddd/SourceView.o.nu.met	  Methods Number  214
#=========================================================================
#Process file ../../code/ddd-3.0/ddd/ddd.o.nu.met ... 


	METHOD VSEFlags!parse_vsl
		CALLS
		explain : VSEFlags



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSEFlags
			CLASSID 49
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 2
			METHOD parse_vsl
			METHODID -1
			MMINUS 0
			OUT 1
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSEFlags CLASSID:49 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:2 METHOD:parse_vsl METHODID:-1 MMINUS:0 OUT:1 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID -1-parse_vsl

__BEGIN_METHOD_CODE__

VSEFlags::parse_vsl(argc, argv)
{
	 
	cout << VSEFlags::explain(true);
	return 1 ;
    }

__END_METHOD_CODE__

#================================================================
#File  ../../code/ddd-3.0/ddd/ddd.o.nu.met	  Methods Number  1
#================================================================
#Process file ../../code/ddd-3.0/ddd/compare.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/glob.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/uniquify.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/StringMap.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/AsyncAgent.o.nu.met ... 


	METHOD AsyncAgent!_childStatusChange
		CALLS
		pid : Agent,
		search : _SYSTEM_OR_USER_,
		hasNewStatus : Agent,
		running : Agent



		METRICS
			new_status REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 5
			AVVARLEN 10
			CALLEDN 5
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 17
			LT 0
			METHOD _childStatusChange
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:10 CALLEDN:5 CLASS:AsyncAgent CLASSID:19 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:17 LT:0 METHOD:_childStatusChange METHODID:6 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-_childStatusChange

__BEGIN_METHOD_CODE__

AsyncAgent::_childStatusChange(XtPointer client_data, XtIntervalId *)
{
    AsyncAgent *a = (AsyncAgent *)client_data;

    pid_t agent_pid  = a->pid();
    int agent_status = a->new_status;

     
    Agent *agent = Agent::runningAgents.search(int(agent_pid));
    if(agent == 0)
	agent = a;

     
    agent->hasNewStatus(agent_status);

     
    (void)(agent->running());
}

__END_METHOD_CODE__


	METHOD AsyncAgent!childStatusChange
		CALLS
		appContext : AsyncAgent



		METRICS
			new_status REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 10
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 8
			LT 0
			METHOD childStatusChange
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:10 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:8 LT:0 METHOD:childStatusChange METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-childStatusChange

__BEGIN_METHOD_CODE__

AsyncAgent::childStatusChange(Agent *agent, void *, void *call_data)
{
    AsyncAgent *a = (AsyncAgent *)agent;
    a->new_status  = (int)call_data;

     
     
    XtAppAddTimeOut(a->appContext(), 1, _childStatusChange, XtPointer(a));
}

__END_METHOD_CODE__


	METHOD AsyncAgent!somethingHappened
		CALLS
		dispatch : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD somethingHappened
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:somethingHappened METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-somethingHappened

__BEGIN_METHOD_CODE__

AsyncAgent::somethingHappened(XtPointer client_data, int *fid,
    XtInputId *inputId)
{
    AsyncAgent *agent = (AsyncAgent *)client_data;
    agent->dispatch(fid, inputId);
}

__END_METHOD_CODE__


	METHOD AsyncAgent!initHandlers

		METRICS
			_handlers REFERRED 1 TIMES,
			_ids REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 3
			AVVARLEN 6
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 1
			METHOD initHandlers
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:6 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:1 METHOD:initHandlers METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:2 
		;


#ID 1-initHandlers

__BEGIN_METHOD_CODE__

AsyncAgent::initHandlers()
{
    for(unsigned type = 0; type < AsyncAgent_NHandlers; type++)
    {
	_handlers[_ARGS_] = 0;
	_ids[_ARGS_] = 0;
    }
}

__END_METHOD_CODE__


	METHOD AsyncAgent!clearHandlers
		CALLS
		setHandler : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD clearHandlers
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:clearHandlers METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-clearHandlers

__BEGIN_METHOD_CODE__

AsyncAgent::clearHandlers()
{
    for(unsigned type = 0; type < AsyncAgent_NHandlers; type++)
	setHandler(type);
}

__END_METHOD_CODE__


	METHOD AsyncAgent!addDeathOfChildHandler
		CALLS
		addHandler : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD addDeathOfChildHandler
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:addDeathOfChildHandler METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-addDeathOfChildHandler

__BEGIN_METHOD_CODE__

AsyncAgent::addDeathOfChildHandler()
{
    addHandler(_Died, childStatusChange, XtPointer(this));
}

__END_METHOD_CODE__


	METHOD AsyncAgent!setHandler
		CALLS
		handler : AsyncAgent,
		id : AsyncAgent,
		id : AsyncAgent,
		outputfp : Agent,
		inputfp : Agent,
		errorfp : Agent,
		outputfp : Agent,
		inputfp : Agent,
		errorfp : Agent,
		abort : AsyncAgent,
		appContext : AsyncAgent,
		fileno : _SYSTEM_OR_USER_



		METRICS
			_handlers REFERRED 1 TIMES,
			_ids REFERRED 2 TIMES,
			ARRAYOP 3
			ASS 18
			AVVARLEN 6
			CALLEDN 12
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 11
			DOTS 0
			EQTEST 0
			EXPRORCALL 30
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 58
			LT 12
			METHOD setHandler
			METHODID 13
			MMINUS 0
			OUT 6
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 28
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:3 ASS:18 AVVARLEN:6 CALLEDN:12 CLASS:AsyncAgent CLASSID:19 CYCLO:11 DOTS:0 EQTEST:0 EXPRORCALL:30 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:58 LT:12 METHOD:setHandler METHODID:13 MMINUS:0 OUT:6 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:28 TERNINSTR:0 USEDVARS:2 
		;


#ID 13-setHandler

__BEGIN_METHOD_CODE__

AsyncAgent::setHandler(unsigned type, AsyncAgentHandler h)
{
     
    AsyncAgentHandler old_handler = handler(type);
    if(id(type))
    {
	XtRemoveInput(id(type));
	_ids[_ARGS_] = 0;
    }

     
    FILE *sourcefp      = 0;
    XtPointer condition = 0;

    switch(type)
    {
	case OutputReady:
	    sourcefp  = outputfp();
	    condition = XtPointer((1L<<1) );
	    break;

	case InputReady:
	    sourcefp  = inputfp();
	    condition = XtPointer((1L<<0) );
	    break;

	case ErrorReady:
	    sourcefp  = errorfp();
	    condition = XtPointer((1L<<0) );
	    break;

	case OutputException:
	    sourcefp  = outputfp();
	    condition = XtPointer((1L<<2) );
	    break;

	case InputException:
	    sourcefp  = inputfp();
	    condition = XtPointer((1L<<2) );
	    break;

	case ErrorException:
	    sourcefp  = errorfp();
	    condition = XtPointer((1L<<2) );
	    break;

	default:
	     ;		 
	    ::abort();
    }

    _handlers[_ARGS_] = h;

    if(h && sourcefp)
	_ids[_ARGS_] = XtAppAddInput(appContext(), fileno(sourcefp), condition,
	    somethingHappened, (XtPointer)this);

    return old_handler;
}

__END_METHOD_CODE__


	METHOD AsyncAgent!dispatch
		CALLS
		id : AsyncAgent,
		handler : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 2
			METHOD dispatch
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:AsyncAgent CLASSID:19 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:2 METHOD:dispatch METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-dispatch

__BEGIN_METHOD_CODE__

AsyncAgent::dispatch(int *, XtInputId *inputId)
{
     
    unsigned type;
    for(type = 0; type < AsyncAgent_NHandlers && id(type) != *inputId; type++)
	;
    
     
    if(type < AsyncAgent_NHandlers)
    {
	(*(handler(type)))(this);
    }


}

__END_METHOD_CODE__


	METHOD AsyncAgent!abort
		CALLS
		removeInput : AsyncAgent,
		abort : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 1
			METHOD abort
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 1
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:AsyncAgent CLASSID:19 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:1 METHOD:abort METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:1 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-abort

__BEGIN_METHOD_CODE__

AsyncAgent::abort()
{
     
    for(unsigned type = 0; type < AsyncAgent_NHandlers; type++)
	removeInput(type);

     
    Agent::abort();
}

__END_METHOD_CODE__


	METHOD AsyncAgent!closeChannel
		CALLS
		inputfp : Agent,
		removeInput : AsyncAgent,
		removeInput : AsyncAgent,
		errorfp : Agent,
		removeInput : AsyncAgent,
		removeInput : AsyncAgent,
		outputfp : Agent,
		removeInput : AsyncAgent,
		removeInput : AsyncAgent,
		closeChannel : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 10
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 5
			DOTS 0
			EQTEST 3
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 22
			LT 0
			METHOD closeChannel
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:10 CLASS:AsyncAgent CLASSID:19 CYCLO:5 DOTS:0 EQTEST:3 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:22 LT:0 METHOD:closeChannel METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-closeChannel

__BEGIN_METHOD_CODE__

AsyncAgent::closeChannel(FILE *fp)
{
    if(fp)
    {
	if(fp == inputfp())
	{
	    removeInput(InputReady);
	    removeInput(InputException);
	}
	if(fp == errorfp())
	{
	    removeInput(ErrorReady);
	    removeInput(ErrorException);
	}
	if(fp == outputfp())
	{
	    removeInput(OutputReady);
	    removeInput(OutputException);
	}
    }

    Agent::closeChannel(fp);
}

__END_METHOD_CODE__


	METHOD AsyncAgent!terminateProcess
		CALLS




		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD terminateProcess
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:terminateProcess METHODID:10 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-terminateProcess

__BEGIN_METHOD_CODE__

AsyncAgent::terminateProcess(XtPointer client_data, XtIntervalId *)
{
    pid_t pid = (pid_t)client_data;
    kill(pid, 15 );
}

__END_METHOD_CODE__


	METHOD AsyncAgent!hangupProcess
		CALLS




		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD hangupProcess
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:hangupProcess METHODID:11 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-hangupProcess

__BEGIN_METHOD_CODE__

AsyncAgent::hangupProcess(XtPointer client_data, XtIntervalId *)
{ 
    pid_t pid = (pid_t)client_data;
    kill(pid, 1 );
}

__END_METHOD_CODE__


	METHOD AsyncAgent!killProcess
		CALLS




		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD killProcess
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:killProcess METHODID:12 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-killProcess

__BEGIN_METHOD_CODE__

AsyncAgent::killProcess(XtPointer client_data, XtIntervalId *)
{
    pid_t pid = (pid_t)client_data;
    kill(pid, 9 );
}

__END_METHOD_CODE__


	METHOD AsyncAgent!terminate
		CALLS
		terminate : Agent,
		waitToTerminate : Agent,
		pid : Agent,
		terminateTimeOut : Agent,
		appContext : AsyncAgent,
		terminateTimeOut : Agent,
		pid : Agent,
		hangupTimeOut : Agent,
		appContext : AsyncAgent,
		hangupTimeOut : Agent,
		pid : Agent,
		killTimeOut : Agent,
		appContext : AsyncAgent,
		killTimeOut : Agent,
		pid : Agent,
		abort : AsyncAgent,
		callHandlers : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 17
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 6
			DOTS 0
			EQTEST 0
			EXPRORCALL 28
			GE 3
			GT 4
			IN 0
			INDR 0
			LE 0
			LOC 27
			LT 0
			METHOD terminate
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 2
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:17 CLASS:AsyncAgent CLASSID:19 CYCLO:6 DOTS:0 EQTEST:0 EXPRORCALL:28 GE:3 GT:4 IN:0 INDR:0 LE:0 LOC:27 LT:0 METHOD:terminate METHODID:31 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:2 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-terminate

__BEGIN_METHOD_CODE__

AsyncAgent::terminate(bool onExit)
{
    Agent::terminate(onExit);

    if(onExit)
	Agent::waitToTerminate();
    else if(pid() > 0)
    {
	 
	 
	 
	if(terminateTimeOut() >= 0)
	    XtAppAddTimeOut(appContext(), terminateTimeOut() * 1000,
			    terminateProcess, XtPointer(pid()));

	if(hangupTimeOut() >= 0)
	    XtAppAddTimeOut(appContext(), hangupTimeOut() * 1000,
			    hangupProcess, XtPointer(pid()));

	if(killTimeOut() >= 0)
	    XtAppAddTimeOut(appContext(), killTimeOut() * 1000,
			    killProcess, XtPointer(pid()));

	 
	abort();
	callHandlers(Died, _REMOVED_STR_);
    }
}

__END_METHOD_CODE__


	METHOD AsyncAgent!waitToTerminate

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD waitToTerminate
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:waitToTerminate METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-waitToTerminate

__BEGIN_METHOD_CODE__

AsyncAgent::waitToTerminate()
{
     
}

__END_METHOD_CODE__


	METHOD AsyncAgent!callTheHandlersIfIdle
		CALLS
		isIdle : AsyncAgent,
		callHandlers : _SYSTEM_OR_USER_,
		deleteWorkProc : AsyncAgent,
		appContext : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 16
			LT 0
			METHOD callTheHandlersIfIdle
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:AsyncAgent CLASSID:19 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:16 LT:0 METHOD:callTheHandlersIfIdle METHODID:9 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-callTheHandlersIfIdle

__BEGIN_METHOD_CODE__

AsyncAgent::callTheHandlersIfIdle(XtPointer client_data, XtIntervalId *)
{
    AsyncAgentWorkProcInfo *info = (AsyncAgentWorkProcInfo *)client_data;

    if(info->agent->isIdle())
    {
	 
	info->agent->callHandlers(info->type, info->call_data);
	info->agent->deleteWorkProc(info, false);
    }
    else
    {
	 
	XtAppAddTimeOut(info->agent->appContext(), 10, callTheHandlersIfIdle,
			XtPointer(info));
    }
}

__END_METHOD_CODE__


	METHOD AsyncAgent!callTheHandlers
		CALLS
		appContext : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 7
			LT 0
			METHOD callTheHandlers
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:7 LT:0 METHOD:callTheHandlers METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-callTheHandlers

__BEGIN_METHOD_CODE__

AsyncAgent::callTheHandlers(XtPointer client_data)
{
    AsyncAgentWorkProcInfo *info = (AsyncAgentWorkProcInfo *)client_data;
    XtAppAddTimeOut(info->agent->appContext(), 1, callTheHandlersIfIdle,
		    XtPointer(info));

    return true;
}

__END_METHOD_CODE__


	METHOD AsyncAgent!callHandlersWhenIdle
		CALLS
		AsyncAgentWorkProcInfo : _SYSTEM_OR_USER_,
		appContext : AsyncAgent,
		AsyncAgentWorkProc : _SYSTEM_OR_USER_



		METRICS
			workProcs REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 9
			CALLEDN 3
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 12
			LT 0
			METHOD callHandlersWhenIdle
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:9 CALLEDN:3 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:12 LT:0 METHOD:callHandlersWhenIdle METHODID:18 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 18-callHandlersWhenIdle

__BEGIN_METHOD_CODE__

AsyncAgent::callHandlersWhenIdle(int type, void *call_data)
{
     
    AsyncAgentWorkProcInfo *info =
	new AsyncAgentWorkProcInfo(this, type, call_data);

     
    XtWorkProcId workProcId =
	XtAppAddWorkProc(appContext(), callTheHandlers, info);

     
    workProcs = new AsyncAgentWorkProc(workProcId, info, workProcs);
}

__END_METHOD_CODE__


	METHOD AsyncAgent!deleteWorkProc

		METRICS
			workProcs REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 9
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 5
			DOTS 0
			EQTEST 2
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 0
			LOC 22
			LT 0
			METHOD deleteWorkProc
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:9 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:5 DOTS:0 EQTEST:2 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:7 LE:0 LOC:22 LT:0 METHOD:deleteWorkProc METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-deleteWorkProc

__BEGIN_METHOD_CODE__

AsyncAgent::deleteWorkProc(AsyncAgentWorkProcInfo *info,
				bool remove)
{
    AsyncAgentWorkProc *prev = 0;
    for(AsyncAgentWorkProc *c = workProcs; c != 0; c = c->next)
    {
        if(c->info == info)
        {
            if(prev == 0)
                workProcs = c->next;
            else
                prev->next = c->next;

            if(remove)
		XtRemoveWorkProc(c->proc_id);
	    delete c->info;
	    delete c;
        }
        else
        {
            prev = c;
        }
    }
}

__END_METHOD_CODE__


	METHOD AsyncAgent!deleteAllWorkProcs
		CALLS
		deleteWorkProc : AsyncAgent



		METRICS
			workProcs REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD deleteAllWorkProcs
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:deleteAllWorkProcs METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-deleteAllWorkProcs

__BEGIN_METHOD_CODE__

AsyncAgent::deleteAllWorkProcs()
{
    while(workProcs)
	deleteWorkProc(workProcs->info);
}

__END_METHOD_CODE__

#========================================================================
#File  ../../code/ddd-3.0/ddd/AsyncAgent.o.nu.met	  Methods Number  20
#========================================================================
#Process file ../../code/ddd-3.0/ddd/charsets.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/ComboBox.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/LessTifH.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/MakeMenu.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/printBox.o.nu.met ... 


	METHOD Box!epsHeader
		CALLS
		space : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		origin : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		float : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		float : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		double : _SYSTEM_OR_USER_,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint



		METRICS
			ARRAYOP 21
			ASS 16
			AVVARLEN 0
			CALLEDN 22
			CLASS Box
			CLASSID 29
			CYCLO 9
			DOTS 28
			EQTEST 1
			EXPRORCALL 27
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 72
			LT 49
			METHOD epsHeader
			METHODID 0
			MMINUS 0
			OUT 24
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 5
			STMNT 27
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:21 ASS:16 AVVARLEN:0 CALLEDN:22 CLASS:Box CLASSID:29 CYCLO:9 DOTS:28 EQTEST:1 EXPRORCALL:27 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:72 LT:49 METHOD:epsHeader METHODID:0 MMINUS:0 OUT:24 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:5 STMNT:27 TERNINSTR:1 USEDVARS:0 
		;


#ID 0-epsHeader

__BEGIN_METHOD_CODE__

Box::epsHeader(ostream& os, 
		     const BoxRegion& region, 
		     const BoxPostScriptGC& gc)
{
    float scale = 1.0;
    
     

    BoxPoint space(region.space());
    BoxPoint origin(region.origin());

    BoxPoint size;
    switch(gc.orientation)
    {
    case BoxPostScriptGC::PORTRAIT:
	size = BoxPoint(gc.hsize, gc.vsize);
	break;

    case BoxPostScriptGC::LANDSCAPE:
	size = BoxPoint(gc.vsize, gc.hsize);
	break;
    }

    if(space > size)
    {
	 
	double hscale = float(size[_ARGS_]) / region.space(X);
	double vscale = float(size[_ARGS_]) / region.space(Y);
	scale = (hscale < vscale ? hscale : vscale);
	
	space[_ARGS_] = int(double(space[_ARGS_]) * scale);
	space[_ARGS_] = int(double(space[_ARGS_]) * scale);

	origin[_ARGS_] = int(double(origin[_ARGS_]) * scale);
	origin[_ARGS_] = int(double(origin[_ARGS_]) * scale);
    }

     
    BoxPoint llcorner, urcorner;
    switch(gc.orientation)
    {
    case BoxPostScriptGC::PORTRAIT:
	llcorner = BoxPoint(gc.hoffset,
			    gc.voffset);
	urcorner = BoxPoint(gc.hoffset + space[_ARGS_], 
			    gc.voffset + space[_ARGS_]);
	break;

    case BoxPostScriptGC::LANDSCAPE:
        llcorner = BoxPoint(gc.hsize - space[_ARGS_] + gc.hoffset - gc.voffset, 
			    gc.hoffset);
	urcorner = BoxPoint(gc.hsize + gc.hoffset - gc.voffset,
			    gc.hoffset + space[_ARGS_]);
	break;
    }

    os << EPSHEAD
       << CREATOR
       << BOUND 
       << llcorner[_ARGS_] << _REMOVED_STR_ << llcorner[_ARGS_] << _REMOVED_STR_
       << urcorner[_ARGS_] << _REMOVED_STR_ << urcorner[_ARGS_] << _REMOVED_STR_
       << PAGES << ENDC
       << _REMOVED_STR_;

     
    if(gc.orientation == BoxPostScriptGC::LANDSCAPE)
	os << gc.hsize + gc.hoffset << _REMOVED_STR_;

     
    int hmove = gc.hoffset - origin[_ARGS_];
    int vmove = gc.voffset + space[_ARGS_] + origin[_ARGS_];

    os << hmove << _REMOVED_STR_ << vmove << _REMOVED_STR_
       << scale << _REMOVED_STR_ << -scale << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD Box!_printHeader
		CALLS
		isPostScript : _SYSTEM_OR_USER_,
		epsHeader : Box,
		isFig : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Box
			CLASSID 29
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 4
			METHOD _printHeader
			METHODID 28
			MMINUS 0
			OUT 2
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Box CLASSID:29 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:4 METHOD:_printHeader METHODID:28 MMINUS:0 OUT:2 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-_printHeader

__BEGIN_METHOD_CODE__

Box::_printHeader(ostream& os, 
		       const BoxRegion& region, 
		       const BoxPrintGC& gc)
{
    if(gc.isPostScript())
    {
	epsHeader(os, region, (BoxPostScriptGC &)gc);
	os << prolog;
    }
    else if(gc.isFig())
    {
	os << _REMOVED_STR_ _REMOVED_STR_ _REMOVED_STR_ ;
    }
}

__END_METHOD_CODE__


	METHOD Box!_printTrailer
		CALLS
		isPostScript : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Box
			CLASSID 29
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 2
			METHOD _printTrailer
			METHODID 29
			MMINUS 0
			OUT 1
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Box CLASSID:29 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:2 METHOD:_printTrailer METHODID:29 MMINUS:0 OUT:1 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-_printTrailer

__BEGIN_METHOD_CODE__

Box::_printTrailer(ostream& os, const BoxRegion&, const BoxPrintGC& gc)
{
    if(gc.isPostScript())
    {
	os << trailer;
    }
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/printBox.o.nu.met	  Methods Number  3
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/BoxPoint.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/FontFixBox.o.nu.met ... 


	METHOD FontFixBox!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FontFixBox
			CLASSID 91
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 6
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FontFixBox CLASSID:91 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:6 METHOD:dump METHODID:1 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

FontFixBox::dump(ostream& s)
{
    s << _REMOVED_STR_ << *_box << _REMOVED_STR_;
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/FontFixBox.o.nu.met	  Methods Number  1
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/StringBox.o.nu.met ... 


	METHOD StringBox!resize
		CALLS
		XTextExtents : _SYSTEM_OR_USER_,
		length : AssocRec,
		thesize : Box,
		BoxSize : BoxSize



		METRICS
			_font REFERRED 3 TIMES,
			_ascent REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 6
			CALLEDN 4
			CLASS StringBox
			CLASSID 54
			CYCLO 2
			DOTS 5
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 23
			LT 0
			METHOD resize
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:6 CALLEDN:4 CLASS:StringBox CLASSID:54 CYCLO:2 DOTS:5 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:23 LT:0 METHOD:resize METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:2 
		;


#ID 14-resize

__BEGIN_METHOD_CODE__

StringBox::resize()
{
    if(_font != 0)
    {
	int direction, font_ascent, font_descent;
	XCharStruct overall;

	XTextExtents(_font, (char *)_string, _string.length(),
	    &direction, &font_ascent, &font_descent, &overall);


	XCharStruct max_bounds = _font->max_bounds;

	_ascent = max_bounds.ascent;
	thesize() = BoxSize(overall.width, 
			    max_bounds.ascent + max_bounds.descent);




    }

    return this;
}

__END_METHOD_CODE__


	METHOD StringBox!_draw
		CALLS
		origin : _SYSTEM_OR_USER_,
		XSetFont : _SYSTEM_OR_USER_,
		XDrawString : _SYSTEM_OR_USER_,
		length : AssocRec



		METRICS
			_font REFERRED 2 TIMES,
			_ascent REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 6
			CALLEDN 4
			CLASS StringBox
			CLASSID 54
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 9
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 0
			METHOD _draw
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:6 CALLEDN:4 CLASS:StringBox CLASSID:54 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:9 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:0 METHOD:_draw METHODID:1 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 1-_draw

__BEGIN_METHOD_CODE__

StringBox::_draw(Widget w, 
		      const BoxRegion& r, 
		      const BoxRegion&, 
		      GC gc,
		      bool)
{
    BoxPoint origin = r.origin();

    if(_font != 0)
	XSetFont(XtDisplay(w), gc, _font->fid);

    XDrawString(XtDisplay(w), XtWindow(w), gc, origin[_ARGS_], origin[_ARGS_] + _ascent,
	(char *)_string, _string.length());
}

__END_METHOD_CODE__


	METHOD StringBox!dump
		CALLS
		length : AssocRec



		METRICS
			quoted REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 3
			AVVARLEN 6
			CALLEDN 1
			CLASS StringBox
			CLASSID 54
			CYCLO 5
			DOTS 1
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 18
			LT 15
			METHOD dump
			METHODID 3
			MMINUS 0
			OUT 7
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 2
			STMNT 9
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:6 CALLEDN:1 CLASS:StringBox CLASSID:54 CYCLO:5 DOTS:1 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:18 LT:15 METHOD:dump METHODID:3 MMINUS:0 OUT:7 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:2 STMNT:9 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-dump

__BEGIN_METHOD_CODE__

StringBox::dump(ostream& s)
{
    char *quote = _REMOVED_STR_;
    if(StringBox::quoted)
	quote = _REMOVED_STR_;

    s << quote;
    for(unsigned i = 0; i < _string.length(); i++)
    {
	if(_string[_ARGS_] == '0')
	    s << quote;
	else
	    s << _string[_ARGS_];
    }
    s << quote;

    if(VSEFlags::include_font_info)
	s << _REMOVED_STR_ << _fontname << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD StringBox!newFont
		CALLS
		_newFont : StringBox



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS StringBox
			CLASSID 54
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD newFont
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:StringBox CLASSID:54 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:newFont METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-newFont

__BEGIN_METHOD_CODE__

StringBox::newFont(const string& fontname)
{
    _fontname = fontname;
    if(fontTable != 0)
	_newFont((*fontTable)[_ARGS_]);
}

__END_METHOD_CODE__


	METHOD StringBox!_print
		CALLS
		str : StringBox,
		origin : _SYSTEM_OR_USER_,
		matchFont : _SYSTEM_OR_USER_,
		fontName : StringBox,
		isFig : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		str : StringBox,
		isPostScript : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_,
		pscook : _SYSTEM_OR_USER_,
		str : StringBox



		METRICS
			ARRAYOP 4
			ASS 2
			AVVARLEN 0
			CALLEDN 16
			CLASS StringBox
			CLASSID 54
			CYCLO 4
			DOTS 3
			EQTEST 1
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 20
			LT 58
			METHOD _print
			METHODID 10
			MMINUS 0
			OUT 29
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:0 CALLEDN:16 CLASS:StringBox CLASSID:54 CYCLO:4 DOTS:3 EQTEST:1 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:20 LT:58 METHOD:_print METHODID:10 MMINUS:0 OUT:29 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-_print

__BEGIN_METHOD_CODE__

StringBox::_print(ostream& os, 
		       const BoxRegion& region, 
		       const BoxPrintGC& gc)
{
     
    if(str() == _REMOVED_STR_)
	return;

    BoxPoint origin = region.origin() ;
    FONTMAP *fmap = matchFont(fontName());

    if(gc.isFig()) {
	os << _REMOVED_STR_  << fmap->figfont << _REMOVED_STR_
	   << size(Y) - 3 << _REMOVED_STR_ << _REMOVED_STR_ 
	   << size(X) << _REMOVED_STR_ << size(Y) << _REMOVED_STR_
	   << origin[_ARGS_] << _REMOVED_STR_ << origin [_ARGS_] + size(Y) - 2 << _REMOVED_STR_
	   << str() << _REMOVED_STR_;
    } else if(gc.isPostScript()) {
	os << fmap->psfont << _REMOVED_STR_ << size(X) << _REMOVED_STR_ << size(Y)
	   << _REMOVED_STR_ << origin[_ARGS_] << _REMOVED_STR_ << origin[_ARGS_] + size(Y) << _REMOVED_STR_
	   << _REMOVED_STR_ << pscook(str()) << _REMOVED_STR_;
    }
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/StringBox.o.nu.met	  Methods Number  5
#======================================================================
#Process file ../../code/ddd-3.0/ddd/TrueBox.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/DummyNode.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/NameNode.o.nu.met ... 


	METHOD NameNode!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:dump METHODID:1 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

NameNode::dump(ostream& s)
{
    s << _name;
}

__END_METHOD_CODE__


	METHOD NameNode!_dumpTree

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 6
			METHOD _dumpTree
			METHODID 2
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:6 METHOD:_dumpTree METHODID:2 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_dumpTree

__BEGIN_METHOD_CODE__

NameNode::_dumpTree(ostream& s)
{
    s << _REMOVED_STR_ << _name << _REMOVED_STR_;
}

__END_METHOD_CODE__


	METHOD NameNode!resolveName
		CALLS
		ArgNode : ArgNode,
		longname : VSLDef,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS NameNode
			CLASSID 92
			CYCLO 3
			DOTS 1
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 21
			LT 12
			METHOD resolveName
			METHODID 9
			MMINUS 0
			OUT 6
			PARNUM 4
			PPLUS 0
			RETPOINT 2
			SCOPEOP 1
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:NameNode CLASSID:92 CYCLO:3 DOTS:1 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:21 LT:12 METHOD:resolveName METHODID:9 MMINUS:0 OUT:6 PARNUM:4 PPLUS:0 RETPOINT:2 SCOPEOP:1 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-resolveName

__BEGIN_METHOD_CODE__

NameNode::resolveName(VSLDef *cdef, VSLNode **node, string& name, 
    unsigned id)
{
     ;

    if(_name == name)
    {
	 
	*node = new ArgNode(id);

	if(VSEFlags::show_vars)
	{
	    cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
		<< *this << _REMOVED_STR_ << **node;
	    cout.flush();
	}

	delete this; 
	return 1;
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD NameNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD OK
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:OK METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-OK

__BEGIN_METHOD_CODE__

NameNode::OK()
{
     ;
    return true;
}

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/NameNode.o.nu.met	  Methods Number  4
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/ListNode.o.nu.met ... 


	METHOD ListNode!ListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ListNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:ListNode METHODID:3 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-ListNode

__BEGIN_METHOD_CODE__

ListNode::ListNode(VSLNode *hd, VSLNode *tl, char *type)
{
     ;
}

__END_METHOD_CODE__


	METHOD ListNode!ListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ListNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ListNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-ListNode

__BEGIN_METHOD_CODE__

ListNode::ListNode(const ListNode& node)
{}

__END_METHOD_CODE__


	METHOD ListNode!_eval
		CALLS
		eval : _SYSTEM_OR_USER_,
		eval : _SYSTEM_OR_USER_,
		isListBox : _SYSTEM_OR_USER_,
		ListBox : ListBox,
		eval_error : VSLLib,




		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 8
			CLASS ListNode
			CLASSID 78
			CYCLO 4
			DOTS 0
			EQTEST 2
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 22
			LT 0
			METHOD _eval
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 3
			SCOPEOP 1
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:8 CLASS:ListNode CLASSID:78 CYCLO:4 DOTS:0 EQTEST:2 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:22 LT:0 METHOD:_eval METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:3 SCOPEOP:1 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-_eval

__BEGIN_METHOD_CODE__

ListNode::_eval(ListBox *arglist)
{
    const Box *hd = _head->eval(arglist);
    if(hd == 0)
	return 0;

    const Box *tl = _tail->eval(arglist);
    if(tl == 0)
    {
	((Box *)hd)->unlink();
	return 0;
    }

    ListBox *ret = 0;
    if(tl->isListBox())
	ret = new ListBox((Box *)hd, (ListBox *)tl);
    else
	VSLLib::eval_error(_REMOVED_STR_);

    ((Box *)hd)->unlink();
    ((Box *)tl)->unlink();
    return ret;
}

__END_METHOD_CODE__


	METHOD ListNode!dump
		CALLS
		head : ListNode,
		tail : ListNode,
		isListNode : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 5
			CLASS ListNode
			CLASSID 78
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 44
			LT 24
			METHOD dump
			METHODID 26
			MMINUS 0
			OUT 12
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:5 CLASS:ListNode CLASSID:78 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:44 LT:24 METHOD:dump METHODID:26 MMINUS:0 OUT:12 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-dump

__BEGIN_METHOD_CODE__

ListNode::dump(ostream &s)
{
    if(VSEFlags::include_list_info)
    {
	 
	s << _REMOVED_STR_ << *head() << _REMOVED_STR_ << *tail() << _REMOVED_STR_;
    }
    else
    {
	 

	EmptyListNode *empty = new EmptyListNode;

	s << _REMOVED_STR_;

	const VSLNode *node = this; 
	while(node)
	{
	    if(node->isListNode())
	    {
		if(node != this)
		    s << _REMOVED_STR_;

		ListNode *list = (ListNode *)node;
		s << *(list->head());
		node = list->tail();
	    }
	    else
	    {
		if(*node != *empty)
		{
		    if(node != this)
			s << _REMOVED_STR_;

		    s << *node << _REMOVED_STR_;
		}
		node = 0;
	    }
	}

	s << _REMOVED_STR_;

	delete empty;
    }
}

__END_METHOD_CODE__


	METHOD ListNode!_dumpTree
		CALLS
		head : ListNode,
		dumpTree : _SYSTEM_OR_USER_,
		tail : ListNode,
		dumpTree : _SYSTEM_OR_USER_,
		isListNode : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_,
		dumpTree : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		dumpTree : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 9
			CLASS ListNode
			CLASSID 78
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 16
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 0
			LOC 41
			LT 6
			METHOD _dumpTree
			METHODID 27
			MMINUS 0
			OUT 3
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:9 CLASS:ListNode CLASSID:78 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:16 GE:0 GT:0 IN:0 INDR:7 LE:0 LOC:41 LT:6 METHOD:_dumpTree METHODID:27 MMINUS:0 OUT:3 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-_dumpTree

__BEGIN_METHOD_CODE__

ListNode::_dumpTree(ostream& s)
{
    if(VSEFlags::include_list_info)
    {
	 
	head()->dumpTree(s);
	s << _REMOVED_STR_;
	tail()->dumpTree(s);
    }
    else
    {
	 

	EmptyListNode *empty = new EmptyListNode;

	const VSLNode *node = this; 
	while(node)
	{
	    if(node->isListNode())
	    {
		if(node != this)
		    s << _REMOVED_STR_;

		ListNode *list = (ListNode *)node;
		list->head()->dumpTree(s);
		node = list->tail();
	    }
	    else
	    {
		if(*node != *empty)
		{
		    if(node != this)
			s << _REMOVED_STR_;
		    node->dumpTree(s);
		}
		node = 0;
	    }
	}

	delete empty;
    }
}

__END_METHOD_CODE__


	METHOD ListNode!isConst
		CALLS
		isConst : _SYSTEM_OR_USER_,
		isConst : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 3
			LT 0
			METHOD isConst
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:3 LT:0 METHOD:isConst METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-isConst

__BEGIN_METHOD_CODE__

ListNode::isConst()
{
    return _head->isConst() && _tail->isConst();
}

__END_METHOD_CODE__


	METHOD ListNode!nargs
		CALLS
		nargs : _SYSTEM_OR_USER_,
		nargs : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 3
			LT 0
			METHOD nargs
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:3 LT:0 METHOD:nargs METHODID:31 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-nargs

__BEGIN_METHOD_CODE__

ListNode::nargs()
{
    return _head->nargs() + _tail->nargs();
}

__END_METHOD_CODE__


	METHOD ListNode!isStraight
		CALLS
		isArgNode : _SYSTEM_OR_USER_,
		isNameNode : _SYSTEM_OR_USER_,
		isStraight : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 5
			LT 0
			METHOD isStraight
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:5 LT:0 METHOD:isStraight METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-isStraight

__BEGIN_METHOD_CODE__

ListNode::isStraight()
{
     
    return( _head->isArgNode() || _head->isNameNode() )
	&& _tail->isStraight();
}

__END_METHOD_CODE__


	METHOD ListNode!append
		CALLS
		tail : ListNode,
		isListNode : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 5
			CLASS ListNode
			CLASSID 78
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 21
			LT 0
			METHOD append
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:5 CLASS:ListNode CLASSID:78 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:21 LT:0 METHOD:append METHODID:25 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-append

__BEGIN_METHOD_CODE__

ListNode::append(VSLNode *list)
{
     
    ListNode *nprev = this;
    VSLNode *node = tail();
    while(node->isListNode())
    {
	nprev = (ListNode *)node; 
	node = nprev->tail();
    }

     
    EmptyListNode empty;
    if(*node != empty)
	return -1;

     
    delete nprev->tail();
    nprev->tail() = list;

    return 0;
}

__END_METHOD_CODE__


	METHOD ListNode!resolveDefs
		CALLS
		head : ListNode,
		resolveDefs : ListNode,
		tail : ListNode,
		resolveDefs : ListNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD resolveDefs
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:resolveDefs METHODID:12 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-resolveDefs

__BEGIN_METHOD_CODE__

ListNode::resolveDefs(VSLDef *cdef, bool complain_recursive)
{
    int changes = 0;

     
    changes += head()->resolveDefs(cdef, complain_recursive);
    changes += tail()->resolveDefs(cdef, complain_recursive);

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!resolveSynonyms
		CALLS
		head : ListNode,
		resolveSynonyms : ListNode,
		head : ListNode,
		tail : ListNode,
		resolveSynonyms : ListNode,
		tail : ListNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD resolveSynonyms
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:resolveSynonyms METHODID:13 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-resolveSynonyms

__BEGIN_METHOD_CODE__

ListNode::resolveSynonyms(VSLDef *cdef, VSLNode **  )
{
    int changes = 0;

     

     
    changes += head()->resolveSynonyms(cdef, &head());
    changes += tail()->resolveSynonyms(cdef, &tail());

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!foldOps
		CALLS
		head : ListNode,
		foldOps : ListNode,
		head : ListNode,
		tail : ListNode,
		foldOps : ListNode,
		tail : ListNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD foldOps
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:foldOps METHODID:14 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-foldOps

__BEGIN_METHOD_CODE__

ListNode::foldOps(VSLDef *cdef, VSLNode **  )
{
    int changes = 0;

     

     
    changes += head()->foldOps(cdef, &head());
    changes += tail()->foldOps(cdef, &tail());

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!inlineFuncs
		CALLS
		head : ListNode,
		inlineFuncs : ListNode,
		head : ListNode,
		tail : ListNode,
		inlineFuncs : ListNode,
		tail : ListNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD inlineFuncs
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:inlineFuncs METHODID:16 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-inlineFuncs

__BEGIN_METHOD_CODE__

ListNode::inlineFuncs(VSLDef *cdef, VSLNode **  )
{
    int changes = 0;

     

     
    changes += head()->inlineFuncs(cdef, &head());
    changes += tail()->inlineFuncs(cdef, &tail());

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!instantiateArgs
		CALLS
		head : ListNode,
		instantiateArgs : ListNode,
		head : ListNode,
		tail : ListNode,
		instantiateArgs : ListNode,
		tail : ListNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD instantiateArgs
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:instantiateArgs METHODID:17 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-instantiateArgs

__BEGIN_METHOD_CODE__

ListNode::instantiateArgs(VSLDef *cdef, VSLNode **  ,
			      VSLNode *values[], unsigned base, unsigned n)
{
    int changes = 0;

     

     
    changes += head()->instantiateArgs(cdef, &head(), values, base, n);
    changes += tail()->instantiateArgs(cdef, &tail(), values, base, n);

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!countArgNodes
		CALLS
		head : ListNode,
		countArgNodes : ListNode,
		tail : ListNode,
		countArgNodes : ListNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 5
			LT 0
			METHOD countArgNodes
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:5 LT:0 METHOD:countArgNodes METHODID:18 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-countArgNodes

__BEGIN_METHOD_CODE__

ListNode::countArgNodes(VSLDef *cdef, int instances[], unsigned base,
    unsigned n)
{
     
    head()->countArgNodes(cdef, instances, base, n);
    tail()->countArgNodes(cdef, instances, base, n);
}

__END_METHOD_CODE__


	METHOD ListNode!compilePatterns
		CALLS
		head : ListNode,
		compilePatterns : ListNode,
		tail : ListNode,
		compilePatterns : ListNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 5
			LT 0
			METHOD compilePatterns
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:5 LT:0 METHOD:compilePatterns METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-compilePatterns

__BEGIN_METHOD_CODE__

ListNode::compilePatterns(VSLDef *cdef)
{
     
    head()->compilePatterns(cdef);
    tail()->compilePatterns(cdef);
}

__END_METHOD_CODE__


	METHOD ListNode!uncompilePatterns
		CALLS
		head : ListNode,
		uncompilePatterns : ListNode,
		tail : ListNode,
		uncompilePatterns : ListNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 5
			LT 0
			METHOD uncompilePatterns
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:5 LT:0 METHOD:uncompilePatterns METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-uncompilePatterns

__BEGIN_METHOD_CODE__

ListNode::uncompilePatterns(VSLDef *cdef)
{
     
    head()->uncompilePatterns(cdef);
    tail()->uncompilePatterns(cdef);
}

__END_METHOD_CODE__


	METHOD ListNode!countSelfReferences
		CALLS
		head : ListNode,
		countSelfReferences : ListNode,
		tail : ListNode,
		countSelfReferences : ListNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD countSelfReferences
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:countSelfReferences METHODID:11 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-countSelfReferences

__BEGIN_METHOD_CODE__

ListNode::countSelfReferences(VSLDef *cdef, VSLDefList *deflist)
{
    int changes = 0;

     
    changes += head()->countSelfReferences(cdef, deflist);
    changes += tail()->countSelfReferences(cdef, deflist);

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!resolveName
		CALLS
		head : ListNode,
		resolveName : ListNode,
		head : ListNode,
		tail : ListNode,
		resolveName : ListNode,
		tail : ListNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 6
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD resolveName
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:6 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:resolveName METHODID:22 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-resolveName

__BEGIN_METHOD_CODE__

ListNode::resolveName(VSLDef *cdef, VSLNode ** , string& name,
    unsigned id)
{
    int changes = 0;

     

     
    changes += head()->resolveName(cdef, &head(), name, id);
    changes += tail()->resolveName(cdef, &tail(), name, id);

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!_resolveNames
		CALLS
		head : ListNode,
		resolveNames : _SYSTEM_OR_USER_,
		tail : ListNode,
		resolveNames : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD _resolveNames
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:_resolveNames METHODID:23 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-_resolveNames

__BEGIN_METHOD_CODE__

ListNode::_resolveNames(VSLDef *cdef, unsigned base)
{
    int changes = 0;

     
    changes += head()->resolveNames(cdef, base);
    changes += tail()->resolveNames(cdef, base);

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!_reBase
		CALLS
		head : ListNode,
		reBase : VSLNode,
		tail : ListNode,
		reBase : VSLNode



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 4
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD _reBase
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:4 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:_reBase METHODID:19 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-_reBase

__BEGIN_METHOD_CODE__

ListNode::_reBase(VSLDef *cdef, unsigned newBase)
{
    int changes = 0;

     
    changes += head()->reBase(cdef, newBase);
    changes += tail()->reBase(cdef, newBase);

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!foldConsts
		CALLS
		head : ListNode,
		foldConsts : ListNode,
		head : ListNode,
		tail : ListNode,
		foldConsts : ListNode,
		tail : ListNode,
		isConst : ListNode,
		eval : _SYSTEM_OR_USER_,
		longname : VSLDef,
		flush : LiterateAgent,
		ConstNode : ConstNode,
		flush : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 12
			CLASS ListNode
			CLASSID 78
			CYCLO 5
			DOTS 2
			EQTEST 0
			EXPRORCALL 17
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 49
			LT 16
			METHOD foldConsts
			METHODID 15
			MMINUS 0
			OUT 8
			PARNUM 2
			PPLUS 1
			RETPOINT 2
			SCOPEOP 2
			STMNT 17
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:12 CLASS:ListNode CLASSID:78 CYCLO:5 DOTS:2 EQTEST:0 EXPRORCALL:17 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:49 LT:16 METHOD:foldConsts METHODID:15 MMINUS:0 OUT:8 PARNUM:2 PPLUS:1 RETPOINT:2 SCOPEOP:2 STMNT:17 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-foldConsts

__BEGIN_METHOD_CODE__

ListNode::foldConsts(VSLDef *cdef, VSLNode **node)
{
    int changes = 0;

     
    changes += head()->foldConsts(cdef, &head());
    changes += tail()->foldConsts(cdef, &tail());

     
     
    if(!isConst())
	return changes;

     

    sideEffectsProhibited = true;
    sideEffectsOccured = false;

    const Box *result = eval(0);

    if(result)
    {
	 ;

	if(VSEFlags::show_optimize)
	{
	    cout << _REMOVED_STR_ << cdef->longname() << _REMOVED_STR_ 
		<< *this << '\n';
	    cout.flush();
	}

	 
	*node = new ConstNode((Box *)result);

	if(VSEFlags::show_optimize)
	{
	    cout << _REMOVED_STR_ << **node << _REMOVED_STR_;
	    cout.flush();
	}
	
	changes++;

	 
	delete this;
    }

    sideEffectsProhibited = false;

    return changes;
}

__END_METHOD_CODE__


	METHOD ListNode!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD OK
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:OK METHODID:32 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-OK

__BEGIN_METHOD_CODE__

ListNode::OK()
{
     ;

    return true;
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/ListNode.o.nu.met	  Methods Number  23
#======================================================================
#Process file ../../code/ddd-3.0/ddd/VSLDefList.o.nu.met ... 


	METHOD VSLDefList!eval
		CALLS
		def : VSLDefList,
		s : _SYSTEM_OR_USER_,
		eval_error : VSLLib,
		f_name : VSLDefList,
		eval : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 5
			CLASS VSLDefList
			CLASSID 74
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 16
			LT 4
			METHOD eval
			METHODID 13
			MMINUS 0
			OUT 2
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 7
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:5 CLASS:VSLDefList CLASSID:74 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:16 LT:4 METHOD:eval METHODID:13 MMINUS:0 OUT:2 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:7 TERNINSTR:1 USEDVARS:0 
		;


#ID 13-eval

__BEGIN_METHOD_CODE__

VSLDefList::eval(Box *arg)
{
    VSLDef *d = def(arg);

    if(d == 0)
    {
	const int bufsize = 1000;
	char buffer[_ARGS_];

	ostrstream s(buffer, sizeof buffer);
	s << *arg << '\0';

	VSLLib::eval_error(_REMOVED_STR_ + f_name() + buffer);
    }

    return d ? d->eval(arg) : 0;
}

__END_METHOD_CODE__


	METHOD VSLDefList!add
		CALLS
		VSLDef : VSLDef,
		listnext : VSLDef,
		node_pattern : _SYSTEM_OR_USER_,
		node_pattern : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		parse_error : VSLLib,
		f_name : return,
		eval_echo : VSLLib,
		listnext : VSLDef



		METRICS
			_ndefs REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 13
			AVVARLEN 6
			CALLEDN 12
			CLASS VSLDefList
			CLASSID 74
			CYCLO 7
			DOTS 0
			EQTEST 4
			EXPRORCALL 21
			GE 0
			GT 0
			IN 0
			INDR 9
			LE 0
			LOC 52
			LT 0
			METHOD add
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 1
			RETPOINT 5
			SCOPEOP 2
			STMNT 21
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:13 AVVARLEN:6 CALLEDN:12 CLASS:VSLDefList CLASSID:74 CYCLO:7 DOTS:0 EQTEST:4 EXPRORCALL:21 GE:0 GT:0 IN:0 INDR:9 LE:0 LOC:52 LT:0 METHOD:add METHODID:3 MMINUS:0 OUT:0 PARNUM:5 PPLUS:1 RETPOINT:5 SCOPEOP:2 STMNT:21 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-add

__BEGIN_METHOD_CODE__

VSLDefList::add(bool &newFlag, VSLNode *pattern, VSLNode *expr,
    string filename, int lineno)
{
    VSLDef *newdef = new VSLDef(this, pattern, expr, filename, lineno);

     
    for(VSLDef *d = _first; d != 0; d = d->listnext())
	if(*(d->node_pattern()) == *(newdef->node_pattern()))
	{
	     
	     
	    newFlag = false;
	    newdef->expr() = 0;  
	    delete newdef;

	    if(expr == 0)
	    {
		 
		return d;
	    }

	    if(d->expr() == 0)
	    {
		 
		 

		d->expr() = expr;
		return d;
	    }

	    if(*expr != *(d->expr()))
	    {
		 
		VSLLib::parse_error(_REMOVED_STR_ + d->f_name() + _REMOVED_STR_);
		VSLLib::eval_echo(_REMOVED_STR_, d);
		delete expr; return 0;
	    }

	     
	    delete expr; return d;
	}

     
     
    if(_last == 0)
	_first = _last = newdef;
    else
	_last->listnext() = newdef;
    _last = newdef;
    _ndefs++;

    newFlag = true; 
    return newdef;
}

__END_METHOD_CODE__


	METHOD VSLDefList!def
		CALLS
		listnext : VSLDef,
		matches : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLDefList
			CLASSID 74
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 7
			LT 0
			METHOD def
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:VSLDefList CLASSID:74 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:7 LT:0 METHOD:def METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-def

__BEGIN_METHOD_CODE__

VSLDefList::def(Box *arg)
{
    for(VSLDef *d = _first; d != 0; d = d->listnext())
	if(d->matches(arg))
	    return d;

    return 0;
}

__END_METHOD_CODE__


	METHOD VSLDefList!replace
		CALLS
		first : VSLDefList,
		listnext : VSLDef,
		libnext : VSLDef,
		libnext : VSLDef,
		libprev : VSLDef,
		libprev : VSLDef,
		libprev : VSLDef,
		libprev : VSLDef,
		libprev : VSLDef,
		libnext : VSLDef,
		libnext : VSLDef,
		libnext : VSLDef



		METRICS
			_ndefs REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 10
			AVVARLEN 6
			CALLEDN 12
			CLASS VSLDefList
			CLASSID 74
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 13
			LE 0
			LOC 32
			LT 0
			METHOD replace
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:10 AVVARLEN:6 CALLEDN:12 CLASS:VSLDefList CLASSID:74 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:13 LE:0 LOC:32 LT:0 METHOD:replace METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-replace

__BEGIN_METHOD_CODE__

VSLDefList::replace()
{
     
    for(VSLDef *son = first(); son != 0; son = son->listnext())
    {
	 ;

	 
	if(son->libnext())
	    son->libnext()->libprev() = son->libprev();
	else
	{
	     ;
	    lib->_last = son->libprev();
	}

	 
	if(son->libprev())
	    son->libprev()->libnext() = son->libnext();
	else
	{
	     ;
	    lib->_first = son->libnext();
	}
    }

     
    delete _first;

     
    _first = _last = 0;
    _ndefs = 0;
}

__END_METHOD_CODE__


	METHOD VSLDefList!OK
		CALLS
		listnext : VSLDef,
		listnext : VSLDef,
		listnext : VSLDef



		METRICS
			ARRAYOP 0
			ASS 12
			AVVARLEN 0
			CALLEDN 3
			CLASS VSLDefList
			CLASSID 74
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 29
			LT 0
			METHOD OK
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:12 AVVARLEN:0 CALLEDN:3 CLASS:VSLDefList CLASSID:74 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:29 LT:0 METHOD:OK METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-OK

__BEGIN_METHOD_CODE__

VSLDefList::OK()
{
    VSLDef *d = _first;
    VSLDef *lastdef = d;
    unsigned count = 0;

     
    while(d != 0)
    {
	lastdef = d;
	d = d->listnext();
	count++;
    }
     ;
    (void) lastdef;

     
    d = _first;
    while(d != 0)
    {
	 ;
	d = d->listnext();
    }

     
    for(d = _first; d != 0; d = d->listnext())
	 ;

    return true;
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/VSLDefList.o.nu.met	  Methods Number  5
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/VSLLib.o.nu.met ... 


	METHOD VSLLib!initHash

		METRICS
			ARRAYOP 1
			ASS 2
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD initHash
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:0 CALLEDN:0 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:initHash METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-initHash

__BEGIN_METHOD_CODE__

VSLLib::initHash()
{
    for(int i = 0; i < hashSize; i++)
	defs[_ARGS_] = 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!VSLLib
		CALLS
		initHash : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD VSLLib
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:VSLLib METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-VSLLib

__BEGIN_METHOD_CODE__

VSLLib::VSLLib()
{
    initHash();
}

__END_METHOD_CODE__


	METHOD VSLLib!VSLLib
		CALLS
		initHash : VSLLib,
		read : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD VSLLib
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:VSLLib METHODID:29 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-VSLLib

__BEGIN_METHOD_CODE__

VSLLib::VSLLib(const string& lib_name, unsigned optimize)
{
    initHash();
    read(lib_name, optimize);
}

__END_METHOD_CODE__


	METHOD VSLLib!VSLLib
		CALLS
		initHash : VSLLib,
		read : VSLLib



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD VSLLib
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:VSLLib METHODID:30 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-VSLLib

__BEGIN_METHOD_CODE__

VSLLib::VSLLib(istream& i, unsigned optimize)
{
    initHash();
    read(i, optimize);
}

__END_METHOD_CODE__


	METHOD VSLLib!deflist
		CALLS
		hashpjw : _SYSTEM_OR_USER_,
		func_name : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 3
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD deflist
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:3 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:deflist METHODID:24 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-deflist

__BEGIN_METHOD_CODE__

VSLLib::deflist(const string& func_name)
{
    unsigned hashcode = hashpjw(func_name) % hashSize;

     
    VSLDefList *d;
    for(d = defs[_ARGS_];
	d != 0 && d->func_name() != func_name; d = d->next())
	;

    return d;
}

__END_METHOD_CODE__


	METHOD VSLLib!add
		CALLS
		background : _SYSTEM_OR_USER_,
		deflist : VSLLib,
		hashpjw : _SYSTEM_OR_USER_,
		VSLDefList : VSLDefList,
		next : _SYSTEM_OR_USER_,
		add : _SYSTEM_OR_USER_,
		libnext : VSLDef,
		libprev : VSLDef,
		global : VSLDefList,
		global : VSLDefList



		METRICS
			ARRAYOP 4
			ASS 12
			AVVARLEN 0
			CALLEDN 10
			CLASS VSLLib
			CLASSID 66
			CYCLO 6
			DOTS 0
			EQTEST 2
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 43
			LT 0
			METHOD add
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 6
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:12 AVVARLEN:0 CALLEDN:10 CLASS:VSLLib CLASSID:66 CYCLO:6 DOTS:0 EQTEST:2 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:43 LT:0 METHOD:add METHODID:21 MMINUS:0 OUT:0 PARNUM:6 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-add

__BEGIN_METHOD_CODE__

VSLLib::add(const string& func_name,
    VSLNode *pattern, VSLNode *expr, 
    bool global, const string& filename, int lineno)
{
    do { if(background) background(); } while(false) ;

     
    VSLDefList *d = deflist(func_name);
    
    if(d == 0)
    {
	 
	unsigned hashcode = hashpjw(func_name) % hashSize;

	d = defs[_ARGS_];
	defs[_ARGS_] = new VSLDefList(this, hashcode, func_name, global);
	defs[_ARGS_]->next() = d;

	 
	d = defs[_ARGS_];
    }

     
    bool newFlag;
    VSLDef* newdef = d->add(newFlag, pattern, expr, filename, lineno);

    if(newFlag)
    {
	 
	if(_last == 0)
	    _first = newdef;
	else
	{
	    _last->libnext() = newdef;
	    newdef->libprev() = _last;
	}
	_last = newdef;
    }

     
     
     
    d->global() = d->global() || global;

    return newdef;
}

__END_METHOD_CODE__


	METHOD VSLLib!override
		CALLS
		deflist : VSLLib,
		override : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 0
			METHOD override
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:0 METHOD:override METHODID:22 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-override

__BEGIN_METHOD_CODE__

VSLLib::override(const string& func_name)
{
    VSLDefList *d = deflist(func_name);

    if(d == 0)
	return -1;

    d->override();
    return 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!replace
		CALLS
		deflist : VSLLib,
		replace : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 0
			METHOD replace
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:0 METHOD:replace METHODID:23 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-replace

__BEGIN_METHOD_CODE__

VSLLib::replace(const string& func_name)
{
    VSLDefList *d = deflist(func_name);

    if(d == 0)
	return -1;

    d->replace();
    return 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!def
		CALLS
		deflist : VSLLib,
		def : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD def
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:def METHODID:25 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:1 USEDVARS:0 
		;


#ID 25-def

__BEGIN_METHOD_CODE__

VSLLib::def(const string& func_name, Box *a)
{
    VSLDefList *d = deflist(func_name);
    return d ? d->def(a) : 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!eval
		CALLS
		deflist : VSLLib,
		eval_error : VSLLib,
		eval : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 0
			METHOD eval
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:0 METHOD:eval METHODID:35 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:1 USEDVARS:0 
		;


#ID 35-eval

__BEGIN_METHOD_CODE__

VSLLib::eval(const string& func_name, ListBox *a)
{
    VSLDefList *d = deflist(func_name);
    if(d == 0)
	eval_error(_REMOVED_STR_ + func_name + _REMOVED_STR_);

    return d ? d->eval(a) : 0;
}

__END_METHOD_CODE__


	METHOD VSLLib!eval
		CALLS
		box : _SYSTEM_OR_USER_,
		box : _SYSTEM_OR_USER_,
		eval : VSLLib,




		METRICS
			ARRAYOP 2
			ASS 5
			AVVARLEN 0
			CALLEDN 4
			CLASS VSLLib
			CLASSID 66
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 10
			LT 0
			METHOD eval
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:5 AVVARLEN:0 CALLEDN:4 CLASS:VSLLib CLASSID:66 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:10 LT:0 METHOD:eval METHODID:36 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-eval

__BEGIN_METHOD_CODE__

VSLLib::eval(const string& func_name, VSLArg args[])
{
    ListBox *arg = new ListBox;
    for(int i = 0; args[_ARGS_].box() != 0; i++)
	*arg += args[_ARGS_].box();
    
    const Box *result = eval(func_name, arg);
    arg->unlink();

    return result;
}

__END_METHOD_CODE__


	METHOD VSLLib!eval
		CALLS
		eval : VSLLib



		METRICS
			ARRAYOP 12
			ASS 11
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 0
			METHOD eval
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 11
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 13
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:12 ASS:11 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:17 LT:0 METHOD:eval METHODID:37 MMINUS:0 OUT:0 PARNUM:11 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:13 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-eval

__BEGIN_METHOD_CODE__

VSLLib::eval(const string& func_name,
			VSLArg arg0,
			VSLArg arg1,
			VSLArg arg2,
			VSLArg arg3,
			VSLArg arg4,
			VSLArg arg5,
			VSLArg arg6,
			VSLArg arg7,
			VSLArg arg8,
			VSLArg arg9)
{
    VSLArg args[_ARGS_];

    args[_ARGS_] = arg0;
    args[_ARGS_] = arg1;
    args[_ARGS_] = arg2;
    args[_ARGS_] = arg3;
    args[_ARGS_] = arg4;
    args[_ARGS_] = arg5;
    args[_ARGS_] = arg6;
    args[_ARGS_] = arg7;
    args[_ARGS_] = arg8;
    args[_ARGS_] = arg9;
    args[_ARGS_] = (Box *)0;

    return eval(func_name, args);
}

__END_METHOD_CODE__


	METHOD VSLLib!output
		CALLS
		deflist : VSLLib,
		ListBox : ListBox,
		eval : _SYSTEM_OR_USER_,




		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 5
			CLASS VSLLib
			CLASSID 66
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 13
			LT 0
			METHOD output
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:5 CLASS:VSLLib CLASSID:66 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:13 LT:0 METHOD:output METHODID:38 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-output

__BEGIN_METHOD_CODE__

VSLLib::output(Box *&a)
{
    if(a == 0)
	return;

    VSLDefList *d = deflist(_REMOVED_STR_);
    if(d == 0)
	return;

    ListBox *args = new ListBox(a, new ListBox);
    a->unlink();
    a = (Box *)d->eval(args);
    args->unlink();
}

__END_METHOD_CODE__


	METHOD VSLLib!bind
		CALLS
		libnext : VSLDef,
		expr : _SYSTEM_OR_USER_,
		background : _SYSTEM_OR_USER_,
		resolve : VSLBuiltin,
		func_name : _SYSTEM_OR_USER_,
		eval_error : VSLLib,
		expr : _SYSTEM_OR_USER_,
		call : VSLLib,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		ConstNode : ConstNode,
		StringBox : StringBox,
		expr : _SYSTEM_OR_USER_,
		BuiltinCallNode : BuiltinCallNode,
		node_pattern : _SYSTEM_OR_USER_,
		dup : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 16
			CLASS VSLLib
			CLASSID 66
			CYCLO 7
			DOTS 0
			EQTEST 2
			EXPRORCALL 22
			GE 0
			GT 0
			IN 0
			INDR 10
			LE 0
			LOC 33
			LT 1
			METHOD bind
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 1
			STMNT 12
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:16 CLASS:VSLLib CLASSID:66 CYCLO:7 DOTS:0 EQTEST:2 EXPRORCALL:22 GE:0 GT:0 IN:0 INDR:10 LE:0 LOC:33 LT:1 METHOD:bind METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:1 STMNT:12 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-bind

__BEGIN_METHOD_CODE__

VSLLib::bind()
{
    int changes = 0;
    for(VSLDef *cdef = _first; cdef != 0; cdef = cdef->libnext())
	if(cdef->expr() == 0)
	{
	    do { if(background) background(); } while(false) ;

	     
	     
	    int idx = VSLBuiltin::resolve(cdef->deflist->func_name());

	    if(idx < 0)
	    {
		eval_error(_REMOVED_STR_, cdef);
		
		 
		cdef->expr() = call(_REMOVED_STR_);
		if(cdef->expr() == 0)
		    cdef->expr() = new ConstNode(new StringBox(_REMOVED_STR_));
	    }
	    else
	    {
		 
		 
		cdef->expr() = new BuiltinCallNode(idx, 
		    cdef->node_pattern()->dup());
	    }

	    changes++;
	}

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!resolveNames
		CALLS
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		resolveNames : _SYSTEM_OR_USER_,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 5
			CLASS VSLLib
			CLASSID 66
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 12
			LT 0
			METHOD resolveNames
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:5 CLASS:VSLLib CLASSID:66 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:12 LT:0 METHOD:resolveNames METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-resolveNames

__BEGIN_METHOD_CODE__

VSLLib::resolveNames()
{
    int changes = 0;
    for(VSLDef *cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	changes += cdef->resolveNames();
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!compilePatterns
		CALLS
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		uncompilePattern : VSLDef,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		uncompilePatterns : _SYSTEM_OR_USER_,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_,
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		compilePattern : VSLDef,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		compilePatterns : VSLLib,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 18
			CLASS VSLLib
			CLASSID 66
			CYCLO 19
			DOTS 0
			EQTEST 0
			EXPRORCALL 36
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 36
			LT 0
			METHOD compilePatterns
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 4
			STMNT 28
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:18 CLASS:VSLLib CLASSID:66 CYCLO:19 DOTS:0 EQTEST:0 EXPRORCALL:36 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:36 LT:0 METHOD:compilePatterns METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:4 STMNT:28 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-compilePatterns

__BEGIN_METHOD_CODE__

VSLLib::compilePatterns()
{
    int changes = 0;

     
    VSLDef *cdef;
    for(cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	 
	cdef->uncompilePattern();
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;

	 
	cdef->expr()->uncompilePatterns(cdef);
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

     
    for(cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	 
	cdef->compilePattern();
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;

	 
	cdef->expr()->compilePatterns(cdef);
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;

	changes++;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!resolveDefs
		CALLS
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		resolveDefs : VSLLib,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 6
			CLASS VSLLib
			CLASSID 66
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 12
			LT 0
			METHOD resolveDefs
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:6 CLASS:VSLLib CLASSID:66 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:12 LT:0 METHOD:resolveDefs METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-resolveDefs

__BEGIN_METHOD_CODE__

VSLLib::resolveDefs()
{
    int changes = 0;
    for(VSLDef *cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	changes += cdef->expr()->resolveDefs(cdef);
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!resolveSynonyms
		CALLS
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		resolveSynonyms : VSLLib,
		expr : _SYSTEM_OR_USER_,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 7
			CLASS VSLLib
			CLASSID 66
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 12
			LT 0
			METHOD resolveSynonyms
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:7 CLASS:VSLLib CLASSID:66 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:12 LT:0 METHOD:resolveSynonyms METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-resolveSynonyms

__BEGIN_METHOD_CODE__

VSLLib::resolveSynonyms()
{
    int changes = 0;
    for(VSLDef *cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	changes += cdef->expr()->resolveSynonyms(cdef, &cdef->expr());
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!foldOps
		CALLS
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		foldOps : VSLLib,
		expr : _SYSTEM_OR_USER_,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 7
			CLASS VSLLib
			CLASSID 66
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 12
			LT 0
			METHOD foldOps
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:7 CLASS:VSLLib CLASSID:66 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:12 LT:0 METHOD:foldOps METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-foldOps

__BEGIN_METHOD_CODE__

VSLLib::foldOps()
{
    int changes = 0;
    for(VSLDef *cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	changes += cdef->expr()->foldOps(cdef, &cdef->expr());
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!foldConsts
		CALLS
		libnext : VSLDef,
		global : VSLDefList,
		background : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		foldConsts : VSLLib,
		expr : _SYSTEM_OR_USER_,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 8
			CLASS VSLLib
			CLASSID 66
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 15
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 13
			LT 0
			METHOD foldConsts
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 2
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:8 CLASS:VSLLib CLASSID:66 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:15 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:13 LT:0 METHOD:foldConsts METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:2 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-foldConsts

__BEGIN_METHOD_CODE__

VSLLib::foldConsts()
{
    int changes = 0;
    for(VSLDef *cdef = _first; cdef != 0; cdef = cdef->libnext())
	if(VSEFlags::optimize_globals || !cdef->deflist->global())
	{
	    do { if(background) background(); } while(false) ;

	    changes += cdef->expr()->foldConsts(cdef, &cdef->expr());
	    do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
	}

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!inlineFuncs
		CALLS
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		inlineFuncs : VSLLib,
		expr : _SYSTEM_OR_USER_,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 7
			CLASS VSLLib
			CLASSID 66
			CYCLO 7
			DOTS 0
			EQTEST 0
			EXPRORCALL 13
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 12
			LT 0
			METHOD inlineFuncs
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:7 CLASS:VSLLib CLASSID:66 CYCLO:7 DOTS:0 EQTEST:0 EXPRORCALL:13 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:12 LT:0 METHOD:inlineFuncs METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-inlineFuncs

__BEGIN_METHOD_CODE__

VSLLib::inlineFuncs()
{
    int changes = 0;
    for(VSLDef *cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	changes += cdef->expr()->inlineFuncs(cdef, &cdef->expr());
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!countSelfReferences
		CALLS
		libnext : VSLDef,
		libnext : VSLDef,
		background : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		countSelfReferences : VSLLib,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 11
			AVVARLEN 0
			CALLEDN 7
			CLASS VSLLib
			CLASSID 66
			CYCLO 8
			DOTS 0
			EQTEST 0
			EXPRORCALL 14
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 0
			LOC 22
			LT 0
			METHOD countSelfReferences
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:11 AVVARLEN:0 CALLEDN:7 CLASS:VSLLib CLASSID:66 CYCLO:8 DOTS:0 EQTEST:0 EXPRORCALL:14 GE:0 GT:0 IN:0 INDR:7 LE:0 LOC:22 LT:0 METHOD:countSelfReferences METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-countSelfReferences

__BEGIN_METHOD_CODE__

VSLLib::countSelfReferences()
{
    int changes = 0;

     
    VSLDef *cdef;
    for(cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	VSLDefList *dflist = cdef->deflist;
	dflist->self_references = 0;
    }

     
    for(cdef = _first; cdef != 0; cdef = cdef->libnext())
    {
	do { if(background) background(); } while(false) ;

	changes += cdef->expr()->countSelfReferences(cdef, cdef->deflist);
	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!cleanup
		CALLS
		background : _SYSTEM_OR_USER_,
		global : VSLDefList,
		libprev : VSLDef,
		first : _SYSTEM_OR_USER_,
		listnext : VSLDef,
		longname : VSLDef,
		flush : LiterateAgent,
		next : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		replace : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		libprev : VSLDef,
		OK : VSLLib,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 3
			ASS 18
			AVVARLEN 0
			CALLEDN 17
			CLASS VSLLib
			CLASSID 66
			CYCLO 13
			DOTS 1
			EQTEST 4
			EXPRORCALL 30
			GE 0
			GT 0
			IN 0
			INDR 18
			LE 0
			LOC 56
			LT 6
			METHOD cleanup
			METHODID 10
			MMINUS 0
			OUT 3
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 2
			STMNT 25
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:3 ASS:18 AVVARLEN:0 CALLEDN:17 CLASS:VSLLib CLASSID:66 CYCLO:13 DOTS:1 EQTEST:4 EXPRORCALL:30 GE:0 GT:0 IN:0 INDR:18 LE:0 LOC:56 LT:6 METHOD:cleanup METHODID:10 MMINUS:0 OUT:3 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:2 STMNT:25 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-cleanup

__BEGIN_METHOD_CODE__

VSLLib::cleanup()
{
    int changes = 0;

    VSLDef *d = _last;
    while(d != 0)
    {
	do { if(background) background(); } while(false) ;

	VSLDefList *dflist = d->deflist;
	if(!dflist->global() && 
	    (dflist->references == 0 || 
	     dflist->references == dflist->self_references))
	{   
	     

	     
	    while(d != 0 && d->deflist == dflist)
		d = d->libprev();

	    if(VSEFlags::show_optimize)
	    {
		for(VSLDef *e = dflist->first(); e != 0; e = e->listnext())
		    cout << _REMOVED_STR_ << e->longname() << _REMOVED_STR_;
		cout.flush();
	    }

	     
	    if(defs[_ARGS_] == dflist)
		defs[_ARGS_] = dflist->next();
	    else
	    {
		VSLDefList *prev;
		for(prev = defs[_ARGS_];
		    prev != 0 && prev->next() != dflist; prev = prev->next())
		    ;
		prev->next() = dflist->next();
	    }

	     
	    dflist->replace();

	     
	    dflist->next() = 0; delete dflist;
	    changes++;
	}
	else
	{
	     
	    d = d->libprev();
	}

	do { if(VSEFlags::assert_library_ok) { bool ok = OK(); if(!ok) abort(); } } while(false) ;
    }

    return changes;
}

__END_METHOD_CODE__


	METHOD VSLLib!process
		CALLS
		bind : VSLLib,
		resolveNames : VSLLib,
		compilePatterns : VSLLib,
		cleanup : VSLLib,
		resolveDefs : VSLLib,
		cleanup : VSLLib,
		resolveSynonyms : VSLLib,
		cleanup : VSLLib,
		foldOps : VSLLib,
		compilePatterns : VSLLib,
		foldConsts : VSLLib,
		cleanup : VSLLib,
		inlineFuncs : VSLLib,
		cleanup : VSLLib,
		countSelfReferences : VSLLib,
		cleanup : VSLLib



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 16
			CLASS VSLLib
			CLASSID 66
			CYCLO 21
			DOTS 0
			EQTEST 1
			EXPRORCALL 40
			GE 0
			GT 6
			IN 0
			INDR 0
			LE 0
			LOC 103
			LT 1
			METHOD process
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 18
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:16 CLASS:VSLLib CLASSID:66 CYCLO:21 DOTS:0 EQTEST:1 EXPRORCALL:40 GE:0 GT:6 IN:0 INDR:0 LE:0 LOC:103 LT:1 METHOD:process METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:18 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-process

__BEGIN_METHOD_CODE__

VSLLib::process(unsigned mode)
{
     















































    bind();
    resolveNames();
    compilePatterns();

    if(mode & _Cleanup)
	cleanup();

    if(mode & _ResolveDefs)
	if(resolveDefs() > 0)
	    if(mode & _Cleanup)
		cleanup();

    if(mode & _ResolveSynonyms)
	if(resolveSynonyms() > 0)
	    if(mode & _Cleanup)
		cleanup();
	
    for(unsigned loop = 0; loop < (mode & loopMask); loop++)
    {
	int sum = 0;
	int changes;

	if(mode & _FoldOps)
	    if((changes = foldOps()) > 0)
	    {
		sum += changes;
		compilePatterns();
	    }

	if(mode & _FoldConsts)
	    if((changes = foldConsts()) > 0)
	    {
		sum += changes;
		if(mode & _Cleanup)
		    cleanup();
	    }

	if(mode & _InlineFuncs)
	    if((changes = inlineFuncs()) > 0)
	    {
		sum += changes;
		if(mode & _Cleanup)
		    cleanup();
	    }

	if(sum == 0)
	    break;       
    }

    if(mode & _CountSelfReferences)
	if(countSelfReferences() > 0)
	    if(mode & _Cleanup)
		cleanup();
}

__END_METHOD_CODE__


	METHOD VSLLib!dumpTree
		CALLS
		libnext : VSLDef,
		longname : VSLDef,
		straight : VSLDef,
		longname : VSLDef,
		node_pattern : _SYSTEM_OR_USER_,
		node_pattern : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		node_pattern : _SYSTEM_OR_USER_,
		node_pattern : _SYSTEM_OR_USER_,
		dumpTree : VSLLib,
		expr : _SYSTEM_OR_USER_,
		expr : _SYSTEM_OR_USER_,
		dumpTree : VSLLib,
		libnext : VSLDef



		METRICS
			ARRAYOP 0
			ASS 12
			AVVARLEN 0
			CALLEDN 15
			CLASS VSLLib
			CLASSID 66
			CYCLO 10
			DOTS 0
			EQTEST 1
			EXPRORCALL 24
			GE 0
			GT 0
			IN 0
			INDR 21
			LE 0
			LOC 73
			LT 78
			METHOD dumpTree
			METHODID 47
			MMINUS 0
			OUT 39
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 4
			STMNT 32
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:12 AVVARLEN:0 CALLEDN:15 CLASS:VSLLib CLASSID:66 CYCLO:10 DOTS:0 EQTEST:1 EXPRORCALL:24 GE:0 GT:0 IN:0 INDR:21 LE:0 LOC:73 LT:78 METHOD:dumpTree METHODID:47 MMINUS:0 OUT:39 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:4 STMNT:32 TERNINSTR:0 USEDVARS:0 
		;


#ID 47-dumpTree

__BEGIN_METHOD_CODE__

VSLLib::dumpTree(ostream& s)
{
    bool old = StringBox::quoted;
    StringBox::quoted = true;

    s << _REMOVED_STR_ << _lib_name << _REMOVED_STR_;
    s << _REMOVED_STR_;

    s << _REMOVED_STR_ << _lib_name << _REMOVED_STR_;

    VSLDef *d = _first;
    if(VSEFlags::dump_last)
	d = _last;

    for(; d != 0; d = d->libnext())
    {
	 
	s << _REMOVED_STR_ << d->longname() << _REMOVED_STR_
	    << d->deflist->hashcode << _REMOVED_STR_;
	    
	if(d->deflist->references == 0)
	    s << _REMOVED_STR_;
	else
	    s << _REMOVED_STR_ << d->deflist->references << _REMOVED_STR_;

	if(d->straight())
	    s << _REMOVED_STR_;
	else
	    s << _REMOVED_STR_;


	 
	s << _REMOVED_STR_;
	
	 
	s << _REMOVED_STR_ << d->longname() << _REMOVED_STR_;
	s << _REMOVED_STR_;

	 
	if(d->node_pattern() != 0)
	    s << _REMOVED_STR_ << *d->node_pattern() << _REMOVED_STR_;
	else
	    s << _REMOVED_STR_;
	s << _REMOVED_STR_;

	 
	if(d->expr() != 0)
	    s << _REMOVED_STR_ << *d->expr() << _REMOVED_STR_;
	else
	    s << _REMOVED_STR_;
	s << _REMOVED_STR_;

	 
	if(d->node_pattern() != 0)
	    d->node_pattern()->dumpTree(s);
	else
	    s << _REMOVED_STR_;
	s << _REMOVED_STR_;

	 
	if(d->expr() != 0)
	    d->expr()->dumpTree(s);
	else
	    s << _REMOVED_STR_;
	s << _REMOVED_STR_;

	if(d->libnext() != 0)
	    s << _REMOVED_STR_;
    }

    s << _REMOVED_STR_;

    StringBox::quoted = old;
}

__END_METHOD_CODE__


	METHOD VSLLib!OK
		CALLS
		libnext : VSLDef



		METRICS
			ARRAYOP 1
			ASS 5
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 4
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 15
			LT 1
			METHOD OK
			METHODID 51
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:5 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:4 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:15 LT:1 METHOD:OK METHODID:51 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:0 
		;


#ID 51-OK

__BEGIN_METHOD_CODE__

VSLLib::OK()
{
     
    for(int i = 0; i < hashSize; i++)
	if(defs[_ARGS_] != 0)
	{
	     
	     ;
	}

     
    for(VSLDef *d = _first; d != 0; d = d->libnext())
	 ;

    return true;
}

__END_METHOD_CODE__

#====================================================================
#File  ../../code/ddd-3.0/ddd/VSLLib.o.nu.met	  Methods Number  26
#====================================================================
#Process file ../../code/ddd-3.0/ddd/GraphEdge.o.nu.met ... 


	METHOD GraphEdge!enqueue
		CALLS
		from : GraphEdge,
		from : GraphEdge,
		from : GraphEdge,
		from : GraphEdge,
		to : GraphEdge,
		to : GraphEdge,
		to : GraphEdge,
		to : GraphEdge



		METRICS
			ARRAYOP 0
			ASS 14
			AVVARLEN 0
			CALLEDN 8
			CLASS GraphEdge
			CLASSID 96
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 14
			LE 0
			LOC 33
			LT 0
			METHOD enqueue
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:14 AVVARLEN:0 CALLEDN:8 CLASS:GraphEdge CLASSID:96 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:14 LE:0 LOC:33 LT:0 METHOD:enqueue METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-enqueue

__BEGIN_METHOD_CODE__

GraphEdge::enqueue()
{
     ;
	
    if(from()->_firstFrom == 0)
    {
	_nextFrom = this;
	_prevFrom = this;
	from()->_firstFrom = this;
    }
    else
    {
	_nextFrom = from()->_firstFrom->_nextFrom;
	_prevFrom = from()->_firstFrom;

	_nextFrom->_prevFrom = this;
	_prevFrom->_nextFrom = this;
    }

    if(to()->_firstTo == 0)
    {
	_nextTo = this;
	_prevTo = this;
	to()->_firstTo = this;
    }
    else
    {
	_nextTo = to()->_firstTo->_nextTo;
	_prevTo = to()->_firstTo;

	_nextTo->_prevTo = this;
	_prevTo->_nextTo = this;
    }
}

__END_METHOD_CODE__


	METHOD GraphEdge!dequeue

		METRICS
			ARRAYOP 0
			ASS 16
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 7
			DOTS 0
			EQTEST 4
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 12
			LE 0
			LOC 47
			LT 0
			METHOD dequeue
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 16
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:16 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:7 DOTS:0 EQTEST:4 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:12 LE:0 LOC:47 LT:0 METHOD:dequeue METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:16 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dequeue

__BEGIN_METHOD_CODE__

GraphEdge::dequeue()
{
     
    if(_nextFrom != 0 || _prevFrom != 0)
    {
	 ;

	if(_from->_firstFrom == this)
	    _from->_firstFrom = _nextFrom;

	if(_from->_firstFrom == this)
	{
	     ;
	    _from->_firstFrom = 0;
	}
	else
	{
	    _nextFrom->_prevFrom = _prevFrom;
	    _prevFrom->_nextFrom = _nextFrom;
	}

	_nextFrom = 0;
	_prevFrom = 0;
    }

     
    if(_nextTo != 0 || _prevTo != 0)
    {
	 ;

	if(_to->_firstTo == this)
	    _to->_firstTo = _nextTo;

	if(_to->_firstTo == this)
	{
	     ;
	    _to->_firstTo = 0;
	}
	else
	{
	    _nextTo->_prevTo = _prevTo;
	    _prevTo->_nextTo = _nextTo;
	}

	_nextTo = 0;
	_prevTo = 0;
    }
}

__END_METHOD_CODE__


	METHOD GraphEdge!OK
		CALLS
		from : GraphEdge,
		firstFrom : GraphNode,
		from : GraphEdge,
		nextFrom : GraphNode,
		to : GraphEdge,
		firstTo : GraphNode,
		to : GraphEdge,
		nextTo : GraphNode



		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 8
			CLASS GraphEdge
			CLASSID 96
			CYCLO 5
			DOTS 0
			EQTEST 0
			EXPRORCALL 12
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 21
			LT 0
			METHOD OK
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 9
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:8 CLASS:GraphEdge CLASSID:96 CYCLO:5 DOTS:0 EQTEST:0 EXPRORCALL:12 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:21 LT:0 METHOD:OK METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:9 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-OK

__BEGIN_METHOD_CODE__

GraphEdge::OK()
{
    GraphEdge *e;
     ;

     
    if(_nextFrom || _prevFrom)
    {
	for(e = from()->firstFrom(); e != 0 && e != this; 
	     e = from()->nextFrom(e))
	    ;
    }

    if(_nextTo || _prevTo)
    {
	for(e = to()->firstTo(); e != 0 && e != this; 
	     e = to()->nextTo(e))
	    ;
    }

    return true;
}

__END_METHOD_CODE__


	METHOD GraphEdge!_print
		CALLS
		hidden : GraphEdge,
		from : GraphEdge,
		region : _SYSTEM_OR_USER_,
		to : GraphEdge,
		region : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		origin : BoxRegion,
		space : BoxRegion,
		BoxPoint : BoxPoint,
		crosspoint : _SYSTEM_OR_USER_,
		crosspoint : _SYSTEM_OR_USER_,
		isFig : _SYSTEM_OR_USER_,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_,
		isPostScript : _SYSTEM_OR_USER_,
		to : GraphEdge,
		isHint : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 16
			ASS 8
			AVVARLEN 0
			CALLEDN 19
			CLASS GraphEdge
			CLASSID 96
			CYCLO 7
			DOTS 10
			EQTEST 0
			EXPRORCALL 27
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 1
			LOC 49
			LT 97
			METHOD _print
			METHODID 14
			MMINUS 0
			OUT 48
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 26
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:16 ASS:8 AVVARLEN:0 CALLEDN:19 CLASS:GraphEdge CLASSID:96 CYCLO:7 DOTS:10 EQTEST:0 EXPRORCALL:27 GE:0 GT:0 IN:0 INDR:6 LE:1 LOC:49 LT:97 METHOD:_print METHODID:14 MMINUS:0 OUT:48 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:26 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-_print

__BEGIN_METHOD_CODE__

GraphEdge::_print(ostream& os, const GraphGC &gc)
{
     
    if(hidden())
	return;
    
     
    BoxRegion start = from()->region(gc);
    BoxRegion end   = to()->region(gc);

     
    if(start <= end)
	return;
    
    BoxPoint startc = start.origin() + (start.space() / BoxPoint(2));
    BoxPoint endc   = end.origin()   + (end.space()   / BoxPoint(2));

    BoxPoint startp = crosspoint(start, endc);
    BoxPoint endp   = crosspoint(end, startc);

     
    BoxCoordinate line_width = 1;

    if(gc.printGC->isFig()) {
	if(!gc.drawArrowHeads || to()->isHint()) {
	    os << _REMOVED_STR_  << line_width;
	    os << _REMOVED_STR_  ;
	    os << startp[_ARGS_] << _REMOVED_STR_ << startp[_ARGS_] << _REMOVED_STR_ ;
	    os << endp[_ARGS_] << _REMOVED_STR_ << endp[_ARGS_] << _REMOVED_STR_ ;
	    os << _REMOVED_STR_ ;
	} else {
	    os << _REMOVED_STR_  << line_width;
	    os << _REMOVED_STR_  ;
	    os << startp[_ARGS_] << _REMOVED_STR_ << startp[_ARGS_] << _REMOVED_STR_ ;
	    os << endp[_ARGS_] << _REMOVED_STR_ << endp[_ARGS_] << _REMOVED_STR_ ;
	    os << _REMOVED_STR_ ;
	}
    } else if(gc.printGC->isPostScript()) {
	if(!gc.drawArrowHeads || to()->isHint()) {
	    os << startp[_ARGS_] << _REMOVED_STR_ << startp[_ARGS_] << _REMOVED_STR_ ;
	    os << endp[_ARGS_] << _REMOVED_STR_ << endp[_ARGS_] << _REMOVED_STR_ ;
	    os << line_width << _REMOVED_STR_;
	} else {
	    os << gc.arrowAngle << _REMOVED_STR_ << gc.arrowLength << _REMOVED_STR_;
	    os << startp[_ARGS_] << _REMOVED_STR_ << startp[_ARGS_] << _REMOVED_STR_ ;
	    os << endp[_ARGS_] << _REMOVED_STR_ << endp[_ARGS_] << _REMOVED_STR_ ;
	    os << line_width << _REMOVED_STR_;
	}
    }
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/GraphEdge.o.nu.met	  Methods Number  4
#======================================================================
#Process file ../../code/ddd-3.0/ddd/PannedGE.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/comm-manag.o.nu.met ... 


	METHOD CmdData!clear_origin

		METRICS
			origin REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 6
			CALLEDN 0
			CLASS CmdData
			CLASSID 128
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 0
			METHOD clear_origin
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:6 CALLEDN:0 CLASS:CmdData CLASSID:128 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:0 METHOD:clear_origin METHODID:0 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 0-clear_origin

__BEGIN_METHOD_CODE__

CmdData::clear_origin(Widget w, XtPointer client_data, XtPointer)
{
    (void) w;			 

     
    CmdData *cmd_data = (CmdData *)client_data;
    cmd_data->origin = 0;
}

__END_METHOD_CODE__

#=======================================================================
#File  ../../code/ddd-3.0/ddd/comm-manag.o.nu.met	  Methods Number  1
#=======================================================================
#Process file ../../code/ddd-3.0/ddd/expired.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/history.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/mainloop.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/print.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/select.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/status.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/value-read.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/ArgField.o.nu.met ... 


	METHOD ArgField!ArgField
		CALLS
		CreateComboBox : _SYSTEM_OR_USER_



		METRICS
			arg_text_field REFERRED 3 TIMES,
			ARRAYOP 6
			ASS 4
			AVVARLEN 14
			CALLEDN 1
			CLASS ArgField
			CLASSID 104
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 0
			METHOD ArgField
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:6 ASS:4 AVVARLEN:14 CALLEDN:1 CLASS:ArgField CLASSID:104 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:17 LT:0 METHOD:ArgField METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-ArgField

__BEGIN_METHOD_CODE__

ArgField::ArgField(Widget parent, const char* name)
{
    Arg args[_ARGS_];
    Cardinal arg = 0;

    if(!app_data.button_captions)
    {
	 
	((void)( ( args[_ARGS_] ).name = (  ((char *)&_XmStrings[_ARGS_])  ), ( args[_ARGS_] ).value = (XtArgVal)(  2 ) )) ; arg++;
    }

    arg_text_field = CreateComboBox(parent, (char *)name, args, arg);

    XtAddCallback(arg_text_field, ((char *)&_XmStrings[_ARGS_]) ,
		  valueChangedCB, this);
    XtAddCallback(arg_text_field, ((char *)&_XmStrings[_ARGS_]) ,
		  losePrimaryCB, this);
}

__END_METHOD_CODE__


	METHOD ArgField!get_string
		CALLS
		str : _SYSTEM_OR_USER_,
		strip_space : _SYSTEM_OR_USER_



		METRICS
			arg_text_field REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 14
			CALLEDN 2
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD get_string
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:14 CALLEDN:2 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:get_string METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-get_string

__BEGIN_METHOD_CODE__

ArgField::get_string()
{
    String arg = XmTextFieldGetString(arg_text_field);
    string str(arg);
    XtFree(arg);
    strip_space(str);
    return str;
}

__END_METHOD_CODE__


	METHOD ArgField!set_string
		CALLS
		index : string,
		strip_space : _SYSTEM_OR_USER_



		METRICS
			arg_text_field REFERRED 7 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 14
			CALLEDN 2
			CLASS ArgField
			CLASSID 104
			CYCLO 4
			DOTS 2
			EQTEST 0
			EXPRORCALL 16
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 29
			LT 0
			METHOD set_string
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:14 CALLEDN:2 CLASS:ArgField CLASSID:104 CYCLO:4 DOTS:2 EQTEST:0 EXPRORCALL:16 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:29 LT:0 METHOD:set_string METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-set_string

__BEGIN_METHOD_CODE__

ArgField::set_string(string s)
{
     
    int last_nl = s.index('\n', -1);
    if(last_nl >= 0)
	s = s.before(last_nl);

     
    strip_space(s);

     
    untabify(s);

     
    String old_s = XmTextFieldGetString(arg_text_field);
    if(s != old_s)
    {
	XmTextFieldSetString(arg_text_field, (String)s);

	if(XtIsRealized(arg_text_field))  
	{
	    XmTextPosition last_pos = 
		XmTextFieldGetLastPosition(arg_text_field);
	    XmTextFieldSetInsertionPosition(arg_text_field, last_pos);
	    XmTextFieldShowPosition(arg_text_field, 0);
	    XmTextFieldShowPosition(arg_text_field, last_pos);
	}
    }
    XtFree(old_s);
}

__END_METHOD_CODE__


	METHOD ArgField!valueChangedCB
		CALLS
		call : _SYSTEM_OR_USER_,
		get_string : ArgField,
		call : _SYSTEM_OR_USER_,
		call : _SYSTEM_OR_USER_



		METRICS
			is_empty REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 8
			CALLEDN 4
			CLASS ArgField
			CLASSID 104
			CYCLO 4
			DOTS 3
			EQTEST 1
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 8
			LE 0
			LOC 20
			LT 0
			METHOD valueChangedCB
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:8 CALLEDN:4 CLASS:ArgField CLASSID:104 CYCLO:4 DOTS:3 EQTEST:1 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:8 LE:0 LOC:20 LT:0 METHOD:valueChangedCB METHODID:0 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 0-valueChangedCB

__BEGIN_METHOD_CODE__

ArgField::valueChangedCB(Widget,
			      XtPointer client_data,
			      XtPointer)
{
    ArgField *arg_field = (ArgField *)client_data;
    arg_field->handlers.call(Changed, arg_field);

    string s = arg_field->get_string();

    if(s == _REMOVED_STR_)
    {
	if(!arg_field->is_empty)
	{
	    arg_field->is_empty = true;
	    arg_field->handlers.call(Empty, arg_field, (void *)true);
	}
    }
    else if(arg_field->is_empty)
    {
	arg_field->is_empty = false;
	arg_field->handlers.call(Empty, arg_field, (void *)false);
    }
}

__END_METHOD_CODE__


	METHOD ArgField!losePrimaryCB
		CALLS
		call : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD losePrimaryCB
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:losePrimaryCB METHODID:1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-losePrimaryCB

__BEGIN_METHOD_CODE__

ArgField::losePrimaryCB(Widget,
			     XtPointer client_data,
			     XtPointer)
{
    ArgField *arg_field = (ArgField *)client_data;
    arg_field->handlers.call(LosePrimary, arg_field, 0);
}

__END_METHOD_CODE__


	METHOD ArgField!addHandler
		CALLS
		add : AssocRec



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD addHandler
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:addHandler METHODID:10 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-addHandler

__BEGIN_METHOD_CODE__

ArgField::addHandler(unsigned    type,
			   HandlerProc proc,
			   void*       client_data)
{
    handlers.add(type, proc, client_data);
}

__END_METHOD_CODE__


	METHOD ArgField!removeHandler
		CALLS
		remove : AssocRec



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD removeHandler
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:removeHandler METHODID:11 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-removeHandler

__BEGIN_METHOD_CODE__

ArgField::removeHandler(unsigned    type,
			      HandlerProc proc,
			      void        *client_data)
{
    handlers.remove(type, proc, client_data);
}

__END_METHOD_CODE__


	METHOD ArgField!callHandlers
		CALLS
		call : AssocRec



		METRICS
			is_empty REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 1
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD callHandlers
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:1 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:callHandlers METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-callHandlers

__BEGIN_METHOD_CODE__

ArgField::callHandlers()
{
    handlers.call(Empty, this, (void*)is_empty);
}

__END_METHOD_CODE__


	METHOD ArgField!top
		CALLS
		ComboBoxTop : _SYSTEM_OR_USER_,
		text : ArgField



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD top
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:top METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-top

__BEGIN_METHOD_CODE__

ArgField::top()
{ return ComboBoxTop(text()); }

__END_METHOD_CODE__

#=====================================================================
#File  ../../code/ddd-3.0/ddd/ArgField.o.nu.met	  Methods Number  9
#=====================================================================
#Process file ../../code/ddd-3.0/ddd/DispNode.o.nu.met ... 


	METHOD DispNode!DispNode
		CALLS
		DispValue : DispValue,
		set_addr : DispNode,
		addr : _SYSTEM_OR_USER_,
		DispBox : DispBox,
		BoxGraphNode : BoxGraphNode,
		box : _SYSTEM_OR_USER_



		METRICS
			mydisp_nr REFERRED 1 TIMES,
			mylast_change REFERRED 1 TIMES,
			change_tics REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 11
			CALLEDN 6
			CLASS DispNode
			CLASSID 110
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 16
			LT 0
			METHOD DispNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:11 CALLEDN:6 CLASS:DispNode CLASSID:110 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:16 LT:0 METHOD:DispNode METHODID:3 MMINUS:0 OUT:0 PARNUM:4 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:3 
		;


#ID 3-DispNode

__BEGIN_METHOD_CODE__

DispNode::DispNode(int disp_nr,
		    const string& name,
		    const string& scope,
		    const string& value)
{
    mylast_change = ++change_tics;

    if(value != _REMOVED_STR_)
    {
	string v = value;
	disp_value = new DispValue(0, 0, v, myname, myname);
	set_addr(disp_value->addr());
    }

     
    disp_box = new DispBox(mydisp_nr, myname, disp_value);
    
     
    mynodeptr = new BoxGraphNode(disp_box->box());
}

__END_METHOD_CODE__


	METHOD DispNode!addHandler
		CALLS
		add : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD addHandler
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:addHandler METHODID:26 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-addHandler

__BEGIN_METHOD_CODE__

DispNode::addHandler(unsigned    type,
			   HandlerProc proc,
			   void*       client_data)
{
    DispNode::handlers.add(type, proc, client_data);
}

__END_METHOD_CODE__


	METHOD DispNode!removeHandler
		CALLS




		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD removeHandler
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:removeHandler METHODID:27 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-removeHandler

__BEGIN_METHOD_CODE__

DispNode::removeHandler(unsigned    type,
			      HandlerProc proc,
			      void        *client_data)
{
    DispNode::handlers.remove(type, proc, client_data);
}

__END_METHOD_CODE__


	METHOD DispNode!update
		CALLS
		call : AssocRec,
		DispValue : DispValue,
		set_addr : DispNode,
		addr : _SYSTEM_OR_USER_,
		update : _SYSTEM_OR_USER_,
		addr : DispNode,
		addr : _SYSTEM_OR_USER_,
		set_addr : DispNode,
		addr : _SYSTEM_OR_USER_,
		set_value : DispBox,
		setBox : BoxGraphNode,
		box : _SYSTEM_OR_USER_



		METRICS
			myenabled REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 9
			AVVARLEN 9
			CALLEDN 12
			CLASS DispNode
			CLASSID 110
			CYCLO 7
			DOTS 1
			EQTEST 1
			EXPRORCALL 19
			GE 0
			GT 0
			IN 0
			INDR 7
			LE 0
			LOC 54
			LT 0
			METHOD update
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 15
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:9 CALLEDN:12 CLASS:DispNode CLASSID:110 CYCLO:7 DOTS:1 EQTEST:1 EXPRORCALL:19 GE:0 GT:0 IN:0 INDR:7 LE:0 LOC:54 LT:0 METHOD:update METHODID:28 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:15 TERNINSTR:0 USEDVARS:1 
		;


#ID 28-update

__BEGIN_METHOD_CODE__

DispNode::update(string& value)
{
    bool changed = false;
    bool inited  = false;

    if(!myenabled) 
    { 
	 
	myenabled = true;
	handlers.call(DispNode_Disabled, this, (void*)false);
	changed = true;
    }

    if(disp_value == 0)
    { 
	 
	disp_value = new DispValue(0, 0, value, myname, myname);
	set_addr(disp_value->addr());
	changed = true;
    }
    else
    { 
	disp_value->update(value, changed, inited);
	if(addr() != disp_value->addr())
	{
	    set_addr(disp_value->addr());
	    changed = true;
	}
    }

    if(inited)
    {
	 
	myselected_value = disp_value;
    }
	
    if(changed)
    {
	disp_box->set_value(disp_value);

	 
	mynodeptr->setBox(disp_box->box());
    }

    if(changed || inited)
    {
	 




    }

    return changed;
}

__END_METHOD_CODE__


	METHOD DispNode!refresh
		CALLS
		set_value : DispBox,
		enabled : DispNode,
		setBox : BoxGraphNode,
		box : _SYSTEM_OR_USER_,
		select : DispNode,
		selected_value : DispNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 5
			LT 0
			METHOD refresh
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:5 LT:0 METHOD:refresh METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:1 USEDVARS:0 
		;


#ID 30-refresh

__BEGIN_METHOD_CODE__

DispNode::refresh()
{
    disp_box->set_value(enabled() ? disp_value : 0);
    mynodeptr->setBox(disp_box->box());
    select(selected_value());
}

__END_METHOD_CODE__


	METHOD DispNode!findTagBox
		CALLS
		__data : TagBox,
		findTagBox : DispNode,
		box : _SYSTEM_OR_USER_,
		nchildren : _SYSTEM_OR_USER_,
		findTagBox : DispNode



		METRICS
			ARRAYOP 1
			ASS 6
			AVVARLEN 0
			CALLEDN 5
			CLASS DispNode
			CLASSID 110
			CYCLO 6
			DOTS 0
			EQTEST 1
			EXPRORCALL 18
			GE 0
			GT 3
			IN 0
			INDR 3
			LE 0
			LOC 23
			LT 4
			METHOD findTagBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 4
			SCOPEOP 0
			STMNT 11
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:6 AVVARLEN:0 CALLEDN:5 CLASS:DispNode CLASSID:110 CYCLO:6 DOTS:0 EQTEST:1 EXPRORCALL:18 GE:0 GT:3 IN:0 INDR:3 LE:0 LOC:23 LT:4 METHOD:findTagBox METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:4 SCOPEOP:0 STMNT:11 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-findTagBox

__BEGIN_METHOD_CODE__

DispNode::findTagBox(const Box *box, DispValue *dv)
{
    TagBox *tb = dynamic_cast< TagBox  *>(  (Box *)box ) ;
    if(tb && tb->__data() == (void *)dv)
	return tb;

    HatBox *hb = dynamic_cast< HatBox  *>(  (Box *)box ) ;
    if(hb)
	return findTagBox(hb->box(), dv);

    CompositeBox *cb = dynamic_cast< CompositeBox  *>(  (Box *)box ) ;
    if(cb)
    {
	for(int i = 0; i < cb->nchildren(); i++)
	{
	    Box *child = (*cb)[_ARGS_];
	    TagBox *tb = findTagBox(child, dv);
	    if(tb)
		return tb;
	}
    }

    return 0;
}

__END_METHOD_CODE__


	METHOD DispNode!select
		CALLS
		findTagBox : DispNode,
		box : DispNode,
		nodeptr : DispNode,
		setHighlight : BoxGraphNode



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 4
			CLASS DispNode
			CLASSID 110
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 0
			METHOD select
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:4 CLASS:DispNode CLASSID:110 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:8 LT:0 METHOD:select METHODID:31 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-select

__BEGIN_METHOD_CODE__

DispNode::select(DispValue *dv)
{
    TagBox *tb = 0;
    if(dv != 0)
	tb = findTagBox(box(), dv);

    nodeptr()->setHighlight(tb);
    myselected_value = dv;
}

__END_METHOD_CODE__


	METHOD DispNode!disable
		CALLS
		enabled : DispNode,
		call : AssocRec,
		set_value : DispBox,
		setBox : BoxGraphNode,
		box : _SYSTEM_OR_USER_



		METRICS
			myenabled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 9
			CALLEDN 5
			CLASS DispNode
			CLASSID 110
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 9
			LT 0
			METHOD disable
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:9 CALLEDN:5 CLASS:DispNode CLASSID:110 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:9 LT:0 METHOD:disable METHODID:32 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 32-disable

__BEGIN_METHOD_CODE__

DispNode::disable()
{
    if(enabled())
    {
	myenabled = false;
	handlers.call(DispNode_Disabled, this, (void *)true);
	disp_box->set_value();
	mynodeptr->setBox(disp_box->box());
    }
}

__END_METHOD_CODE__


	METHOD DispNode!enable
		CALLS
		disabled : DispNode,
		call : AssocRec,
		refresh : DispNode



		METRICS
			myenabled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 9
			CALLEDN 3
			CLASS DispNode
			CLASSID 110
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD enable
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:9 CALLEDN:3 CLASS:DispNode CLASSID:110 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:enable METHODID:33 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 33-enable

__BEGIN_METHOD_CODE__

DispNode::enable()
{
    if(disabled())
    {
	myenabled = true;
	handlers.call(DispNode_Disabled, this, (void *)false);
	refresh();
    }
}

__END_METHOD_CODE__


	METHOD DispNode!make_inactive
		CALLS
		active : DispNode,
		hidden : _SYSTEM_OR_USER_,
		hidden : _SYSTEM_OR_USER_,
		selected : _SYSTEM_OR_USER_



		METRICS
			myactive REFERRED 1 TIMES,
			saved_node_hidden REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 4
			AVVARLEN 12
			CALLEDN 4
			CLASS DispNode
			CLASSID 110
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 11
			LT 0
			METHOD make_inactive
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:12 CALLEDN:4 CLASS:DispNode CLASSID:110 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:11 LT:0 METHOD:make_inactive METHODID:35 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:2 
		;


#ID 35-make_inactive

__BEGIN_METHOD_CODE__

DispNode::make_inactive()
{
    if(active())
    {
	saved_node_hidden = mynodeptr->hidden();
	mynodeptr->hidden() = true;
	myactive = false;
    }

     
    mynodeptr->selected() = false;
}

__END_METHOD_CODE__


	METHOD DispNode!make_active
		CALLS
		active : DispNode,
		hidden : _SYSTEM_OR_USER_



		METRICS
			myactive REFERRED 1 TIMES,
			saved_node_hidden REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 12
			CALLEDN 2
			CLASS DispNode
			CLASSID 110
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 0
			METHOD make_active
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:12 CALLEDN:2 CLASS:DispNode CLASSID:110 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:0 METHOD:make_active METHODID:34 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 34-make_active

__BEGIN_METHOD_CODE__

DispNode::make_active()
{
    if(!active())
    {
	myactive = true;
	mynodeptr->hidden() = saved_node_hidden;
    }
}

__END_METHOD_CODE__


	METHOD DispNode!set_addr

		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD set_addr
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:set_addr METHODID:29 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-set_addr

__BEGIN_METHOD_CODE__

DispNode::set_addr(const string& new_addr)
{
    if(myaddr != new_addr)
    {
	myaddr = new_addr;
	 




    }
}

__END_METHOD_CODE__


	METHOD DispNode!alias_ok
		CALLS
		is_user_command : DispNode,
		name : DispNode,
		contains : _SYSTEM_OR_USER_,
		name : DispNode,
		contains : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD alias_ok
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:alias_ok METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-alias_ok

__BEGIN_METHOD_CODE__

DispNode::alias_ok()
{
     
     
    return !is_user_command()
	&& !name().contains('/', 0) 
	&& !name().contains('(', 0);
}

__END_METHOD_CODE__

#======================================================================
#File  ../../code/ddd-3.0/ddd/DispNode.o.nu.met	  Methods Number  13
#======================================================================
#Process file ../../code/ddd-3.0/ddd/HistoryD.o.nu.met ... 

#Process file ../../code/ddd-3.0/ddd/WhatNextCB.o.nu.met ... 

#Process file  ../../code/ddd-3.0/ddd/ctrl.o.nu.cls


	METHOD regex!regex

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS regex
			CLASSID 0
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD regex
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:regex CLASSID:0 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:regex METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-regex

__BEGIN_METHOD_CODE__

regex::regex(const regex&)
{}

__END_METHOD_CODE__


	METHOD regex!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS regex
			CLASSID 0
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:regex CLASSID:0 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-operator_=

__BEGIN_METHOD_CODE__

regex::operator_=(const regex&)
{ return *this; }

__END_METHOD_CODE__


	METHOD string!string
		CALLS
		error : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD string
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:string METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-string

__BEGIN_METHOD_CODE__

string::string(int)
{ error(_REMOVED_STR_); }

__END_METHOD_CODE__


	METHOD string!operator_=
		CALLS
		error : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS string
			CLASSID 2
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:string CLASSID:2 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_=

__BEGIN_METHOD_CODE__

string::operator_=(int)
{ error(_REMOVED_STR_); return *this; }

__END_METHOD_CODE__

#==================================================================
#File ../../code/ddd-3.0/ddd/ctrl.o.nu.cls	 Class Number = 3
#==================================================================
#Process file  ../../code/ddd-3.0/ddd/cwd.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/cook.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/hash.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/home.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/rxclass.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/sigName.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/strclass.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/tabs.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/SignalB.o.nu.cls


	METHOD SignalBlocker!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SignalBlocker
			CLASSID 3
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SignalBlocker CLASSID:3 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

SignalBlocker::operator_=(const SignalBlocker&)
{
	 ;
	return *this;
    }

__END_METHOD_CODE__


	METHOD SignalBlocker!SignalBlocker

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SignalBlocker
			CLASSID 3
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD SignalBlocker
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SignalBlocker CLASSID:3 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:SignalBlocker METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-SignalBlocker

__BEGIN_METHOD_CODE__

SignalBlocker::SignalBlocker(const SignalBlocker& sb)
{
	  ;
     }

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/SignalB.o.nu.cls	 Class Number = 1
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/TypeInfo.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/UniqueId.o.nu.cls


	METHOD UniqueId!UniqueId

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS UniqueId
			CLASSID 4
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD UniqueId
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:UniqueId CLASSID:4 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:UniqueId METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-UniqueId

__BEGIN_METHOD_CODE__

UniqueId::UniqueId()
{}

__END_METHOD_CODE__


	METHOD UniqueId!~UniqueId

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS UniqueId
			CLASSID 4
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~UniqueId
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:UniqueId CLASSID:4 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~UniqueId METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-~UniqueId

__BEGIN_METHOD_CODE__

UniqueId::~UniqueId()
{}

__END_METHOD_CODE__


	METHOD UniqueId!operator_unsignedlong

		METRICS
			_id REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS UniqueId
			CLASSID 4
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_unsignedlong
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:UniqueId CLASSID:4 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_unsignedlong METHODID:-1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID -1-operator_unsignedlong

__BEGIN_METHOD_CODE__

UniqueId::operator_unsignedlong()
{ return _id; }

__END_METHOD_CODE__


	METHOD UniqueId!inUse

		METRICS
			ids REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS UniqueId
			CLASSID 4
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD inUse
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:UniqueId CLASSID:4 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:inUse METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-inUse

__BEGIN_METHOD_CODE__

UniqueId::inUse()
{ return ids; }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/UniqueId.o.nu.cls	 Class Number = 1
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/MemCheck.o.nu.cls


	METHOD MemCheckHeader!init

		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 0
			CLASS MemCheckHeader
			CLASSID 5
			CYCLO 1
			DOTS 5
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD init
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:0 CLASS:MemCheckHeader CLASSID:5 CYCLO:1 DOTS:5 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:init METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-init

__BEGIN_METHOD_CODE__

MemCheckHeader::init()
{
	 
	s.ptr       = this;
	s.size      = 0;
	s.magic     = MAGIC;
	s.requested = 0;
	s.tic       = 0;
    }

__END_METHOD_CODE__


	METHOD MemCheck!tic

		METRICS
			tics REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 4
			CALLEDN 0
			CLASS MemCheck
			CLASSID 6
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD tic
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:4 CALLEDN:0 CLASS:MemCheck CLASSID:6 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:tic METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-tic

__BEGIN_METHOD_CODE__

MemCheck::tic()
{ return tics; }

__END_METHOD_CODE__


	METHOD MemCheck!in_free

		METRICS
			freeBytes REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS MemCheck
			CLASSID 6
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD in_free
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:MemCheck CLASSID:6 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:in_free METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-in_free

__BEGIN_METHOD_CODE__

MemCheck::in_free()
{ return freeBytes; }

__END_METHOD_CODE__


	METHOD MemCheck!in_alloc

		METRICS
			allocBytes REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS MemCheck
			CLASSID 6
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD in_alloc
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:MemCheck CLASSID:6 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:in_alloc METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-in_alloc

__BEGIN_METHOD_CODE__

MemCheck::in_alloc()
{ return allocBytes; }

__END_METHOD_CODE__


	METHOD MemChecker!MemChecker

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MemChecker
			CLASSID 7
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD MemChecker
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MemChecker CLASSID:7 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:MemChecker METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-MemChecker

__BEGIN_METHOD_CODE__

MemChecker::MemChecker(char *pfx = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD MemChecker!~MemChecker
		CALLS
		map : MemCheck



		METRICS
			start REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 1
			CLASS MemChecker
			CLASSID 7
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~MemChecker
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:1 CLASS:MemChecker CLASSID:7 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~MemChecker METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-~MemChecker

__BEGIN_METHOD_CODE__

MemChecker::~MemChecker()
{
	MemCheck::map(clog, start, prefix);
    }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/MemCheck.o.nu.cls	 Class Number = 3
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/IntIntAA.o.nu.cls


	METHOD AssocRec!AssocRec

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocRec
			CLASSID 8
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocRec
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocRec CLASSID:8 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocRec METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-AssocRec

__BEGIN_METHOD_CODE__

AssocRec::AssocRec(const K& k, const V& v)
{}

__END_METHOD_CODE__


	METHOD AssocRec!AssocRec

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocRec
			CLASSID 8
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocRec
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocRec CLASSID:8 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocRec METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-AssocRec

__BEGIN_METHOD_CODE__

AssocRec::AssocRec(const K& k)
{}

__END_METHOD_CODE__


	METHOD AssocRec!AssocRec

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocRec
			CLASSID 8
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD AssocRec
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocRec CLASSID:8 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:AssocRec METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-AssocRec

__BEGIN_METHOD_CODE__

AssocRec::AssocRec(const AssocRec<K, V>& x)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD AssocRec!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocRec
			CLASSID 8
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocRec CLASSID:8 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

AssocRec::operator_=(const AssocRec<K, V>&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD _Assoc!lookup

		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 0
			CLASS _Assoc
			CLASSID 9
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 7
			LT 1
			METHOD lookup
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:0 CLASS:_Assoc CLASSID:9 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:7 LT:1 METHOD:lookup METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-lookup

__BEGIN_METHOD_CODE__

_Assoc::lookup(const K& key)
{
	for(AssocRec<K,V> *e = entries; e != 0; e = e->next)
	    if(key == e->key)
		return e;

	return 0;
    }

__END_METHOD_CODE__


	METHOD _Assoc!insert

		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 0
			CLASS _Assoc
			CLASSID 9
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 2
			METHOD insert
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:0 CLASS:_Assoc CLASSID:9 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:5 LT:2 METHOD:insert METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-insert

__BEGIN_METHOD_CODE__

_Assoc::insert(const K& key)
{
	AssocRec<K,V> *e = new AssocRec<K,V>(key);
	e->next = entries;
	return entries = e;
    }

__END_METHOD_CODE__


	METHOD _Assoc!_Assoc

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS _Assoc
			CLASSID 9
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _Assoc
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:_Assoc CLASSID:9 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_Assoc METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_Assoc

__BEGIN_METHOD_CODE__

_Assoc::_Assoc()
{}

__END_METHOD_CODE__


	METHOD _Assoc!~_Assoc

		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 0
			CLASS _Assoc
			CLASSID 9
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 2
			METHOD ~_Assoc
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:0 CLASS:_Assoc CLASSID:9 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:8 LT:2 METHOD:~_Assoc METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-~_Assoc

__BEGIN_METHOD_CODE__

_Assoc::~_Assoc()
{
	AssocRec<K,V> *next = 0;
	for(AssocRec<K,V> *e = entries; e != 0; e = next)
	{
	    next = e->next;
	    delete e;
	}
    }

__END_METHOD_CODE__


	METHOD _Assoc!operator_[]
		CALLS
		lookup : _Assoc,
		insert : _Assoc



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 2
			CLASS _Assoc
			CLASSID 9
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 1
			METHOD operator_[]
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:2 CLASS:_Assoc CLASSID:9 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:6 LT:1 METHOD:operator_[] METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_[]

__BEGIN_METHOD_CODE__

_Assoc::operator_[](const K& key)
{
	AssocRec<K,V> *e = lookup(key);
	if(e == 0)
	    e = insert(key);
	return e->value;
    }

__END_METHOD_CODE__


	METHOD _Assoc!operator_[]
		CALLS
		lookup : _Assoc,
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS _Assoc
			CLASSID 9
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 1
			METHOD operator_[]
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:_Assoc CLASSID:9 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:6 LT:1 METHOD:operator_[] METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_[]

__BEGIN_METHOD_CODE__

_Assoc::operator_[](const K& key)
{
	AssocRec<K,V> *e = lookup(key);
	if(e == 0)
	    abort();
	return e->value;
    }

__END_METHOD_CODE__


	METHOD _Assoc!add
		CALLS
		insert : _Assoc



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS _Assoc
			CLASSID 9
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD add
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:_Assoc CLASSID:9 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:add METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-add

__BEGIN_METHOD_CODE__

_Assoc::add(const K& key)
{
	insert(key);
    }

__END_METHOD_CODE__


	METHOD _Assoc!has
		CALLS
		lookup : _Assoc



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS _Assoc
			CLASSID 9
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:_Assoc CLASSID:9 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-has

__BEGIN_METHOD_CODE__

_Assoc::has(const K& key)
{
	return lookup(key) != 0;
    }

__END_METHOD_CODE__


	METHOD _Assoc!remove

		METRICS
			ARRAYOP 0
			ASS 8
			AVVARLEN 0
			CALLEDN 0
			CLASS _Assoc
			CLASSID 9
			CYCLO 6
			DOTS 0
			EQTEST 4
			EXPRORCALL 5
			GE 0
			GT 3
			IN 0
			INDR 3
			LE 0
			LOC 29
			LT 3
			METHOD remove
			METHODID 8
			MMINUS 1
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:8 AVVARLEN:0 CALLEDN:0 CLASS:_Assoc CLASSID:9 CYCLO:6 DOTS:0 EQTEST:4 EXPRORCALL:5 GE:0 GT:3 IN:0 INDR:3 LE:0 LOC:29 LT:3 METHOD:remove METHODID:8 MMINUS:1 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-remove

__BEGIN_METHOD_CODE__

_Assoc::remove(const K& key, int n = -1)
{
	if(n == 0)
	    return;

	AssocRec<K,V> *prev = 0;
	AssocRec<K,V> *e = entries;
	while(e != 0)
	{
	    AssocRec<K,V> *next = e->next;

	    if(key == e->key)
	    {
		if(prev == 0)
		    entries = next;
		else
		    prev->next = next;
		delete e;

		if(--n == 0)
		    return;
	    }
	    else
	    {
		prev = e;
	    }

	    e = next;
	}
    }

__END_METHOD_CODE__


	METHOD _Assoc!_Assoc

		METRICS
			ARRAYOP 1
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS _Assoc
			CLASSID 9
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 4
			LT 1
			METHOD _Assoc
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:_Assoc CLASSID:9 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:4 LT:1 METHOD:_Assoc METHODID:9 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-_Assoc

__BEGIN_METHOD_CODE__

_Assoc::_Assoc(const _Assoc<K,V>& m)
{
	for(AssocRec<K,V> *e = m.entries; e != 0; e = e->next)
	    (*this)[_ARGS_] = e->value;
    }

__END_METHOD_CODE__


	METHOD _Assoc!operator_=

		METRICS
			ARRAYOP 1
			ASS 6
			AVVARLEN 0
			CALLEDN 0
			CLASS _Assoc
			CLASSID 9
			CYCLO 4
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 2
			LE 0
			LOC 12
			LT 1
			METHOD operator_=
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:6 AVVARLEN:0 CALLEDN:0 CLASS:_Assoc CLASSID:9 CYCLO:4 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:2 LE:0 LOC:12 LT:1 METHOD:operator_= METHODID:10 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-operator_=

__BEGIN_METHOD_CODE__

_Assoc::operator_=(const _Assoc<K,V>& m)
{
	if(this != &m)
	{
	    if(entries)
		delete entries;
	    entries = 0;

	    for(AssocRec<K,V> *e = m.entries; e != 0; e = e->next)
		(*this)[_ARGS_] = e->value;
	}
	return *this;
    }

__END_METHOD_CODE__


	METHOD AssocMark!AssocMark

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocMark
			CLASSID 10
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocMark
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocMark CLASSID:10 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocMark METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-AssocMark

__BEGIN_METHOD_CODE__

AssocMark::AssocMark(AssocRec<K,V> *ptr)
{}

__END_METHOD_CODE__


	METHOD AssocMark!AssocMark

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocMark
			CLASSID 10
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocMark
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocMark CLASSID:10 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocMark METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-AssocMark

__BEGIN_METHOD_CODE__

AssocMark::AssocMark(const Assoc<K,V>& assoc)
{}

__END_METHOD_CODE__


	METHOD AssocMark!AssocMark

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocMark
			CLASSID 10
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocMark
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocMark CLASSID:10 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocMark METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-AssocMark

__BEGIN_METHOD_CODE__

AssocMark::AssocMark(const AssocMark<K,V>& mark)
{}

__END_METHOD_CODE__


	METHOD AssocMark!operator_=

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocMark
			CLASSID 10
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:AssocMark CLASSID:10 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

AssocMark::operator_=(const Assoc<K,V>& assoc)
{
	rec = assoc.entries;
	return *this;
    }

__END_METHOD_CODE__


	METHOD AssocMark!operator_=

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocMark
			CLASSID 10
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_=
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:AssocMark CLASSID:10 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_= METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_=

__BEGIN_METHOD_CODE__

AssocMark::operator_=(const AssocMark<K,V>& mark)
{
	rec = mark.rec;
	return *this;
    }

__END_METHOD_CODE__


	METHOD AssocIter!AssocIter

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocIter
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocIter METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-AssocIter

__BEGIN_METHOD_CODE__

AssocIter::AssocIter(AssocRec<K,V> *ptr)
{}

__END_METHOD_CODE__


	METHOD AssocIter!AssocIter

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocIter
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocIter METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-AssocIter

__BEGIN_METHOD_CODE__

AssocIter::AssocIter(const Assoc<K,V>& assoc)
{}

__END_METHOD_CODE__


	METHOD AssocIter!AssocIter

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AssocIter
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AssocIter METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-AssocIter

__BEGIN_METHOD_CODE__

AssocIter::AssocIter(const AssocIter<K,V>& iter)
{}

__END_METHOD_CODE__


	METHOD AssocIter!operator_=

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

AssocIter::operator_=(const Assoc<K,V>& assoc)
{
	AssocMark<K,V>::operator = (assoc);
	return *this;
    }

__END_METHOD_CODE__


	METHOD AssocIter!operator_=

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD operator_=
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:operator_= METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_=

__BEGIN_METHOD_CODE__

AssocIter::operator_=(const AssocIter<K,V>& iter)
{
	AssocMark<K,V>::operator = (iter);
	return *this;
    }

__END_METHOD_CODE__


	METHOD AssocIter!key

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD key
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:key METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-key

__BEGIN_METHOD_CODE__

AssocIter::key()
{ return rec->key;   }

__END_METHOD_CODE__


	METHOD AssocIter!value

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD value
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:value METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-value

__BEGIN_METHOD_CODE__

AssocIter::value()
{ return rec->value; }

__END_METHOD_CODE__


	METHOD AssocIter!value

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD value
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:value METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-value

__BEGIN_METHOD_CODE__

AssocIter::value()
{ return rec->value; }

__END_METHOD_CODE__


	METHOD AssocIter!ok

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ok
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ok METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-ok

__BEGIN_METHOD_CODE__

AssocIter::ok()
{ return rec != 0; }

__END_METHOD_CODE__


	METHOD AssocIter!next

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 1
			METHOD next
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:1 LT:1 METHOD:next METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-next

__BEGIN_METHOD_CODE__

AssocIter::next()
{ return AssocIter<K,V>(rec->next); }

__END_METHOD_CODE__


	METHOD AssocIter!operator_++

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD operator_++
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:operator_++ METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-operator_++

__BEGIN_METHOD_CODE__

AssocIter::operator_++()
{
	rec = rec->next; return *this;
    }

__END_METHOD_CODE__


	METHOD AssocIter!operator_++
		CALLS
		old : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS AssocIter
			CLASSID 11
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 1
			METHOD operator_++
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:AssocIter CLASSID:11 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:5 LT:1 METHOD:operator_++ METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-operator_++

__BEGIN_METHOD_CODE__

AssocIter::operator_++(int)
{
	AssocIter<K,V> old(*this);
	rec = rec->next;
	return old;
    }

__END_METHOD_CODE__


	METHOD Assoc!lookup
		CALLS
		lookup : Assoc



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Assoc
			CLASSID 12
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 1
			METHOD lookup
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Assoc CLASSID:12 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:1 METHOD:lookup METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-lookup

__BEGIN_METHOD_CODE__

Assoc::lookup(const K& key)
{
	return _Assoc<K, V>::lookup(key);
    }

__END_METHOD_CODE__


	METHOD Assoc!insert
		CALLS
		insert : Assoc



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Assoc
			CLASSID 12
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 1
			METHOD insert
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Assoc CLASSID:12 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:3 LT:1 METHOD:insert METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-insert

__BEGIN_METHOD_CODE__

Assoc::insert(const K& key)
{
	return _Assoc<K, V>::insert(key);
    }

__END_METHOD_CODE__


	METHOD Assoc!release

		METRICS
			ARRAYOP 0
			ASS 7
			AVVARLEN 0
			CALLEDN 0
			CLASS Assoc
			CLASSID 12
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 2
			IN 0
			INDR 2
			LE 0
			LOC 13
			LT 2
			METHOD release
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:0 CALLEDN:0 CLASS:Assoc CLASSID:12 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:2 IN:0 INDR:2 LE:0 LOC:13 LT:2 METHOD:release METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-release

__BEGIN_METHOD_CODE__

Assoc::release(const AssocMark<K, V>& mark)
{
	AssocRec<K, V> *e = entries;

	while(e != 0 && e != mark.rec)
	{
	    AssocRec<K, V> *tmp = e;
	    e = e->next;
	    tmp->next = 0;
	    delete tmp;
	}

	entries = e;
    }

__END_METHOD_CODE__


	METHOD DynArray!max

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD max
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:max METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:1 USEDVARS:0 
		;


#ID 0-max

__BEGIN_METHOD_CODE__

DynArray::max(int a, int b)
{ return(a > b) ? a : b; }

__END_METHOD_CODE__


	METHOD DynArray!grow
		CALLS
		max : DynArray



		METRICS
			_allocated_size REFERRED 4 TIMES,
			_values REFERRED 3 TIMES,
			ARRAYOP 4
			ASS 6
			AVVARLEN 11
			CALLEDN 1
			CLASS DynArray
			CLASSID 13
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 1
			METHOD grow
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:6 AVVARLEN:11 CALLEDN:1 CLASS:DynArray CLASSID:13 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:1 METHOD:grow METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:2 
		;


#ID 1-grow

__BEGIN_METHOD_CODE__

DynArray::grow(int new_size_min = 0)
{
	int new_size = max(_allocated_size + _allocated_size / 2 + 1, 
			   new_size_min);
	T *new_values = new T [_ARGS_];
        for(int i = 0; i < _allocated_size; i++)
            new_values[_ARGS_] = _values[_ARGS_];

        delete[] _values;
        _values         = new_values;
        _allocated_size = new_size;
    }

__END_METHOD_CODE__


	METHOD DynArray!value
		CALLS
		grow : DynArray



		METRICS
			_allocated_size REFERRED 1 TIMES,
			_values REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 11
			CALLEDN 1
			CLASS DynArray
			CLASSID 13
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD value
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:11 CALLEDN:1 CLASS:DynArray CLASSID:13 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:value METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-value

__BEGIN_METHOD_CODE__

DynArray::value(int i)
{
	 ;
	if(i >= _allocated_size)
	    grow(i + 1);
	return _values[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD DynArray!_value

		METRICS
			_values REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD _value
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:_value METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-_value

__BEGIN_METHOD_CODE__

DynArray::_value(int i)
{ 
	 ;
	return _values[_ARGS_]; 
    }

__END_METHOD_CODE__


	METHOD DynArray!size

		METRICS
			_allocated_size REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 15
			CALLEDN 0
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD size
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:15 CALLEDN:0 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:size METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-size

__BEGIN_METHOD_CODE__

DynArray::size()
{ return _allocated_size; }

__END_METHOD_CODE__


	METHOD DynArray!operator_[]
		CALLS
		_value : DynArray



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_[]
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_[] METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_[]

__BEGIN_METHOD_CODE__

DynArray::operator_[](int i)
{ return _value(i); }

__END_METHOD_CODE__


	METHOD DynArray!operator_[]
		CALLS
		value : DynArray



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_[]
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_[] METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_[]

__BEGIN_METHOD_CODE__

DynArray::operator_[](int i)
{ return value(i); }

__END_METHOD_CODE__


	METHOD DynArray!values

		METRICS
			_values REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD values
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:values METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-values

__BEGIN_METHOD_CODE__

DynArray::values()
{ return _values; }

__END_METHOD_CODE__


	METHOD DynArray!operator_T*
		CALLS
		values : DynArray



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_T*
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_T* METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-operator_T*

__BEGIN_METHOD_CODE__

DynArray::operator_T*()
{ return values(); }

__END_METHOD_CODE__


	METHOD DynArray!operator_T*
		CALLS
		values : DynArray



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_T*
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_T* METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-operator_T*

__BEGIN_METHOD_CODE__

DynArray::operator_T*()
{ return values(); }

__END_METHOD_CODE__


	METHOD DynArray!DynArray

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DynArray
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DynArray METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-DynArray

__BEGIN_METHOD_CODE__

DynArray::DynArray(int initial_size = 0)
{}

__END_METHOD_CODE__


	METHOD DynArray!DynArray

		METRICS
			_values REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 7
			CALLEDN 0
			CLASS DynArray
			CLASSID 13
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD DynArray
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:7 CALLEDN:0 CLASS:DynArray CLASSID:13 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:DynArray METHODID:11 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-DynArray

__BEGIN_METHOD_CODE__

DynArray::DynArray(T *v, int n)
{
        for(int i = 0; i < n; i++)
            _values[_ARGS_] = v[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD DynArray!DynArray
		CALLS
		size : _SYSTEM_OR_USER_



		METRICS
			_values REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 7
			CALLEDN 1
			CLASS DynArray
			CLASSID 13
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD DynArray
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:7 CALLEDN:1 CLASS:DynArray CLASSID:13 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:DynArray METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-DynArray

__BEGIN_METHOD_CODE__

DynArray::DynArray(const DynArray<T>& m)
{
        for(int i = 0; i < m.size(); i++)
            _values[_ARGS_] = m._values[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD DynArray!~DynArray

		METRICS
			_values REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS DynArray
			CLASSID 13
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~DynArray
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:DynArray CLASSID:13 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~DynArray METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-~DynArray

__BEGIN_METHOD_CODE__

DynArray::~DynArray()
{
	delete[] _values;
    }

__END_METHOD_CODE__


	METHOD DynArray!operator_=
		CALLS
		size : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_



		METRICS
			_allocated_size REFERRED 1 TIMES,
			_values REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 6
			AVVARLEN 11
			CALLEDN 2
			CLASS DynArray
			CLASSID 13
			CYCLO 3
			DOTS 3
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 17
			LT 1
			METHOD operator_=
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:4 ASS:6 AVVARLEN:11 CALLEDN:2 CLASS:DynArray CLASSID:13 CYCLO:3 DOTS:3 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:17 LT:1 METHOD:operator_= METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:2 
		;


#ID 14-operator_=

__BEGIN_METHOD_CODE__

DynArray::operator_=(const DynArray<T>& m)
{
         
	if(this != &m)
	{
	    T *old_values = _values;

	    _allocated_size = m.size();
	    _values = new T [_ARGS_];
	    
	    for(int i = 0; i < m.size(); i++)
		_values[_ARGS_] = m._values[_ARGS_];

	    delete[] old_values;
	}

	return *this;
    }

__END_METHOD_CODE__


	METHOD VarArray!size

		METRICS
			_size REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD size
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:size METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 0-size

__BEGIN_METHOD_CODE__

VarArray::size()
{ return _size; }

__END_METHOD_CODE__


	METHOD VarArray!add
		CALLS
		value : _SYSTEM_OR_USER_



		METRICS
			_size REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 5
			CALLEDN 1
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD add
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:5 CALLEDN:1 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:add METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-add

__BEGIN_METHOD_CODE__

VarArray::add(const T& v)
{
	value(_size) = v;	 
	_size++;
    }

__END_METHOD_CODE__


	METHOD VarArray!_remove
		CALLS
		size : VarArray,
		_value : DynArray,
		_value : DynArray



		METRICS
			_size REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 5
			CALLEDN 3
			CLASS VarArray
			CLASSID 14
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 1
			METHOD _remove
			METHODID 2
			MMINUS 1
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:5 CALLEDN:3 CLASS:VarArray CLASSID:14 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:1 METHOD:_remove METHODID:2 MMINUS:1 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-_remove

__BEGIN_METHOD_CODE__

VarArray::_remove(int n)
{
	 ;

	for(int i = n; i < size() - 1; i++)
	    _value(i) = _value(i + 1);

	_size--;
    }

__END_METHOD_CODE__


	METHOD VarArray!remove
		CALLS
		size : VarArray,
		_value : DynArray,
		_remove : VarArray



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS VarArray
			CLASSID 14
			CYCLO 3
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 1
			METHOD remove
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:VarArray CLASSID:14 CYCLO:3 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:1 METHOD:remove METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-remove

__BEGIN_METHOD_CODE__

VarArray::remove(const T& v)
{
	int i = 0;
	while(i < size())
	    if(_value(i) == v)
		_remove(i);
	    else
		i++;
    }

__END_METHOD_CODE__


	METHOD VarArray!VarArray

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VarArray
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VarArray METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-VarArray

__BEGIN_METHOD_CODE__

VarArray::VarArray(int initial_size = 0)
{}

__END_METHOD_CODE__


	METHOD VarArray!VarArray

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VarArray
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VarArray METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-VarArray

__BEGIN_METHOD_CODE__

VarArray::VarArray(T *v, int n)
{}

__END_METHOD_CODE__


	METHOD VarArray!VarArray

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VarArray
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VarArray METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-VarArray

__BEGIN_METHOD_CODE__

VarArray::VarArray(const VarArray<T>& m)
{}

__END_METHOD_CODE__


	METHOD VarArray!~VarArray

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~VarArray
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~VarArray METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-~VarArray

__BEGIN_METHOD_CODE__

VarArray::~VarArray()
{}

__END_METHOD_CODE__


	METHOD VarArray!operator_=
		CALLS
		size : _SYSTEM_OR_USER_



		METRICS
			_size REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 5
			CALLEDN 1
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 1
			METHOD operator_=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:5 CALLEDN:1 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:5 LT:1 METHOD:operator_= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-operator_=

__BEGIN_METHOD_CODE__

VarArray::operator_=(const VarArray<T>& m)
{ 
	DynArray<T>::operator = (m);
	_size = m.size();
	return *this;
    }

__END_METHOD_CODE__


	METHOD VarArray!operator_+=
		CALLS
		add : VarArray



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_+=
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_+= METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-operator_+=

__BEGIN_METHOD_CODE__

VarArray::operator_+=(const T& value)
{ add(value); }

__END_METHOD_CODE__


	METHOD VarArray!operator_-=
		CALLS
		remove : VarArray



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_-=
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_-= METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-operator_-=

__BEGIN_METHOD_CODE__

VarArray::operator_-=(const T& value)
{ remove(value); }

__END_METHOD_CODE__


	METHOD VarArray!operator_[]

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD operator_[]
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:operator_[] METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-operator_[]

__BEGIN_METHOD_CODE__

VarArray::operator_[](int i)
{ 
	 ;
	return DynArray<T>::operator[](i); 
    }

__END_METHOD_CODE__


	METHOD VarArray!operator_[]

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VarArray
			CLASSID 14
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD operator_[]
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VarArray CLASSID:14 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:operator_[] METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-operator_[]

__BEGIN_METHOD_CODE__

VarArray::operator_[](int i)
{ 
	 ;
	return DynArray<T>::operator[](i);
    }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/IntIntAA.o.nu.cls	 Class Number = 7
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/StringA.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/StringSA.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VoidArray.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/WidgetSA.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/Agent.o.nu.cls


	METHOD AgentManager!AgentManager

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AgentManager
			CLASSID 15
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AgentManager
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AgentManager CLASSID:15 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AgentManager METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-AgentManager

__BEGIN_METHOD_CODE__

AgentManager::AgentManager(const AgentManager&)
{  ; }

__END_METHOD_CODE__


	METHOD AgentManager!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AgentManager
			CLASSID 15
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AgentManager CLASSID:15 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

AgentManager::operator_=(const AgentManager&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD AgentManager!AgentManager

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AgentManager
			CLASSID 15
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AgentManager
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AgentManager CLASSID:15 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AgentManager METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-AgentManager

__BEGIN_METHOD_CODE__

AgentManager::AgentManager(SignalProc new_chld_handler = SignalProc(((__sighandler_t) 1) ))
{}

__END_METHOD_CODE__


	METHOD HandlerList!HandlerRec

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HandlerRec
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HandlerRec METHODID:0 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-HandlerRec

__BEGIN_METHOD_CODE__

HandlerList::HandlerRec(HandlerProc p, void *c, HandlerRec *n = 0)
{}

__END_METHOD_CODE__


	METHOD HandlerList!HandlerRec

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HandlerRec
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HandlerRec METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-HandlerRec

__BEGIN_METHOD_CODE__

HandlerList::HandlerRec(const HandlerRec&)
{  ; }

__END_METHOD_CODE__


	METHOD HandlerList!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-operator_=

__BEGIN_METHOD_CODE__

HandlerList::operator_=(const HandlerRec&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD HandlerList!compare
		CALLS
		compare : HandlerList,
		compare : HandlerList



		METRICS
			proc REFERRED 2 TIMES,
			client_data REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 7
			CALLEDN 2
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD compare
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 2
			STMNT 2
			TERNINSTR 1
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:7 CALLEDN:2 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:compare METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:2 STMNT:2 TERNINSTR:1 USEDVARS:2 
		;


#ID 3-compare

__BEGIN_METHOD_CODE__

HandlerList::compare(const HandlerRec& l1, const HandlerRec& l2)
{
	int c = ::compare((void *)l1.proc, (void *)l2.proc);
	return c ? c : ::compare(l1.client_data, l2.client_data);
    }

__END_METHOD_CODE__


	METHOD HandlerList!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_=

__BEGIN_METHOD_CODE__

HandlerList::operator_=(const HandlerList&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD HandlerList!nTypes

		METRICS
			_nTypes REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD nTypes
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:nTypes METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-nTypes

__BEGIN_METHOD_CODE__

HandlerList::nTypes()
{ return _nTypes; }

__END_METHOD_CODE__


	METHOD HandlerList!add
		CALLS
		nTypes : HandlerList,
		add : HandlerList



		METRICS
			proc REFERRED 1 TIMES,
			client_data REFERRED 1 TIMES,
			next REFERRED 1 TIMES,
			*handlers REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 4
			AVVARLEN 7
			CALLEDN 2
			CLASS HandlerList
			CLASSID 16
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 5
			LT 1
			METHOD add
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 4

#METRICS ARRAYOP:1 ASS:4 AVVARLEN:7 CALLEDN:2 CLASS:HandlerList CLASSID:16 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:5 LT:1 METHOD:add METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:4 
		;


#ID 11-add

__BEGIN_METHOD_CODE__

HandlerList::add(const HandlerList& l)
{
	for(unsigned type = 0; type < l.nTypes(); type++)
	    for(HandlerRec *h = l.handlers[_ARGS_]; h != 0; h = h->next)
		add(type, h->proc, h->client_data);
    }

__END_METHOD_CODE__


	METHOD HandlerList!has
		CALLS
		nTypes : HandlerList



		METRICS
			*handlers REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 9
			CALLEDN 1
			CLASS HandlerList
			CLASSID 16
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 1
			METHOD has
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:9 CALLEDN:1 CLASS:HandlerList CLASSID:16 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:1 METHOD:has METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 16-has

__BEGIN_METHOD_CODE__

HandlerList::has(unsigned type)
{
	return type < nTypes() && handlers[_ARGS_] != 0;
    }

__END_METHOD_CODE__


	METHOD HandlerList!~HandlerList
		CALLS
		removeAll : HandlerList,
		nTypes : HandlerList,
		processRemovals : HandlerList



		METRICS
			*handlers REFERRED 1 TIMES,
			active REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 1
			AVVARLEN 7
			CALLEDN 3
			CLASS HandlerList
			CLASSID 16
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 1
			METHOD ~HandlerList
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:1 AVVARLEN:7 CALLEDN:3 CLASS:HandlerList CLASSID:16 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:1 METHOD:~HandlerList METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:2 
		;


#ID 17-~HandlerList

__BEGIN_METHOD_CODE__

HandlerList::~HandlerList()
{
	removeAll();
	for(unsigned type = 0; type < nTypes(); type++)
	    processRemovals(type);

	delete[] handlers;
	delete[] active;
    }

__END_METHOD_CODE__


	METHOD Agent!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

Agent::operator_=(const Agent&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD Agent!callHandlers
		CALLS
		call : AssocRec



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD callHandlers
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:callHandlers METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-callHandlers

__BEGIN_METHOD_CODE__

Agent::callHandlers(int type, void *call_data = 0)
{
	handlers.call(type, this, call_data);
    }

__END_METHOD_CODE__


	METHOD Agent!callHandlersWhenIdle
		CALLS
		callHandlers : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD callHandlersWhenIdle
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:callHandlersWhenIdle METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-callHandlersWhenIdle

__BEGIN_METHOD_CODE__

Agent::callHandlersWhenIdle(int type, void *call_data = 0)
{
	callHandlers(type, call_data);
    }

__END_METHOD_CODE__


	METHOD Agent!_raise
		CALLS
		string : string,
		__errno_location : _SYSTEM_OR_USER_,
		callHandlers : Agent,
		running : Agent



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 5
			CLASS Agent
			CLASSID 17
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 10
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD _raise
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:5 CLASS:Agent CLASSID:17 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:10 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:_raise METHODID:8 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-_raise

__BEGIN_METHOD_CODE__

Agent::_raise(string msg, 
		int handler, 
		bool system_error, 
		bool check_if_running)
{
	if(system_error)
	    msg += string(_REMOVED_STR_) + strerror((*__errno_location()) );
	char *s = msg;

	callHandlers(handler, (void *)s);

	if(check_if_running)
	    (void)running();
    }

__END_METHOD_CODE__


	METHOD Agent!_raiseMsg
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _raiseMsg
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_raiseMsg METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-_raiseMsg

__BEGIN_METHOD_CODE__

Agent::_raiseMsg(string msg)
{ _raise(msg, Panic,   false, false); }

__END_METHOD_CODE__


	METHOD Agent!_raiseWarning
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _raiseWarning
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_raiseWarning METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-_raiseWarning

__BEGIN_METHOD_CODE__

Agent::_raiseWarning(string msg)
{ _raise(msg, Strange, false, false); }

__END_METHOD_CODE__


	METHOD Agent!_raiseIOMsg
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _raiseIOMsg
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_raiseIOMsg METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-_raiseIOMsg

__BEGIN_METHOD_CODE__

Agent::_raiseIOMsg(string msg)
{ _raise(msg, Panic,   true,  false); }

__END_METHOD_CODE__


	METHOD Agent!_raiseIOWarning
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _raiseIOWarning
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_raiseIOWarning METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-_raiseIOWarning

__BEGIN_METHOD_CODE__

Agent::_raiseIOWarning(string msg)
{ _raise(msg, Strange, true,  false); }

__END_METHOD_CODE__


	METHOD Agent!raiseMsg
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD raiseMsg
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:raiseMsg METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-raiseMsg

__BEGIN_METHOD_CODE__

Agent::raiseMsg(string msg)
{ _raise(msg, Panic,   false, true); }

__END_METHOD_CODE__


	METHOD Agent!raiseWarning
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD raiseWarning
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:raiseWarning METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-raiseWarning

__BEGIN_METHOD_CODE__

Agent::raiseWarning(string msg)
{ _raise(msg, Strange, false, true); }

__END_METHOD_CODE__


	METHOD Agent!raiseIOMsg
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD raiseIOMsg
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:raiseIOMsg METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-raiseIOMsg

__BEGIN_METHOD_CODE__

Agent::raiseIOMsg(string msg)
{ _raise(msg, Panic,   true,  true); }

__END_METHOD_CODE__


	METHOD Agent!raiseIOWarning
		CALLS
		_raise : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD raiseIOWarning
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:raiseIOWarning METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-raiseIOWarning

__BEGIN_METHOD_CODE__

Agent::raiseIOWarning(string msg)
{ _raise(msg, Strange, true,  true); }

__END_METHOD_CODE__


	METHOD Agent!activateIO

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD activateIO
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:activateIO METHODID:22 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-activateIO

__BEGIN_METHOD_CODE__

Agent::activateIO()
{}

__END_METHOD_CODE__


	METHOD Agent!deactivateIO

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD deactivateIO
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:deactivateIO METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-deactivateIO

__BEGIN_METHOD_CODE__

Agent::deactivateIO()
{}

__END_METHOD_CODE__


	METHOD Agent!inputIsTerminal
		CALLS
		inputfp : Agent,
		isatty : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		inputfp : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD inputIsTerminal
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:inputIsTerminal METHODID:31 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-inputIsTerminal

__BEGIN_METHOD_CODE__

Agent::inputIsTerminal()
{
	return inputfp() != 0 && isatty(fileno(inputfp()));
    }

__END_METHOD_CODE__


	METHOD Agent!outputIsTerminal
		CALLS
		outputfp : Agent,
		isatty : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_,
		outputfp : Agent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 4
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD outputIsTerminal
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:4 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:outputIsTerminal METHODID:32 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-outputIsTerminal

__BEGIN_METHOD_CODE__

Agent::outputIsTerminal()
{
	return outputfp() != 0 && isatty(fileno(outputfp()));
    }

__END_METHOD_CODE__


	METHOD Agent!onTerminal
		CALLS
		inputIsTerminal : Agent,
		outputIsTerminal : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD onTerminal
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:onTerminal METHODID:33 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-onTerminal

__BEGIN_METHOD_CODE__

Agent::onTerminal()
{
	return inputIsTerminal() && outputIsTerminal();
    }

__END_METHOD_CODE__


	METHOD Agent!Agent
		CALLS
		addDefaultHandler : Agent,
		addDefaultHandler : Agent,
		addDefaultHandler : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD Agent
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:Agent METHODID:34 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-Agent

__BEGIN_METHOD_CODE__

Agent::Agent(string pth, unsigned nTypes = Agent_NTypes)
{
	addDefaultHandler(Panic);     
	addDefaultHandler(Strange);   
	addDefaultHandler(Died);      
    }

__END_METHOD_CODE__


	METHOD Agent!Agent
		CALLS
		addDefaultHandler : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD Agent
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:Agent METHODID:35 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-Agent

__BEGIN_METHOD_CODE__

Agent::Agent(FILE *in = ((_IO_FILE*)(&_IO_stdin_))  , FILE *out = ((_IO_FILE*)(&_IO_stdout_))  , FILE *err = 0,
	unsigned nTypes = Agent_NTypes)
{
	addDefaultHandler(Panic);     
    }

__END_METHOD_CODE__


	METHOD Agent!Agent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD Agent
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:Agent METHODID:36 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-Agent

__BEGIN_METHOD_CODE__

Agent::Agent(bool, unsigned nTypes = Agent_NTypes)
{
	 
    }

__END_METHOD_CODE__


	METHOD Agent!dup
		CALLS
		Agent : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:38 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-dup

__BEGIN_METHOD_CODE__

Agent::dup()
{ return new Agent(*this); }

__END_METHOD_CODE__


	METHOD Agent!inputfp

		METRICS
			_inputfp REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD inputfp
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:inputfp METHODID:41 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 41-inputfp

__BEGIN_METHOD_CODE__

Agent::inputfp()
{ return _inputfp;  }

__END_METHOD_CODE__


	METHOD Agent!outputfp

		METRICS
			_outputfp REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD outputfp
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:outputfp METHODID:42 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 42-outputfp

__BEGIN_METHOD_CODE__

Agent::outputfp()
{ return _outputfp; }

__END_METHOD_CODE__


	METHOD Agent!errorfp

		METRICS
			_errorfp REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD errorfp
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:errorfp METHODID:43 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 43-errorfp

__BEGIN_METHOD_CODE__

Agent::errorfp()
{ return _errorfp;  }

__END_METHOD_CODE__


	METHOD Agent!_hangup
		CALLS
		_kill : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _hangup
			METHODID 48
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_hangup METHODID:48 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 48-_hangup

__BEGIN_METHOD_CODE__

Agent::_hangup()
{ _kill(1 ); }

__END_METHOD_CODE__


	METHOD Agent!_terminate
		CALLS
		_kill : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _terminate
			METHODID 49
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_terminate METHODID:49 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 49-_terminate

__BEGIN_METHOD_CODE__

Agent::_terminate()
{ _kill(15 ); }

__END_METHOD_CODE__


	METHOD Agent!handlerChange

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD handlerChange
			METHODID 50
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:handlerChange METHODID:50 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 50-handlerChange

__BEGIN_METHOD_CODE__

Agent::handlerChange()
{}

__END_METHOD_CODE__


	METHOD Agent!addHandler
		CALLS
		sb : _SYSTEM_OR_USER_,
		add : AssocRec,
		handlerChange : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD addHandler
			METHODID 51
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:addHandler METHODID:51 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 51-addHandler

__BEGIN_METHOD_CODE__

Agent::addHandler(unsigned type, 
			    AgentHandlerProc proc,
			    void *client_data = 0)
{
	SignalBlocker sb(17 );

	handlers.add(type, (HandlerProc)proc, client_data);
	handlerChange();
    }

__END_METHOD_CODE__


	METHOD Agent!addHandler
		CALLS
		sb : _SYSTEM_OR_USER_,
		add : AssocRec,
		handlerChange : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD addHandler
			METHODID 52
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:addHandler METHODID:52 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 52-addHandler

__BEGIN_METHOD_CODE__

Agent::addHandler(const Agent& a)
{
	SignalBlocker sb(17 );

	handlers.add(a.handlers);
	handlerChange();
    }

__END_METHOD_CODE__


	METHOD Agent!removeHandler
		CALLS
		sb : _SYSTEM_OR_USER_,
		remove : AssocRec,
		handlerChange : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD removeHandler
			METHODID 53
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:removeHandler METHODID:53 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 53-removeHandler

__BEGIN_METHOD_CODE__

Agent::removeHandler(unsigned type, AgentHandlerProc proc,
		       void *client_data = 0)
{
	SignalBlocker sb(17 );

	handlers.remove(type, (HandlerProc)proc, client_data);
	handlerChange();
    }

__END_METHOD_CODE__


	METHOD Agent!removeAllHandlers
		CALLS
		sb : _SYSTEM_OR_USER_,
		removeAll : AssocRec,
		handlerChange : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD removeAllHandlers
			METHODID 54
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:removeAllHandlers METHODID:54 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 54-removeAllHandlers

__BEGIN_METHOD_CODE__

Agent::removeAllHandlers(unsigned type)
{
	SignalBlocker sb(17 );

	handlers.removeAll(type);
	handlerChange();
    }

__END_METHOD_CODE__


	METHOD Agent!removeAllHandlers
		CALLS
		sb : _SYSTEM_OR_USER_,
		removeAll : AssocRec,
		handlerChange : Agent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD removeAllHandlers
			METHODID 55
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:removeAllHandlers METHODID:55 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 55-removeAllHandlers

__BEGIN_METHOD_CODE__

Agent::removeAllHandlers()
{
	SignalBlocker sb(17 );

	handlers.removeAll();
	handlerChange();
    }

__END_METHOD_CODE__


	METHOD Agent!hasHandler
		CALLS
		has : AssocRec



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD hasHandler
			METHODID 56
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:hasHandler METHODID:56 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 56-hasHandler

__BEGIN_METHOD_CODE__

Agent::hasHandler(unsigned type)
{
	return handlers.has(type);
    }

__END_METHOD_CODE__


	METHOD Agent!path

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD path
			METHODID 58
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:path METHODID:58 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 58-path

__BEGIN_METHOD_CODE__

Agent::path()
{ return _path;    }

__END_METHOD_CODE__


	METHOD Agent!pid

		METRICS
			_pid REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 4
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD pid
			METHODID 59
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:4 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:pid METHODID:59 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 59-pid

__BEGIN_METHOD_CODE__

Agent::pid()
{ return _pid;     }

__END_METHOD_CODE__


	METHOD Agent!terminateTimeOut

		METRICS
			_terminateTimeOut REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD terminateTimeOut
			METHODID 60
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:terminateTimeOut METHODID:60 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 60-terminateTimeOut

__BEGIN_METHOD_CODE__

Agent::terminateTimeOut()
{ return _terminateTimeOut; }

__END_METHOD_CODE__


	METHOD Agent!hangupTimeOut

		METRICS
			_hangupTimeOut REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD hangupTimeOut
			METHODID 61
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:hangupTimeOut METHODID:61 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 61-hangupTimeOut

__BEGIN_METHOD_CODE__

Agent::hangupTimeOut()
{ return _hangupTimeOut; }

__END_METHOD_CODE__


	METHOD Agent!killTimeOut

		METRICS
			_killTimeOut REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD killTimeOut
			METHODID 62
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:killTimeOut METHODID:62 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 62-killTimeOut

__BEGIN_METHOD_CODE__

Agent::killTimeOut()
{ return _killTimeOut; }

__END_METHOD_CODE__


	METHOD Agent!terminateTimeOut

		METRICS
			_terminateTimeOut REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD terminateTimeOut
			METHODID 60
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:terminateTimeOut METHODID:60 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 60-terminateTimeOut

__BEGIN_METHOD_CODE__

Agent::terminateTimeOut()
{ return _terminateTimeOut; }

__END_METHOD_CODE__


	METHOD Agent!hangupTimeOut

		METRICS
			_hangupTimeOut REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD hangupTimeOut
			METHODID 61
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:hangupTimeOut METHODID:61 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 61-hangupTimeOut

__BEGIN_METHOD_CODE__

Agent::hangupTimeOut()
{ return _hangupTimeOut; }

__END_METHOD_CODE__


	METHOD Agent!killTimeOut

		METRICS
			_killTimeOut REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD killTimeOut
			METHODID 62
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:killTimeOut METHODID:62 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 62-killTimeOut

__BEGIN_METHOD_CODE__

Agent::killTimeOut()
{ return _killTimeOut; }

__END_METHOD_CODE__


	METHOD Agent!beingTerminated

		METRICS
			_beingTerminated REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 16
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD beingTerminated
			METHODID 66
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:16 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:beingTerminated METHODID:66 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 66-beingTerminated

__BEGIN_METHOD_CODE__

Agent::beingTerminated()
{ return _beingTerminated; }

__END_METHOD_CODE__


	METHOD Agent!lastStatus

		METRICS
			_lastStatus REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 11
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD lastStatus
			METHODID 67
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:11 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:lastStatus METHODID:67 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 67-lastStatus

__BEGIN_METHOD_CODE__

Agent::lastStatus()
{ return _lastStatus; }

__END_METHOD_CODE__


	METHOD Agent!name
		CALLS
		path : Agent,
		pid : Agent,
		pid : Agent,
		string : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS Agent
			CLASSID 17
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 8
			METHOD name
			METHODID 68
			MMINUS 0
			OUT 4
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:Agent CLASSID:17 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:7 LT:8 METHOD:name METHODID:68 MMINUS:0 OUT:4 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 68-name

__BEGIN_METHOD_CODE__

Agent::name()
{
	ostrstream os;
	os << path();
	if(pid() > 0)
	    os << _REMOVED_STR_ << pid() << _REMOVED_STR_;
	return string(os);
    }

__END_METHOD_CODE__


	METHOD Agent!commit

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD commit
			METHODID 70
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:commit METHODID:70 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 70-commit

__BEGIN_METHOD_CODE__

Agent::commit()
{
	 
    }

__END_METHOD_CODE__


	METHOD Agent!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Agent
			CLASSID 17
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD OK
			METHODID 71
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Agent CLASSID:17 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:OK METHODID:71 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 71-OK

__BEGIN_METHOD_CODE__

Agent::OK()
{
	return true;
    }

__END_METHOD_CODE__

#===================================================================
#File ../../code/ddd-3.0/ddd/Agent.o.nu.cls	 Class Number = 3
#===================================================================
#Process file  ../../code/ddd-3.0/ddd/AgentM.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ChunkQueue.o.nu.cls


	METHOD ChunkQueue!grow
		CALLS
		memcpy : _SYSTEM_OR_USER_



		METRICS
			_length REFERRED 1 TIMES,
			_size REFERRED 1 TIMES,
			_data REFERRED 3 TIMES,
			ARRAYOP 2
			ASS 3
			AVVARLEN 5
			CALLEDN 1
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD grow
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:5 CALLEDN:1 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:grow METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:3 
		;


#ID 0-grow

__BEGIN_METHOD_CODE__

ChunkQueue::grow(int newSize)
{
	_size = newSize;
	char *newData = new char[_ARGS_];
	memcpy(newData, _data, _length);
	delete[] _data;
	_data = newData;
    }

__END_METHOD_CODE__


	METHOD ChunkQueue!ChunkQueue

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ChunkQueue
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:ChunkQueue METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-ChunkQueue

__BEGIN_METHOD_CODE__

ChunkQueue::ChunkQueue(const ChunkQueue&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD ChunkQueue!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-operator_=

__BEGIN_METHOD_CODE__

ChunkQueue::operator_=(const ChunkQueue&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD ChunkQueue!ChunkQueue

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ChunkQueue
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ChunkQueue METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-ChunkQueue

__BEGIN_METHOD_CODE__

ChunkQueue::ChunkQueue(int initialSize = 8192   )
{}

__END_METHOD_CODE__


	METHOD ChunkQueue!~ChunkQueue

		METRICS
			_data REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~ChunkQueue
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~ChunkQueue METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-~ChunkQueue

__BEGIN_METHOD_CODE__

ChunkQueue::~ChunkQueue()
{
	delete[] _data;
    }

__END_METHOD_CODE__


	METHOD ChunkQueue!append
		CALLS
		grow : ChunkQueue,
		memcpy : _SYSTEM_OR_USER_



		METRICS
			_length REFERRED 4 TIMES,
			_size REFERRED 1 TIMES,
			_data REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 2
			AVVARLEN 5
			CALLEDN 2
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD append
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:5 CALLEDN:2 CLASS:ChunkQueue CLASSID:18 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:append METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:3 
		;


#ID 5-append

__BEGIN_METHOD_CODE__

ChunkQueue::append(char *dta, int len)
{
	if(_length + len + 1 > _size)
	    grow(_length + len + 1);

	memcpy(_data + _length, dta, len + 1);
	_length += len;
	_data[_ARGS_] = '\0';
    }

__END_METHOD_CODE__


	METHOD ChunkQueue!discard
		CALLS
		memcpy : _SYSTEM_OR_USER_



		METRICS
			_length REFERRED 3 TIMES,
			_data REFERRED 3 TIMES,
			ARRAYOP 1
			ASS 2
			AVVARLEN 6
			CALLEDN 1
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 1
			METHOD discard
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:6 CALLEDN:1 CLASS:ChunkQueue CLASSID:18 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:11 LT:1 METHOD:discard METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:2 
		;


#ID 6-discard

__BEGIN_METHOD_CODE__

ChunkQueue::discard(int len)
{
	 ;

	if(len > 0)
	{
	    if(len < _length)
		memcpy(_data, _data + len, _length);
	    _length -= len;
	    _data[_ARGS_] = '\0';
	}
    }

__END_METHOD_CODE__


	METHOD ChunkQueue!discard

		METRICS
			_length REFERRED 1 TIMES,
			_data REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 2
			AVVARLEN 6
			CALLEDN 0
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD discard
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:6 CALLEDN:0 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:discard METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 7-discard

__BEGIN_METHOD_CODE__

ChunkQueue::discard()
{
	_length = 0;
	_data[_ARGS_] = '\0';
    }

__END_METHOD_CODE__


	METHOD ChunkQueue!data

		METRICS
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD data
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:data METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-data

__BEGIN_METHOD_CODE__

ChunkQueue::data()
{ return _data; }

__END_METHOD_CODE__


	METHOD ChunkQueue!length

		METRICS
			_length REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS ChunkQueue
			CLASSID 18
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD length
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:ChunkQueue CLASSID:18 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:length METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-length

__BEGIN_METHOD_CODE__

ChunkQueue::length()
{ return _length; }

__END_METHOD_CODE__

#========================================================================
#File ../../code/ddd-3.0/ddd/ChunkQueue.o.nu.cls	 Class Number = 1
#========================================================================
#Process file  ../../code/ddd-3.0/ddd/DataLength.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/HandlerL.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/LiterateA.o.nu.cls


	METHOD AsyncAgent!id

		METRICS
			_ids REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 4
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD id
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:4 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:id METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-id

__BEGIN_METHOD_CODE__

AsyncAgent::id(unsigned type)
{
	 ;
	return _ids[_ARGS_]; 
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!handler

		METRICS
			_handlers REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD handler
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:handler METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 16-handler

__BEGIN_METHOD_CODE__

AsyncAgent::handler(unsigned type)
{
	 ;
	return _handlers[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!isIdle

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isIdle
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isIdle METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-isIdle

__BEGIN_METHOD_CODE__

AsyncAgent::isIdle()
{ return true; }

__END_METHOD_CODE__


	METHOD AsyncAgent!removeInput
		CALLS
		id : AsyncAgent,
		id : AsyncAgent



		METRICS
			_ids REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 4
			CALLEDN 2
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD removeInput
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:4 CALLEDN:2 CLASS:AsyncAgent CLASSID:19 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:removeInput METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 21-removeInput

__BEGIN_METHOD_CODE__

AsyncAgent::removeInput(unsigned type)
{
	if(id(type))
	{
	    XtRemoveInput(id(type));
            _ids[_ARGS_] = 0;
        }
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_=
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_= METHODID:22 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-operator_=

__BEGIN_METHOD_CODE__

AsyncAgent::operator_=(const AsyncAgent&)
{
	 ;
	return *this;
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!appContext

		METRICS
			_appContext REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 11
			CALLEDN 0
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD appContext
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:11 CALLEDN:0 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:appContext METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 23-appContext

__BEGIN_METHOD_CODE__

AsyncAgent::appContext()
{ return _appContext; }

__END_METHOD_CODE__


	METHOD AsyncAgent!AsyncAgent
		CALLS
		initHandlers : AsyncAgent,
		addDeathOfChildHandler : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD AsyncAgent
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:AsyncAgent METHODID:24 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-AsyncAgent

__BEGIN_METHOD_CODE__

AsyncAgent::AsyncAgent(XtAppContext app_context, string pth, 
	       unsigned nTypes = AsyncAgent_NTypes)
{
	initHandlers();
	addDeathOfChildHandler();
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!AsyncAgent
		CALLS
		initHandlers : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD AsyncAgent
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:AsyncAgent METHODID:25 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-AsyncAgent

__BEGIN_METHOD_CODE__

AsyncAgent::AsyncAgent(XtAppContext app_context, FILE *in = ((_IO_FILE*)(&_IO_stdin_))  , FILE *out = ((_IO_FILE*)(&_IO_stdout_))  ,
	FILE *err = 0, unsigned nTypes = AsyncAgent_NTypes)
{
	initHandlers();
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!AsyncAgent
		CALLS
		initHandlers : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD AsyncAgent
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:AsyncAgent METHODID:26 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-AsyncAgent

__BEGIN_METHOD_CODE__

AsyncAgent::AsyncAgent(XtAppContext app_context, bool dummy,
	unsigned nTypes = AsyncAgent_NTypes)
{
	initHandlers();
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!AsyncAgent
		CALLS
		initHandlers : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD AsyncAgent
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:AsyncAgent METHODID:27 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-AsyncAgent

__BEGIN_METHOD_CODE__

AsyncAgent::AsyncAgent(const AsyncAgent& c)
{
	initHandlers();
    }

__END_METHOD_CODE__


	METHOD AsyncAgent!dup
		CALLS
		AsyncAgent : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-dup

__BEGIN_METHOD_CODE__

AsyncAgent::dup()
{ return new AsyncAgent(*this); }

__END_METHOD_CODE__


	METHOD AsyncAgent!~AsyncAgent
		CALLS
		deleteAllWorkProcs : AsyncAgent,
		clearHandlers : AsyncAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS AsyncAgent
			CLASSID 19
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD ~AsyncAgent
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:AsyncAgent CLASSID:19 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:~AsyncAgent METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-~AsyncAgent

__BEGIN_METHOD_CODE__

AsyncAgent::~AsyncAgent()
{
	 
	deleteAllWorkProcs();

	 
	clearHandlers();
    }

__END_METHOD_CODE__


	METHOD LiterateAgent!activateIO
		CALLS
		_activateIO : LiterateAgent



		METRICS
			activeIO REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 8
			CALLEDN 1
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD activateIO
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:8 CALLEDN:1 CLASS:LiterateAgent CLASSID:20 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:activateIO METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-activateIO

__BEGIN_METHOD_CODE__

LiterateAgent::activateIO()
{
	if(!activeIO) 
	{
	    _activateIO();
	    activeIO = true; 
	}
    }

__END_METHOD_CODE__


	METHOD LiterateAgent!deactivateIO
		CALLS
		_deactivateIO : LiterateAgent



		METRICS
			activeIO REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 8
			CALLEDN 1
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD deactivateIO
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:8 CALLEDN:1 CLASS:LiterateAgent CLASSID:20 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:deactivateIO METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-deactivateIO

__BEGIN_METHOD_CODE__

LiterateAgent::deactivateIO()
{
	if(activeIO) 
	{
	    _deactivateIO();
	    activeIO = false; 
	}
    }

__END_METHOD_CODE__


	METHOD LiterateAgent!block_tty_input

		METRICS
			_block_tty_input REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 16
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD block_tty_input
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:16 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:block_tty_input METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-block_tty_input

__BEGIN_METHOD_CODE__

LiterateAgent::block_tty_input()
{ return _block_tty_input; }

__END_METHOD_CODE__


	METHOD LiterateAgent!block_tty_input

		METRICS
			_block_tty_input REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 16
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD block_tty_input
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:16 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:block_tty_input METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-block_tty_input

__BEGIN_METHOD_CODE__

LiterateAgent::block_tty_input(bool state)
{ return _block_tty_input = state; }

__END_METHOD_CODE__


	METHOD LiterateAgent!blocking_tty
		CALLS
		block_tty_input : LiterateAgent,
		isatty : _SYSTEM_OR_USER_,
		fileno : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD blocking_tty
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:blocking_tty METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-blocking_tty

__BEGIN_METHOD_CODE__

LiterateAgent::blocking_tty(FILE *fp)
{
	return block_tty_input() && isatty(fileno(fp));
    }

__END_METHOD_CODE__


	METHOD LiterateAgent!LiterateAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LiterateAgent
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LiterateAgent METHODID:21 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-LiterateAgent

__BEGIN_METHOD_CODE__

LiterateAgent::LiterateAgent(XtAppContext app_context, string pth,
		  unsigned nTypes = LiterateAgent_NTypes)
{}

__END_METHOD_CODE__


	METHOD LiterateAgent!LiterateAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LiterateAgent
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LiterateAgent METHODID:22 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-LiterateAgent

__BEGIN_METHOD_CODE__

LiterateAgent::LiterateAgent(XtAppContext app_context, FILE *in = ((_IO_FILE*)(&_IO_stdin_))  ,
		  FILE *out = ((_IO_FILE*)(&_IO_stdout_))  , FILE *err = 0, 
		  unsigned nTypes = LiterateAgent_NTypes)
{}

__END_METHOD_CODE__


	METHOD LiterateAgent!LiterateAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LiterateAgent
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LiterateAgent METHODID:23 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-LiterateAgent

__BEGIN_METHOD_CODE__

LiterateAgent::LiterateAgent(XtAppContext app_context, bool dummy,
		  unsigned nTypes = LiterateAgent_NTypes)
{}

__END_METHOD_CODE__


	METHOD LiterateAgent!LiterateAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LiterateAgent
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LiterateAgent METHODID:24 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-LiterateAgent

__BEGIN_METHOD_CODE__

LiterateAgent::LiterateAgent(const LiterateAgent& lit)
{}

__END_METHOD_CODE__


	METHOD LiterateAgent!dup
		CALLS
		LiterateAgent : LiterateAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS LiterateAgent
			CLASSID 20
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:LiterateAgent CLASSID:20 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:25 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-dup

__BEGIN_METHOD_CODE__

LiterateAgent::dup()
{ return new LiterateAgent(*this); }

__END_METHOD_CODE__

#=======================================================================
#File ../../code/ddd-3.0/ddd/LiterateA.o.nu.cls	 Class Number = 2
#=======================================================================
#Process file  ../../code/ddd-3.0/ddd/TimeOut.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/TTYAgent.o.nu.cls


	METHOD TTYAgent!TTYAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TTYAgent
			CLASSID 21
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TTYAgent
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TTYAgent CLASSID:21 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TTYAgent METHODID:7 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-TTYAgent

__BEGIN_METHOD_CODE__

TTYAgent::TTYAgent(XtAppContext app_context, string pth,
	     unsigned nTypes = TTYAgent_NTypes)
{}

__END_METHOD_CODE__


	METHOD TTYAgent!TTYAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TTYAgent
			CLASSID 21
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TTYAgent
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TTYAgent CLASSID:21 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TTYAgent METHODID:8 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-TTYAgent

__BEGIN_METHOD_CODE__

TTYAgent::TTYAgent(XtAppContext app_context, FILE *in = ((_IO_FILE*)(&_IO_stdin_))  ,
	     FILE *out = ((_IO_FILE*)(&_IO_stdout_))  , FILE *err = 0, 
	     unsigned nTypes = TTYAgent_NTypes)
{}

__END_METHOD_CODE__


	METHOD TTYAgent!TTYAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TTYAgent
			CLASSID 21
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TTYAgent
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TTYAgent CLASSID:21 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TTYAgent METHODID:9 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-TTYAgent

__BEGIN_METHOD_CODE__

TTYAgent::TTYAgent(XtAppContext app_context, bool dummy,
	     unsigned nTypes = TTYAgent_NTypes)
{}

__END_METHOD_CODE__


	METHOD TTYAgent!TTYAgent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TTYAgent
			CLASSID 21
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TTYAgent
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TTYAgent CLASSID:21 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TTYAgent METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-TTYAgent

__BEGIN_METHOD_CODE__

TTYAgent::TTYAgent(const TTYAgent& tty)
{}

__END_METHOD_CODE__


	METHOD TTYAgent!dup
		CALLS
		TTYAgent : TTYAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TTYAgent
			CLASSID 21
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TTYAgent CLASSID:21 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-dup

__BEGIN_METHOD_CODE__

TTYAgent::dup()
{ return new TTYAgent(*this); }

__END_METHOD_CODE__


	METHOD TTYAgent!master_tty

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TTYAgent
			CLASSID 21
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD master_tty
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TTYAgent CLASSID:21 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:master_tty METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-master_tty

__BEGIN_METHOD_CODE__

TTYAgent::master_tty()
{ return _master_tty; }

__END_METHOD_CODE__


	METHOD TTYAgent!slave_tty

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TTYAgent
			CLASSID 21
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD slave_tty
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TTYAgent CLASSID:21 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:slave_tty METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-slave_tty

__BEGIN_METHOD_CODE__

TTYAgent::slave_tty()
{ return _slave_tty; }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/TTYAgent.o.nu.cls	 Class Number = 1
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/converters.o.nu.cls


	METHOD MString!MString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD MString
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:MString METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-MString

__BEGIN_METHOD_CODE__

MString::MString(char *text = _REMOVED_STR_, 
	    XmStringCharSet charset = ((char *)&_XmStrings[_ARGS_])   )
{
	 ;
    }

__END_METHOD_CODE__


	METHOD MString!MString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD MString
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:MString METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-MString

__BEGIN_METHOD_CODE__

MString::MString(const char *text,
	    XmStringCharSet charset = ((char *)&_XmStrings[_ARGS_])   )
{
	 ;
    }

__END_METHOD_CODE__


	METHOD MString!MString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD MString
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:MString METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-MString

__BEGIN_METHOD_CODE__

MString::MString(const string& text, 
	    XmStringCharSet charset = ((char *)&_XmStrings[_ARGS_])   )
{
	 ;
    }

__END_METHOD_CODE__


	METHOD MString!MString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD MString
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:MString METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-MString

__BEGIN_METHOD_CODE__

MString::MString(XmString text, bool  )
{
	 ;
    }

__END_METHOD_CODE__


	METHOD MString!MString

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD MString
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:MString METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-MString

__BEGIN_METHOD_CODE__

MString::MString(const MString& m)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD MString!~MString

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD ~MString
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:~MString METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-~MString

__BEGIN_METHOD_CODE__

MString::~MString()
{
	 ;
	XmStringFree(_mstring);
    }

__END_METHOD_CODE__


	METHOD MString!baseline

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD baseline
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:baseline METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-baseline

__BEGIN_METHOD_CODE__

MString::baseline(XmFontList fontlist)
{
	return XmStringBaseline(fontlist, _mstring);
    }

__END_METHOD_CODE__


	METHOD MString!isEmpty

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD isEmpty
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:isEmpty METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-isEmpty

__BEGIN_METHOD_CODE__

MString::isEmpty()
{
	return XmStringEmpty(_mstring);
    }

__END_METHOD_CODE__


	METHOD MString!lineCount

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD lineCount
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:lineCount METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-lineCount

__BEGIN_METHOD_CODE__

MString::lineCount()
{
	return XmStringLineCount(_mstring);
    }

__END_METHOD_CODE__


	METHOD MString!extent

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD extent
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:extent METHODID:9 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-extent

__BEGIN_METHOD_CODE__

MString::extent(Dimension& x, Dimension& y, XmFontList fontlist)
{
	XmStringExtent(fontlist, _mstring, &x, &y);
    }

__END_METHOD_CODE__


	METHOD MString!height

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD height
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:height METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-height

__BEGIN_METHOD_CODE__

MString::height(XmFontList fontlist)
{
	return XmStringHeight(fontlist, _mstring);
    }

__END_METHOD_CODE__


	METHOD MString!width

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD width
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:width METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-width

__BEGIN_METHOD_CODE__

MString::width(XmFontList fontlist)
{
	return XmStringWidth(fontlist, _mstring);
    }

__END_METHOD_CODE__


	METHOD MString!length

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD length
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:length METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-length

__BEGIN_METHOD_CODE__

MString::length()
{
	return XmStringLength(_mstring);
    }

__END_METHOD_CODE__


	METHOD MString!str

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 11
			LT 0
			METHOD str
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:11 LT:0 METHOD:str METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-str

__BEGIN_METHOD_CODE__

MString::str(XmStringCharSet charset = ((char *)&_XmStrings[_ARGS_])   )
{
	char *text;
	if(XmStringGetLtoR(_mstring, charset, &text))
	{
	    string s = text;
	    XtFree(text);
	    return s;
	}

	return _REMOVED_STR_;
    }

__END_METHOD_CODE__


	METHOD MString!operator_=

		METRICS
			_mstring REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD operator_=
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:operator_= METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-operator_=

__BEGIN_METHOD_CODE__

MString::operator_=(const MString& m)
{
	 ;

	 
	XmString tmp = XmStringCopy(m._mstring);
	XmStringFree(_mstring);
	_mstring = tmp;

	return *this;
    }

__END_METHOD_CODE__


	METHOD MString!operator_+=

		METRICS
			_mstring REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD operator_+=
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:operator_+= METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-operator_+=

__BEGIN_METHOD_CODE__

MString::operator_+=(const MString& m)
{
	 ;

	XmString old = _mstring;
	_mstring = XmStringConcat(_mstring, m._mstring);
	XmStringFree(old);

	return *this;
    }

__END_METHOD_CODE__


	METHOD MString!prepend

		METRICS
			_mstring REFERRED 4 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD prepend
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:prepend METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:1 
		;


#ID 16-prepend

__BEGIN_METHOD_CODE__

MString::prepend(const MString& m)
{
	 ;

	XmString old = _mstring;
	_mstring = XmStringConcat(m._mstring, _mstring);
	XmStringFree(old);

	return *this;
    }

__END_METHOD_CODE__


	METHOD MString!operator_==

		METRICS
			_mstring REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_==
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_== METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-operator_==

__BEGIN_METHOD_CODE__

MString::operator_==(const MString& m)
{
	 ;
	return XmStringCompare(_mstring, m._mstring);
    }

__END_METHOD_CODE__


	METHOD MString!operator_!=

		METRICS
			_mstring REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_!=
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_!= METHODID:18 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 18-operator_!=

__BEGIN_METHOD_CODE__

MString::operator_!=(const MString& m)
{
	 ;
	return !XmStringCompare(_mstring, m._mstring);
    }

__END_METHOD_CODE__


	METHOD MString!operator_XmString

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_XmString
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_XmString METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-operator_XmString

__BEGIN_METHOD_CODE__

MString::operator_XmString()
{ return _mstring; }

__END_METHOD_CODE__


	METHOD MString!operator_XmString

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_XmString
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_XmString METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-operator_XmString

__BEGIN_METHOD_CODE__

MString::operator_XmString()
{ return _mstring; }

__END_METHOD_CODE__


	METHOD MString!xmstring

		METRICS
			_mstring REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD xmstring
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:xmstring METHODID:21 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 21-xmstring

__BEGIN_METHOD_CODE__

MString::xmstring()
{ return _mstring; }

__END_METHOD_CODE__


	METHOD MString!isNull
		CALLS
		xmstring : MString



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD isNull
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:MString CLASSID:22 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:isNull METHODID:22 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-isNull

__BEGIN_METHOD_CODE__

MString::isNull()
{
	return xmstring() == 0;
    }

__END_METHOD_CODE__


	METHOD MString!contains

		METRICS
			_mstring REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS MString
			CLASSID 22
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD contains
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:MString CLASSID:22 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:contains METHODID:23 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 23-contains

__BEGIN_METHOD_CODE__

MString::contains(const MString& m)
{
	 ;
	return XmStringHasSubstring(_mstring, m._mstring);
    }

__END_METHOD_CODE__

#========================================================================
#File ../../code/ddd-3.0/ddd/converters.o.nu.cls	 Class Number = 1
#========================================================================
#Process file  ../../code/ddd-3.0/ddd/events.o.nu.cls


	METHOD BoxPoint!BoxPoint

		METRICS
			point REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 5
			CALLEDN 0
			CLASS BoxPoint
			CLASSID 23
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD BoxPoint
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:5 CALLEDN:0 CLASS:BoxPoint CLASSID:23 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:BoxPoint METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 0-BoxPoint

__BEGIN_METHOD_CODE__

BoxPoint::BoxPoint(BoxCoordinate x, BoxCoordinate y)
{
	point[_ARGS_] = x;
	point[_ARGS_] = y;
    }

__END_METHOD_CODE__


	METHOD BoxPoint!BoxPoint

		METRICS
			point REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 5
			CALLEDN 0
			CLASS BoxPoint
			CLASSID 23
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD BoxPoint
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:5 CALLEDN:0 CLASS:BoxPoint CLASSID:23 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:BoxPoint METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-BoxPoint

__BEGIN_METHOD_CODE__

BoxPoint::BoxPoint(BoxCoordinate c)
{
	point[_ARGS_] = point[_ARGS_] = c;
    }

__END_METHOD_CODE__


	METHOD BoxPoint!BoxPoint

		METRICS
			point REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 5
			CALLEDN 0
			CLASS BoxPoint
			CLASSID 23
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD BoxPoint
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:5 CALLEDN:0 CLASS:BoxPoint CLASSID:23 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:BoxPoint METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-BoxPoint

__BEGIN_METHOD_CODE__

BoxPoint::BoxPoint()
{
	point[_ARGS_] = point[_ARGS_] = NoCoordinate;
    }

__END_METHOD_CODE__


	METHOD BoxPoint!BoxPoint

		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 2
			AVVARLEN 5
			CALLEDN 0
			CLASS BoxPoint
			CLASSID 23
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD BoxPoint
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:5 CALLEDN:0 CLASS:BoxPoint CLASSID:23 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:BoxPoint METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-BoxPoint

__BEGIN_METHOD_CODE__

BoxPoint::BoxPoint(const BoxPoint& p)
{
	point[_ARGS_] = p.point[_ARGS_];
	point[_ARGS_] = p.point[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD BoxPoint!isValid

		METRICS
			point REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 5
			CALLEDN 0
			CLASS BoxPoint
			CLASSID 23
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD isValid
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:5 CALLEDN:0 CLASS:BoxPoint CLASSID:23 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:isValid METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-isValid

__BEGIN_METHOD_CODE__

BoxPoint::isValid()
{
	return point[_ARGS_] != NoCoordinate && point[_ARGS_] != NoCoordinate;
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_+
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 0
			AVVARLEN 5
			CALLEDN 4
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD operator_+
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:5 CALLEDN:4 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:operator_+ METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-operator_+

__BEGIN_METHOD_CODE__

BoxPoint::operator_+(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	    return BoxPoint(point[_ARGS_] + p.point[_ARGS_], point[_ARGS_] + p.point[_ARGS_]);
	else
	    return BoxPoint();
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_-
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 0
			AVVARLEN 5
			CALLEDN 4
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD operator_-
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:5 CALLEDN:4 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:operator_- METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-operator_-

__BEGIN_METHOD_CODE__

BoxPoint::operator_-(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	    return BoxPoint(point[_ARGS_] - p.point[_ARGS_], point[_ARGS_] - p.point[_ARGS_]);
	else
	    return BoxPoint();
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_*
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 0
			AVVARLEN 5
			CALLEDN 4
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD operator_*
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:5 CALLEDN:4 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:operator_* METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-operator_*

__BEGIN_METHOD_CODE__

BoxPoint::operator_*(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	    return BoxPoint(point[_ARGS_] * p.point[_ARGS_], point[_ARGS_] * p.point[_ARGS_]);
	else
	    return BoxPoint();
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_/
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 0
			AVVARLEN 5
			CALLEDN 4
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD operator_/
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:5 CALLEDN:4 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:operator_/ METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-operator_/

__BEGIN_METHOD_CODE__

BoxPoint::operator_/(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	    return BoxPoint(point[_ARGS_] / p.point[_ARGS_], point[_ARGS_] / p.point[_ARGS_]);
	else
	    return BoxPoint();
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_%
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxPoint : BoxPoint,
		BoxPoint : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 0
			AVVARLEN 5
			CALLEDN 4
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD operator_%
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:5 CALLEDN:4 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:operator_% METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-operator_%

__BEGIN_METHOD_CODE__

BoxPoint::operator_%(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	    return BoxPoint(point[_ARGS_] % p.point[_ARGS_], point[_ARGS_] % p.point[_ARGS_]);
	else
	    return BoxPoint();
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_+=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 2
			AVVARLEN 5
			CALLEDN 2
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_+=
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:5 CALLEDN:2 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_+= METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-operator_+=

__BEGIN_METHOD_CODE__

BoxPoint::operator_+=(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	{
	    point[_ARGS_] += p.point[_ARGS_];
	    point[_ARGS_] += p.point[_ARGS_];
	}
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_-=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 2
			AVVARLEN 5
			CALLEDN 2
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_-=
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:5 CALLEDN:2 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_-= METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-operator_-=

__BEGIN_METHOD_CODE__

BoxPoint::operator_-=(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	{
	    point[_ARGS_] -= p.point[_ARGS_];
	    point[_ARGS_] -= p.point[_ARGS_];
	}
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_*=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 2
			AVVARLEN 5
			CALLEDN 2
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_*=
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:5 CALLEDN:2 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_*= METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-operator_*=

__BEGIN_METHOD_CODE__

BoxPoint::operator_*=(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	{
	    point[_ARGS_] *= p.point[_ARGS_];
	    point[_ARGS_] *= p.point[_ARGS_];
	}
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_/=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 2
			AVVARLEN 5
			CALLEDN 2
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_/=
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:5 CALLEDN:2 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_/= METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-operator_/=

__BEGIN_METHOD_CODE__

BoxPoint::operator_/=(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	{
	    point[_ARGS_] /= p.point[_ARGS_];
	    point[_ARGS_] /= p.point[_ARGS_];
	}
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_%=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint



		METRICS
			point REFERRED 4 TIMES,
			ARRAYOP 4
			ASS 2
			AVVARLEN 5
			CALLEDN 2
			CLASS BoxPoint
			CLASSID 23
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_%=
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:4 ASS:2 AVVARLEN:5 CALLEDN:2 CLASS:BoxPoint CLASSID:23 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_%= METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-operator_%=

__BEGIN_METHOD_CODE__

BoxPoint::operator_%=(const BoxPoint& p)
{
	if(isValid() && p.isValid())
	{
	    point[_ARGS_] %= p.point[_ARGS_];
	    point[_ARGS_] %= p.point[_ARGS_];
	}
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_[]

		METRICS
			point REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS BoxPoint
			CLASSID 23
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:BoxPoint CLASSID:23 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-operator_[]

__BEGIN_METHOD_CODE__

BoxPoint::operator_[](const BoxDimension& dimension)
{
	return point[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD BoxPoint!operator_[]

		METRICS
			point REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS BoxPoint
			CLASSID 23
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_[]
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:BoxPoint CLASSID:23 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_[] METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-operator_[]

__BEGIN_METHOD_CODE__

BoxPoint::operator_[](const BoxDimension& dimension)
{
	return point[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD BoxSize!BoxSize

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxSize
			CLASSID 24
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxSize
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxSize CLASSID:24 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxSize METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-BoxSize

__BEGIN_METHOD_CODE__

BoxSize::BoxSize(BoxCoordinate x_size, BoxCoordinate y_size)
{}

__END_METHOD_CODE__


	METHOD BoxSize!BoxSize

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxSize
			CLASSID 24
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxSize
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxSize CLASSID:24 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxSize METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-BoxSize

__BEGIN_METHOD_CODE__

BoxSize::BoxSize(BoxCoordinate c)
{}

__END_METHOD_CODE__


	METHOD BoxSize!BoxSize

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxSize
			CLASSID 24
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxSize
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxSize CLASSID:24 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxSize METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-BoxSize

__BEGIN_METHOD_CODE__

BoxSize::BoxSize()
{}

__END_METHOD_CODE__


	METHOD BoxSize!BoxSize

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxSize
			CLASSID 24
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxSize
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxSize CLASSID:24 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxSize METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-BoxSize

__BEGIN_METHOD_CODE__

BoxSize::BoxSize(const BoxPoint& p)
{}

__END_METHOD_CODE__


	METHOD BoxSize!operator_&
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxSize : BoxSize,
		max : DynArray,
		BoxSize : BoxSize



		METRICS
			ARRAYOP 4
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS BoxSize
			CLASSID 24
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_&
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:BoxSize CLASSID:24 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_& METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_&

__BEGIN_METHOD_CODE__

BoxSize::operator_&(const BoxSize& s)
{
	if(isValid() && s.isValid())
	    return BoxSize(point[_ARGS_] + s.point[_ARGS_],
			   max(point[_ARGS_], s.point[_ARGS_]));
	else
	    return BoxSize();
    }

__END_METHOD_CODE__


	METHOD BoxSize!operator_|
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxSize : BoxSize,
		max : DynArray,
		BoxSize : BoxSize



		METRICS
			ARRAYOP 4
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS BoxSize
			CLASSID 24
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_|
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:BoxSize CLASSID:24 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_| METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_|

__BEGIN_METHOD_CODE__

BoxSize::operator_|(const BoxSize& s)
{
	if(isValid() && s.isValid())
	    return BoxSize(max(point[_ARGS_], s.point[_ARGS_]),
			   point[_ARGS_] + s.point[_ARGS_]);
	else
	    return BoxSize();
    }

__END_METHOD_CODE__


	METHOD BoxSize!operator_^
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxSize : BoxSize,
		max : DynArray,
		max : DynArray,
		BoxSize : BoxSize



		METRICS
			ARRAYOP 4
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS BoxSize
			CLASSID 24
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_^
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:BoxSize CLASSID:24 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_^ METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-operator_^

__BEGIN_METHOD_CODE__

BoxSize::operator_^(const BoxSize& s)
{
	if(isValid() && s.isValid())
	    return BoxSize(max(point[_ARGS_], s.point[_ARGS_]),
			   max(point[_ARGS_], s.point[_ARGS_]));
	else
	    return BoxSize();
    }

__END_METHOD_CODE__


	METHOD BoxSize!operator_&=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		max : DynArray



		METRICS
			ARRAYOP 5
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS BoxSize
			CLASSID 24
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_&=
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:5 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:BoxSize CLASSID:24 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_&= METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-operator_&=

__BEGIN_METHOD_CODE__

BoxSize::operator_&=(const BoxSize& s)
{
	if(isValid() && s.isValid())
	{
	    point[_ARGS_] += s.point[_ARGS_];
	    point[_ARGS_] = max(point[_ARGS_], s.point[_ARGS_]);
	}
    }

__END_METHOD_CODE__


	METHOD BoxSize!operator_|=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		max : DynArray



		METRICS
			ARRAYOP 5
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS BoxSize
			CLASSID 24
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_|=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:5 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:BoxSize CLASSID:24 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_|= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_|=

__BEGIN_METHOD_CODE__

BoxSize::operator_|=(const BoxSize& s)
{
	if(isValid() && s.isValid())
	{
	    point[_ARGS_] = max(point[_ARGS_], s.point[_ARGS_]);
	    point[_ARGS_] += s.point[_ARGS_];
	}
    }

__END_METHOD_CODE__


	METHOD BoxSize!operator_^=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		max : DynArray,
		max : DynArray



		METRICS
			ARRAYOP 6
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS BoxSize
			CLASSID 24
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_^=
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:BoxSize CLASSID:24 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_^= METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-operator_^=

__BEGIN_METHOD_CODE__

BoxSize::operator_^=(const BoxSize& s)
{
	if(isValid() && s.isValid())
	{
	    point[_ARGS_] = max(point[_ARGS_], s.point[_ARGS_]);
	    point[_ARGS_] = max(point[_ARGS_], s.point[_ARGS_]);
	}
    }

__END_METHOD_CODE__

#====================================================================
#File ../../code/ddd-3.0/ddd/events.o.nu.cls	 Class Number = 2
#====================================================================
#Process file  ../../code/ddd-3.0/ddd/findParent.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/fileSBF.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/frame.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/longName.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/verify.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/Delay.o.nu.cls


	METHOD _Delay!_Delay

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS _Delay
			CLASSID 25
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _Delay
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:_Delay CLASSID:25 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_Delay METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_Delay

__BEGIN_METHOD_CODE__

_Delay::_Delay(const _Delay&)
{  ; }

__END_METHOD_CODE__


	METHOD _Delay!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS _Delay
			CLASSID 25
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:_Delay CLASSID:25 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-operator_=

__BEGIN_METHOD_CODE__

_Delay::operator_=(const _Delay&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD Delay!shells

		METRICS
			_shells REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS Delay
			CLASSID 26
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD shells
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:Delay CLASSID:26 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:shells METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-shells

__BEGIN_METHOD_CODE__

Delay::shells()
{ return _shells; }

__END_METHOD_CODE__

#===================================================================
#File ../../code/ddd-3.0/ddd/Delay.o.nu.cls	 Class Number = 2
#===================================================================
#Process file  ../../code/ddd-3.0/ddd/DestroyCB.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ExitCB.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/InitImage.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/MString.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/SpinBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/AlignBox.o.nu.cls


	METHOD BoxRegion!BoxRegion

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxRegion
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxRegion METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-BoxRegion

__BEGIN_METHOD_CODE__

BoxRegion::BoxRegion(const BoxPoint& o, const BoxSize& s)
{}

__END_METHOD_CODE__


	METHOD BoxRegion!BoxRegion

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxRegion
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxRegion METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-BoxRegion

__BEGIN_METHOD_CODE__

BoxRegion::BoxRegion(const BoxPoint& o)
{}

__END_METHOD_CODE__


	METHOD BoxRegion!BoxRegion

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxRegion
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxRegion METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-BoxRegion

__BEGIN_METHOD_CODE__

BoxRegion::BoxRegion()
{}

__END_METHOD_CODE__


	METHOD BoxRegion!BoxRegion

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxRegion
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxRegion METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-BoxRegion

__BEGIN_METHOD_CODE__

BoxRegion::BoxRegion(const BoxRegion& r)
{}

__END_METHOD_CODE__


	METHOD BoxRegion!origin

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD origin
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:origin METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-origin

__BEGIN_METHOD_CODE__

BoxRegion::origin()
{ return _origin; }

__END_METHOD_CODE__


	METHOD BoxRegion!origin

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD origin
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:origin METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-origin

__BEGIN_METHOD_CODE__

BoxRegion::origin(BoxDimension d)
{ return _origin[_ARGS_]; }

__END_METHOD_CODE__


	METHOD BoxRegion!space

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD space
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:space METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-space

__BEGIN_METHOD_CODE__

BoxRegion::space()
{ return _space; }

__END_METHOD_CODE__


	METHOD BoxRegion!space

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD space
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:space METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-space

__BEGIN_METHOD_CODE__

BoxRegion::space(BoxDimension d)
{ return _space[_ARGS_]; }

__END_METHOD_CODE__


	METHOD BoxRegion!origin

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD origin
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:origin METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-origin

__BEGIN_METHOD_CODE__

BoxRegion::origin()
{ return _origin; }

__END_METHOD_CODE__


	METHOD BoxRegion!origin

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD origin
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:origin METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-origin

__BEGIN_METHOD_CODE__

BoxRegion::origin(BoxDimension d)
{ return _origin[_ARGS_]; }

__END_METHOD_CODE__


	METHOD BoxRegion!space

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD space
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:space METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-space

__BEGIN_METHOD_CODE__

BoxRegion::space()
{ return _space; }

__END_METHOD_CODE__


	METHOD BoxRegion!space

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD space
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:space METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-space

__BEGIN_METHOD_CODE__

BoxRegion::space(BoxDimension d)
{ return _space[_ARGS_]; }

__END_METHOD_CODE__


	METHOD BoxRegion!operator_==
		CALLS
		origin : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		space : BoxRegion,
		space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 2
			EQTEST 2
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_==
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:2 EQTEST:2 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_== METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-operator_==

__BEGIN_METHOD_CODE__

BoxRegion::operator_==(const BoxRegion& r)
{ return origin() == r.origin() && space() == r.space(); }

__END_METHOD_CODE__


	METHOD BoxRegion!operator_!=
		CALLS
		origin : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		space : BoxRegion,
		space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_!=
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_!= METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-operator_!=

__BEGIN_METHOD_CODE__

BoxRegion::operator_!=(const BoxRegion& r)
{ return origin() != r.origin() || space() != r.space(); }

__END_METHOD_CODE__


	METHOD BoxRegion!operator_<=
		CALLS
		origin : _SYSTEM_OR_USER_,
		origin : BoxRegion,
		space : BoxRegion,
		origin : BoxRegion,
		origin : _SYSTEM_OR_USER_,
		space : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 6
			CLASS BoxRegion
			CLASSID 27
			CYCLO 3
			DOTS 3
			EQTEST 0
			EXPRORCALL 8
			GE 2
			GT 2
			IN 0
			INDR 0
			LE 1
			LOC 8
			LT 1
			METHOD operator_<=
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:6 CLASS:BoxRegion CLASSID:27 CYCLO:3 DOTS:3 EQTEST:0 EXPRORCALL:8 GE:2 GT:2 IN:0 INDR:0 LE:1 LOC:8 LT:1 METHOD:operator_<= METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-operator_<=

__BEGIN_METHOD_CODE__

BoxRegion::operator_<=(const BoxRegion& r)
{
	for(BoxDimension d = X; d <= Y; d++)
	    if(r.origin(d) >= origin(d) + space(d) ||
		origin(d) >= r.origin(d) + r.space(d))
	    return false;

	return true;
    }

__END_METHOD_CODE__


	METHOD BoxRegion!isEmpty
		CALLS
		space : BoxRegion,
		BoxSize : BoxSize



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS BoxRegion
			CLASSID 27
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 1
			LOC 3
			LT 1
			METHOD isEmpty
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:BoxRegion CLASSID:27 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:1 LOC:3 LT:1 METHOD:isEmpty METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-isEmpty

__BEGIN_METHOD_CODE__

BoxRegion::isEmpty()
{
	return space() <= BoxSize(0,0);
    }

__END_METHOD_CODE__


	METHOD BoxExtend!BoxExtend

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxExtend
			CLASSID 28
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxExtend
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxExtend CLASSID:28 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxExtend METHODID:0 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-BoxExtend

__BEGIN_METHOD_CODE__

BoxExtend::BoxExtend(BoxCoordinate x_extend, BoxCoordinate y_extend)
{}

__END_METHOD_CODE__


	METHOD BoxExtend!BoxExtend

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxExtend
			CLASSID 28
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxExtend
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxExtend CLASSID:28 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxExtend METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-BoxExtend

__BEGIN_METHOD_CODE__

BoxExtend::BoxExtend(BoxCoordinate c)
{}

__END_METHOD_CODE__


	METHOD BoxExtend!BoxExtend

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxExtend
			CLASSID 28
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxExtend
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxExtend CLASSID:28 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxExtend METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-BoxExtend

__BEGIN_METHOD_CODE__

BoxExtend::BoxExtend()
{}

__END_METHOD_CODE__


	METHOD BoxExtend!BoxExtend

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxExtend
			CLASSID 28
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxExtend
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxExtend CLASSID:28 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxExtend METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-BoxExtend

__BEGIN_METHOD_CODE__

BoxExtend::BoxExtend(const BoxPoint& p)
{}

__END_METHOD_CODE__


	METHOD BoxExtend!operator_&
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxExtend : BoxExtend,
		min : _SYSTEM_OR_USER_,
		BoxExtend : BoxExtend



		METRICS
			ARRAYOP 4
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS BoxExtend
			CLASSID 28
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_&
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:BoxExtend CLASSID:28 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_& METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_&

__BEGIN_METHOD_CODE__

BoxExtend::operator_&(const BoxExtend& e)
{
	if(isValid() && e.isValid())
	    return BoxExtend(point[_ARGS_] + e.point[_ARGS_],
			     min(point[_ARGS_],e.point[_ARGS_]));
	else
	    return BoxExtend();
    }

__END_METHOD_CODE__


	METHOD BoxExtend!operator_|
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxExtend : BoxExtend,
		min : _SYSTEM_OR_USER_,
		BoxExtend : BoxExtend



		METRICS
			ARRAYOP 4
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS BoxExtend
			CLASSID 28
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_|
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:BoxExtend CLASSID:28 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_| METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_|

__BEGIN_METHOD_CODE__

BoxExtend::operator_|(const BoxExtend& e)
{
	if(isValid() && e.isValid())
	    return BoxExtend(min(point[_ARGS_], e.point[_ARGS_]),
			     point[_ARGS_] + e.point[_ARGS_]);
	else
	    return BoxExtend();
    }

__END_METHOD_CODE__


	METHOD BoxExtend!operator_^
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		BoxExtend : BoxExtend,
		max : DynArray,
		max : DynArray,
		BoxExtend : BoxExtend



		METRICS
			ARRAYOP 4
			ASS 0
			AVVARLEN 0
			CALLEDN 6
			CLASS BoxExtend
			CLASSID 28
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_^
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:4 ASS:0 AVVARLEN:0 CALLEDN:6 CLASS:BoxExtend CLASSID:28 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_^ METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-operator_^

__BEGIN_METHOD_CODE__

BoxExtend::operator_^(const BoxExtend& e)
{
	if(isValid() && e.isValid())
	    return BoxExtend(max(point[_ARGS_], e.point[_ARGS_]),
			     max(point[_ARGS_], e.point[_ARGS_]));
	else
	    return BoxExtend();
    }

__END_METHOD_CODE__


	METHOD BoxExtend!operator_&=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		min : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 5
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS BoxExtend
			CLASSID 28
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_&=
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:5 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:BoxExtend CLASSID:28 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_&= METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-operator_&=

__BEGIN_METHOD_CODE__

BoxExtend::operator_&=(const BoxExtend& e)
{
	if(isValid() && e.isValid())
	{
	    point[_ARGS_] += e.point[_ARGS_];
	    point[_ARGS_] = min(point[_ARGS_], e.point[_ARGS_]);
	}
    }

__END_METHOD_CODE__


	METHOD BoxExtend!operator_|=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		min : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 5
			ASS 2
			AVVARLEN 0
			CALLEDN 3
			CLASS BoxExtend
			CLASSID 28
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_|=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:5 ASS:2 AVVARLEN:0 CALLEDN:3 CLASS:BoxExtend CLASSID:28 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_|= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_|=

__BEGIN_METHOD_CODE__

BoxExtend::operator_|=(const BoxExtend& e)
{
	if(isValid() && e.isValid())
	{
	    point[_ARGS_] = min(point[_ARGS_], e.point[_ARGS_]);
	    point[_ARGS_] += e.point[_ARGS_];
	}
    }

__END_METHOD_CODE__


	METHOD BoxExtend!operator_^=
		CALLS
		isValid : BoxPoint,
		isValid : BoxPoint,
		max : DynArray,
		max : DynArray



		METRICS
			ARRAYOP 6
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS BoxExtend
			CLASSID 28
			CYCLO 2
			DOTS 3
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD operator_^=
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:6 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:BoxExtend CLASSID:28 CYCLO:2 DOTS:3 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:operator_^= METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-operator_^=

__BEGIN_METHOD_CODE__

BoxExtend::operator_^=(const BoxExtend& e)
{
	if(isValid() && e.isValid())
	{
	    point[_ARGS_] = max(point[_ARGS_], e.point[_ARGS_]);
	    point[_ARGS_] = max(point[_ARGS_], e.point[_ARGS_]);
	}
    }

__END_METHOD_CODE__


	METHOD BoxExtend!fix
		CALLS
		isValid : BoxPoint



		METRICS
			ARRAYOP 1
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS BoxExtend
			CLASSID 28
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD fix
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:BoxExtend CLASSID:28 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:fix METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-fix

__BEGIN_METHOD_CODE__

BoxExtend::fix(BoxDimension dimension)
{
	if(isValid())
	    point[_ARGS_] = 0;
    }

__END_METHOD_CODE__


	METHOD Box!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-operator_=

__BEGIN_METHOD_CODE__

Box::operator_=(const Box&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD Box!thesize

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD thesize
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:thesize METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-thesize

__BEGIN_METHOD_CODE__

Box::thesize()
{ return _size; }

__END_METHOD_CODE__


	METHOD Box!theextend

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD theextend
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:theextend METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-theextend

__BEGIN_METHOD_CODE__

Box::theextend()
{ return _extend; }

__END_METHOD_CODE__


	METHOD Box!thesize

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD thesize
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:thesize METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-thesize

__BEGIN_METHOD_CODE__

Box::thesize()
{ return _size; }

__END_METHOD_CODE__


	METHOD Box!theextend

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD theextend
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:theextend METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-theextend

__BEGIN_METHOD_CODE__

Box::theextend()
{ return _extend; }

__END_METHOD_CODE__


	METHOD Box!Box

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD Box
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:Box METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-Box

__BEGIN_METHOD_CODE__

Box::Box(const Box& box)
{}

__END_METHOD_CODE__


	METHOD Box!Box

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD Box
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:Box METHODID:10 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-Box

__BEGIN_METHOD_CODE__

Box::Box(BoxSize s = BoxSize(0, 0), BoxExtend e = BoxExtend(0, 0), 
	char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD Box!~Box

		METRICS
			_type REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 5
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD ~Box
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:5 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:~Box METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-~Box

__BEGIN_METHOD_CODE__

Box::~Box()
{
	 ;
	_type = 0;
    }

__END_METHOD_CODE__


	METHOD Box!link

		METRICS
			_links REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD link
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:link METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-link

__BEGIN_METHOD_CODE__

Box::link()
{
	 ;
	_links++;
	return this;
    }

__END_METHOD_CODE__


	METHOD Box!dup0
		CALLS
		dup : Box



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup0
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup0 METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-dup0

__BEGIN_METHOD_CODE__

Box::dup0()
{ return dup(); }

__END_METHOD_CODE__


	METHOD Box!unlink

		METRICS
			_links REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD unlink
			METHODID 15
			MMINUS 1
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:unlink METHODID:15 MMINUS:1 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-unlink

__BEGIN_METHOD_CODE__

Box::unlink()
{
	 ;
	if(--_links == 0)
	    delete this;
    }

__END_METHOD_CODE__


	METHOD Box!id

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD id
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:id METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-id

__BEGIN_METHOD_CODE__

Box::id()
{ return(unsigned long)_id; }

__END_METHOD_CODE__


	METHOD Box!type

		METRICS
			_type REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD type
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:type METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-type

__BEGIN_METHOD_CODE__

Box::type()
{ return _type; }

__END_METHOD_CODE__


	METHOD Box!extend

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD extend
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:extend METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-extend

__BEGIN_METHOD_CODE__

Box::extend()
{ return _extend; }

__END_METHOD_CODE__


	METHOD Box!size

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD size
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:size METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-size

__BEGIN_METHOD_CODE__

Box::size()
{ return _size; }

__END_METHOD_CODE__


	METHOD Box!extend

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD extend
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:extend METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-extend

__BEGIN_METHOD_CODE__

Box::extend(BoxDimension dimension)
{ 
	return _extend[_ARGS_]; 
    }

__END_METHOD_CODE__


	METHOD Box!size

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD size
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:size METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-size

__BEGIN_METHOD_CODE__

Box::size(BoxDimension dimension)
{ 
	return _size[_ARGS_]; 
    }

__END_METHOD_CODE__


	METHOD Box!str

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD str
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:str METHODID:22 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-str

__BEGIN_METHOD_CODE__

Box::str()
{ return _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD Box!corner
		CALLS
		BoxSize : BoxSize



		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD corner
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:corner METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-corner

__BEGIN_METHOD_CODE__

Box::corner()
{
	 
	return BoxSize(0, _size[_ARGS_]);
    }

__END_METHOD_CODE__


	METHOD Box!resize

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD resize
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:resize METHODID:24 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-resize

__BEGIN_METHOD_CODE__

Box::resize()
{ return this; }

__END_METHOD_CODE__


	METHOD Box!newFont
		CALLS
		resize : Box



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD newFont
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:newFont METHODID:25 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-newFont

__BEGIN_METHOD_CODE__

Box::newFont(const string&)
{ resize(); }

__END_METHOD_CODE__


	METHOD Box!print
		CALLS
		space : _SYSTEM_OR_USER_,
		max : DynArray,
		space : _SYSTEM_OR_USER_,
		size : Box,
		space : _SYSTEM_OR_USER_,
		max : DynArray,
		space : _SYSTEM_OR_USER_,
		size : Box,
		_printHeader : Box,
		_print : Box,
		_printTrailer : Box



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 11
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 4
			EQTEST 0
			EXPRORCALL 11
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD print
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 6
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:11 CLASS:Box CLASSID:29 CYCLO:1 DOTS:4 EQTEST:0 EXPRORCALL:11 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:print METHODID:30 MMINUS:0 OUT:0 PARNUM:6 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-print

__BEGIN_METHOD_CODE__

Box::print(ostream& os = cout,
	       BoxRegion region = 
	           BoxRegion(BoxPoint(0,0), BoxSize(0,0)),
	       const BoxPrintGC& gc = BoxPostScriptGC())
{
	region.space(X) = max(region.space(X), size(X));
	region.space(Y) = max(region.space(Y), size(Y));

	_printHeader(os, region, gc);
	_print(os, region, gc);
	_printTrailer(os, region, gc);
    }

__END_METHOD_CODE__


	METHOD Box!operator_!=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_!=
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_!= METHODID:32 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-operator_!=

__BEGIN_METHOD_CODE__

Box::operator_!=(const Box& b)
{ return !(operator == (b)); }

__END_METHOD_CODE__


	METHOD Box!isStringBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isStringBox
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isStringBox METHODID:33 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-isStringBox

__BEGIN_METHOD_CODE__

Box::isStringBox()
{ return false; }

__END_METHOD_CODE__


	METHOD Box!isListBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isListBox
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isListBox METHODID:34 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-isListBox

__BEGIN_METHOD_CODE__

Box::isListBox()
{ return false; }

__END_METHOD_CODE__


	METHOD Box!isDummyBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isDummyBox
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isDummyBox METHODID:35 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-isDummyBox

__BEGIN_METHOD_CODE__

Box::isDummyBox()
{ return false; }

__END_METHOD_CODE__


	METHOD Box!matchMe

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD matchMe
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:matchMe METHODID:42 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 42-matchMe

__BEGIN_METHOD_CODE__

Box::matchMe()
{ return *this; }

__END_METHOD_CODE__


	METHOD Box!countMatchBoxes

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD countMatchBoxes
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:countMatchBoxes METHODID:43 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 43-countMatchBoxes

__BEGIN_METHOD_CODE__

Box::countMatchBoxes(int[])
{}

__END_METHOD_CODE__


	METHOD Box!findTag

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD findTag
			METHODID 44
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:findTag METHODID:44 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 44-findTag

__BEGIN_METHOD_CODE__

Box::findTag(const BoxPoint&)
{ 
	return 0;
    }

__END_METHOD_CODE__


	METHOD Box!findTag
		CALLS
		findTag : Box,
		BoxPoint : BoxPoint



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD findTag
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:findTag METHODID:45 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 45-findTag

__BEGIN_METHOD_CODE__

Box::findTag()
{
	return findTag(BoxPoint(-1, -1));
    }

__END_METHOD_CODE__


	METHOD Box!OK

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Box
			CLASSID 29
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD OK
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Box CLASSID:29 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:OK METHODID:46 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 46-OK

__BEGIN_METHOD_CODE__

Box::OK()
{
	 ;
	return true;
    }

__END_METHOD_CODE__


	METHOD CompositeBox!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CompositeBox
			CLASSID 30
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CompositeBox CLASSID:30 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-operator_=

__BEGIN_METHOD_CODE__

CompositeBox::operator_=(const CompositeBox&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD CompositeBox!addChild
		CALLS
		grow : CompositeBox,
		link : _SYSTEM_OR_USER_



		METRICS
			_size REFERRED 1 TIMES,
			_nchildren REFERRED 1 TIMES,
			ARRAYOP 1
			ASS 2
			AVVARLEN 7
			CALLEDN 2
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 1
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD addChild
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:1 ASS:2 AVVARLEN:7 CALLEDN:2 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:1 GT:1 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:addChild METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-addChild

__BEGIN_METHOD_CODE__

CompositeBox::addChild(Box *b)
{
	 
	if(_nchildren >= _size)
	    grow();
	boxes[_ARGS_] = b->link();
    }

__END_METHOD_CODE__


	METHOD CompositeBox!_child

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CompositeBox
			CLASSID 30
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD _child
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CompositeBox CLASSID:30 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:_child METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-_child

__BEGIN_METHOD_CODE__

CompositeBox::_child(int nchild)
{
	 ;
	return boxes[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD CompositeBox!_child

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CompositeBox
			CLASSID 30
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD _child
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CompositeBox CLASSID:30 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:_child METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-_child

__BEGIN_METHOD_CODE__

CompositeBox::_child(int nchild)
{
	 ;
	return boxes[_ARGS_];
    }

__END_METHOD_CODE__


	METHOD CompositeBox!CompositeBox
		CALLS
		dup : _SYSTEM_OR_USER_



		METRICS
			_nchildren REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 10
			CALLEDN 1
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 1
			METHOD CompositeBox
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:10 CALLEDN:1 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:1 METHOD:CompositeBox METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-CompositeBox

__BEGIN_METHOD_CODE__

CompositeBox::CompositeBox(const CompositeBox& box)
{
	 
	for(int i = 0; i < _nchildren; i++)
	    boxes[_ARGS_] = box.boxes[_ARGS_]->dup();
    }

__END_METHOD_CODE__


	METHOD CompositeBox!CompositeBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CompositeBox
			CLASSID 30
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD CompositeBox
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CompositeBox CLASSID:30 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:CompositeBox METHODID:9 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-CompositeBox

__BEGIN_METHOD_CODE__

CompositeBox::CompositeBox(unsigned initialSize = 2, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD CompositeBox!~CompositeBox
		CALLS




		METRICS
			_nchildren REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 10
			CALLEDN 1
			CLASS CompositeBox
			CLASSID 30
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 1
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD ~CompositeBox
			METHODID 10
			MMINUS 1
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:10 CALLEDN:1 CLASS:CompositeBox CLASSID:30 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:1 GT:1 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:~CompositeBox METHODID:10 MMINUS:1 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-~CompositeBox

__BEGIN_METHOD_CODE__

CompositeBox::~CompositeBox()
{
	for(int i = _nchildren - 1; i >= 0; i--)
	    boxes[_ARGS_]->unlink();

	delete[] boxes;
    }

__END_METHOD_CODE__


	METHOD CompositeBox!nchildren

		METRICS
			_nchildren REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS CompositeBox
			CLASSID 30
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD nchildren
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:CompositeBox CLASSID:30 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:nchildren METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-nchildren

__BEGIN_METHOD_CODE__

CompositeBox::nchildren()
{ return _nchildren; }

__END_METHOD_CODE__


	METHOD CompositeBox!operator_[]
		CALLS
		_child : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS CompositeBox
			CLASSID 30
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_[]
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:CompositeBox CLASSID:30 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_[] METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-operator_[]

__BEGIN_METHOD_CODE__

CompositeBox::operator_[](int nchild)
{ return _child(nchild); }

__END_METHOD_CODE__


	METHOD CompositeBox!operator_[]
		CALLS
		_child : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS CompositeBox
			CLASSID 30
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_[]
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:CompositeBox CLASSID:30 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_[] METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-operator_[]

__BEGIN_METHOD_CODE__

CompositeBox::operator_[](int nchild)
{ return _child(nchild); }

__END_METHOD_CODE__


	METHOD AlignBox!AlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AlignBox
			CLASSID 31
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AlignBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AlignBox CLASSID:31 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AlignBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-AlignBox

__BEGIN_METHOD_CODE__

AlignBox::AlignBox(const AlignBox& box)
{}

__END_METHOD_CODE__


	METHOD AlignBox!setSize
		CALLS
		thesize : Box,
		size : _SYSTEM_OR_USER_,
		theextend : Box,
		extend : Box,
		corner : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 5
			CLASS AlignBox
			CLASSID 31
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 5
			LT 0
			METHOD setSize
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:5 CLASS:AlignBox CLASSID:31 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:5 LT:0 METHOD:setSize METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-setSize

__BEGIN_METHOD_CODE__

AlignBox::setSize(Box *b)
{
	thesize()   = b->size();
	theextend() = b->extend();
	_corner     = b->corner();
    }

__END_METHOD_CODE__


	METHOD AlignBox!addChild
		CALLS
		addChild : CompositeBox,
		nchildren : _SYSTEM_OR_USER_,
		setSize : AlignBox,
		addSize : AlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS AlignBox
			CLASSID 31
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 10
			LT 0
			METHOD addChild
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:AlignBox CLASSID:31 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:10 LT:0 METHOD:addChild METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-addChild

__BEGIN_METHOD_CODE__

AlignBox::addChild(Box *b)
{
	 
	CompositeBox::addChild(b);

	 
	if(nchildren() == 1)
	    setSize(b);      
	else
	    addSize(b);      
    }

__END_METHOD_CODE__


	METHOD AlignBox!AlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AlignBox
			CLASSID 31
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AlignBox
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AlignBox CLASSID:31 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AlignBox METHODID:6 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-AlignBox

__BEGIN_METHOD_CODE__

AlignBox::AlignBox(unsigned initialSize = 2, 
	char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD AlignBox!corner

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AlignBox
			CLASSID 31
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD corner
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AlignBox CLASSID:31 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:corner METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-corner

__BEGIN_METHOD_CODE__

AlignBox::corner()
{ return _corner; }

__END_METHOD_CODE__


	METHOD AlignBox!operator_+=
		CALLS
		addChild : AlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS AlignBox
			CLASSID 31
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_+=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:AlignBox CLASSID:31 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_+= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_+=

__BEGIN_METHOD_CODE__

AlignBox::operator_+=(Box *b)
{
	addChild(b);
	return *this;
    }

__END_METHOD_CODE__


	METHOD HAlignBox!HAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HAlignBox
			CLASSID 32
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HAlignBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HAlignBox CLASSID:32 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HAlignBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-HAlignBox

__BEGIN_METHOD_CODE__

HAlignBox::HAlignBox(const HAlignBox& box)
{}

__END_METHOD_CODE__


	METHOD HAlignBox!dump
		CALLS
		dumpComposite : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HAlignBox
			CLASSID 32
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HAlignBox CLASSID:32 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dump METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

HAlignBox::dump(ostream& s)
{ dumpComposite(s, _REMOVED_STR_); }

__END_METHOD_CODE__


	METHOD HAlignBox!_draw
		CALLS
		drawAlign : AlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HAlignBox
			CLASSID 32
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _draw
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HAlignBox CLASSID:32 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_draw METHODID:2 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_draw

__BEGIN_METHOD_CODE__

HAlignBox::_draw(Widget w, 
		       const BoxRegion& r, 
		       const BoxRegion& exposed,
		       GC gc, bool context_selected)
{ 
	drawAlign(w, r, exposed, gc, context_selected, X); 
    }

__END_METHOD_CODE__


	METHOD HAlignBox!HAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HAlignBox
			CLASSID 32
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HAlignBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HAlignBox CLASSID:32 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HAlignBox METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-HAlignBox

__BEGIN_METHOD_CODE__

HAlignBox::HAlignBox(unsigned initialSize = 2, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD HAlignBox!dup
		CALLS
		HAlignBox : HAlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HAlignBox
			CLASSID 32
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HAlignBox CLASSID:32 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

HAlignBox::dup()
{ return new HAlignBox(*this); }

__END_METHOD_CODE__


	METHOD HAlignBox!dup0

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HAlignBox
			CLASSID 32
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup0
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HAlignBox CLASSID:32 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup0 METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup0

__BEGIN_METHOD_CODE__

HAlignBox::dup0()
{ return new HAlignBox; }

__END_METHOD_CODE__


	METHOD HAlignBox!operator_&=
		CALLS
		addChild : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HAlignBox
			CLASSID 32
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_&=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HAlignBox CLASSID:32 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_&= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_&=

__BEGIN_METHOD_CODE__

HAlignBox::operator_&=(Box *b)
{
	addChild(b);
	return *this;
    }

__END_METHOD_CODE__


	METHOD VAlignBox!_draw
		CALLS
		drawAlign : AlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VAlignBox
			CLASSID 33
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VAlignBox CLASSID:33 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_draw

__BEGIN_METHOD_CODE__

VAlignBox::_draw(Widget w, 
	       const BoxRegion& r, 
	       const BoxRegion& exposed,
	       GC gc, 
	       bool context_selected)
{ 
	drawAlign(w, r, exposed, gc, context_selected, Y); 
    }

__END_METHOD_CODE__


	METHOD VAlignBox!VAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VAlignBox
			CLASSID 33
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VAlignBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VAlignBox CLASSID:33 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VAlignBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-VAlignBox

__BEGIN_METHOD_CODE__

VAlignBox::VAlignBox(const VAlignBox& box)
{}

__END_METHOD_CODE__


	METHOD VAlignBox!dump
		CALLS
		dumpComposite : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VAlignBox
			CLASSID 33
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VAlignBox CLASSID:33 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dump METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

VAlignBox::dump(ostream& s)
{ dumpComposite(s, _REMOVED_STR_); }

__END_METHOD_CODE__


	METHOD VAlignBox!VAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VAlignBox
			CLASSID 33
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VAlignBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VAlignBox CLASSID:33 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VAlignBox METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-VAlignBox

__BEGIN_METHOD_CODE__

VAlignBox::VAlignBox(unsigned initialSize = 2, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD VAlignBox!dup
		CALLS
		VAlignBox : VAlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VAlignBox
			CLASSID 33
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VAlignBox CLASSID:33 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

VAlignBox::dup()
{ return new VAlignBox(*this); }

__END_METHOD_CODE__


	METHOD VAlignBox!dup0

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VAlignBox
			CLASSID 33
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup0
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VAlignBox CLASSID:33 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup0 METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup0

__BEGIN_METHOD_CODE__

VAlignBox::dup0()
{ return new VAlignBox; }

__END_METHOD_CODE__


	METHOD VAlignBox!operator_|=
		CALLS
		addChild : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VAlignBox
			CLASSID 33
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_|=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VAlignBox CLASSID:33 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_|= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_|=

__BEGIN_METHOD_CODE__

VAlignBox::operator_|=(Box *b)
{
	addChild(b);
	return *this;
    }

__END_METHOD_CODE__


	METHOD UAlignBox!UAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS UAlignBox
			CLASSID 34
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD UAlignBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:UAlignBox CLASSID:34 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:UAlignBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-UAlignBox

__BEGIN_METHOD_CODE__

UAlignBox::UAlignBox(const UAlignBox& box)
{}

__END_METHOD_CODE__


	METHOD UAlignBox!dump
		CALLS
		dumpComposite : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS UAlignBox
			CLASSID 34
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:UAlignBox CLASSID:34 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dump METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

UAlignBox::dump(ostream& s)
{ dumpComposite(s, _REMOVED_STR_); }

__END_METHOD_CODE__


	METHOD UAlignBox!UAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS UAlignBox
			CLASSID 34
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD UAlignBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:UAlignBox CLASSID:34 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:UAlignBox METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-UAlignBox

__BEGIN_METHOD_CODE__

UAlignBox::UAlignBox(unsigned initialSize = 2, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD UAlignBox!dup
		CALLS
		UAlignBox : UAlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS UAlignBox
			CLASSID 34
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:UAlignBox CLASSID:34 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

UAlignBox::dup()
{ return new UAlignBox(*this); }

__END_METHOD_CODE__


	METHOD UAlignBox!dup0

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS UAlignBox
			CLASSID 34
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup0
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:UAlignBox CLASSID:34 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup0 METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup0

__BEGIN_METHOD_CODE__

UAlignBox::dup0()
{ return new UAlignBox; }

__END_METHOD_CODE__


	METHOD UAlignBox!operator_^=
		CALLS
		addChild : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS UAlignBox
			CLASSID 34
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_^=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:UAlignBox CLASSID:34 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_^= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_^=

__BEGIN_METHOD_CODE__

UAlignBox::operator_^=(Box *b)
{
	addChild(b);
	return *this;
    }

__END_METHOD_CODE__


	METHOD TAlignBox!TAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TAlignBox
			CLASSID 35
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TAlignBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TAlignBox CLASSID:35 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TAlignBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-TAlignBox

__BEGIN_METHOD_CODE__

TAlignBox::TAlignBox(const TAlignBox& box)
{}

__END_METHOD_CODE__


	METHOD TAlignBox!dump
		CALLS
		dumpComposite : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TAlignBox
			CLASSID 35
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TAlignBox CLASSID:35 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dump METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

TAlignBox::dump(ostream& s)
{ dumpComposite(s, _REMOVED_STR_); }

__END_METHOD_CODE__


	METHOD TAlignBox!TAlignBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TAlignBox
			CLASSID 35
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TAlignBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TAlignBox CLASSID:35 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TAlignBox METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-TAlignBox

__BEGIN_METHOD_CODE__

TAlignBox::TAlignBox(unsigned initialSize = 2, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD TAlignBox!dup
		CALLS
		TAlignBox : TAlignBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TAlignBox
			CLASSID 35
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TAlignBox CLASSID:35 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

TAlignBox::dup()
{ return new TAlignBox(*this); }

__END_METHOD_CODE__


	METHOD TAlignBox!dup0

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TAlignBox
			CLASSID 35
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup0
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TAlignBox CLASSID:35 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup0 METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup0

__BEGIN_METHOD_CODE__

TAlignBox::dup0()
{ return new TAlignBox; }

__END_METHOD_CODE__


	METHOD TAlignBox!operator_&=
		CALLS
		addChild : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TAlignBox
			CLASSID 35
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_&=
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TAlignBox CLASSID:35 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_&= METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-operator_&=

__BEGIN_METHOD_CODE__

TAlignBox::operator_&=(Box *b)
{
	addChild(b);
	return *this;
    }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/AlignBox.o.nu.cls	 Class Number = 9
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/ArcBox.o.nu.cls


	METHOD PrimitiveBox!PrimitiveBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PrimitiveBox
			CLASSID 36
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD PrimitiveBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PrimitiveBox CLASSID:36 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:PrimitiveBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-PrimitiveBox

__BEGIN_METHOD_CODE__

PrimitiveBox::PrimitiveBox(const PrimitiveBox& box)
{}

__END_METHOD_CODE__


	METHOD PrimitiveBox!PrimitiveBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PrimitiveBox
			CLASSID 36
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD PrimitiveBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PrimitiveBox CLASSID:36 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:PrimitiveBox METHODID:1 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-PrimitiveBox

__BEGIN_METHOD_CODE__

PrimitiveBox::PrimitiveBox(BoxSize s = BoxSize(0,0), BoxExtend e = BoxExtend(0, 0),
	char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD RuleBox!RuleBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RuleBox
			CLASSID 37
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD RuleBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RuleBox CLASSID:37 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:RuleBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-RuleBox

__BEGIN_METHOD_CODE__

RuleBox::RuleBox(const RuleBox& box)
{}

__END_METHOD_CODE__


	METHOD RuleBox!RuleBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RuleBox
			CLASSID 37
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD RuleBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RuleBox CLASSID:37 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:RuleBox METHODID:3 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-RuleBox

__BEGIN_METHOD_CODE__

RuleBox::RuleBox(BoxSize s = BoxSize(0, 0), BoxExtend e = BoxExtend(1, 1),
	char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD RuleBox!dup
		CALLS
		RuleBox : RuleBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS RuleBox
			CLASSID 37
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:RuleBox CLASSID:37 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

RuleBox::dup()
{ return new RuleBox(*this); }

__END_METHOD_CODE__


	METHOD EmptyBox!_draw

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS EmptyBox
			CLASSID 38
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _draw
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:EmptyBox CLASSID:38 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_draw METHODID:0 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_draw

__BEGIN_METHOD_CODE__

EmptyBox::_draw(Widget, 
		       const BoxRegion&, 
		       const BoxRegion&,
		       GC, 
		       bool)
{
	 
    }

__END_METHOD_CODE__


	METHOD EmptyBox!EmptyBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS EmptyBox
			CLASSID 38
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD EmptyBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:EmptyBox CLASSID:38 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:EmptyBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-EmptyBox

__BEGIN_METHOD_CODE__

EmptyBox::EmptyBox(const EmptyBox& box)
{}

__END_METHOD_CODE__


	METHOD EmptyBox!_print

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS EmptyBox
			CLASSID 38
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _print
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:EmptyBox CLASSID:38 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_print METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_print

__BEGIN_METHOD_CODE__

EmptyBox::_print(ostream&, 
		const BoxRegion&, 
		const BoxPrintGC&)
{
	 
    }

__END_METHOD_CODE__


	METHOD EmptyBox!EmptyBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS EmptyBox
			CLASSID 38
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD EmptyBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:EmptyBox CLASSID:38 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:EmptyBox METHODID:3 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-EmptyBox

__BEGIN_METHOD_CODE__

EmptyBox::EmptyBox(BoxSize s = BoxSize(0,0), BoxExtend e = BoxExtend(0, 0),
	char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD FillBox!FillBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FillBox
			CLASSID 39
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FillBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FillBox CLASSID:39 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FillBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-FillBox

__BEGIN_METHOD_CODE__

FillBox::FillBox(const FillBox& box)
{}

__END_METHOD_CODE__


	METHOD FillBox!FillBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FillBox
			CLASSID 39
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FillBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FillBox CLASSID:39 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FillBox METHODID:2 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-FillBox

__BEGIN_METHOD_CODE__

FillBox::FillBox(BoxSize s = BoxSize(0, 0), BoxExtend e = BoxExtend(1, 1))
{}

__END_METHOD_CODE__


	METHOD FillBox!dup
		CALLS
		FillBox : FillBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS FillBox
			CLASSID 39
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:FillBox CLASSID:39 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dup

__BEGIN_METHOD_CODE__

FillBox::dup()
{ return new FillBox(*this); }

__END_METHOD_CODE__


	METHOD SpaceBox!SpaceBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SpaceBox
			CLASSID 40
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD SpaceBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SpaceBox CLASSID:40 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:SpaceBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-SpaceBox

__BEGIN_METHOD_CODE__

SpaceBox::SpaceBox(const SpaceBox& box)
{}

__END_METHOD_CODE__


	METHOD SpaceBox!SpaceBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SpaceBox
			CLASSID 40
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD SpaceBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SpaceBox CLASSID:40 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:SpaceBox METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-SpaceBox

__BEGIN_METHOD_CODE__

SpaceBox::SpaceBox(BoxSize s = BoxSize(0, 0))
{}

__END_METHOD_CODE__


	METHOD SpaceBox!dup
		CALLS
		SpaceBox : SpaceBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SpaceBox
			CLASSID 40
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SpaceBox CLASSID:40 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dup

__BEGIN_METHOD_CODE__

SpaceBox::dup()
{ return new SpaceBox(*this); }

__END_METHOD_CODE__


	METHOD SquareBox!SquareBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SquareBox
			CLASSID 41
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD SquareBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SquareBox CLASSID:41 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:SquareBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-SquareBox

__BEGIN_METHOD_CODE__

SquareBox::SquareBox(const SquareBox& box)
{}

__END_METHOD_CODE__


	METHOD SquareBox!SquareBox
		CALLS
		thesize : Box



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SquareBox
			CLASSID 41
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD SquareBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SquareBox CLASSID:41 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:SquareBox METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-SquareBox

__BEGIN_METHOD_CODE__

SquareBox::SquareBox(BoxCoordinate s)
{
	thesize() = s;
    }

__END_METHOD_CODE__


	METHOD SquareBox!dup
		CALLS
		SquareBox : SquareBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SquareBox
			CLASSID 41
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SquareBox CLASSID:41 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dup

__BEGIN_METHOD_CODE__

SquareBox::dup()
{ return new SquareBox(*this); }

__END_METHOD_CODE__


	METHOD LineBox!LineBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LineBox
			CLASSID 42
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LineBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LineBox CLASSID:42 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LineBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-LineBox

__BEGIN_METHOD_CODE__

LineBox::LineBox(const LineBox& box)
{}

__END_METHOD_CODE__


	METHOD LineBox!matches
		CALLS
		matches : PrimitiveBox



		METRICS
			_linethickness REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 1
			CLASS LineBox
			CLASSID 42
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD matches
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:1 CLASS:LineBox CLASSID:42 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:matches METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-matches

__BEGIN_METHOD_CODE__

LineBox::matches(const Box &b, const Box * = 0)
{
	return PrimitiveBox::matches(b) &&
	    _linethickness == ((LineBox *)&b)->_linethickness;   
    }

__END_METHOD_CODE__


	METHOD LineBox!LineBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LineBox
			CLASSID 42
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LineBox
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LineBox CLASSID:42 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LineBox METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-LineBox

__BEGIN_METHOD_CODE__

LineBox::LineBox(BoxCoordinate linethickness = 1, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD LineBox!linethickness

		METRICS
			_linethickness REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 0
			CLASS LineBox
			CLASSID 42
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD linethickness
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:0 CLASS:LineBox CLASSID:42 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:linethickness METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-linethickness

__BEGIN_METHOD_CODE__

LineBox::linethickness()
{ return _linethickness; }

__END_METHOD_CODE__


	METHOD ArcBox!ArcBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArcBox
			CLASSID 43
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArcBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArcBox CLASSID:43 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArcBox METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-ArcBox

__BEGIN_METHOD_CODE__

ArcBox::ArcBox(const ArcBox& box)
{}

__END_METHOD_CODE__


	METHOD ArcBox!matches
		CALLS
		matches : LineBox



		METRICS
			_start REFERRED 2 TIMES,
			_length REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 1
			CLASS ArcBox
			CLASSID 43
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 5
			LT 0
			METHOD matches
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:1 CLASS:ArcBox CLASSID:43 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:5 LT:0 METHOD:matches METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 5-matches

__BEGIN_METHOD_CODE__

ArcBox::matches(const Box &b, const Box * = 0)
{
	return LineBox::matches(b) &&
	    _start == ((ArcBox *)&b)->_start &&
	    _length == ((ArcBox *)&b)->_length;  
    }

__END_METHOD_CODE__


	METHOD ArcBox!ArcBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArcBox
			CLASSID 43
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArcBox
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArcBox CLASSID:43 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArcBox METHODID:6 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-ArcBox

__BEGIN_METHOD_CODE__

ArcBox::ArcBox(BoxDegrees start, BoxDegrees length, BoxCoordinate linethickness = 1, 
	char * t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD ArcBox!dup
		CALLS
		ArcBox : ArcBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ArcBox
			CLASSID 43
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ArcBox CLASSID:43 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-dup

__BEGIN_METHOD_CODE__

ArcBox::dup()
{ return new ArcBox(*this); }

__END_METHOD_CODE__


	METHOD ArcBox!start

		METRICS
			_start REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS ArcBox
			CLASSID 43
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD start
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:ArcBox CLASSID:43 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:start METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-start

__BEGIN_METHOD_CODE__

ArcBox::start()
{ return _start; }

__END_METHOD_CODE__


	METHOD ArcBox!length

		METRICS
			_length REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS ArcBox
			CLASSID 43
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD length
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:ArcBox CLASSID:43 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:length METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-length

__BEGIN_METHOD_CODE__

ArcBox::length()
{ return _length; }

__END_METHOD_CODE__

#====================================================================
#File ../../code/ddd-3.0/ddd/ArcBox.o.nu.cls	 Class Number = 8
#====================================================================
#Process file  ../../code/ddd-3.0/ddd/BinBox.o.nu.cls


	METHOD HatBox!HatBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HatBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HatBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-HatBox

__BEGIN_METHOD_CODE__

HatBox::HatBox(const HatBox& box)
{}

__END_METHOD_CODE__


	METHOD HatBox!matches
		CALLS
		matches : Box



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:matches METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-matches

__BEGIN_METHOD_CODE__

HatBox::matches(const Box &b, const Box * = 0)
{
	return Box::matches(b) && *_box == *(((HatBox *)&b)->_box);
    }

__END_METHOD_CODE__


	METHOD HatBox!findTag
		CALLS
		findTag : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD findTag
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:findTag METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-findTag

__BEGIN_METHOD_CODE__

HatBox::findTag(const BoxPoint& p)
{
	return _box->findTag(p);
    }

__END_METHOD_CODE__


	METHOD HatBox!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_=

__BEGIN_METHOD_CODE__

HatBox::operator_=(const HatBox&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD HatBox!HatBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HatBox
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HatBox METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-HatBox

__BEGIN_METHOD_CODE__

HatBox::HatBox(Box *box, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD HatBox!~HatBox
		CALLS




		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD ~HatBox
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:~HatBox METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-~HatBox

__BEGIN_METHOD_CODE__

HatBox::~HatBox()
{ _box->unlink(); }

__END_METHOD_CODE__


	METHOD HatBox!box

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD box
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:box METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-box

__BEGIN_METHOD_CODE__

HatBox::box()
{ return _box; }

__END_METHOD_CODE__


	METHOD HatBox!resize
		CALLS
		resize : _SYSTEM_OR_USER_,
		thesize : Box,
		size : _SYSTEM_OR_USER_,
		theextend : Box,
		extend : Box



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 5
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 6
			LT 0
			METHOD resize
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:5 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:6 LT:0 METHOD:resize METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-resize

__BEGIN_METHOD_CODE__

HatBox::resize()
{ 
	_box->resize();
	thesize() = _box->size();
	theextend() = _box->extend();
	return this; 
    }

__END_METHOD_CODE__


	METHOD HatBox!newFont
		CALLS
		newFont : _SYSTEM_OR_USER_,
		resize : HatBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD newFont
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:newFont METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-newFont

__BEGIN_METHOD_CODE__

HatBox::newFont(const string& font)
{ _box->newFont(font); resize(); }

__END_METHOD_CODE__


	METHOD HatBox!countMatchBoxes
		CALLS
		countMatchBoxes : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD countMatchBoxes
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:countMatchBoxes METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-countMatchBoxes

__BEGIN_METHOD_CODE__

HatBox::countMatchBoxes(int instances[])
{
	_box->countMatchBoxes(instances);
    }

__END_METHOD_CODE__


	METHOD HatBox!corner
		CALLS
		corner : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD corner
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:corner METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-corner

__BEGIN_METHOD_CODE__

HatBox::corner()
{ return _box->corner(); }

__END_METHOD_CODE__


	METHOD HatBox!str
		CALLS
		str : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HatBox
			CLASSID 44
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD str
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HatBox CLASSID:44 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:str METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-str

__BEGIN_METHOD_CODE__

HatBox::str()
{ return _box->str(); }

__END_METHOD_CODE__


	METHOD BinBox!BinBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BinBox
			CLASSID 45
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BinBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BinBox CLASSID:45 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BinBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-BinBox

__BEGIN_METHOD_CODE__

BinBox::BinBox(const BinBox& box)
{}

__END_METHOD_CODE__


	METHOD BinBox!BinBox
		CALLS
		theextend : Box,
		extend : Box,
		theextend : Box,
		extend : Box



		METRICS
			ARRAYOP 2
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS BinBox
			CLASSID 45
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD BinBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:BinBox CLASSID:45 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:BinBox METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-BinBox

__BEGIN_METHOD_CODE__

BinBox::BinBox(Box *box, char *t = _REMOVED_STR_)
{ 
	theextend()[_ARGS_] = extend(X) > 0;
	theextend()[_ARGS_] = extend(Y) > 0;
    }

__END_METHOD_CODE__


	METHOD BinBox!resize
		CALLS
		resize : HatBox,
		theextend : Box,
		extend : Box,
		theextend : Box,
		extend : Box



		METRICS
			ARRAYOP 2
			ASS 2
			AVVARLEN 0
			CALLEDN 5
			CLASS BinBox
			CLASSID 45
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 2
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD resize
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:0 CALLEDN:5 CLASS:BinBox CLASSID:45 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:2 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:resize METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-resize

__BEGIN_METHOD_CODE__

BinBox::resize()
{
	HatBox::resize();
	theextend()[_ARGS_] = extend(X) > 0;
	theextend()[_ARGS_] = extend(Y) > 0;

	return this;
    }

__END_METHOD_CODE__


	METHOD BinBox!dup
		CALLS
		BinBox : BinBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS BinBox
			CLASSID 45
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:BinBox CLASSID:45 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

BinBox::dup()
{ return new BinBox(*this); }

__END_METHOD_CODE__

#====================================================================
#File ../../code/ddd-3.0/ddd/BinBox.o.nu.cls	 Class Number = 2
#====================================================================
#Process file  ../../code/ddd-3.0/ddd/Box.o.nu.cls


	METHOD TransparentHatBox!matchMe
		CALLS
		matchMe : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TransparentHatBox
			CLASSID 46
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD matchMe
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TransparentHatBox CLASSID:46 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:matchMe METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-matchMe

__BEGIN_METHOD_CODE__

TransparentHatBox::matchMe()
{ return _box->matchMe(); }

__END_METHOD_CODE__


	METHOD TransparentHatBox!TransparentHatBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TransparentHatBox
			CLASSID 46
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TransparentHatBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TransparentHatBox CLASSID:46 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TransparentHatBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-TransparentHatBox

__BEGIN_METHOD_CODE__

TransparentHatBox::TransparentHatBox(const TransparentHatBox& box)
{}

__END_METHOD_CODE__


	METHOD TransparentHatBox!dump
		CALLS
		dump : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TransparentHatBox
			CLASSID 46
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD dump
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TransparentHatBox CLASSID:46 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:dump METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-dump

__BEGIN_METHOD_CODE__

TransparentHatBox::dump(ostream& s)
{ _box->dump(s); }

__END_METHOD_CODE__


	METHOD TransparentHatBox!TransparentHatBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TransparentHatBox
			CLASSID 46
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TransparentHatBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TransparentHatBox CLASSID:46 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TransparentHatBox METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-TransparentHatBox

__BEGIN_METHOD_CODE__

TransparentHatBox::TransparentHatBox(Box *box)
{}

__END_METHOD_CODE__


	METHOD MarkBox!MarkBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MarkBox
			CLASSID 47
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD MarkBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MarkBox CLASSID:47 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:MarkBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-MarkBox

__BEGIN_METHOD_CODE__

MarkBox::MarkBox(const MarkBox& box)
{}

__END_METHOD_CODE__


	METHOD MarkBox!MarkBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MarkBox
			CLASSID 47
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD MarkBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MarkBox CLASSID:47 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:MarkBox METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-MarkBox

__BEGIN_METHOD_CODE__

MarkBox::MarkBox(Box *box)
{}

__END_METHOD_CODE__


	METHOD MarkBox!dup
		CALLS
		MarkBox : MarkBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS MarkBox
			CLASSID 47
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:MarkBox CLASSID:47 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dup

__BEGIN_METHOD_CODE__

MarkBox::dup()
{ return new MarkBox(*this); }

__END_METHOD_CODE__


	METHOD MarkBox!__region

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MarkBox
			CLASSID 47
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD __region
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MarkBox CLASSID:47 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:__region METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-__region

__BEGIN_METHOD_CODE__

MarkBox::__region()
{ return _region; }

__END_METHOD_CODE__


	METHOD TagBox!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

TagBox::operator_=(const TagBox&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD TagBox!TagBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TagBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TagBox METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-TagBox

__BEGIN_METHOD_CODE__

TagBox::TagBox(const TagBox& tagbox)
{}

__END_METHOD_CODE__


	METHOD TagBox!TagBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TagBox
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TagBox METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-TagBox

__BEGIN_METHOD_CODE__

TagBox::TagBox(Box *box, Data *dta = 0, DataLink *dl = 0)
{}

__END_METHOD_CODE__


	METHOD TagBox!dup
		CALLS
		TagBox : TagBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-dup

__BEGIN_METHOD_CODE__

TagBox::dup()
{ return new TagBox(*this); }

__END_METHOD_CODE__


	METHOD TagBox!link
		CALLS
		dup : TagBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD link
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:link METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-link

__BEGIN_METHOD_CODE__

TagBox::link()
{
	 
	 
         

	return dup();
    }

__END_METHOD_CODE__


	METHOD TagBox!~TagBox

		METRICS
			datalink REFERRED 1 TIMES,
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD ~TagBox
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:~TagBox METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 8-~TagBox

__BEGIN_METHOD_CODE__

TagBox::~TagBox()
{ (*(datalink->unlink))(_data); }

__END_METHOD_CODE__


	METHOD TagBox!__data

		METRICS
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD __data
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:__data METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-__data

__BEGIN_METHOD_CODE__

TagBox::__data()
{ return _data; }

__END_METHOD_CODE__


	METHOD TagBox!__selected

		METRICS
			datalink REFERRED 1 TIMES,
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD __selected
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:__selected METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 10-__selected

__BEGIN_METHOD_CODE__

TagBox::__selected()
{ return(*(datalink->selected))(_data); }

__END_METHOD_CODE__


	METHOD TagBox!__name

		METRICS
			datalink REFERRED 1 TIMES,
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD __name
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:__name METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 11-__name

__BEGIN_METHOD_CODE__

TagBox::__name()
{ return(*(datalink->name))(_data); }

__END_METHOD_CODE__


	METHOD TagBox!__info

		METRICS
			datalink REFERRED 1 TIMES,
			_data REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS TagBox
			CLASSID 48
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD __info
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:TagBox CLASSID:48 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:__info METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 12-__info

__BEGIN_METHOD_CODE__

TagBox::__info()
{ return(*(datalink->info))(_data); }

__END_METHOD_CODE__

#=================================================================
#File ../../code/ddd-3.0/ddd/Box.o.nu.cls	 Class Number = 4
#=================================================================
#Process file  ../../code/ddd-3.0/ddd/BoxD.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/BoxExtend.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/BoxRegion.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/BoxSize.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ColorBox.o.nu.cls


	METHOD ColorBox!ColorBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ColorBox
			CLASSID 50
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ColorBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ColorBox CLASSID:50 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ColorBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-ColorBox

__BEGIN_METHOD_CODE__

ColorBox::ColorBox(const ColorBox& box)
{}

__END_METHOD_CODE__


	METHOD ColorBox!ColorBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ColorBox
			CLASSID 50
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ColorBox
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ColorBox CLASSID:50 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ColorBox METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-ColorBox

__BEGIN_METHOD_CODE__

ColorBox::ColorBox(Box *box, const string& name)
{}

__END_METHOD_CODE__


	METHOD ColorBox!color_name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ColorBox
			CLASSID 50
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD color_name
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ColorBox CLASSID:50 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:color_name METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-color_name

__BEGIN_METHOD_CODE__

ColorBox::color_name()
{ return _color_name; }

__END_METHOD_CODE__


	METHOD ColorBox!color_valid

		METRICS
			_color_valid REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS ColorBox
			CLASSID 50
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD color_valid
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:ColorBox CLASSID:50 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:color_valid METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-color_valid

__BEGIN_METHOD_CODE__

ColorBox::color_valid()
{ return _color_valid; }

__END_METHOD_CODE__


	METHOD ColorBox!color_failed

		METRICS
			_color_failed REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 13
			CALLEDN 0
			CLASS ColorBox
			CLASSID 50
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD color_failed
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:13 CALLEDN:0 CLASS:ColorBox CLASSID:50 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:color_failed METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-color_failed

__BEGIN_METHOD_CODE__

ColorBox::color_failed()
{ return _color_failed; }

__END_METHOD_CODE__


	METHOD ColorBox!color

		METRICS
			_color REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS ColorBox
			CLASSID 50
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD color
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:ColorBox CLASSID:50 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:color METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-color

__BEGIN_METHOD_CODE__

ColorBox::color()
{  ; return _color; }

__END_METHOD_CODE__


	METHOD ForegroundColorBox!ForegroundColorBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ForegroundColorBox
			CLASSID 51
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ForegroundColorBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ForegroundColorBox CLASSID:51 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ForegroundColorBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-ForegroundColorBox

__BEGIN_METHOD_CODE__

ForegroundColorBox::ForegroundColorBox(const ForegroundColorBox& box)
{}

__END_METHOD_CODE__


	METHOD ForegroundColorBox!ForegroundColorBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ForegroundColorBox
			CLASSID 51
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ForegroundColorBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ForegroundColorBox CLASSID:51 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ForegroundColorBox METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-ForegroundColorBox

__BEGIN_METHOD_CODE__

ForegroundColorBox::ForegroundColorBox(Box *box, const string& name)
{}

__END_METHOD_CODE__


	METHOD ForegroundColorBox!dup
		CALLS
		ForegroundColorBox : ForegroundColorBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ForegroundColorBox
			CLASSID 51
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ForegroundColorBox CLASSID:51 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dup

__BEGIN_METHOD_CODE__

ForegroundColorBox::dup()
{ return new ForegroundColorBox(*this); }

__END_METHOD_CODE__


	METHOD BackgroundColorBox!BackgroundColorBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BackgroundColorBox
			CLASSID 52
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BackgroundColorBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BackgroundColorBox CLASSID:52 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BackgroundColorBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-BackgroundColorBox

__BEGIN_METHOD_CODE__

BackgroundColorBox::BackgroundColorBox(const BackgroundColorBox& box)
{}

__END_METHOD_CODE__


	METHOD BackgroundColorBox!BackgroundColorBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BackgroundColorBox
			CLASSID 52
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BackgroundColorBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BackgroundColorBox CLASSID:52 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BackgroundColorBox METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-BackgroundColorBox

__BEGIN_METHOD_CODE__

BackgroundColorBox::BackgroundColorBox(Box *box, const string& name)
{}

__END_METHOD_CODE__


	METHOD BackgroundColorBox!dup
		CALLS
		BackgroundColorBox : BackgroundColorBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS BackgroundColorBox
			CLASSID 52
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:BackgroundColorBox CLASSID:52 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dup

__BEGIN_METHOD_CODE__

BackgroundColorBox::dup()
{ return new BackgroundColorBox(*this); }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/ColorBox.o.nu.cls	 Class Number = 3
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/CompositeB.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/DiagBox.o.nu.cls


	METHOD FontTable!FontTable

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FontTable
			CLASSID 53
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FontTable
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FontTable CLASSID:53 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FontTable METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-FontTable

__BEGIN_METHOD_CODE__

FontTable::FontTable(const FontTable&)
{  ; }

__END_METHOD_CODE__


	METHOD FontTable!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FontTable
			CLASSID 53
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FontTable CLASSID:53 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-operator_=

__BEGIN_METHOD_CODE__

FontTable::operator_=(const FontTable&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD FontTable!FontTable

		METRICS
			table REFERRED 2 TIMES,
			ARRAYOP 2
			ASS 3
			AVVARLEN 5
			CALLEDN 0
			CLASS FontTable
			CLASSID 53
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 1
			METHOD FontTable
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:2 ASS:3 AVVARLEN:5 CALLEDN:0 CLASS:FontTable CLASSID:53 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:1 METHOD:FontTable METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-FontTable

__BEGIN_METHOD_CODE__

FontTable::FontTable(Display *display)
{
	for(unsigned i = 0; i < 511 ; i++)
	{
	    table[_ARGS_].font = 0;
	    table[_ARGS_].name = _REMOVED_STR_;
	}
    }

__END_METHOD_CODE__


	METHOD FontTable!~FontTable
		CALLS
		XFreeFont : _SYSTEM_OR_USER_



		METRICS
			table REFERRED 2 TIMES,
			_display REFERRED 1 TIMES,
			ARRAYOP 2
			ASS 2
			AVVARLEN 6
			CALLEDN 1
			CLASS FontTable
			CLASSID 53
			CYCLO 3
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 1
			METHOD ~FontTable
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:2 ASS:2 AVVARLEN:6 CALLEDN:1 CLASS:FontTable CLASSID:53 CYCLO:3 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:1 METHOD:~FontTable METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:2 
		;


#ID 3-~FontTable

__BEGIN_METHOD_CODE__

FontTable::~FontTable()
{
	for(unsigned i = 0; i < 511 ; i++)
	    if(table[_ARGS_].font != 0)
		XFreeFont(_display, table[_ARGS_].font);
    }

__END_METHOD_CODE__


	METHOD StringBox!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

StringBox::operator_=(const StringBox&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD StringBox!StringBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD StringBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:StringBox METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-StringBox

__BEGIN_METHOD_CODE__

StringBox::StringBox(const StringBox& box)
{}

__END_METHOD_CODE__


	METHOD StringBox!matches
		CALLS
		matches : PrimitiveBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD matches
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:matches METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-matches

__BEGIN_METHOD_CODE__

StringBox::matches(const Box &b, const Box * = 0)
{
	return PrimitiveBox::matches(b) &&
	    _string == ((StringBox *)&b)->_string;   
    }

__END_METHOD_CODE__


	METHOD StringBox!StringBox
		CALLS
		newFont : StringBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD StringBox
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:StringBox METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-StringBox

__BEGIN_METHOD_CODE__

StringBox::StringBox(const string& s = _REMOVED_STR_, const string& fontname = _REMOVED_STR_,
	char *t = _REMOVED_STR_)
{
	newFont(fontname);
    }

__END_METHOD_CODE__


	METHOD StringBox!StringBox
		CALLS
		resize : StringBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD StringBox
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:StringBox METHODID:6 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-StringBox

__BEGIN_METHOD_CODE__

StringBox::StringBox(const string& s, XFontStruct *fnt,
	char *t = _REMOVED_STR_)
{
	resize();
    }

__END_METHOD_CODE__


	METHOD StringBox!dup
		CALLS
		StringBox : StringBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-dup

__BEGIN_METHOD_CODE__

StringBox::dup()
{ return new StringBox(*this); }

__END_METHOD_CODE__


	METHOD StringBox!_newFont
		CALLS
		resize : StringBox



		METRICS
			_font REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 5
			CALLEDN 1
			CLASS StringBox
			CLASSID 54
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD _newFont
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:5 CALLEDN:1 CLASS:StringBox CLASSID:54 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:_newFont METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-_newFont

__BEGIN_METHOD_CODE__

StringBox::_newFont(XFontStruct *newfont)
{
	 
	if(newfont != _font)
	{
	    _font = newfont;
	    resize();
	}
    }

__END_METHOD_CODE__


	METHOD StringBox!font

		METRICS
			_font REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD font
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:font METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-font

__BEGIN_METHOD_CODE__

StringBox::font()
{ return _font; }

__END_METHOD_CODE__


	METHOD StringBox!fontName

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD fontName
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:fontName METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-fontName

__BEGIN_METHOD_CODE__

StringBox::fontName()
{ return _fontname; }

__END_METHOD_CODE__


	METHOD StringBox!str

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD str
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:str METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-str

__BEGIN_METHOD_CODE__

StringBox::str()
{ return _string; }

__END_METHOD_CODE__


	METHOD StringBox!isStringBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StringBox
			CLASSID 54
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isStringBox
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StringBox CLASSID:54 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isStringBox METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-isStringBox

__BEGIN_METHOD_CODE__

StringBox::isStringBox()
{ return true; }

__END_METHOD_CODE__


	METHOD DiagBox!DiagBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DiagBox
			CLASSID 55
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DiagBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DiagBox CLASSID:55 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DiagBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-DiagBox

__BEGIN_METHOD_CODE__

DiagBox::DiagBox(const DiagBox& box)
{}

__END_METHOD_CODE__


	METHOD DiagBox!DiagBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DiagBox
			CLASSID 55
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DiagBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DiagBox CLASSID:55 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DiagBox METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-DiagBox

__BEGIN_METHOD_CODE__

DiagBox::DiagBox(char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD DiagBox!dup
		CALLS
		DiagBox : DiagBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DiagBox
			CLASSID 55
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DiagBox CLASSID:55 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

DiagBox::dup()
{ return new DiagBox(*this); }

__END_METHOD_CODE__


	METHOD DiagBox!_print

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DiagBox
			CLASSID 55
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _print
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DiagBox CLASSID:55 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_print METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-_print

__BEGIN_METHOD_CODE__

DiagBox::_print(ostream&, 
			const BoxRegion&, 
			const BoxPrintGC&)
{
	 
    }

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/DiagBox.o.nu.cls	 Class Number = 3
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/DummyBox.o.nu.cls


	METHOD ListBox!_head
		CALLS
		_child : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _head
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_head METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_head

__BEGIN_METHOD_CODE__

ListBox::_head()
{ return _child(0); }

__END_METHOD_CODE__


	METHOD ListBox!_tail
		CALLS
		_child : CompositeBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _tail
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_tail METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_tail

__BEGIN_METHOD_CODE__

ListBox::_tail()
{ return _child(1); }

__END_METHOD_CODE__


	METHOD ListBox!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-operator_=

__BEGIN_METHOD_CODE__

ListBox::operator_=(const ListBox&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD ListBox!head

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD head
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:head METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-head

__BEGIN_METHOD_CODE__

ListBox::head()
{ 
	return CompositeBox::operator[](0); 
    }

__END_METHOD_CODE__


	METHOD ListBox!tail

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD tail
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:tail METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-tail

__BEGIN_METHOD_CODE__

ListBox::tail()
{ 
	return(const ListBox *)CompositeBox::operator[](1);
    }

__END_METHOD_CODE__


	METHOD ListBox!head

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD head
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:head METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-head

__BEGIN_METHOD_CODE__

ListBox::head()
{ 
	return CompositeBox::operator[](0); 
    }

__END_METHOD_CODE__


	METHOD ListBox!tail

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD tail
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:tail METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-tail

__BEGIN_METHOD_CODE__

ListBox::tail()
{ 
	return(ListBox *)CompositeBox::operator[](1);
    }

__END_METHOD_CODE__


	METHOD ListBox!isEmpty
		CALLS
		nchildren : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isEmpty
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isEmpty METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-isEmpty

__BEGIN_METHOD_CODE__

ListBox::isEmpty()
{ return nchildren() == 0; }

__END_METHOD_CODE__


	METHOD ListBox!relast
		CALLS
		isEmpty : public,
		_relast : ListBox



		METRICS
			_last REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 2
			CLASS ListBox
			CLASSID 56
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD relast
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:2 CLASS:ListBox CLASSID:56 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:relast METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-relast

__BEGIN_METHOD_CODE__

ListBox::relast()
{
	if(_last == 0 || !_last->isEmpty())
	    _relast();
    }

__END_METHOD_CODE__


	METHOD ListBox!ListBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ListBox
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ListBox METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-ListBox

__BEGIN_METHOD_CODE__

ListBox::ListBox(const ListBox& box)
{}

__END_METHOD_CODE__


	METHOD ListBox!_draw
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD _draw
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:_draw METHODID:11 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-_draw

__BEGIN_METHOD_CODE__

ListBox::_draw(Widget, 
		       const BoxRegion&, 
		       const BoxRegion&,
		       GC, 
		       bool)
{
	 ;   
	::abort();
    }

__END_METHOD_CODE__


	METHOD ListBox!ListBox
		CALLS
		thesize : Box,
		BoxSize : BoxSize,
		theextend : Box,
		BoxExtend : BoxExtend,
		addChild : _SYSTEM_OR_USER_,
		addChild : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 6
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD ListBox
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:6 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:ListBox METHODID:13 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-ListBox

__BEGIN_METHOD_CODE__

ListBox::ListBox(Box *hd, ListBox *tl, char *t = _REMOVED_STR_)
{
	thesize()   = BoxSize();
	theextend() = BoxExtend();

	addChild(hd);
	addChild(tl);
    }

__END_METHOD_CODE__


	METHOD ListBox!ListBox
		CALLS
		thesize : Box,
		BoxSize : BoxSize,
		theextend : Box,
		BoxExtend : BoxExtend



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD ListBox
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:ListBox METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-ListBox

__BEGIN_METHOD_CODE__

ListBox::ListBox(char *t = _REMOVED_STR_)
{
	thesize()   = BoxSize();
	theextend() = BoxExtend();
    }

__END_METHOD_CODE__


	METHOD ListBox!dup
		CALLS
		ListBox : ListBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-dup

__BEGIN_METHOD_CODE__

ListBox::dup()
{ return new ListBox(*this); }

__END_METHOD_CODE__


	METHOD ListBox!operator_+=
		CALLS
		relast : ListBox,
		addChild : _SYSTEM_OR_USER_,
		addChild : _SYSTEM_OR_USER_,




		METRICS
			_last REFERRED 3 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 5
			CALLEDN 4
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 8
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 12
			LT 0
			METHOD operator_+=
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 7
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:5 CALLEDN:4 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:8 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:12 LT:0 METHOD:operator_+= METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:7 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-operator_+=

__BEGIN_METHOD_CODE__

ListBox::operator_+=(Box *b)
{
	relast();

	ListBox *l = new ListBox;    
	((ListBox *)_last)->addChild(b);  
	((ListBox *)_last)->addChild(l);  

	l->unlink();     
	_last = l;

	return *this;
    }

__END_METHOD_CODE__


	METHOD ListBox!sublist
		CALLS
		isEmpty : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS ListBox
			CLASSID 56
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 7
			LT 1
			METHOD sublist
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:ListBox CLASSID:56 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:7 LT:1 METHOD:sublist METHODID:18 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-sublist

__BEGIN_METHOD_CODE__

ListBox::sublist(int start = 1)
{
	const ListBox *t = this;
	for(int i = 0; !t->isEmpty() && i < start; i++)
	    t = t->tail();

	return t;
    }

__END_METHOD_CODE__


	METHOD ListBox!operator_[]
		CALLS
		sublist : ListBox,
		isEmpty : _SYSTEM_OR_USER_,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 3
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 4
			LT 0
			METHOD operator_[]
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:3 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:4 LT:0 METHOD:operator_[] METHODID:-1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:1 USEDVARS:0 
		;


#ID -1-operator_[]

__BEGIN_METHOD_CODE__

ListBox::operator_[](int nchild)
{
	const ListBox *t = sublist(nchild);
	return t->isEmpty() ? 0 : t->head();
    }

__END_METHOD_CODE__


	METHOD ListBox!length
		CALLS
		isEmpty : _SYSTEM_OR_USER_,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 2
			CLASS ListBox
			CLASSID 56
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 7
			LT 0
			METHOD length
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 1
			RETPOINT 1
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:2 CLASS:ListBox CLASSID:56 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:7 LT:0 METHOD:length METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:1 RETPOINT:1 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-length

__BEGIN_METHOD_CODE__

ListBox::length()
{
	const ListBox *t = this;
	int i;
	for(i = 0; !t->isEmpty(); i++)
	    t = t->tail();
	return i;
    }

__END_METHOD_CODE__


	METHOD ListBox!isListBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isListBox
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isListBox METHODID:22 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-isListBox

__BEGIN_METHOD_CODE__

ListBox::isListBox()
{ return true; }

__END_METHOD_CODE__


	METHOD ListBox!_print
		CALLS
		abort : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListBox
			CLASSID 56
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD _print
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListBox CLASSID:56 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:_print METHODID:23 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-_print

__BEGIN_METHOD_CODE__

ListBox::_print(ostream&, const BoxRegion&, const BoxPrintGC&)
{
	 ;   
	::abort();
    }

__END_METHOD_CODE__


	METHOD DummyBox!DummyBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyBox
			CLASSID 57
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DummyBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyBox CLASSID:57 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DummyBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-DummyBox

__BEGIN_METHOD_CODE__

DummyBox::DummyBox(const DummyBox& box)
{}

__END_METHOD_CODE__


	METHOD DummyBox!DummyBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyBox
			CLASSID 57
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DummyBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyBox CLASSID:57 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DummyBox METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-DummyBox

__BEGIN_METHOD_CODE__

DummyBox::DummyBox(char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD DummyBox!dup
		CALLS
		DummyBox : DummyBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DummyBox
			CLASSID 57
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DummyBox CLASSID:57 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

DummyBox::dup()
{ return new DummyBox(*this); }

__END_METHOD_CODE__


	METHOD DummyBox!isDummyBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyBox
			CLASSID 57
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isDummyBox
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyBox CLASSID:57 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isDummyBox METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-isDummyBox

__BEGIN_METHOD_CODE__

DummyBox::isDummyBox()
{ return true; }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/DummyBox.o.nu.cls	 Class Number = 2
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/FixBox.o.nu.cls


	METHOD FixBox!FixBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FixBox
			CLASSID 58
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FixBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FixBox CLASSID:58 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FixBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-FixBox

__BEGIN_METHOD_CODE__

FixBox::FixBox(const FixBox& box)
{}

__END_METHOD_CODE__


	METHOD FixBox!FixBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FixBox
			CLASSID 58
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FixBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FixBox CLASSID:58 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FixBox METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-FixBox

__BEGIN_METHOD_CODE__

FixBox::FixBox(Box *box, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD HFixBox!HFixBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HFixBox
			CLASSID 59
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HFixBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HFixBox CLASSID:59 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HFixBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-HFixBox

__BEGIN_METHOD_CODE__

HFixBox::HFixBox(const HFixBox& box)
{}

__END_METHOD_CODE__


	METHOD HFixBox!HFixBox
		CALLS
		theextend : Box,
		fix : BoxExtend



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS HFixBox
			CLASSID 59
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HFixBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:HFixBox CLASSID:59 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HFixBox METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-HFixBox

__BEGIN_METHOD_CODE__

HFixBox::HFixBox(Box *box, char *t = _REMOVED_STR_)
{ theextend().fix(X); }

__END_METHOD_CODE__


	METHOD HFixBox!resize
		CALLS
		resize : HatBox,
		theextend : Box,
		fix : BoxExtend



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS HFixBox
			CLASSID 59
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD resize
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:HFixBox CLASSID:59 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:resize METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-resize

__BEGIN_METHOD_CODE__

HFixBox::resize()
{
	HatBox::resize();
	theextend().fix(X);

	return this;
    }

__END_METHOD_CODE__


	METHOD HFixBox!dup
		CALLS
		HFixBox : HFixBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HFixBox
			CLASSID 59
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HFixBox CLASSID:59 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

HFixBox::dup()
{ return new HFixBox(*this); }

__END_METHOD_CODE__


	METHOD VFixBox!VFixBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VFixBox
			CLASSID 60
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VFixBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VFixBox CLASSID:60 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VFixBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-VFixBox

__BEGIN_METHOD_CODE__

VFixBox::VFixBox(const VFixBox& box)
{}

__END_METHOD_CODE__


	METHOD VFixBox!VFixBox
		CALLS
		theextend : Box,
		fix : BoxExtend



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VFixBox
			CLASSID 60
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VFixBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VFixBox CLASSID:60 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VFixBox METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-VFixBox

__BEGIN_METHOD_CODE__

VFixBox::VFixBox(Box *box, char *t = _REMOVED_STR_)
{ theextend().fix(Y); }

__END_METHOD_CODE__


	METHOD VFixBox!resize
		CALLS
		resize : HatBox,
		theextend : Box,
		fix : BoxExtend



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS VFixBox
			CLASSID 60
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD resize
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:VFixBox CLASSID:60 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:resize METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-resize

__BEGIN_METHOD_CODE__

VFixBox::resize()
{
	HatBox::resize();
	theextend().fix(Y);

	return this;
    }

__END_METHOD_CODE__


	METHOD VFixBox!dup
		CALLS
		VFixBox : VFixBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VFixBox
			CLASSID 60
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VFixBox CLASSID:60 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

VFixBox::dup()
{ return new VFixBox(*this); }

__END_METHOD_CODE__

#====================================================================
#File ../../code/ddd-3.0/ddd/FixBox.o.nu.cls	 Class Number = 3
#====================================================================
#Process file  ../../code/ddd-3.0/ddd/FontTable.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/HatBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/LineBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ListBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/MarkBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/MatchBox.o.nu.cls


	METHOD MatchBox!MatchBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MatchBox
			CLASSID 61
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD MatchBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MatchBox CLASSID:61 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:MatchBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-MatchBox

__BEGIN_METHOD_CODE__

MatchBox::MatchBox(const MatchBox& box)
{}

__END_METHOD_CODE__


	METHOD MatchBox!MatchBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MatchBox
			CLASSID 61
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD MatchBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MatchBox CLASSID:61 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:MatchBox METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-MatchBox

__BEGIN_METHOD_CODE__

MatchBox::MatchBox(int d, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD MatchBox!dup
		CALLS
		MatchBox : MatchBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS MatchBox
			CLASSID 61
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:MatchBox CLASSID:61 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

MatchBox::dup()
{ return new MatchBox(*this); }

__END_METHOD_CODE__


	METHOD MatchBox!countMatchBoxes

		METRICS
			ARRAYOP 1
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS MatchBox
			CLASSID 61
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD countMatchBoxes
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 1
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:MatchBox CLASSID:61 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:countMatchBoxes METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:1 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-countMatchBoxes

__BEGIN_METHOD_CODE__

MatchBox::countMatchBoxes(int instances[])
{
	instances[_ARGS_]++;
    }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/MatchBox.o.nu.cls	 Class Number = 1
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/PrimitiveB.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/SlopeBox.o.nu.cls


	METHOD SlopeBox!SlopeBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SlopeBox
			CLASSID 62
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD SlopeBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SlopeBox CLASSID:62 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:SlopeBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-SlopeBox

__BEGIN_METHOD_CODE__

SlopeBox::SlopeBox(const SlopeBox& box)
{}

__END_METHOD_CODE__


	METHOD SlopeBox!SlopeBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SlopeBox
			CLASSID 62
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD SlopeBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SlopeBox CLASSID:62 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:SlopeBox METHODID:1 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-SlopeBox

__BEGIN_METHOD_CODE__

SlopeBox::SlopeBox(BoxCoordinate linethickness = 1, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD SlopeBox!~SlopeBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SlopeBox
			CLASSID 62
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~SlopeBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SlopeBox CLASSID:62 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~SlopeBox METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-~SlopeBox

__BEGIN_METHOD_CODE__

SlopeBox::~SlopeBox()
{}

__END_METHOD_CODE__


	METHOD RiseBox!RiseBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RiseBox
			CLASSID 63
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD RiseBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RiseBox CLASSID:63 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:RiseBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-RiseBox

__BEGIN_METHOD_CODE__

RiseBox::RiseBox(const RiseBox& box)
{}

__END_METHOD_CODE__


	METHOD RiseBox!RiseBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RiseBox
			CLASSID 63
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD RiseBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RiseBox CLASSID:63 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:RiseBox METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-RiseBox

__BEGIN_METHOD_CODE__

RiseBox::RiseBox(BoxCoordinate linethickness = 1, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD RiseBox!~RiseBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RiseBox
			CLASSID 63
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~RiseBox
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RiseBox CLASSID:63 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~RiseBox METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-~RiseBox

__BEGIN_METHOD_CODE__

RiseBox::~RiseBox()
{}

__END_METHOD_CODE__


	METHOD RiseBox!dup
		CALLS
		RiseBox : RiseBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS RiseBox
			CLASSID 63
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:RiseBox CLASSID:63 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup

__BEGIN_METHOD_CODE__

RiseBox::dup()
{ return new RiseBox(*this); }

__END_METHOD_CODE__


	METHOD FallBox!FallBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FallBox
			CLASSID 64
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FallBox
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FallBox CLASSID:64 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FallBox METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-FallBox

__BEGIN_METHOD_CODE__

FallBox::FallBox(const FallBox& box)
{}

__END_METHOD_CODE__


	METHOD FallBox!FallBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FallBox
			CLASSID 64
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FallBox
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FallBox CLASSID:64 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FallBox METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-FallBox

__BEGIN_METHOD_CODE__

FallBox::FallBox(BoxCoordinate linethickness = 1, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD FallBox!~FallBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FallBox
			CLASSID 64
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~FallBox
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FallBox CLASSID:64 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~FallBox METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-~FallBox

__BEGIN_METHOD_CODE__

FallBox::~FallBox()
{}

__END_METHOD_CODE__


	METHOD FallBox!dup
		CALLS
		FallBox : FallBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS FallBox
			CLASSID 64
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:FallBox CLASSID:64 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup

__BEGIN_METHOD_CODE__

FallBox::dup()
{ return new FallBox(*this); }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/SlopeBox.o.nu.cls	 Class Number = 3
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/THatBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/TagBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ArgNode.o.nu.cls


	METHOD VSLArg!box

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD box
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:box METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-box

__BEGIN_METHOD_CODE__

VSLArg::box()
{ return _box; }

__END_METHOD_CODE__


	METHOD VSLArg!VSLArg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLArg
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLArg METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-VSLArg

__BEGIN_METHOD_CODE__

VSLArg::VSLArg()
{}

__END_METHOD_CODE__


	METHOD VSLArg!VSLArg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLArg
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLArg METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-VSLArg

__BEGIN_METHOD_CODE__

VSLArg::VSLArg(char *s)
{}

__END_METHOD_CODE__


	METHOD VSLArg!VSLArg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLArg
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLArg METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-VSLArg

__BEGIN_METHOD_CODE__

VSLArg::VSLArg(const string& s)
{}

__END_METHOD_CODE__


	METHOD VSLArg!VSLArg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLArg
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLArg METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-VSLArg

__BEGIN_METHOD_CODE__

VSLArg::VSLArg(int n)
{}

__END_METHOD_CODE__


	METHOD VSLArg!VSLArg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLArg
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLArg METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-VSLArg

__BEGIN_METHOD_CODE__

VSLArg::VSLArg(unsigned n)
{}

__END_METHOD_CODE__


	METHOD VSLArg!VSLArg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLArg
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLArg METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-VSLArg

__BEGIN_METHOD_CODE__

VSLArg::VSLArg(Box *box)
{}

__END_METHOD_CODE__


	METHOD VSLArg!VSLArg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLArg
			CLASSID 65
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLArg
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLArg CLASSID:65 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLArg METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-VSLArg

__BEGIN_METHOD_CODE__

VSLArg::VSLArg(const VSLArg& arg)
{}

__END_METHOD_CODE__


	METHOD VSLArg!~VSLArg
		CALLS




		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLArg
			CLASSID 65
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD ~VSLArg
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:VSLArg CLASSID:65 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:~VSLArg METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-~VSLArg

__BEGIN_METHOD_CODE__

VSLArg::~VSLArg()
{
	if(_box)
	    _box->unlink();
    }

__END_METHOD_CODE__


	METHOD VSLArg!operator_=
		CALLS




		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLArg
			CLASSID 65
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 9
			LT 0
			METHOD operator_=
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:VSLArg CLASSID:65 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:9 LT:0 METHOD:operator_= METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-operator_=

__BEGIN_METHOD_CODE__

VSLArg::operator_=(Box *box)
{
	if(box != _box)
	{
	    if(_box)
		_box->unlink();
	    _box = box;
	}
	return *this;
    }

__END_METHOD_CODE__


	METHOD VSLArg!operator_=
		CALLS
		box : _SYSTEM_OR_USER_,
		box : _SYSTEM_OR_USER_,
		box : _SYSTEM_OR_USER_,
		link : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 5
			CLASS VSLArg
			CLASSID 65
			CYCLO 3
			DOTS 3
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 10
			LT 0
			METHOD operator_=
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:5 CLASS:VSLArg CLASSID:65 CYCLO:3 DOTS:3 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:10 LT:0 METHOD:operator_= METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:1 USEDVARS:0 
		;


#ID 10-operator_=

__BEGIN_METHOD_CODE__

VSLArg::operator_=(const VSLArg& arg)
{
	if(arg.box() != _box)
	{
	    if(_box)
		_box->unlink();

	    _box = arg.box() ? arg.box()->link() : 0;
	}
	return *this;
    }

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		call : VSLLib,
		string : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD call
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:call METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-call

__BEGIN_METHOD_CODE__

VSLLib::call(char *func_name)
{ 
	return call(string(func_name)); 
    }

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		call : VSLLib,
		string : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD call
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:call METHODID:18 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-call

__BEGIN_METHOD_CODE__

VSLLib::call(char *func_name, 
		  VSLNode *arg1)
{ 
	return call(string(func_name), arg1); 
    }

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		call : VSLLib,
		string : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD call
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:call METHODID:19 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-call

__BEGIN_METHOD_CODE__

VSLLib::call(char *func_name, 
		  VSLNode *arg1,
		  VSLNode *arg2)
{ 
	return call(string(func_name), arg1, arg2);
    }

__END_METHOD_CODE__


	METHOD VSLLib!call
		CALLS
		call : VSLLib,
		string : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD call
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:call METHODID:20 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-call

__BEGIN_METHOD_CODE__

VSLLib::call(char *func_name, 
		  VSLNode *arg1,
		  VSLNode *arg2,
		  VSLNode *arg3)
{ 
	return call(string(func_name), arg1, arg2, arg3);
    }

__END_METHOD_CODE__


	METHOD VSLLib!VSLLib

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLLib
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLLib METHODID:26 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-VSLLib

__BEGIN_METHOD_CODE__

VSLLib::VSLLib(const VSLLib&)
{  ; }

__END_METHOD_CODE__


	METHOD VSLLib!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:27 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-operator_=

__BEGIN_METHOD_CODE__

VSLLib::operator_=(const VSLLib&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD VSLLib!has
		CALLS
		deflist : VSLLib



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has METHODID:34 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-has

__BEGIN_METHOD_CODE__

VSLLib::has(const string& func_name)
{
	return deflist(func_name) != 0;
    }

__END_METHOD_CODE__


	METHOD VSLLib!lastdef

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD lastdef
			METHODID 48
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:lastdef METHODID:48 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 48-lastdef

__BEGIN_METHOD_CODE__

VSLLib::lastdef()
{ return _last; }

__END_METHOD_CODE__


	METHOD VSLLib!firstdef

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLLib
			CLASSID 66
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstdef
			METHODID 49
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLLib CLASSID:66 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstdef METHODID:49 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 49-firstdef

__BEGIN_METHOD_CODE__

VSLLib::firstdef()
{ return _first; }

__END_METHOD_CODE__


	METHOD VSLNode!VSLNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-VSLNode

__BEGIN_METHOD_CODE__

VSLNode::VSLNode(const VSLNode& node)
{}

__END_METHOD_CODE__


	METHOD VSLNode!_dumpTree

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _dumpTree
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_dumpTree METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_dumpTree

__BEGIN_METHOD_CODE__

VSLNode::_dumpTree(ostream&)
{}

__END_METHOD_CODE__


	METHOD VSLNode!matches
		CALLS




		METRICS
			_type REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 1
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 1
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:1 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:1 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-matches

__BEGIN_METHOD_CODE__

VSLNode::matches(const VSLNode& node)
{
	return strcmp(_type, node._type) == 0;
    }

__END_METHOD_CODE__


	METHOD VSLNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_=

__BEGIN_METHOD_CODE__

VSLNode::operator_=(const VSLNode &)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD VSLNode!VSLNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLNode
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLNode METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-VSLNode

__BEGIN_METHOD_CODE__

VSLNode::VSLNode(char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD VSLNode!~VSLNode

		METRICS
			_type REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 5
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~VSLNode
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:5 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~VSLNode METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-~VSLNode

__BEGIN_METHOD_CODE__

VSLNode::~VSLNode()
{
	_type = 0;   
    }

__END_METHOD_CODE__


	METHOD VSLNode!resolveDefs

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD resolveDefs
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:resolveDefs METHODID:10 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-resolveDefs

__BEGIN_METHOD_CODE__

VSLNode::resolveDefs(VSLDef *, bool = true)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!resolveSynonyms

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD resolveSynonyms
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:resolveSynonyms METHODID:11 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-resolveSynonyms

__BEGIN_METHOD_CODE__

VSLNode::resolveSynonyms(VSLDef *, VSLNode **)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!foldOps

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD foldOps
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:foldOps METHODID:12 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-foldOps

__BEGIN_METHOD_CODE__

VSLNode::foldOps(VSLDef *, VSLNode **)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!foldConsts

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD foldConsts
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:foldConsts METHODID:13 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-foldConsts

__BEGIN_METHOD_CODE__

VSLNode::foldConsts(VSLDef *, VSLNode **)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!countSelfReferences

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD countSelfReferences
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:countSelfReferences METHODID:14 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-countSelfReferences

__BEGIN_METHOD_CODE__

VSLNode::countSelfReferences(VSLDef *, 
	VSLDefList *)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!inlineFuncs

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD inlineFuncs
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:inlineFuncs METHODID:15 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-inlineFuncs

__BEGIN_METHOD_CODE__

VSLNode::inlineFuncs(VSLDef *, VSLNode **)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!instantiateArgs

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD instantiateArgs
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 5
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:instantiateArgs METHODID:16 MMINUS:0 OUT:0 PARNUM:5 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-instantiateArgs

__BEGIN_METHOD_CODE__

VSLNode::instantiateArgs(VSLDef *, VSLNode **,
	VSLNode **, unsigned , unsigned)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!countArgNodes

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD countArgNodes
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:countArgNodes METHODID:17 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-countArgNodes

__BEGIN_METHOD_CODE__

VSLNode::countArgNodes(VSLDef *, int[],
	unsigned , unsigned )
{ return; }

__END_METHOD_CODE__


	METHOD VSLNode!_reBase

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _reBase
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_reBase METHODID:18 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-_reBase

__BEGIN_METHOD_CODE__

VSLNode::_reBase(VSLDef *, unsigned )
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!reBase
		CALLS
		_reBase : VSLNode



		METRICS
			_base REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 5
			CALLEDN 1
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD reBase
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:5 CALLEDN:1 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:reBase METHODID:19 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-reBase

__BEGIN_METHOD_CODE__

VSLNode::reBase(VSLDef *cdef, unsigned newBase)
{ 
	int changes = _reBase(cdef, newBase);
	_base = newBase;
	return changes;
    }

__END_METHOD_CODE__


	METHOD VSLNode!compilePatterns

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD compilePatterns
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:compilePatterns METHODID:20 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-compilePatterns

__BEGIN_METHOD_CODE__

VSLNode::compilePatterns(VSLDef *)
{ return; }

__END_METHOD_CODE__


	METHOD VSLNode!uncompilePatterns

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD uncompilePatterns
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:uncompilePatterns METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-uncompilePatterns

__BEGIN_METHOD_CODE__

VSLNode::uncompilePatterns(VSLDef *)
{ return; }

__END_METHOD_CODE__


	METHOD VSLNode!resolveName

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD resolveName
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:resolveName METHODID:22 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-resolveName

__BEGIN_METHOD_CODE__

VSLNode::resolveName(VSLDef *, VSLNode **, 
	string& , unsigned)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!_resolveNames

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _resolveNames
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_resolveNames METHODID:23 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-_resolveNames

__BEGIN_METHOD_CODE__

VSLNode::_resolveNames(VSLDef *, unsigned)
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!resolveNames
		CALLS
		_resolveNames : VSLNode



		METRICS
			_base REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 5
			CALLEDN 1
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD resolveNames
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:5 CALLEDN:1 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:resolveNames METHODID:24 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 24-resolveNames

__BEGIN_METHOD_CODE__

VSLNode::resolveNames(VSLDef *cdef, unsigned base)
{
	_base = base;
	return _resolveNames(cdef, base);
    }

__END_METHOD_CODE__


	METHOD VSLNode!firstName

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstName
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstName METHODID:25 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-firstName

__BEGIN_METHOD_CODE__

VSLNode::firstName()
{ return _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD VSLNode!isArgNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isArgNode
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isArgNode METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-isArgNode

__BEGIN_METHOD_CODE__

VSLNode::isArgNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isBuiltinCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isBuiltinCallNode
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isBuiltinCallNode METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-isBuiltinCallNode

__BEGIN_METHOD_CODE__

VSLNode::isBuiltinCallNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isCallNode
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isCallNode METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-isCallNode

__BEGIN_METHOD_CODE__

VSLNode::isCallNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isConstNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isConstNode
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isConstNode METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 30-isConstNode

__BEGIN_METHOD_CODE__

VSLNode::isConstNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isDefCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isDefCallNode
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isDefCallNode METHODID:31 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-isDefCallNode

__BEGIN_METHOD_CODE__

VSLNode::isDefCallNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isDummyNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isDummyNode
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isDummyNode METHODID:32 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-isDummyNode

__BEGIN_METHOD_CODE__

VSLNode::isDummyNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isLetNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isLetNode
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isLetNode METHODID:33 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 33-isLetNode

__BEGIN_METHOD_CODE__

VSLNode::isLetNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isListNode
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isListNode METHODID:34 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-isListNode

__BEGIN_METHOD_CODE__

VSLNode::isListNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isNameNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isNameNode
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isNameNode METHODID:35 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-isNameNode

__BEGIN_METHOD_CODE__

VSLNode::isNameNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isTestNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isTestNode
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isTestNode METHODID:36 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-isTestNode

__BEGIN_METHOD_CODE__

VSLNode::isTestNode()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!isStraight

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isStraight
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isStraight METHODID:37 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-isStraight

__BEGIN_METHOD_CODE__

VSLNode::isStraight()
{ return false; }

__END_METHOD_CODE__


	METHOD VSLNode!nargs

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD nargs
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:nargs METHODID:38 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 38-nargs

__BEGIN_METHOD_CODE__

VSLNode::nargs()
{ return 0; }

__END_METHOD_CODE__


	METHOD VSLNode!operator_!=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLNode
			CLASSID 67
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_!=
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLNode CLASSID:67 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_!= METHODID:40 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 40-operator_!=

__BEGIN_METHOD_CODE__

VSLNode::operator_!=(const VSLNode& node)
{ 
	return !(operator == (node)); 
    }

__END_METHOD_CODE__


	METHOD DummyNode!DummyNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DummyNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DummyNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-DummyNode

__BEGIN_METHOD_CODE__

DummyNode::DummyNode(const DummyNode& node)
{}

__END_METHOD_CODE__


	METHOD DummyNode!dump

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 2
			METHOD dump
			METHODID 1
			MMINUS 0
			OUT 1
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:2 METHOD:dump METHODID:1 MMINUS:0 OUT:1 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-dump

__BEGIN_METHOD_CODE__

DummyNode::dump(ostream& s)
{
	s << _REMOVED_STR_;
    }

__END_METHOD_CODE__


	METHOD DummyNode!matches
		CALLS
		matches : VSLNode



		METRICS
			matchesAll REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD matches
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:matches METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-matches

__BEGIN_METHOD_CODE__

DummyNode::matches(const VSLNode& node)
{
	return matchesAll || VSLNode::matches(node);
    }

__END_METHOD_CODE__


	METHOD DummyNode!DummyNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DummyNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DummyNode METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-DummyNode

__BEGIN_METHOD_CODE__

DummyNode::DummyNode(char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD DummyNode!dup
		CALLS
		DummyNode : DummyNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

DummyNode::dup()
{
	return new DummyNode(*this);
    }

__END_METHOD_CODE__


	METHOD DummyNode!_eval

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _eval
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_eval METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-_eval

__BEGIN_METHOD_CODE__

DummyNode::_eval(ListBox *)
{ 
	return new DummyBox; 
    }

__END_METHOD_CODE__


	METHOD DummyNode!isConst

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isConst
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isConst METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-isConst

__BEGIN_METHOD_CODE__

DummyNode::isConst()
{ return true; }

__END_METHOD_CODE__


	METHOD DummyNode!isDummyNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DummyNode
			CLASSID 68
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isDummyNode
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DummyNode CLASSID:68 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isDummyNode METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-isDummyNode

__BEGIN_METHOD_CODE__

DummyNode::isDummyNode()
{ return true; }

__END_METHOD_CODE__


	METHOD ArgNode!ArgNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArgNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArgNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-ArgNode

__BEGIN_METHOD_CODE__

ArgNode::ArgNode(const ArgNode& node)
{}

__END_METHOD_CODE__


	METHOD ArgNode!ArgNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArgNode
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArgNode METHODID:4 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-ArgNode

__BEGIN_METHOD_CODE__

ArgNode::ArgNode(unsigned i, char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD ArgNode!dup
		CALLS
		ArgNode : ArgNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup

__BEGIN_METHOD_CODE__

ArgNode::dup()
{ return new ArgNode(*this); }

__END_METHOD_CODE__


	METHOD ArgNode!isConst

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isConst
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isConst METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-isConst

__BEGIN_METHOD_CODE__

ArgNode::isConst()
{ return false; }

__END_METHOD_CODE__


	METHOD ArgNode!isArgNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isArgNode
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isArgNode METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-isArgNode

__BEGIN_METHOD_CODE__

ArgNode::isArgNode()
{ return true; }

__END_METHOD_CODE__


	METHOD ArgNode!id

		METRICS
			_id REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 3
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD id
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:3 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:id METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-id

__BEGIN_METHOD_CODE__

ArgNode::id()
{ return _id; }

__END_METHOD_CODE__


	METHOD ArgNode!nargs

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArgNode
			CLASSID 69
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD nargs
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArgNode CLASSID:69 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:nargs METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-nargs

__BEGIN_METHOD_CODE__

ArgNode::nargs()
{ return 1; }

__END_METHOD_CODE__


	METHOD VSLDef!expr

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD expr
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:expr METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-expr

__BEGIN_METHOD_CODE__

VSLDef::expr()
{ return _expr; }

__END_METHOD_CODE__


	METHOD VSLDef!node_pattern

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD node_pattern
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:node_pattern METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-node_pattern

__BEGIN_METHOD_CODE__

VSLDef::node_pattern()
{ return _node_pattern; }

__END_METHOD_CODE__


	METHOD VSLDef!box_pattern

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD box_pattern
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:box_pattern METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-box_pattern

__BEGIN_METHOD_CODE__

VSLDef::box_pattern()
{ return _box_pattern; }

__END_METHOD_CODE__


	METHOD VSLDef!nargs

		METRICS
			_nargs REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD nargs
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:nargs METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-nargs

__BEGIN_METHOD_CODE__

VSLDef::nargs()
{ return _nargs; }

__END_METHOD_CODE__


	METHOD VSLDef!straight

		METRICS
			_straight REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD straight
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:straight METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-straight

__BEGIN_METHOD_CODE__

VSLDef::straight()
{ return _straight; }

__END_METHOD_CODE__


	METHOD VSLDef!listnext

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD listnext
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:listnext METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-listnext

__BEGIN_METHOD_CODE__

VSLDef::listnext()
{ return _listnext; }

__END_METHOD_CODE__


	METHOD VSLDef!libnext

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD libnext
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:libnext METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-libnext

__BEGIN_METHOD_CODE__

VSLDef::libnext()
{ return _libnext; }

__END_METHOD_CODE__


	METHOD VSLDef!libprev

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD libprev
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:libprev METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-libprev

__BEGIN_METHOD_CODE__

VSLDef::libprev()
{ return _libprev; }

__END_METHOD_CODE__


	METHOD VSLDef!listnext

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD listnext
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:listnext METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-listnext

__BEGIN_METHOD_CODE__

VSLDef::listnext()
{ return _listnext; }

__END_METHOD_CODE__


	METHOD VSLDef!libnext

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD libnext
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:libnext METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-libnext

__BEGIN_METHOD_CODE__

VSLDef::libnext()
{ return _libnext; }

__END_METHOD_CODE__


	METHOD VSLDef!libprev

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDef
			CLASSID 70
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD libprev
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDef CLASSID:70 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:libprev METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-libprev

__BEGIN_METHOD_CODE__

VSLDef::libprev()
{ return _libprev; }

__END_METHOD_CODE__


	METHOD VSLDef!uncompilePattern
		CALLS




		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLDef
			CLASSID 70
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 5
			LT 0
			METHOD uncompilePattern
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:VSLDef CLASSID:70 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:5 LT:0 METHOD:uncompilePattern METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-uncompilePattern

__BEGIN_METHOD_CODE__

VSLDef::uncompilePattern()
{
	if(_box_pattern) 
	    ((VSLDef *)this)->_box_pattern->unlink();
	((VSLDef *)this)->_box_pattern = 0;
    }

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/ArgNode.o.nu.cls	 Class Number = 6
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/BuiltinCN.o.nu.cls


	METHOD TrueBox!TrueBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TrueBox
			CLASSID 71
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TrueBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TrueBox CLASSID:71 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TrueBox METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-TrueBox

__BEGIN_METHOD_CODE__

TrueBox::TrueBox()
{}

__END_METHOD_CODE__


	METHOD FalseBox!FalseBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FalseBox
			CLASSID 72
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FalseBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FalseBox CLASSID:72 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FalseBox METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-FalseBox

__BEGIN_METHOD_CODE__

FalseBox::FalseBox()
{}

__END_METHOD_CODE__


	METHOD NullBox!NullBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NullBox
			CLASSID 73
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD NullBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NullBox CLASSID:73 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:NullBox METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-NullBox

__BEGIN_METHOD_CODE__

NullBox::NullBox()
{}

__END_METHOD_CODE__


	METHOD VSLDefList!VSLDefList

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD VSLDefList
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:VSLDefList METHODID:0 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-VSLDefList

__BEGIN_METHOD_CODE__

VSLDefList::VSLDefList(VSLLib* l, unsigned hash, 
	string func_nm, bool g = false)
{}

__END_METHOD_CODE__


	METHOD VSLDefList!VSLDefList

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD VSLDefList
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:VSLDefList METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-VSLDefList

__BEGIN_METHOD_CODE__

VSLDefList::VSLDefList(const VSLDefList&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD VSLDefList!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-operator_=

__BEGIN_METHOD_CODE__

VSLDefList::operator_=(const VSLDefList&)
{ 
	 ; return *this; 
    }

__END_METHOD_CODE__


	METHOD VSLDefList!firstdef

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstdef
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstdef METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-firstdef

__BEGIN_METHOD_CODE__

VSLDefList::firstdef()
{  ; return _first; }

__END_METHOD_CODE__


	METHOD VSLDefList!func_name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD func_name
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:func_name METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-func_name

__BEGIN_METHOD_CODE__

VSLDefList::func_name()
{ return _func_name; }

__END_METHOD_CODE__


	METHOD VSLDefList!global

		METRICS
			_global REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD global
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:global METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-global

__BEGIN_METHOD_CODE__

VSLDefList::global()
{ return _global; }

__END_METHOD_CODE__


	METHOD VSLDefList!global

		METRICS
			_global REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD global
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:global METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-global

__BEGIN_METHOD_CODE__

VSLDefList::global()
{ return _global; }

__END_METHOD_CODE__


	METHOD VSLDefList!f_name
		CALLS
		from : string



		METRICS
			ARRAYOP 1
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS VSLDefList
			CLASSID 74
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 9
			LT 0
			METHOD f_name
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:VSLDefList CLASSID:74 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:9 LT:0 METHOD:f_name METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-f_name

__BEGIN_METHOD_CODE__

VSLDefList::f_name()
{
	if(_func_name[_ARGS_] == '#')
	{
	    string tmp = _func_name;
	    return tmp.from(1);
	}
	else
	    return _func_name; 
    }

__END_METHOD_CODE__


	METHOD VSLDefList!first

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD first
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:first METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-first

__BEGIN_METHOD_CODE__

VSLDefList::first()
{ return _first; }

__END_METHOD_CODE__


	METHOD VSLDefList!next

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD next
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:next METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-next

__BEGIN_METHOD_CODE__

VSLDefList::next()
{ return _next; }

__END_METHOD_CODE__


	METHOD VSLDefList!ndefs

		METRICS
			_ndefs REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ndefs
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ndefs METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-ndefs

__BEGIN_METHOD_CODE__

VSLDefList::ndefs()
{ return _ndefs; }

__END_METHOD_CODE__


	METHOD VSLDefList!override

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS VSLDefList
			CLASSID 74
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD override
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:VSLDefList CLASSID:74 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:override METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-override

__BEGIN_METHOD_CODE__

VSLDefList::override()
{ 
	_func_name += '\'';      
    }

__END_METHOD_CODE__


	METHOD CallNode!CallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD CallNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:CallNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-CallNode

__BEGIN_METHOD_CODE__

CallNode::CallNode(const CallNode& node)
{}

__END_METHOD_CODE__


	METHOD CallNode!isInfix

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isInfix
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isInfix METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-isInfix

__BEGIN_METHOD_CODE__

CallNode::isInfix()
{ return false; }

__END_METHOD_CODE__


	METHOD CallNode!matches
		CALLS
		matches : VSLNode



		METRICS
			matchesAll REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 1
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 6
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 0
			METHOD matches
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:1 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:6 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:0 METHOD:matches METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-matches

__BEGIN_METHOD_CODE__

CallNode::matches(const VSLNode& node)
{
	return matchesAll ||
	    (VSLNode::matches(node) &&
	    *_arg == *(((CallNode *)(&node))->_arg));    
    }

__END_METHOD_CODE__


	METHOD CallNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-operator_=

__BEGIN_METHOD_CODE__

CallNode::operator_=(const CallNode&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD CallNode!arg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD arg
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:arg METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-arg

__BEGIN_METHOD_CODE__

CallNode::arg()
{ return _arg; }

__END_METHOD_CODE__


	METHOD CallNode!arg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD arg
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:arg METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-arg

__BEGIN_METHOD_CODE__

CallNode::arg()
{ return _arg; }

__END_METHOD_CODE__


	METHOD CallNode!CallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD CallNode
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:CallNode METHODID:10 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-CallNode

__BEGIN_METHOD_CODE__

CallNode::CallNode(VSLNode *a, char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD CallNode!~CallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~CallNode
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~CallNode METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-~CallNode

__BEGIN_METHOD_CODE__

CallNode::~CallNode()
{
	if(_arg) delete _arg;
    }

__END_METHOD_CODE__


	METHOD CallNode!isConst
		CALLS
		isConst : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD isConst
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:isConst METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-isConst

__BEGIN_METHOD_CODE__

CallNode::isConst()
{ return _arg->isConst(); }

__END_METHOD_CODE__


	METHOD CallNode!isCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isCallNode
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isCallNode METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-isCallNode

__BEGIN_METHOD_CODE__

CallNode::isCallNode()
{ return true; }

__END_METHOD_CODE__


	METHOD CallNode!nargs
		CALLS
		nargs : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS CallNode
			CLASSID 75
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD nargs
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:CallNode CLASSID:75 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:nargs METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-nargs

__BEGIN_METHOD_CODE__

CallNode::nargs()
{ return _arg->nargs(); }

__END_METHOD_CODE__


	METHOD DefCallNode!matches
		CALLS
		matches : CallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 5
			LT 0
			METHOD matches
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:5 LT:0 METHOD:matches METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-matches

__BEGIN_METHOD_CODE__

DefCallNode::matches(const VSLNode& node)
{
	return matchesAll ||
	    (CallNode::matches(node) &&
		_deflist == ((DefCallNode *)&node)->_deflist);  
    }

__END_METHOD_CODE__


	METHOD DefCallNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_=

__BEGIN_METHOD_CODE__

DefCallNode::operator_=(const DefCallNode&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD DefCallNode!dup
		CALLS
		DefCallNode : DefCallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup

__BEGIN_METHOD_CODE__

DefCallNode::dup()
{
	return new DefCallNode(*this);
    }

__END_METHOD_CODE__


	METHOD DefCallNode!isDefCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DefCallNode
			CLASSID 76
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isDefCallNode
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DefCallNode CLASSID:76 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isDefCallNode METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-isDefCallNode

__BEGIN_METHOD_CODE__

DefCallNode::isDefCallNode()
{ return true; }

__END_METHOD_CODE__


	METHOD BuiltinCallNode!BuiltinCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BuiltinCallNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BuiltinCallNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-BuiltinCallNode

__BEGIN_METHOD_CODE__

BuiltinCallNode::BuiltinCallNode(const BuiltinCallNode& node)
{}

__END_METHOD_CODE__


	METHOD BuiltinCallNode!func_name
		CALLS
		ext_name : VSLBuiltin



		METRICS
			_index REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 1
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD func_name
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:1 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:func_name METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-func_name

__BEGIN_METHOD_CODE__

BuiltinCallNode::func_name()
{ return VSLBuiltin::ext_name(_index); }

__END_METHOD_CODE__


	METHOD BuiltinCallNode!isInfix
		CALLS
		isInfix : VSLBuiltin



		METRICS
			_index REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 1
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isInfix
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:1 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isInfix METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-isInfix

__BEGIN_METHOD_CODE__

BuiltinCallNode::isInfix()
{ return VSLBuiltin::isInfix(_index); }

__END_METHOD_CODE__


	METHOD BuiltinCallNode!matches
		CALLS
		matches : CallNode



		METRICS
			_index REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 1
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD matches
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:1 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:matches METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-matches

__BEGIN_METHOD_CODE__

BuiltinCallNode::matches(const VSLNode& node)
{
	return matchesAll || (CallNode::matches(node) &&
	    _index == ((BuiltinCallNode *)&node)->_index);   
    }

__END_METHOD_CODE__


	METHOD BuiltinCallNode!BuiltinCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BuiltinCallNode
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BuiltinCallNode METHODID:5 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-BuiltinCallNode

__BEGIN_METHOD_CODE__

BuiltinCallNode::BuiltinCallNode(int i, VSLNode *a,
	char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD BuiltinCallNode!BuiltinCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BuiltinCallNode
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BuiltinCallNode METHODID:6 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-BuiltinCallNode

__BEGIN_METHOD_CODE__

BuiltinCallNode::BuiltinCallNode(BuiltinCallNode &node, VSLNode *a,
	char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD BuiltinCallNode!dup
		CALLS
		BuiltinCallNode : BuiltinCallNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-dup

__BEGIN_METHOD_CODE__

BuiltinCallNode::dup()
{
	return new BuiltinCallNode(*this);
    }

__END_METHOD_CODE__


	METHOD BuiltinCallNode!isBuiltinCallNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BuiltinCallNode
			CLASSID 77
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isBuiltinCallNode
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BuiltinCallNode CLASSID:77 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isBuiltinCallNode METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-isBuiltinCallNode

__BEGIN_METHOD_CODE__

BuiltinCallNode::isBuiltinCallNode()
{ return true; }

__END_METHOD_CODE__


	METHOD ListNode!matches
		CALLS
		matches : VSLNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 5
			LT 0
			METHOD matches
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:5 LT:0 METHOD:matches METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-matches

__BEGIN_METHOD_CODE__

ListNode::matches(const VSLNode& node)
{
	return VSLNode::matches(node) &&
	    *_head == *(((ListNode *)&node)->_head) && 
	    *_tail == *(((ListNode *)&node)->_tail);     
    }

__END_METHOD_CODE__


	METHOD ListNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-operator_=

__BEGIN_METHOD_CODE__

ListNode::operator_=(const ListNode&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD ListNode!dup
		CALLS
		ListNode : ListNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

ListNode::dup()
{ return new ListNode(*this); }

__END_METHOD_CODE__


	METHOD ListNode!~ListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD ~ListNode
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:~ListNode METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-~ListNode

__BEGIN_METHOD_CODE__

ListNode::~ListNode()
{
	if(_head) delete _head;
	if(_tail) delete _tail;
    }

__END_METHOD_CODE__


	METHOD ListNode!head

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD head
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:head METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-head

__BEGIN_METHOD_CODE__

ListNode::head()
{ return _head; }

__END_METHOD_CODE__


	METHOD ListNode!tail

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD tail
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:tail METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-tail

__BEGIN_METHOD_CODE__

ListNode::tail()
{ return _tail; }

__END_METHOD_CODE__


	METHOD ListNode!head

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD head
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:head METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-head

__BEGIN_METHOD_CODE__

ListNode::head()
{ return _head; }

__END_METHOD_CODE__


	METHOD ListNode!tail

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD tail
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:tail METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-tail

__BEGIN_METHOD_CODE__

ListNode::tail()
{ return _tail; }

__END_METHOD_CODE__


	METHOD ListNode!isListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ListNode
			CLASSID 78
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isListNode
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ListNode CLASSID:78 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isListNode METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-isListNode

__BEGIN_METHOD_CODE__

ListNode::isListNode()
{ return true; }

__END_METHOD_CODE__


	METHOD ConstNode!ConstNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ConstNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ConstNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-ConstNode

__BEGIN_METHOD_CODE__

ConstNode::ConstNode(const ConstNode& node)
{}

__END_METHOD_CODE__


	METHOD ConstNode!matches
		CALLS
		matches : VSLNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD matches
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:matches METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-matches

__BEGIN_METHOD_CODE__

ConstNode::matches(const VSLNode& node)
{
	return VSLNode::matches(node) &&
		*_box == *(((ConstNode *)&node)->_box);  
    }

__END_METHOD_CODE__


	METHOD ConstNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_=

__BEGIN_METHOD_CODE__

ConstNode::operator_=(const ConstNode&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD ConstNode!ConstNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ConstNode
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ConstNode METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-ConstNode

__BEGIN_METHOD_CODE__

ConstNode::ConstNode(Box *box, char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD ConstNode!~ConstNode
		CALLS




		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD ~ConstNode
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:~ConstNode METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-~ConstNode

__BEGIN_METHOD_CODE__

ConstNode::~ConstNode()
{
	_box->unlink();
    }

__END_METHOD_CODE__


	METHOD ConstNode!dup
		CALLS
		ConstNode : ConstNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-dup

__BEGIN_METHOD_CODE__

ConstNode::dup()
{
	return new ConstNode(*this);
    }

__END_METHOD_CODE__


	METHOD ConstNode!isConst

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isConst
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isConst METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-isConst

__BEGIN_METHOD_CODE__

ConstNode::isConst()
{ return true; }

__END_METHOD_CODE__


	METHOD ConstNode!isConstNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ConstNode
			CLASSID 79
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isConstNode
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ConstNode CLASSID:79 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isConstNode METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-isConstNode

__BEGIN_METHOD_CODE__

ConstNode::isConstNode()
{ return true; }

__END_METHOD_CODE__


	METHOD TrueNode!TrueNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TrueNode
			CLASSID 80
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TrueNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TrueNode CLASSID:80 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TrueNode METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-TrueNode

__BEGIN_METHOD_CODE__

TrueNode::TrueNode()
{}

__END_METHOD_CODE__


	METHOD FalseNode!FalseNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FalseNode
			CLASSID 81
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FalseNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FalseNode CLASSID:81 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FalseNode METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-FalseNode

__BEGIN_METHOD_CODE__

FalseNode::FalseNode()
{}

__END_METHOD_CODE__


	METHOD NullNode!NullNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NullNode
			CLASSID 82
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD NullNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NullNode CLASSID:82 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:NullNode METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-NullNode

__BEGIN_METHOD_CODE__

NullNode::NullNode()
{}

__END_METHOD_CODE__


	METHOD StringNode!StringNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StringNode
			CLASSID 83
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD StringNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StringNode CLASSID:83 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:StringNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-StringNode

__BEGIN_METHOD_CODE__

StringNode::StringNode(const string &str)
{}

__END_METHOD_CODE__


	METHOD NumNode!NumNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NumNode
			CLASSID 84
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD NumNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NumNode CLASSID:84 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:NumNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-NumNode

__BEGIN_METHOD_CODE__

NumNode::NumNode(int num)
{}

__END_METHOD_CODE__


	METHOD EmptyListNode!EmptyListNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS EmptyListNode
			CLASSID 85
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD EmptyListNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:EmptyListNode CLASSID:85 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:EmptyListNode METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-EmptyListNode

__BEGIN_METHOD_CODE__

EmptyListNode::EmptyListNode()
{}

__END_METHOD_CODE__

#========================================================================
#File ../../code/ddd-3.0/ddd/BuiltinCN.o.nu.cls	 Class Number = 16
#========================================================================
#Process file  ../../code/ddd-3.0/ddd/CallNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ConstNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/DefCallN.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/LetNode.o.nu.cls


	METHOD LetNode!_args
		CALLS
		arg : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _args
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_args METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_args

__BEGIN_METHOD_CODE__

LetNode::_args()
{ return(ListNode *)arg(); }

__END_METHOD_CODE__


	METHOD LetNode!_body
		CALLS
		_args : LetNode,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD _body
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:_body METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_body

__BEGIN_METHOD_CODE__

LetNode::_body()
{ return(ListNode *)(_args()->tail()); }

__END_METHOD_CODE__


	METHOD LetNode!LetNode
		CALLS
		link : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS LetNode
			CLASSID 87
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD LetNode
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:LetNode CLASSID:87 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:LetNode METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-LetNode

__BEGIN_METHOD_CODE__

LetNode::LetNode(const LetNode& node)
{
	if(node._box_pattern)
	    _box_pattern = node._box_pattern->link();
    }

__END_METHOD_CODE__


	METHOD LetNode!func_name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD func_name
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:func_name METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-func_name

__BEGIN_METHOD_CODE__

LetNode::func_name()
{  ; return _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD LetNode!call

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD call
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:call METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-call

__BEGIN_METHOD_CODE__

LetNode::call(Box *)
{  ; return 0; }

__END_METHOD_CODE__


	METHOD LetNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-operator_=

__BEGIN_METHOD_CODE__

LetNode::operator_=(const LetNode&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD LetNode!LetNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LetNode
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LetNode METHODID:12 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-LetNode

__BEGIN_METHOD_CODE__

LetNode::LetNode(VSLNode *p, VSLNode *a, VSLNode *b, char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD LetNode!~LetNode
		CALLS




		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS LetNode
			CLASSID 87
			CYCLO 3
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 4
			LT 0
			METHOD ~LetNode
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:LetNode CLASSID:87 CYCLO:3 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:4 LT:0 METHOD:~LetNode METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-~LetNode

__BEGIN_METHOD_CODE__

LetNode::~LetNode()
{
	if(_node_pattern) delete _node_pattern;
	if(_box_pattern) _box_pattern->unlink();
    }

__END_METHOD_CODE__


	METHOD LetNode!node_pattern

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD node_pattern
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:node_pattern METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-node_pattern

__BEGIN_METHOD_CODE__

LetNode::node_pattern()
{ return _node_pattern; }

__END_METHOD_CODE__


	METHOD LetNode!box_pattern

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD box_pattern
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:box_pattern METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-box_pattern

__BEGIN_METHOD_CODE__

LetNode::box_pattern()
{ return _box_pattern; }

__END_METHOD_CODE__


	METHOD LetNode!args
		CALLS
		_args : LetNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD args
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:args METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-args

__BEGIN_METHOD_CODE__

LetNode::args()
{ return _args()->head(); }

__END_METHOD_CODE__


	METHOD LetNode!body
		CALLS
		_body : LetNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD body
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:body METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-body

__BEGIN_METHOD_CODE__

LetNode::body()
{ return _body()->head(); }

__END_METHOD_CODE__


	METHOD LetNode!node_pattern

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD node_pattern
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:node_pattern METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-node_pattern

__BEGIN_METHOD_CODE__

LetNode::node_pattern()
{ return _node_pattern; }

__END_METHOD_CODE__


	METHOD LetNode!box_pattern

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD box_pattern
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:box_pattern METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-box_pattern

__BEGIN_METHOD_CODE__

LetNode::box_pattern()
{ return _box_pattern; }

__END_METHOD_CODE__


	METHOD LetNode!args
		CALLS
		_args : LetNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD args
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:args METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-args

__BEGIN_METHOD_CODE__

LetNode::args()
{ return _args()->head(); }

__END_METHOD_CODE__


	METHOD LetNode!body
		CALLS
		_body : LetNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD body
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:body METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-body

__BEGIN_METHOD_CODE__

LetNode::body()
{ return _body()->head(); }

__END_METHOD_CODE__


	METHOD LetNode!uncompilePatterns
		CALLS
		uncompilePatterns : CallNode,




		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS LetNode
			CLASSID 87
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 7
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 7
			LT 0
			METHOD uncompilePatterns
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:LetNode CLASSID:87 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:7 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:7 LT:0 METHOD:uncompilePatterns METHODID:23 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-uncompilePatterns

__BEGIN_METHOD_CODE__

LetNode::uncompilePatterns(VSLDef *cdef)
{
	CallNode::uncompilePatterns(cdef);

	if(_box_pattern) 
	    ((LetNode *)this)->_box_pattern->unlink();
	((LetNode *)this)->_box_pattern = 0;
    }

__END_METHOD_CODE__


	METHOD LetNode!dup
		CALLS
		LetNode : LetNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-dup

__BEGIN_METHOD_CODE__

LetNode::dup()
{ return new LetNode(*this); }

__END_METHOD_CODE__


	METHOD LetNode!isLetNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LetNode
			CLASSID 87
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isLetNode
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LetNode CLASSID:87 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isLetNode METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-isLetNode

__BEGIN_METHOD_CODE__

LetNode::isLetNode()
{ return true; }

__END_METHOD_CODE__


	METHOD WhereNode!WhereNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS WhereNode
			CLASSID 88
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD WhereNode
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:WhereNode CLASSID:88 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:WhereNode METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-WhereNode

__BEGIN_METHOD_CODE__

WhereNode::WhereNode(WhereNode& node)
{}

__END_METHOD_CODE__


	METHOD WhereNode!WhereNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS WhereNode
			CLASSID 88
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD WhereNode
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:WhereNode CLASSID:88 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:WhereNode METHODID:2 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-WhereNode

__BEGIN_METHOD_CODE__

WhereNode::WhereNode(VSLNode *p, VSLNode *a, VSLNode *b)
{}

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/LetNode.o.nu.cls	 Class Number = 2
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/wm.o.nu.cls


	METHOD GDBAgent!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

GDBAgent::operator_=(const GDBAgent&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD GDBAgent!dup
		CALLS
		GDBAgent : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-dup

__BEGIN_METHOD_CODE__

GDBAgent::dup()
{ return new GDBAgent(*this); }

__END_METHOD_CODE__


	METHOD GDBAgent!type

		METRICS
			_type REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD type
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:type METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 15-type

__BEGIN_METHOD_CODE__

GDBAgent::type()
{ return _type; }

__END_METHOD_CODE__


	METHOD GDBAgent!isReadyWithPrompt

		METRICS
			state REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isReadyWithPrompt
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isReadyWithPrompt METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-isReadyWithPrompt

__BEGIN_METHOD_CODE__

GDBAgent::isReadyWithPrompt()
{ return state == ReadyWithPrompt; }

__END_METHOD_CODE__


	METHOD GDBAgent!isBusyOnCmd

		METRICS
			state REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 2
			LT 0
			METHOD isBusyOnCmd
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:2 LT:0 METHOD:isBusyOnCmd METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 18-isBusyOnCmd

__BEGIN_METHOD_CODE__

GDBAgent::isBusyOnCmd()
{ return state == BusyOnCmd
					  || state == BusyOnInitialCmds; }

__END_METHOD_CODE__


	METHOD GDBAgent!isBusyOnQuestion

		METRICS
			state REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 2
			LT 0
			METHOD isBusyOnQuestion
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:2 LT:0 METHOD:isBusyOnQuestion METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-isBusyOnQuestion

__BEGIN_METHOD_CODE__

GDBAgent::isBusyOnQuestion()
{ return state == BusyOnQuestion
					  || state == BusyOnQuArray; }

__END_METHOD_CODE__


	METHOD GDBAgent!prompt

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD prompt
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:prompt METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-prompt

__BEGIN_METHOD_CODE__

GDBAgent::prompt()
{ return last_prompt; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_frame_command

		METRICS
			_has_frame_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 18
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_frame_command
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:18 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_frame_command METHODID:21 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 21-has_frame_command

__BEGIN_METHOD_CODE__

GDBAgent::has_frame_command()
{ return _has_frame_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_frame_command

		METRICS
			_has_frame_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 18
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_frame_command
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:18 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_frame_command METHODID:22 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 22-has_frame_command

__BEGIN_METHOD_CODE__

GDBAgent::has_frame_command(bool val)
{ return _has_frame_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_func_command

		METRICS
			_has_func_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_func_command
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_func_command METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 23-has_func_command

__BEGIN_METHOD_CODE__

GDBAgent::has_func_command()
{ return _has_func_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_func_command

		METRICS
			_has_func_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_func_command
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_func_command METHODID:24 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 24-has_func_command

__BEGIN_METHOD_CODE__

GDBAgent::has_func_command(bool val)
{ return _has_func_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_run_io_command

		METRICS
			_has_run_io_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_run_io_command
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_run_io_command METHODID:25 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 25-has_run_io_command

__BEGIN_METHOD_CODE__

GDBAgent::has_run_io_command()
{ return _has_run_io_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_run_io_command

		METRICS
			_has_run_io_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_run_io_command
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_run_io_command METHODID:26 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 26-has_run_io_command

__BEGIN_METHOD_CODE__

GDBAgent::has_run_io_command(bool val)
{ return _has_run_io_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_print_r_option

		METRICS
			_has_print_r_option REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_print_r_option
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_print_r_option METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 27-has_print_r_option

__BEGIN_METHOD_CODE__

GDBAgent::has_print_r_option()
{ return _has_print_r_option; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_print_r_option

		METRICS
			_has_print_r_option REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_print_r_option
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_print_r_option METHODID:28 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 28-has_print_r_option

__BEGIN_METHOD_CODE__

GDBAgent::has_print_r_option(bool val)
{ return _has_print_r_option = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_output_command

		METRICS
			_has_output_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_output_command
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_output_command METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 29-has_output_command

__BEGIN_METHOD_CODE__

GDBAgent::has_output_command()
{ return _has_output_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_output_command

		METRICS
			_has_output_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_output_command
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_output_command METHODID:30 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 30-has_output_command

__BEGIN_METHOD_CODE__

GDBAgent::has_output_command(bool val)
{ return _has_output_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_where_h_option

		METRICS
			_has_where_h_option REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_where_h_option
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_where_h_option METHODID:31 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 31-has_where_h_option

__BEGIN_METHOD_CODE__

GDBAgent::has_where_h_option()
{ return _has_where_h_option; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_where_h_option

		METRICS
			_has_where_h_option REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_where_h_option
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_where_h_option METHODID:32 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 32-has_where_h_option

__BEGIN_METHOD_CODE__

GDBAgent::has_where_h_option(bool val)
{ return _has_where_h_option = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_display_command

		METRICS
			_has_display_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 20
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_display_command
			METHODID 33
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:20 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_display_command METHODID:33 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 33-has_display_command

__BEGIN_METHOD_CODE__

GDBAgent::has_display_command()
{ return _has_display_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_display_command

		METRICS
			_has_display_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 20
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_display_command
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:20 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_display_command METHODID:34 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 34-has_display_command

__BEGIN_METHOD_CODE__

GDBAgent::has_display_command(bool val)
{ return _has_display_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_clear_command

		METRICS
			_has_clear_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 18
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_clear_command
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:18 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_clear_command METHODID:35 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 35-has_clear_command

__BEGIN_METHOD_CODE__

GDBAgent::has_clear_command()
{ return _has_clear_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_clear_command

		METRICS
			_has_clear_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 18
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_clear_command
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:18 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_clear_command METHODID:36 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 36-has_clear_command

__BEGIN_METHOD_CODE__

GDBAgent::has_clear_command(bool val)
{ return _has_clear_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_handler_command

		METRICS
			_has_handler_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 20
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_handler_command
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:20 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_handler_command METHODID:37 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 37-has_handler_command

__BEGIN_METHOD_CODE__

GDBAgent::has_handler_command()
{ return _has_handler_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_handler_command

		METRICS
			_has_handler_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 20
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_handler_command
			METHODID 38
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:20 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_handler_command METHODID:38 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 38-has_handler_command

__BEGIN_METHOD_CODE__

GDBAgent::has_handler_command(bool val)
{ return _has_handler_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_pwd_command

		METRICS
			_has_pwd_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 16
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_pwd_command
			METHODID 39
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:16 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_pwd_command METHODID:39 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 39-has_pwd_command

__BEGIN_METHOD_CODE__

GDBAgent::has_pwd_command()
{ return _has_pwd_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_pwd_command

		METRICS
			_has_pwd_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 16
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_pwd_command
			METHODID 40
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:16 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_pwd_command METHODID:40 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 40-has_pwd_command

__BEGIN_METHOD_CODE__

GDBAgent::has_pwd_command(bool val)
{ return _has_pwd_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_setenv_command

		METRICS
			_has_setenv_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_setenv_command
			METHODID 41
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_setenv_command METHODID:41 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 41-has_setenv_command

__BEGIN_METHOD_CODE__

GDBAgent::has_setenv_command()
{ return _has_setenv_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_setenv_command

		METRICS
			_has_setenv_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_setenv_command
			METHODID 42
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_setenv_command METHODID:42 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 42-has_setenv_command

__BEGIN_METHOD_CODE__

GDBAgent::has_setenv_command(bool val)
{ return _has_setenv_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_edit_command

		METRICS
			_has_edit_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_edit_command
			METHODID 43
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_edit_command METHODID:43 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 43-has_edit_command

__BEGIN_METHOD_CODE__

GDBAgent::has_edit_command()
{ return _has_edit_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_edit_command

		METRICS
			_has_edit_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_edit_command
			METHODID 44
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_edit_command METHODID:44 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 44-has_edit_command

__BEGIN_METHOD_CODE__

GDBAgent::has_edit_command(bool val)
{ return _has_edit_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_make_command

		METRICS
			_has_make_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_make_command
			METHODID 45
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_make_command METHODID:45 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 45-has_make_command

__BEGIN_METHOD_CODE__

GDBAgent::has_make_command()
{ return _has_make_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_make_command

		METRICS
			_has_make_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_make_command
			METHODID 46
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_make_command METHODID:46 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 46-has_make_command

__BEGIN_METHOD_CODE__

GDBAgent::has_make_command(bool val)
{ return _has_make_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_jump_command

		METRICS
			_has_jump_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_jump_command
			METHODID 47
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_jump_command METHODID:47 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 47-has_jump_command

__BEGIN_METHOD_CODE__

GDBAgent::has_jump_command()
{ return _has_jump_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_jump_command

		METRICS
			_has_jump_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_jump_command
			METHODID 48
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_jump_command METHODID:48 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 48-has_jump_command

__BEGIN_METHOD_CODE__

GDBAgent::has_jump_command(bool val)
{ return _has_jump_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_regs_command

		METRICS
			_has_regs_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_regs_command
			METHODID 49
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_regs_command METHODID:49 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 49-has_regs_command

__BEGIN_METHOD_CODE__

GDBAgent::has_regs_command()
{ return _has_regs_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_regs_command

		METRICS
			_has_regs_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_regs_command
			METHODID 50
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_regs_command METHODID:50 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 50-has_regs_command

__BEGIN_METHOD_CODE__

GDBAgent::has_regs_command(bool val)
{ return _has_regs_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_watch_command

		METRICS
			_has_watch_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 18
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_watch_command
			METHODID 51
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:18 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_watch_command METHODID:51 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 51-has_watch_command

__BEGIN_METHOD_CODE__

GDBAgent::has_watch_command()
{ return _has_watch_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_watch_command

		METRICS
			_has_watch_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 18
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_watch_command
			METHODID 52
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:18 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_watch_command METHODID:52 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 52-has_watch_command

__BEGIN_METHOD_CODE__

GDBAgent::has_watch_command(WatchMode val)
{ 
	return _has_watch_command = val;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_named_values

		METRICS
			_has_named_values REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_named_values
			METHODID 53
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_named_values METHODID:53 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 53-has_named_values

__BEGIN_METHOD_CODE__

GDBAgent::has_named_values()
{ return _has_named_values; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_named_values

		METRICS
			_has_named_values REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_named_values
			METHODID 54
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_named_values METHODID:54 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 54-has_named_values

__BEGIN_METHOD_CODE__

GDBAgent::has_named_values(bool val)
{ return _has_named_values = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_when_command

		METRICS
			_has_when_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_when_command
			METHODID 55
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_when_command METHODID:55 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 55-has_when_command

__BEGIN_METHOD_CODE__

GDBAgent::has_when_command()
{ return _has_when_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_when_command

		METRICS
			_has_when_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_when_command
			METHODID 56
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_when_command METHODID:56 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 56-has_when_command

__BEGIN_METHOD_CODE__

GDBAgent::has_when_command(bool val)
{ return _has_when_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_when_semicolon

		METRICS
			_has_when_semicolon REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_when_semicolon
			METHODID 57
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_when_semicolon METHODID:57 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 57-has_when_semicolon

__BEGIN_METHOD_CODE__

GDBAgent::has_when_semicolon()
{ return _has_when_semicolon; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_when_semicolon

		METRICS
			_has_when_semicolon REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_when_semicolon
			METHODID 58
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_when_semicolon METHODID:58 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 58-has_when_semicolon

__BEGIN_METHOD_CODE__

GDBAgent::has_when_semicolon(bool val)
{ return _has_when_semicolon = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!wants_delete_comma

		METRICS
			_wants_delete_comma REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD wants_delete_comma
			METHODID 59
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:wants_delete_comma METHODID:59 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 59-wants_delete_comma

__BEGIN_METHOD_CODE__

GDBAgent::wants_delete_comma()
{ return _wants_delete_comma; }

__END_METHOD_CODE__


	METHOD GDBAgent!wants_delete_comma

		METRICS
			_wants_delete_comma REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 19
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD wants_delete_comma
			METHODID 60
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:19 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:wants_delete_comma METHODID:60 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 60-wants_delete_comma

__BEGIN_METHOD_CODE__

GDBAgent::wants_delete_comma(bool val)
{ return _wants_delete_comma = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_err_redirection

		METRICS
			_has_err_redirection REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 20
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_err_redirection
			METHODID 61
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:20 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_err_redirection METHODID:61 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 61-has_err_redirection

__BEGIN_METHOD_CODE__

GDBAgent::has_err_redirection()
{ return _has_err_redirection; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_err_redirection

		METRICS
			_has_err_redirection REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 20
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_err_redirection
			METHODID 62
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:20 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_err_redirection METHODID:62 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 62-has_err_redirection

__BEGIN_METHOD_CODE__

GDBAgent::has_err_redirection(bool val)
{ return _has_err_redirection = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_givenfile_command

		METRICS
			_has_givenfile_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 22
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_givenfile_command
			METHODID 63
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:22 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_givenfile_command METHODID:63 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 63-has_givenfile_command

__BEGIN_METHOD_CODE__

GDBAgent::has_givenfile_command()
{ return _has_givenfile_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_givenfile_command

		METRICS
			_has_givenfile_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 22
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_givenfile_command
			METHODID 64
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:22 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_givenfile_command METHODID:64 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 64-has_givenfile_command

__BEGIN_METHOD_CODE__

GDBAgent::has_givenfile_command(bool val)
{
	return _has_givenfile_command = val;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_cont_sig_command

		METRICS
			_has_cont_sig_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 21
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_cont_sig_command
			METHODID 65
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:21 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_cont_sig_command METHODID:65 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 65-has_cont_sig_command

__BEGIN_METHOD_CODE__

GDBAgent::has_cont_sig_command()
{ return _has_cont_sig_command; }

__END_METHOD_CODE__


	METHOD GDBAgent!has_cont_sig_command

		METRICS
			_has_cont_sig_command REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 21
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_cont_sig_command
			METHODID 66
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:21 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_cont_sig_command METHODID:66 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 66-has_cont_sig_command

__BEGIN_METHOD_CODE__

GDBAgent::has_cont_sig_command(bool val)
{ return _has_cont_sig_command = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!program_language

		METRICS
			_program_language REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD program_language
			METHODID 67
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:program_language METHODID:67 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 67-program_language

__BEGIN_METHOD_CODE__

GDBAgent::program_language()
{ return _program_language; }

__END_METHOD_CODE__


	METHOD GDBAgent!program_language
		CALLS
		callHandlers : _SYSTEM_OR_USER_,
		program_language : GDBAgent



		METRICS
			_program_language REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 17
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD program_language
			METHODID 68
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:17 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:program_language METHODID:68 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 68-program_language

__BEGIN_METHOD_CODE__

GDBAgent::program_language(ProgramLanguage val)
{
	if(_program_language != val)
	{
	    _program_language = val;
	    callHandlers(LanguageChanged, (void *)val);
	}
	return program_language();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_enable_command
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		has_handler_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_enable_command
			METHODID 70
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_enable_command METHODID:70 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 70-has_enable_command

__BEGIN_METHOD_CODE__

GDBAgent::has_enable_command()
{ 
	return type() == GDB || type() == XDB || has_handler_command();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_disable_command
		CALLS
		has_enable_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_disable_command
			METHODID 71
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_disable_command METHODID:71 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 71-has_disable_command

__BEGIN_METHOD_CODE__

GDBAgent::has_disable_command()
{
	return has_enable_command();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_ignore_command
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		has_handler_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_ignore_command
			METHODID 72
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_ignore_command METHODID:72 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 72-has_ignore_command

__BEGIN_METHOD_CODE__

GDBAgent::has_ignore_command()
{
	return type() == GDB || type() == XDB || has_handler_command();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_condition_command
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_condition_command
			METHODID 73
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_condition_command METHODID:73 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 73-has_condition_command

__BEGIN_METHOD_CODE__

GDBAgent::has_condition_command()
{
	return type() == GDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_delete_command
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_delete_command
			METHODID 74
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_delete_command METHODID:74 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 74-has_delete_command

__BEGIN_METHOD_CODE__

GDBAgent::has_delete_command()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_volatile_breakpoints
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_volatile_breakpoints
			METHODID 75
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_volatile_breakpoints METHODID:75 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 75-has_volatile_breakpoints

__BEGIN_METHOD_CODE__

GDBAgent::has_volatile_breakpoints()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_redirection
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_redirection
			METHODID 76
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_redirection METHODID:76 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 76-has_redirection

__BEGIN_METHOD_CODE__

GDBAgent::has_redirection()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_assign_command
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_assign_command
			METHODID 77
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_assign_command METHODID:77 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 77-has_assign_command

__BEGIN_METHOD_CODE__

GDBAgent::has_assign_command()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_system_calls
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_system_calls
			METHODID 78
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_system_calls METHODID:78 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 78-has_system_calls

__BEGIN_METHOD_CODE__

GDBAgent::has_system_calls()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_exec_files
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_exec_files
			METHODID 79
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_exec_files METHODID:79 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 79-has_exec_files

__BEGIN_METHOD_CODE__

GDBAgent::has_exec_files()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_classes
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_classes
			METHODID 80
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_classes METHODID:80 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 80-has_classes

__BEGIN_METHOD_CODE__

GDBAgent::has_classes()
{
	return type() == JDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_core_files
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_core_files
			METHODID 81
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_core_files METHODID:81 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 81-has_core_files

__BEGIN_METHOD_CODE__

GDBAgent::has_core_files()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_processes
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_processes
			METHODID 82
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_processes METHODID:82 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 82-has_processes

__BEGIN_METHOD_CODE__

GDBAgent::has_processes()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_cd_command
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_cd_command
			METHODID 83
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_cd_command METHODID:83 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 83-has_cd_command

__BEGIN_METHOD_CODE__

GDBAgent::has_cd_command()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_shell_command
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_shell_command
			METHODID 84
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_shell_command METHODID:84 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 84-has_shell_command

__BEGIN_METHOD_CODE__

GDBAgent::has_shell_command()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_temporary_breakpoints
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		has_when_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_temporary_breakpoints
			METHODID 85
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_temporary_breakpoints METHODID:85 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 85-has_temporary_breakpoints

__BEGIN_METHOD_CODE__

GDBAgent::has_temporary_breakpoints()
{
	return type() == GDB || type() == XDB || has_when_command();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_breakpoint_conditions
		CALLS
		type : GDBAgent,
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 3
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_breakpoint_conditions
			METHODID 86
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:3 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_breakpoint_conditions METHODID:86 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 86-has_breakpoint_conditions

__BEGIN_METHOD_CODE__

GDBAgent::has_breakpoint_conditions()
{
	return type() == GDB || type() == XDB || type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_typed_pointers
		CALLS
		type : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 2
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_typed_pointers
			METHODID 87
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:2 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_typed_pointers METHODID:87 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 87-has_typed_pointers

__BEGIN_METHOD_CODE__

GDBAgent::has_typed_pointers()
{
	return type() == GDB || type() == JDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_scalars
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_scalars
			METHODID 89
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_scalars METHODID:89 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 89-has_scalars

__BEGIN_METHOD_CODE__

GDBAgent::has_scalars()
{
	return type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_quotes
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_quotes
			METHODID 90
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_quotes METHODID:90 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 90-has_quotes

__BEGIN_METHOD_CODE__

GDBAgent::has_quotes()
{
	return type() == GDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!display_prints_values
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD display_prints_values
			METHODID 91
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:display_prints_values METHODID:91 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 91-display_prints_values

__BEGIN_METHOD_CODE__

GDBAgent::display_prints_values()
{
	return type() == GDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_enable_display_command
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_enable_display_command
			METHODID 92
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_enable_display_command METHODID:92 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 92-has_enable_display_command

__BEGIN_METHOD_CODE__

GDBAgent::has_enable_display_command()
{
	return type() == GDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_disable_display_command
		CALLS
		has_enable_display_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_disable_display_command
			METHODID 93
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_disable_display_command METHODID:93 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 93-has_disable_display_command

__BEGIN_METHOD_CODE__

GDBAgent::has_disable_display_command()
{
	return has_enable_display_command();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_numbered_displays
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_numbered_displays
			METHODID 94
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_numbered_displays METHODID:94 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 94-has_numbered_displays

__BEGIN_METHOD_CODE__

GDBAgent::has_numbered_displays()
{
	return type() == GDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!wants_display_comma
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD wants_display_comma
			METHODID 95
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:wants_display_comma METHODID:95 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 95-wants_display_comma

__BEGIN_METHOD_CODE__

GDBAgent::wants_display_comma()
{
	return type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_info_display_command
		CALLS
		display_command : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_info_display_command
			METHODID 96
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_info_display_command METHODID:96 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 96-has_info_display_command

__BEGIN_METHOD_CODE__

GDBAgent::has_info_display_command()
{
	return display_command() != _REMOVED_STR_;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_redisplaying_undisplay
		CALLS
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_redisplaying_undisplay
			METHODID 97
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_redisplaying_undisplay METHODID:97 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 97-has_redisplaying_undisplay

__BEGIN_METHOD_CODE__

GDBAgent::has_redisplaying_undisplay()
{
	return type() == DBX;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!has_conditions
		CALLS
		has_condition_command : GDBAgent,
		type : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD has_conditions
			METHODID 98
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:has_conditions METHODID:98 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 98-has_conditions

__BEGIN_METHOD_CODE__

GDBAgent::has_conditions()
{
	return has_condition_command() || type() != JDB;
    }

__END_METHOD_CODE__


	METHOD GDBAgent!can_disable
		CALLS
		has_disable_command : GDBAgent,
		has_conditions : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD can_disable
			METHODID 99
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:can_disable METHODID:99 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 99-can_disable

__BEGIN_METHOD_CODE__

GDBAgent::can_disable()
{
	return has_disable_command() || has_conditions();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!can_enable
		CALLS
		has_enable_command : GDBAgent,
		has_conditions : GDBAgent



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD can_enable
			METHODID 100
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:can_enable METHODID:100 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 100-can_enable

__BEGIN_METHOD_CODE__

GDBAgent::can_enable()
{
	return has_enable_command() || has_conditions();
    }

__END_METHOD_CODE__


	METHOD GDBAgent!verbatim

		METRICS
			_verbatim REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD verbatim
			METHODID 101
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:verbatim METHODID:101 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 101-verbatim

__BEGIN_METHOD_CODE__

GDBAgent::verbatim()
{ return _verbatim; }

__END_METHOD_CODE__


	METHOD GDBAgent!verbatim

		METRICS
			_verbatim REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 9
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD verbatim
			METHODID 102
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:9 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:verbatim METHODID:102 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 102-verbatim

__BEGIN_METHOD_CODE__

GDBAgent::verbatim(bool val)
{ return _verbatim = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!recording

		METRICS
			_recording REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD recording
			METHODID 103
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:recording METHODID:103 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 103-recording

__BEGIN_METHOD_CODE__

GDBAgent::recording()
{ return _recording; }

__END_METHOD_CODE__


	METHOD GDBAgent!detect_echos

		METRICS
			_detect_echos REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 13
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD detect_echos
			METHODID 105
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:13 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:detect_echos METHODID:105 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 105-detect_echos

__BEGIN_METHOD_CODE__

GDBAgent::detect_echos()
{ return _detect_echos; }

__END_METHOD_CODE__


	METHOD GDBAgent!detect_echos

		METRICS
			_detect_echos REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 13
			CALLEDN 0
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD detect_echos
			METHODID 106
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:13 CALLEDN:0 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:detect_echos METHODID:106 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 106-detect_echos

__BEGIN_METHOD_CODE__

GDBAgent::detect_echos(bool val)
{ return _detect_echos = val; }

__END_METHOD_CODE__


	METHOD GDBAgent!write
		CALLS
		string : string,
		write : TTYAgent



		METRICS
			echoed_characters REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 17
			CALLEDN 2
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD write
			METHODID 140
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:17 CALLEDN:2 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:write METHODID:140 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 140-write

__BEGIN_METHOD_CODE__

GDBAgent::write(const char *data, int length)
{
	last_written = string(data, length);
	echoed_characters = 0;
	return TTYAgent::write(data, length);
    }

__END_METHOD_CODE__


	METHOD GDBAgent!write
		CALLS
		write : GDBAgent,
		chars : _SYSTEM_OR_USER_,
		length : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS GDBAgent
			CLASSID 89
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD write
			METHODID 141
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:GDBAgent CLASSID:89 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:write METHODID:141 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 141-write

__BEGIN_METHOD_CODE__

GDBAgent::write(const string& data)
{
	return write(data.chars(), data.length());
    }

__END_METHOD_CODE__

#================================================================
#File ../../code/ddd-3.0/ddd/wm.o.nu.cls	 Class Number = 1
#================================================================
#Process file  ../../code/ddd-3.0/ddd/TestNode.o.nu.cls


	METHOD TestNode!_test
		CALLS
		arg : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _test
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_test METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_test

__BEGIN_METHOD_CODE__

TestNode::_test()
{ return(ListNode *)arg(); }

__END_METHOD_CODE__


	METHOD TestNode!_true
		CALLS
		_test : TestNode,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD _true
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:_true METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-_true

__BEGIN_METHOD_CODE__

TestNode::_true()
{ return(ListNode *)(_test()->tail()); }

__END_METHOD_CODE__


	METHOD TestNode!_false
		CALLS
		_true : TestNode,
		tail : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD _false
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:_false METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-_false

__BEGIN_METHOD_CODE__

TestNode::_false()
{ return(ListNode *)(_true()->tail()); }

__END_METHOD_CODE__


	METHOD TestNode!TestNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TestNode
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TestNode METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-TestNode

__BEGIN_METHOD_CODE__

TestNode::TestNode(const TestNode& node)
{}

__END_METHOD_CODE__


	METHOD TestNode!func_name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD func_name
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:func_name METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-func_name

__BEGIN_METHOD_CODE__

TestNode::func_name()
{  ; return _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD TestNode!call

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD call
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:call METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-call

__BEGIN_METHOD_CODE__

TestNode::call(Box *)
{  ; return 0; }

__END_METHOD_CODE__


	METHOD TestNode!TestNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD TestNode
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:TestNode METHODID:8 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-TestNode

__BEGIN_METHOD_CODE__

TestNode::TestNode(VSLNode *tst, VSLNode *t, VSLNode *f, 
	char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD TestNode!test
		CALLS
		_test : TestNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD test
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:test METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-test

__BEGIN_METHOD_CODE__

TestNode::test()
{ return _test()->head();  }

__END_METHOD_CODE__


	METHOD TestNode!thetrue
		CALLS
		_true : TestNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD thetrue
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:thetrue METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-thetrue

__BEGIN_METHOD_CODE__

TestNode::thetrue()
{ return _true()->head();  }

__END_METHOD_CODE__


	METHOD TestNode!thefalse
		CALLS
		_false : TestNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD thefalse
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:thefalse METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-thefalse

__BEGIN_METHOD_CODE__

TestNode::thefalse()
{ return _false()->head(); }

__END_METHOD_CODE__


	METHOD TestNode!test
		CALLS
		_test : TestNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD test
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:test METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-test

__BEGIN_METHOD_CODE__

TestNode::test()
{ return _test()->head();  }

__END_METHOD_CODE__


	METHOD TestNode!thetrue
		CALLS
		_true : TestNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD thetrue
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:thetrue METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-thetrue

__BEGIN_METHOD_CODE__

TestNode::thetrue()
{ return _true()->head();  }

__END_METHOD_CODE__


	METHOD TestNode!thefalse
		CALLS
		_false : TestNode,
		head : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD thefalse
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:thefalse METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-thefalse

__BEGIN_METHOD_CODE__

TestNode::thefalse()
{ return _false()->head(); }

__END_METHOD_CODE__


	METHOD TestNode!dup
		CALLS
		TestNode : TestNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-dup

__BEGIN_METHOD_CODE__

TestNode::dup()
{ return new TestNode(*this); }

__END_METHOD_CODE__


	METHOD TestNode!isTestNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS TestNode
			CLASSID 90
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isTestNode
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:TestNode CLASSID:90 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isTestNode METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 19-isTestNode

__BEGIN_METHOD_CODE__

TestNode::isTestNode()
{ return true; }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/TestNode.o.nu.cls	 Class Number = 1
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/TrueNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VSEFlags.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VSLBuiltin.o.nu.cls


	METHOD FontFixBox!FontFixBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FontFixBox
			CLASSID 91
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FontFixBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FontFixBox CLASSID:91 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FontFixBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-FontFixBox

__BEGIN_METHOD_CODE__

FontFixBox::FontFixBox(const FontFixBox& box)
{}

__END_METHOD_CODE__


	METHOD FontFixBox!FontFixBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FontFixBox
			CLASSID 91
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD FontFixBox
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FontFixBox CLASSID:91 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:FontFixBox METHODID:2 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-FontFixBox

__BEGIN_METHOD_CODE__

FontFixBox::FontFixBox(Box *box, char *t = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD FontFixBox!dup
		CALLS
		FontFixBox : FontFixBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS FontFixBox
			CLASSID 91
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:FontFixBox CLASSID:91 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-dup

__BEGIN_METHOD_CODE__

FontFixBox::dup()
{ return new FontFixBox(*this); }

__END_METHOD_CODE__


	METHOD FontFixBox!newFont

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS FontFixBox
			CLASSID 91
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD newFont
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:FontFixBox CLASSID:91 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:newFont METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-newFont

__BEGIN_METHOD_CODE__

FontFixBox::newFont(const string&)
{}

__END_METHOD_CODE__

#========================================================================
#File ../../code/ddd-3.0/ddd/VSLBuiltin.o.nu.cls	 Class Number = 1
#========================================================================
#Process file  ../../code/ddd-3.0/ddd/VSLDef.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VSLErr.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VSLNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VSLRead.o.nu.cls


	METHOD NameNode!NameNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD NameNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:NameNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-NameNode

__BEGIN_METHOD_CODE__

NameNode::NameNode(const NameNode& node)
{}

__END_METHOD_CODE__


	METHOD NameNode!NameNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD NameNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:NameNode METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-NameNode

__BEGIN_METHOD_CODE__

NameNode::NameNode(string nm, char *type = _REMOVED_STR_)
{}

__END_METHOD_CODE__


	METHOD NameNode!dup
		CALLS
		NameNode : NameNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

NameNode::dup()
{ return new NameNode(*this); }

__END_METHOD_CODE__


	METHOD NameNode!_eval

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _eval
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_eval METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-_eval

__BEGIN_METHOD_CODE__

NameNode::_eval(ListBox *)
{  ; return 0; }

__END_METHOD_CODE__


	METHOD NameNode!isConst

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isConst
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isConst METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-isConst

__BEGIN_METHOD_CODE__

NameNode::isConst()
{ return false; }

__END_METHOD_CODE__


	METHOD NameNode!isNameNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isNameNode
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isNameNode METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-isNameNode

__BEGIN_METHOD_CODE__

NameNode::isNameNode()
{ return true; }

__END_METHOD_CODE__


	METHOD NameNode!nargs

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD nargs
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:nargs METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-nargs

__BEGIN_METHOD_CODE__

NameNode::nargs()
{ return 1; }

__END_METHOD_CODE__


	METHOD NameNode!firstName

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NameNode
			CLASSID 92
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstName
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NameNode CLASSID:92 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstName METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-firstName

__BEGIN_METHOD_CODE__

NameNode::firstName()
{ return _name; }

__END_METHOD_CODE__


	METHOD vslNameSet!vslNameSet

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS vslNameSet
			CLASSID 93
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD vslNameSet
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:vslNameSet CLASSID:93 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:vslNameSet METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-vslNameSet

__BEGIN_METHOD_CODE__

vslNameSet::vslNameSet(const char *name)
{}

__END_METHOD_CODE__


	METHOD vslNameSet!~vslNameSet
		CALLS
		reset : vslNameSet



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS vslNameSet
			CLASSID 93
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~vslNameSet
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:vslNameSet CLASSID:93 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~vslNameSet METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-~vslNameSet

__BEGIN_METHOD_CODE__

vslNameSet::~vslNameSet()
{ reset(); }

__END_METHOD_CODE__


	METHOD vslNameSet!vslNameSet

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS vslNameSet
			CLASSID 93
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD vslNameSet
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:vslNameSet CLASSID:93 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:vslNameSet METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-vslNameSet

__BEGIN_METHOD_CODE__

vslNameSet::vslNameSet(const vslNameSet&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD vslNameSet!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS vslNameSet
			CLASSID 93
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:vslNameSet CLASSID:93 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_=

__BEGIN_METHOD_CODE__

vslNameSet::operator_=(const vslNameSet&)
{
	 ; return *this;
    }

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/VSLRead.o.nu.cls	 Class Number = 2
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/layout.o.nu.cls

#====================================================================
#File ../../code/ddd-3.0/ddd/layout.o.nu.cls	 Class Number = 1
#====================================================================
#Process file  ../../code/ddd-3.0/ddd/BoxGraphN.o.nu.cls


	METHOD GraphNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

GraphNode::operator_=(const GraphNode&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD GraphNode!GraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD GraphNode
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:GraphNode METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-GraphNode

__BEGIN_METHOD_CODE__

GraphNode::GraphNode(const GraphNode& node)
{}

__END_METHOD_CODE__


	METHOD GraphNode!GraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD GraphNode
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:GraphNode METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-GraphNode

__BEGIN_METHOD_CODE__

GraphNode::GraphNode()
{}

__END_METHOD_CODE__


	METHOD GraphNode!~GraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~GraphNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~GraphNode METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-~GraphNode

__BEGIN_METHOD_CODE__

GraphNode::~GraphNode()
{}

__END_METHOD_CODE__


	METHOD GraphNode!id

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD id
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:id METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-id

__BEGIN_METHOD_CODE__

GraphNode::id()
{ return _id; }

__END_METHOD_CODE__


	METHOD GraphNode!selected

		METRICS
			_selected REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD selected
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:selected METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-selected

__BEGIN_METHOD_CODE__

GraphNode::selected()
{ return _selected; }

__END_METHOD_CODE__


	METHOD GraphNode!selected

		METRICS
			_selected REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD selected
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:selected METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-selected

__BEGIN_METHOD_CODE__

GraphNode::selected()
{ return _selected; }

__END_METHOD_CODE__


	METHOD GraphNode!hidden

		METRICS
			_hidden REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD hidden
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:hidden METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-hidden

__BEGIN_METHOD_CODE__

GraphNode::hidden()
{ return _hidden; }

__END_METHOD_CODE__


	METHOD GraphNode!hidden

		METRICS
			_hidden REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD hidden
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:hidden METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-hidden

__BEGIN_METHOD_CODE__

GraphNode::hidden()
{ return _hidden; }

__END_METHOD_CODE__


	METHOD GraphNode!redraw

		METRICS
			_redraw REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD redraw
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:redraw METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-redraw

__BEGIN_METHOD_CODE__

GraphNode::redraw()
{ return _redraw; }

__END_METHOD_CODE__


	METHOD GraphNode!redraw

		METRICS
			_redraw REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD redraw
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:redraw METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-redraw

__BEGIN_METHOD_CODE__

GraphNode::redraw()
{ return _redraw; }

__END_METHOD_CODE__


	METHOD GraphNode!firstFrom

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstFrom
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstFrom METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-firstFrom

__BEGIN_METHOD_CODE__

GraphNode::firstFrom()
{ return _firstFrom; }

__END_METHOD_CODE__


	METHOD GraphNode!firstTo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstTo
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstTo METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-firstTo

__BEGIN_METHOD_CODE__

GraphNode::firstTo()
{ return _firstTo; }

__END_METHOD_CODE__


	METHOD GraphNode!str
		CALLS
		id : GraphNode,
		string : string



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 2
			METHOD str
			METHODID 20
			MMINUS 0
			OUT 1
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:2 METHOD:str METHODID:20 MMINUS:0 OUT:1 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-str

__BEGIN_METHOD_CODE__

GraphNode::str()
{ 
	ostrstream os;
	os << id();
	return string(os);
    }

__END_METHOD_CODE__


	METHOD GraphNode!origin
		CALLS
		region : GraphNode,
		origin : GraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD origin
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:origin METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-origin

__BEGIN_METHOD_CODE__

GraphNode::origin(const GraphGC& gc)
{
	return region(gc).origin();
    }

__END_METHOD_CODE__


	METHOD GraphNode!space
		CALLS
		region : GraphNode,
		space : GraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD space
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:space METHODID:22 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-space

__BEGIN_METHOD_CODE__

GraphNode::space(const GraphGC& gc)
{
	return region(gc).space();
    }

__END_METHOD_CODE__


	METHOD GraphNode!isHint

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isHint
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isHint METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-isHint

__BEGIN_METHOD_CODE__

GraphNode::isHint()
{ return false; }

__END_METHOD_CODE__


	METHOD GraphNode!originToPos

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD originToPos
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:originToPos METHODID:25 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-originToPos

__BEGIN_METHOD_CODE__

GraphNode::originToPos(const BoxPoint& origin, const GraphGC&)
{
	return origin;
    }

__END_METHOD_CODE__


	METHOD GraphNode!draw

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD draw
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:draw METHODID:26 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-draw

__BEGIN_METHOD_CODE__

GraphNode::draw(Widget, 
		      const BoxRegion&, 
		      const GraphGC&)
{
	 
    }

__END_METHOD_CODE__


	METHOD GraphNode!draw
		CALLS
		draw : GraphNode,
		GraphGC : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD draw
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:draw METHODID:27 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 27-draw

__BEGIN_METHOD_CODE__

GraphNode::draw(Widget w, const BoxRegion& exposed)
{
	draw(w, exposed, GraphGC());
    }

__END_METHOD_CODE__


	METHOD GraphNode!draw
		CALLS
		draw : GraphNode,
		BoxRegion : BoxRegion,
		BoxPoint : BoxPoint,
		BoxSize : BoxSize,
		GraphGC : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 5
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD draw
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:5 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:draw METHODID:28 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 28-draw

__BEGIN_METHOD_CODE__

GraphNode::draw(Widget w)
{
	draw(w, BoxRegion(BoxPoint(0, 0), BoxSize(2147483647  , 2147483647  )),
	    GraphGC());
    }

__END_METHOD_CODE__


	METHOD GraphNode!_print

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphNode
			CLASSID 95
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _print
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphNode CLASSID:95 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_print METHODID:29 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 29-_print

__BEGIN_METHOD_CODE__

GraphNode::_print(ostream&, const GraphGC&)
{
	 
    }

__END_METHOD_CODE__


	METHOD GraphEdge!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

GraphEdge::operator_=(const GraphEdge&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD GraphEdge!GraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD GraphEdge
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:GraphEdge METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-GraphEdge

__BEGIN_METHOD_CODE__

GraphEdge::GraphEdge(const GraphEdge& edge)
{}

__END_METHOD_CODE__


	METHOD GraphEdge!GraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD GraphEdge
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:GraphEdge METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-GraphEdge

__BEGIN_METHOD_CODE__

GraphEdge::GraphEdge(GraphNode *f, GraphNode *t)
{}

__END_METHOD_CODE__


	METHOD GraphEdge!~GraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~GraphEdge
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~GraphEdge METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-~GraphEdge

__BEGIN_METHOD_CODE__

GraphEdge::~GraphEdge()
{}

__END_METHOD_CODE__


	METHOD GraphEdge!from

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD from
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:from METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-from

__BEGIN_METHOD_CODE__

GraphEdge::from()
{ return _from; }

__END_METHOD_CODE__


	METHOD GraphEdge!to

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD to
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:to METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-to

__BEGIN_METHOD_CODE__

GraphEdge::to()
{ return _to; }

__END_METHOD_CODE__


	METHOD GraphEdge!id

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD id
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:id METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-id

__BEGIN_METHOD_CODE__

GraphEdge::id()
{ return _id; }

__END_METHOD_CODE__


	METHOD GraphEdge!hidden

		METRICS
			_hidden REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD hidden
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:hidden METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-hidden

__BEGIN_METHOD_CODE__

GraphEdge::hidden()
{ return _hidden; }

__END_METHOD_CODE__


	METHOD GraphEdge!hidden

		METRICS
			_hidden REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS GraphEdge
			CLASSID 96
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD hidden
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:GraphEdge CLASSID:96 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:hidden METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-hidden

__BEGIN_METHOD_CODE__

GraphEdge::hidden()
{ return _hidden; }

__END_METHOD_CODE__


	METHOD GraphEdge!draw
		CALLS
		_draw : GraphEdge



		METRICS
			_hidden REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 1
			CLASS GraphEdge
			CLASSID 96
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD draw
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 6
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:1 CLASS:GraphEdge CLASSID:96 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:draw METHODID:13 MMINUS:0 OUT:0 PARNUM:6 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-draw

__BEGIN_METHOD_CODE__

GraphEdge::draw(Widget w, const BoxRegion& exposed = BoxRegion(BoxPoint(0, 0),
	BoxSize(2147483647  , 2147483647  )), const GraphGC& gc = GraphGC())
{
	if(!_hidden)
	    _draw(w, exposed, gc);
    }

__END_METHOD_CODE__


	METHOD PosGraphNode!PosGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosGraphNode
			CLASSID 97
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD PosGraphNode
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosGraphNode CLASSID:97 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:PosGraphNode METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-PosGraphNode

__BEGIN_METHOD_CODE__

PosGraphNode::PosGraphNode(const PosGraphNode& node)
{}

__END_METHOD_CODE__


	METHOD PosGraphNode!PosGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosGraphNode
			CLASSID 97
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD PosGraphNode
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosGraphNode CLASSID:97 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:PosGraphNode METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-PosGraphNode

__BEGIN_METHOD_CODE__

PosGraphNode::PosGraphNode(const BoxPoint& initialPos = BoxPoint())
{}

__END_METHOD_CODE__


	METHOD PosGraphNode!~PosGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosGraphNode
			CLASSID 97
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~PosGraphNode
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosGraphNode CLASSID:97 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~PosGraphNode METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-~PosGraphNode

__BEGIN_METHOD_CODE__

PosGraphNode::~PosGraphNode()
{}

__END_METHOD_CODE__


	METHOD PosGraphNode!moveTo
		CALLS
		MoveCB : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 1
			CLASS PosGraphNode
			CLASSID 97
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD moveTo
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:1 CLASS:PosGraphNode CLASSID:97 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:moveTo METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-moveTo

__BEGIN_METHOD_CODE__

PosGraphNode::moveTo(const BoxPoint& newPos)
{
	if(_pos != newPos && MoveCB(this, newPos))
	    _pos = newPos;
    }

__END_METHOD_CODE__


	METHOD PosGraphNode!pos

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosGraphNode
			CLASSID 97
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD pos
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosGraphNode CLASSID:97 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:pos METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-pos

__BEGIN_METHOD_CODE__

PosGraphNode::pos()
{
	return _pos;
    }

__END_METHOD_CODE__


	METHOD RegionGraphNode!RegionGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD RegionGraphNode
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:RegionGraphNode METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-RegionGraphNode

__BEGIN_METHOD_CODE__

RegionGraphNode::RegionGraphNode(const RegionGraphNode& node)
{}

__END_METHOD_CODE__


	METHOD RegionGraphNode!RegionGraphNode
		CALLS
		center : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD RegionGraphNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:RegionGraphNode METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-RegionGraphNode

__BEGIN_METHOD_CODE__

RegionGraphNode::RegionGraphNode(const BoxPoint& initialPos = BoxPoint(),
	const BoxSize& initialSize = BoxSize())
{
	center();
    }

__END_METHOD_CODE__


	METHOD RegionGraphNode!~RegionGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~RegionGraphNode
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~RegionGraphNode METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-~RegionGraphNode

__BEGIN_METHOD_CODE__

RegionGraphNode::~RegionGraphNode()
{}

__END_METHOD_CODE__


	METHOD RegionGraphNode!moveTo
		CALLS
		moveTo : PosGraphNode,
		center : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD moveTo
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:moveTo METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-moveTo

__BEGIN_METHOD_CODE__

RegionGraphNode::moveTo(const BoxPoint& newPos)
{
	PosGraphNode::moveTo(newPos);
	center();
    }

__END_METHOD_CODE__


	METHOD RegionGraphNode!resize
		CALLS
		space : AssocRec,
		ResizeCB : _SYSTEM_OR_USER_,
		space : AssocRec,
		center : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 4
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD resize
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:4 CLASS:RegionGraphNode CLASSID:98 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:resize METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-resize

__BEGIN_METHOD_CODE__

RegionGraphNode::resize(const BoxSize& newSize)
{
	if(newSize != _region.space() && ResizeCB(this, newSize))
	{
	    _region.space() = newSize;
	    center();
	}
    }

__END_METHOD_CODE__


	METHOD RegionGraphNode!region

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD region
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:region METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-region

__BEGIN_METHOD_CODE__

RegionGraphNode::region(const GraphGC&)
{ 
	return _region; 
    }

__END_METHOD_CODE__


	METHOD RegionGraphNode!highlightRegion
		CALLS
		region : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD highlightRegion
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:highlightRegion METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-highlightRegion

__BEGIN_METHOD_CODE__

RegionGraphNode::highlightRegion(const GraphGC& gc)
{ 
	return region(gc); 
    }

__END_METHOD_CODE__


	METHOD RegionGraphNode!sensitiveRegion
		CALLS
		region : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS RegionGraphNode
			CLASSID 98
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD sensitiveRegion
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:RegionGraphNode CLASSID:98 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:sensitiveRegion METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-sensitiveRegion

__BEGIN_METHOD_CODE__

RegionGraphNode::sensitiveRegion(const GraphGC& gc)
{ 
	return region(gc); 
    }

__END_METHOD_CODE__


	METHOD BoxGraphNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

BoxGraphNode::operator_=(const BoxGraphNode&)
{
	 ; return *this; 
    }

__END_METHOD_CODE__


	METHOD BoxGraphNode!BoxGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD BoxGraphNode
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:BoxGraphNode METHODID:4 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-BoxGraphNode

__BEGIN_METHOD_CODE__

BoxGraphNode::BoxGraphNode(Box *b, const BoxPoint& initialPos = BoxPoint(), 
		 MarkBox *h = 0)
{}

__END_METHOD_CODE__


	METHOD BoxGraphNode!dup
		CALLS
		BoxGraphNode : BoxGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-dup

__BEGIN_METHOD_CODE__

BoxGraphNode::dup()
{
	return new BoxGraphNode(*this);
    }

__END_METHOD_CODE__


	METHOD BoxGraphNode!~BoxGraphNode
		CALLS




		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 5
			LT 0
			METHOD ~BoxGraphNode
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:BoxGraphNode CLASSID:99 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:5 LT:0 METHOD:~BoxGraphNode METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-~BoxGraphNode

__BEGIN_METHOD_CODE__

BoxGraphNode::~BoxGraphNode()
{
	if(_highlight)
	    _highlight->unlink();
	_box->unlink();
    }

__END_METHOD_CODE__


	METHOD BoxGraphNode!box

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD box
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:box METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-box

__BEGIN_METHOD_CODE__

BoxGraphNode::box()
{ return _box; }

__END_METHOD_CODE__


	METHOD BoxGraphNode!highlight

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD highlight
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:highlight METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-highlight

__BEGIN_METHOD_CODE__

BoxGraphNode::highlight()
{ return _highlight; }

__END_METHOD_CODE__


	METHOD BoxGraphNode!str
		CALLS
		box : BoxGraphNode,
		str : BoxGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD str
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:str METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-str

__BEGIN_METHOD_CODE__

BoxGraphNode::str()
{ return box()->str(); }

__END_METHOD_CODE__


	METHOD BoxGraphNode!highlightRegion
		CALLS
		__region : MarkBox,
		highlightRegion : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 6
			LT 0
			METHOD highlightRegion
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:BoxGraphNode CLASSID:99 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:6 LT:0 METHOD:highlightRegion METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-highlightRegion

__BEGIN_METHOD_CODE__

BoxGraphNode::highlightRegion(const GraphGC& gc)
{ 
	if(_highlight)
	    return _highlight->__region();
	else
	    return RegionGraphNode::highlightRegion(gc);
    }

__END_METHOD_CODE__


	METHOD BoxGraphNode!setHighlight

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD setHighlight
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:setHighlight METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-setHighlight

__BEGIN_METHOD_CODE__

BoxGraphNode::setHighlight(MarkBox *b = 0)
{
	_highlight = b;
    }

__END_METHOD_CODE__


	METHOD BoxGraphNode!setBox
		CALLS
		setHighlight : BoxGraphNode,
		link : _SYSTEM_OR_USER_,
		resize : _SYSTEM_OR_USER_,
		size : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 2
			AVVARLEN 0
			CALLEDN 5
			CLASS BoxGraphNode
			CLASSID 99
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 8
			LT 0
			METHOD setBox
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:0 CALLEDN:5 CLASS:BoxGraphNode CLASSID:99 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:8 LT:0 METHOD:setBox METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-setBox

__BEGIN_METHOD_CODE__

BoxGraphNode::setBox(Box *b)
{
	setHighlight(0);

	Box *old = _box;
	_box = b->link();
	old->unlink();
	resize(b->size());
    }

__END_METHOD_CODE__

#=======================================================================
#File ../../code/ddd-3.0/ddd/BoxGraphN.o.nu.cls	 Class Number = 5
#=======================================================================
#Process file  ../../code/ddd-3.0/ddd/Graph.o.nu.cls


	METHOD Graph!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-operator_=

__BEGIN_METHOD_CODE__

Graph::operator_=(const Graph&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD Graph!haveNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD haveNode
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:haveNode METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-haveNode

__BEGIN_METHOD_CODE__

Graph::haveNode(GraphNode* node)
{ return node->graph == this; }

__END_METHOD_CODE__


	METHOD Graph!haveEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD haveEdge
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:haveEdge METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-haveEdge

__BEGIN_METHOD_CODE__

Graph::haveEdge(GraphEdge* edge)
{ return edge->graph == this; }

__END_METHOD_CODE__


	METHOD Graph!Graph

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD Graph
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:Graph METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-Graph

__BEGIN_METHOD_CODE__

Graph::Graph()
{}

__END_METHOD_CODE__


	METHOD Graph!dup
		CALLS
		Graph : Graph



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-dup

__BEGIN_METHOD_CODE__

Graph::dup()
{
	return new Graph(*this);
    }

__END_METHOD_CODE__


	METHOD Graph!operator_+=
		CALLS
		dup : _SYSTEM_OR_USER_,
		addNodes : Graph,
		addEdges : Graph



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS Graph
			CLASSID 100
			CYCLO 3
			DOTS 1
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 6
			LE 0
			LOC 12
			LT 0
			METHOD operator_+=
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:Graph CLASSID:100 CYCLO:3 DOTS:1 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:6 LE:0 LOC:12 LT:0 METHOD:operator_+= METHODID:13 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-operator_+=

__BEGIN_METHOD_CODE__

Graph::operator_+=(const Graph& g)
{
	Graph *graph = g.dup();

	if(graph->_firstNode)
	    addNodes(graph->_firstNode);
	if(graph->_firstEdge)
	    addEdges(graph->_firstEdge);

	graph->_firstNode = 0;
	graph->_firstEdge = 0;
	delete graph;
    }

__END_METHOD_CODE__


	METHOD Graph!operator_+=
		CALLS
		addNodes : Graph



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 8
			LT 0
			METHOD operator_+=
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:8 LT:0 METHOD:operator_+= METHODID:14 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-operator_+=

__BEGIN_METHOD_CODE__

Graph::operator_+=(GraphNode *node)
{
	 ;

	node->next  = node;		 
	node->prev  = node;
	node->graph = this;
	addNodes(node);
    }

__END_METHOD_CODE__


	METHOD Graph!operator_+=
		CALLS
		addEdges : Graph



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 3
			LE 0
			LOC 8
			LT 0
			METHOD operator_+=
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:3 LE:0 LOC:8 LT:0 METHOD:operator_+= METHODID:15 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-operator_+=

__BEGIN_METHOD_CODE__

Graph::operator_+=(GraphEdge *edge)
{
	 ;

	edge->next  = edge;		 
	edge->prev  = edge;
	edge->graph = this;
	addEdges(edge);
    }

__END_METHOD_CODE__


	METHOD Graph!operator_-=
		CALLS
		removeNode : Graph



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_-=
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_-= METHODID:16 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-operator_-=

__BEGIN_METHOD_CODE__

Graph::operator_-=(GraphNode *node)
{
	removeNode(node);
    }

__END_METHOD_CODE__


	METHOD Graph!operator_-=
		CALLS
		removeEdge : Graph



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_-=
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_-= METHODID:17 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-operator_-=

__BEGIN_METHOD_CODE__

Graph::operator_-=(GraphEdge *edge)
{
	removeEdge(edge);
    }

__END_METHOD_CODE__


	METHOD Graph!firstNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstNode
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstNode METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-firstNode

__BEGIN_METHOD_CODE__

Graph::firstNode()
{ return _firstNode; }

__END_METHOD_CODE__


	METHOD Graph!nextNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 3
			LT 0
			METHOD nextNode
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:3 LT:0 METHOD:nextNode METHODID:19 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:1 USEDVARS:0 
		;


#ID 19-nextNode

__BEGIN_METHOD_CODE__

Graph::nextNode(GraphNode *ref)
{
	return ref->next == _firstNode ? 0 : ref->next;
    }

__END_METHOD_CODE__


	METHOD Graph!firstEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstEdge
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstEdge METHODID:22 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-firstEdge

__BEGIN_METHOD_CODE__

Graph::firstEdge()
{ return _firstEdge; }

__END_METHOD_CODE__


	METHOD Graph!nextEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 3
			LT 0
			METHOD nextEdge
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:3 LT:0 METHOD:nextEdge METHODID:23 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:1 USEDVARS:0 
		;


#ID 23-nextEdge

__BEGIN_METHOD_CODE__

Graph::nextEdge(GraphEdge *ref)
{
	return ref->next == _firstEdge ? 0 : ref->next;
    }

__END_METHOD_CODE__


	METHOD Graph!draw
		CALLS
		draw : Graph,
		GraphGC : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD draw
			METHODID 31
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:draw METHODID:31 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 31-draw

__BEGIN_METHOD_CODE__

Graph::draw(Widget w, const BoxRegion& exposed)
{
	draw(w, exposed, GraphGC());
    }

__END_METHOD_CODE__


	METHOD Graph!draw
		CALLS
		draw : Graph,
		BoxRegion : BoxRegion,
		BoxPoint : BoxPoint,
		BoxSize : BoxSize



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 4
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD draw
			METHODID 32
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:4 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:4 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:draw METHODID:32 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 32-draw

__BEGIN_METHOD_CODE__

Graph::draw(Widget w)
{
	draw(w, BoxRegion(BoxPoint(0, 0), BoxSize(2147483647  , 2147483647  )));
    }

__END_METHOD_CODE__


	METHOD Graph!_printHeader
		CALLS
		_printHeader : Box,
		region : Graph



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _printHeader
			METHODID 34
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_printHeader METHODID:34 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 34-_printHeader

__BEGIN_METHOD_CODE__

Graph::_printHeader(ostream& os, const GraphGC& gc)
{
	Box::_printHeader(os, region(gc), *gc.printGC);
    }

__END_METHOD_CODE__


	METHOD Graph!_printTrailer
		CALLS
		_printTrailer : Box,
		region : Graph



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _printTrailer
			METHODID 35
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_printTrailer METHODID:35 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 35-_printTrailer

__BEGIN_METHOD_CODE__

Graph::_printTrailer(ostream& os, const GraphGC& gc)
{
	Box::_printTrailer(os, region(gc), *gc.printGC);
    }

__END_METHOD_CODE__


	METHOD Graph!print
		CALLS
		_printHeader : Graph,
		_print : Graph,
		_printTrailer : Graph



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS Graph
			CLASSID 100
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD print
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:Graph CLASSID:100 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:print METHODID:36 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-print

__BEGIN_METHOD_CODE__

Graph::print(ostream& os, const GraphGC& gc = GraphGC())
{
	_printHeader(os, gc);
	_print(os, gc);
	_printTrailer(os, gc);
    }

__END_METHOD_CODE__

#===================================================================
#File ../../code/ddd-3.0/ddd/Graph.o.nu.cls	 Class Number = 1
#===================================================================
#Process file  ../../code/ddd-3.0/ddd/GraphEdit.o.nu.cls


	METHOD HintGraphNode!HintGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HintGraphNode
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HintGraphNode CLASSID:101 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HintGraphNode METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-HintGraphNode

__BEGIN_METHOD_CODE__

HintGraphNode::HintGraphNode(const HintGraphNode &node)
{}

__END_METHOD_CODE__


	METHOD HintGraphNode!HintGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD HintGraphNode
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HintGraphNode CLASSID:101 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:HintGraphNode METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-HintGraphNode

__BEGIN_METHOD_CODE__

HintGraphNode::HintGraphNode(const BoxPoint& initialPos = BoxPoint())
{}

__END_METHOD_CODE__


	METHOD HintGraphNode!~HintGraphNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~HintGraphNode
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HintGraphNode CLASSID:101 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~HintGraphNode METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-~HintGraphNode

__BEGIN_METHOD_CODE__

HintGraphNode::~HintGraphNode()
{}

__END_METHOD_CODE__


	METHOD HintGraphNode!dup
		CALLS
		HintGraphNode : HintGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:HintGraphNode CLASSID:101 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

HintGraphNode::dup()
{
	return new HintGraphNode(*this);
    }

__END_METHOD_CODE__


	METHOD HintGraphNode!isHint

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isHint
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:HintGraphNode CLASSID:101 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isHint METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-isHint

__BEGIN_METHOD_CODE__

HintGraphNode::isHint()
{ return true; }

__END_METHOD_CODE__


	METHOD HintGraphNode!region
		CALLS
		sensitiveRegion : HintGraphNode,
		region : RegionGraphNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD region
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 1
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:HintGraphNode CLASSID:101 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:region METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:1 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-region

__BEGIN_METHOD_CODE__

HintGraphNode::region(const GraphGC& gc)
{
	if(gc.drawHints)
	    return sensitiveRegion(gc);
	else
	    return RegionGraphNode::region(gc);
    }

__END_METHOD_CODE__


	METHOD HintGraphNode!sensitiveRegion
		CALLS
		BoxRegion : BoxRegion,
		pos : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS HintGraphNode
			CLASSID 101
			CYCLO 1
			DOTS 2
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 7
			LT 0
			METHOD sensitiveRegion
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:HintGraphNode CLASSID:101 CYCLO:1 DOTS:2 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:7 LT:0 METHOD:sensitiveRegion METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-sensitiveRegion

__BEGIN_METHOD_CODE__

HintGraphNode::sensitiveRegion(const GraphGC& gc)
{
	static BoxRegion r;

	 
	r = BoxRegion(pos() - gc.hintSize / 2, gc.hintSize);
	return r;
    }

__END_METHOD_CODE__


	METHOD LineGraphEdge!LineGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LineGraphEdge
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LineGraphEdge CLASSID:102 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LineGraphEdge METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-LineGraphEdge

__BEGIN_METHOD_CODE__

LineGraphEdge::LineGraphEdge(const LineGraphEdge &edge)
{}

__END_METHOD_CODE__


	METHOD LineGraphEdge!LineGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD LineGraphEdge
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LineGraphEdge CLASSID:102 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:LineGraphEdge METHODID:9 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-LineGraphEdge

__BEGIN_METHOD_CODE__

LineGraphEdge::LineGraphEdge(GraphNode *f, GraphNode *t)
{}

__END_METHOD_CODE__


	METHOD LineGraphEdge!~LineGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~LineGraphEdge
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:LineGraphEdge CLASSID:102 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~LineGraphEdge METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-~LineGraphEdge

__BEGIN_METHOD_CODE__

LineGraphEdge::~LineGraphEdge()
{}

__END_METHOD_CODE__


	METHOD LineGraphEdge!dup
		CALLS
		LineGraphEdge : LineGraphEdge



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS LineGraphEdge
			CLASSID 102
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:LineGraphEdge CLASSID:102 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-dup

__BEGIN_METHOD_CODE__

LineGraphEdge::dup()
{
	return new LineGraphEdge(*this);
    }

__END_METHOD_CODE__

#=======================================================================
#File ../../code/ddd-3.0/ddd/GraphEdit.o.nu.cls	 Class Number = 2
#=======================================================================
#Process file  ../../code/ddd-3.0/ddd/GraphGC.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/GraphNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/HintGraphN.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/LineGraphE.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ArcGraphE.o.nu.cls


	METHOD ArcGraphEdge!ArcGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArcGraphEdge
			CLASSID 103
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArcGraphEdge
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArcGraphEdge CLASSID:103 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArcGraphEdge METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-ArcGraphEdge

__BEGIN_METHOD_CODE__

ArcGraphEdge::ArcGraphEdge(const ArcGraphEdge& edge)
{}

__END_METHOD_CODE__


	METHOD ArcGraphEdge!ArcGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArcGraphEdge
			CLASSID 103
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArcGraphEdge
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArcGraphEdge CLASSID:103 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArcGraphEdge METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-ArcGraphEdge

__BEGIN_METHOD_CODE__

ArcGraphEdge::ArcGraphEdge(GraphNode *from, GraphNode *to)
{}

__END_METHOD_CODE__


	METHOD ArcGraphEdge!~ArcGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArcGraphEdge
			CLASSID 103
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~ArcGraphEdge
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArcGraphEdge CLASSID:103 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~ArcGraphEdge METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-~ArcGraphEdge

__BEGIN_METHOD_CODE__

ArcGraphEdge::~ArcGraphEdge()
{}

__END_METHOD_CODE__


	METHOD ArcGraphEdge!dup
		CALLS
		ArcGraphEdge : ArcGraphEdge



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS ArcGraphEdge
			CLASSID 103
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:ArcGraphEdge CLASSID:103 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-dup

__BEGIN_METHOD_CODE__

ArcGraphEdge::dup()
{
	return new ArcGraphEdge(*this);
    }

__END_METHOD_CODE__

#=======================================================================
#File ../../code/ddd-3.0/ddd/ArcGraphE.o.nu.cls	 Class Number = 1
#=======================================================================
#Process file  ../../code/ddd-3.0/ddd/PosGraphN.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/RegionGN.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ScrolledGE.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/args.o.nu.cls


	METHOD ArgField!ArgField

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArgField
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArgField METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-ArgField

__BEGIN_METHOD_CODE__

ArgField::ArgField(const ArgField&)
{  ; }

__END_METHOD_CODE__


	METHOD ArgField!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

ArgField::operator_=(const ArgField&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD ArgField!empty

		METRICS
			is_empty REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD empty
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:empty METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-empty

__BEGIN_METHOD_CODE__

ArgField::empty()
{ return is_empty; }

__END_METHOD_CODE__


	METHOD ArgField!text

		METRICS
			arg_text_field REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 0
			CLASS ArgField
			CLASSID 104
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD text
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:0 CLASS:ArgField CLASSID:104 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:text METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-text

__BEGIN_METHOD_CODE__

ArgField::text()
{ return arg_text_field; }

__END_METHOD_CODE__


	METHOD Map!search

		METRICS
			key REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 3
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 9
			LT 0
			METHOD search
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:3 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:9 LT:0 METHOD:search METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 0-search

__BEGIN_METHOD_CODE__

Map::search(Key k)
{
	 
	ListNode* ln;
	
	ln = _first;
	while(ln != 0 && !(ln->key == k)) 
	    ln = ln->_next;
	return ln;
    }

__END_METHOD_CODE__


	METHOD Map!Map

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD Map
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:Map METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-Map

__BEGIN_METHOD_CODE__

Map::Map()
{}

__END_METHOD_CODE__


	METHOD Map!clear

		METRICS
			_length REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 6
			AVVARLEN 7
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 13
			LT 0
			METHOD clear
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:7 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:13 LT:0 METHOD:clear METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-clear

__BEGIN_METHOD_CODE__

Map::clear()
{
	ListNode* ln;
	ListNode* prev;

	ln = _first;
	while(ln != 0) {
	    prev = ln;
	    ln = ln->_next;
	    delete prev;
	}
	_first = 0;
	_length = 0;
    }

__END_METHOD_CODE__


	METHOD Map!delete_all_contents

		METRICS
			cont REFERRED 1 TIMES,
			_length REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 5
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 12
			LT 0
			METHOD delete_all_contents
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 8
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:5 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:12 LT:0 METHOD:delete_all_contents METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:8 TERNINSTR:0 USEDVARS:2 
		;


#ID 3-delete_all_contents

__BEGIN_METHOD_CODE__

Map::delete_all_contents()
{
	ListNode *ln   = _first;
	ListNode* prev = 0;
	while(ln != 0) {
	    prev = ln;
	    ln = ln->_next;
	    delete prev->cont;
	    delete prev;
	}
	_first = 0;
	_length = 0;
    }

__END_METHOD_CODE__


	METHOD Map!~Map
		CALLS
		clear : Map



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Map
			CLASSID 105
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~Map
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Map CLASSID:105 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~Map METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-~Map

__BEGIN_METHOD_CODE__

Map::~Map()
{ clear(); }

__END_METHOD_CODE__


	METHOD Map!insert
		CALLS
		search : Map



		METRICS
			key REFERRED 1 TIMES,
			cont REFERRED 2 TIMES,
			_length REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 4
			CALLEDN 1
			CLASS Map
			CLASSID 105
			CYCLO 3
			DOTS 0
			EQTEST 2
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 4
			LE 0
			LOC 20
			LT 0
			METHOD insert
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 1
			RETPOINT 2
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 3

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:4 CALLEDN:1 CLASS:Map CLASSID:105 CYCLO:3 DOTS:0 EQTEST:2 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:4 LE:0 LOC:20 LT:0 METHOD:insert METHODID:5 MMINUS:0 OUT:0 PARNUM:2 PPLUS:1 RETPOINT:2 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:3 
		;


#ID 5-insert

__BEGIN_METHOD_CODE__

Map::insert(Key k, Contents* c)
{
	if(c == 0)  
	    return 0;

	 
	ListNode* ln = search(k);
	if(ln == 0) {
	    ln = new ListNode;
	    ln->key = k;
	    ln->cont = c;

	    ln->_next = _first;
	    _first = ln;
	    _length++;
	}
	else {
	    ln->cont = c;
	}
	return 1;
    }

__END_METHOD_CODE__


	METHOD Map!del

		METRICS
			key REFERRED 1 TIMES,
			_length REFERRED 2 TIMES,
			ARRAYOP 0
			ASS 7
			AVVARLEN 5
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 5
			DOTS 0
			EQTEST 4
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 5
			LE 0
			LOC 29
			LT 0
			METHOD del
			METHODID 6
			MMINUS 2
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 14
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:7 AVVARLEN:5 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:5 DOTS:0 EQTEST:4 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:5 LE:0 LOC:29 LT:0 METHOD:del METHODID:6 MMINUS:2 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:14 TERNINSTR:0 USEDVARS:2 
		;


#ID 6-del

__BEGIN_METHOD_CODE__

Map::del(Key k)
{
	if(_first == 0)
	    return;
    
	ListNode* prev = 0;
	ListNode* ln = _first;
    
	while(ln != 0 && !(ln->key == k)) {
	    prev = ln;
	    ln = ln->_next;
	}

	if(ln == 0)
	    return;  
		       
	if(prev == 0) {
	     
	     ;
	    _first = _first->_next;
	    delete ln;
	    _length--;
	}
	else {
	    prev->_next = ln->_next;
	    delete ln;
	    _length--;
	}
	 ;
    }

__END_METHOD_CODE__


	METHOD Map!get
		CALLS
		search : Map



		METRICS
			cont REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 4
			CALLEDN 1
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 0
			METHOD get
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:4 CALLEDN:1 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:7 LT:0 METHOD:get METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-get

__BEGIN_METHOD_CODE__

Map::get(Key k)
{
	ListNode* ln = search(k);
	if(ln == 0)
	    return 0;
	else 
	    return ln->cont;
    }

__END_METHOD_CODE__


	METHOD Map!contains
		CALLS
		search : Map



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS Map
			CLASSID 105
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD contains
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:Map CLASSID:105 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:contains METHODID:8 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-contains

__BEGIN_METHOD_CODE__

Map::contains(Key k)
{
	return(search(k) != 0);
    }

__END_METHOD_CODE__


	METHOD Map!first_key

		METRICS
			key REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 3
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 10
			LT 0
			METHOD first_key
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:3 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:10 LT:0 METHOD:first_key METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-first_key

__BEGIN_METHOD_CODE__

Map::first_key(MapRef& ref)
{
	if(_first == 0) {
	    ref = 0;
	    return 0;
	}
	else {
	    ref = _first->_next;
	    return _first->key;
	}
    }

__END_METHOD_CODE__


	METHOD Map!next_key

		METRICS
			key REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 3
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 11
			LT 0
			METHOD next_key
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:3 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:11 LT:0 METHOD:next_key METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-next_key

__BEGIN_METHOD_CODE__

Map::next_key(MapRef& ref)
{
	if(ref == 0 ) {
	     
	    return 0;
	}
	else {
	    ListNode* current_ln = (ListNode *) ref;
	    ref = current_ln->_next;
	    return current_ln->key;
	}
    }

__END_METHOD_CODE__


	METHOD Map!first

		METRICS
			cont REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 4
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 10
			LT 0
			METHOD first
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:4 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:10 LT:0 METHOD:first METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-first

__BEGIN_METHOD_CODE__

Map::first(MapRef& ref)
{
	if(_first == 0) {
	    ref = 0;
	    return 0;
	}
	else {
	    ref = _first->_next;
	    return _first->cont;
	}
    }

__END_METHOD_CODE__


	METHOD Map!next

		METRICS
			cont REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 2
			AVVARLEN 4
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 2
			LE 0
			LOC 12
			LT 0
			METHOD next
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 2
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:2 AVVARLEN:4 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:2 LE:0 LOC:12 LT:0 METHOD:next METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:2 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-next

__BEGIN_METHOD_CODE__

Map::next(MapRef& ref)
{
	 
	if(ref == 0 ) {
	     
	    return 0;
	}
	else {
	    ListNode* current_ln = (ListNode *) ref;
	    ref = current_ln->_next;
	    return current_ln->cont;
	}
    }

__END_METHOD_CODE__


	METHOD Map!length

		METRICS
			_length REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD length
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:length METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-length

__BEGIN_METHOD_CODE__

Map::length()
{ return _length; }

__END_METHOD_CODE__


	METHOD Map!Map

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD Map
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:Map METHODID:14 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-Map

__BEGIN_METHOD_CODE__

Map::Map(const Map<Key, Contents>&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD Map!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Map
			CLASSID 105
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Map CLASSID:105 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:15 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-operator_=

__BEGIN_METHOD_CODE__

Map::operator_=(const Map<Key, Contents>&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD BreakPoint!BreakPoint

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD BreakPoint
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:BreakPoint METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-BreakPoint

__BEGIN_METHOD_CODE__

BreakPoint::BreakPoint(const BreakPoint& b)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD BreakPoint!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-operator_=

__BEGIN_METHOD_CODE__

BreakPoint::operator_=(const BreakPoint&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD BreakPoint!number_str

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD number_str
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:number_str METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-number_str

__BEGIN_METHOD_CODE__

BreakPoint::number_str()
{ return mynumber_str; }

__END_METHOD_CODE__


	METHOD BreakPoint!number

		METRICS
			mynumber REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD number
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:number METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-number

__BEGIN_METHOD_CODE__

BreakPoint::number()
{ return mynumber; }

__END_METHOD_CODE__


	METHOD BreakPoint!type

		METRICS
			mytype REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD type
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:type METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 9-type

__BEGIN_METHOD_CODE__

BreakPoint::type()
{ return mytype; }

__END_METHOD_CODE__


	METHOD BreakPoint!dispo

		METRICS
			mydispo REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD dispo
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:dispo METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 10-dispo

__BEGIN_METHOD_CODE__

BreakPoint::dispo()
{ return mydispo; }

__END_METHOD_CODE__


	METHOD BreakPoint!file_name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD file_name
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:file_name METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-file_name

__BEGIN_METHOD_CODE__

BreakPoint::file_name()
{ return myfile_name; }

__END_METHOD_CODE__


	METHOD BreakPoint!line_nr

		METRICS
			myline_nr REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD line_nr
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:line_nr METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-line_nr

__BEGIN_METHOD_CODE__

BreakPoint::line_nr()
{ return myline_nr; }

__END_METHOD_CODE__


	METHOD BreakPoint!address

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD address
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:address METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-address

__BEGIN_METHOD_CODE__

BreakPoint::address()
{ return myaddress; }

__END_METHOD_CODE__


	METHOD BreakPoint!expr

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD expr
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:expr METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-expr

__BEGIN_METHOD_CODE__

BreakPoint::expr()
{ return myexpr; }

__END_METHOD_CODE__


	METHOD BreakPoint!watch_mode

		METRICS
			mywatch_mode REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD watch_mode
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:watch_mode METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 17-watch_mode

__BEGIN_METHOD_CODE__

BreakPoint::watch_mode()
{ return mywatch_mode; }

__END_METHOD_CODE__


	METHOD BreakPoint!infos

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD infos
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:infos METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-infos

__BEGIN_METHOD_CODE__

BreakPoint::infos()
{ return myinfos; }

__END_METHOD_CODE__


	METHOD BreakPoint!ignore_count

		METRICS
			myignore_count REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ignore_count
			METHODID 19
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ignore_count METHODID:19 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 19-ignore_count

__BEGIN_METHOD_CODE__

BreakPoint::ignore_count()
{ return myignore_count; }

__END_METHOD_CODE__


	METHOD BreakPoint!real_condition

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD real_condition
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:real_condition METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-real_condition

__BEGIN_METHOD_CODE__

BreakPoint::real_condition()
{ return mycondition; }

__END_METHOD_CODE__


	METHOD BreakPoint!commands

		METRICS
			mycommands REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD commands
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:commands METHODID:21 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 21-commands

__BEGIN_METHOD_CODE__

BreakPoint::commands()
{ return mycommands; }

__END_METHOD_CODE__


	METHOD BreakPoint!arg

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD arg
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:arg METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-arg

__BEGIN_METHOD_CODE__

BreakPoint::arg()
{ return myarg; }

__END_METHOD_CODE__


	METHOD BreakPoint!selected

		METRICS
			myselected REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD selected
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:selected METHODID:24 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 24-selected

__BEGIN_METHOD_CODE__

BreakPoint::selected()
{ return myselected; }

__END_METHOD_CODE__


	METHOD BreakPoint!source_glyph

		METRICS
			mysource_glyph REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD source_glyph
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:source_glyph METHODID:25 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 25-source_glyph

__BEGIN_METHOD_CODE__

BreakPoint::source_glyph()
{ return mysource_glyph; }

__END_METHOD_CODE__


	METHOD BreakPoint!code_glyph

		METRICS
			mycode_glyph REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD code_glyph
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:code_glyph METHODID:26 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 26-code_glyph

__BEGIN_METHOD_CODE__

BreakPoint::code_glyph()
{ return mycode_glyph; }

__END_METHOD_CODE__


	METHOD BreakPoint!enabled_changed

		METRICS
			myenabled_changed REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD enabled_changed
			METHODID 27
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:enabled_changed METHODID:27 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 27-enabled_changed

__BEGIN_METHOD_CODE__

BreakPoint::enabled_changed()
{ return myenabled_changed; }

__END_METHOD_CODE__


	METHOD BreakPoint!file_changed

		METRICS
			myfile_changed REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 14
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD file_changed
			METHODID 28
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:14 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:file_changed METHODID:28 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 28-file_changed

__BEGIN_METHOD_CODE__

BreakPoint::file_changed()
{ return myfile_changed; }

__END_METHOD_CODE__


	METHOD BreakPoint!position_changed

		METRICS
			myposition_changed REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 18
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD position_changed
			METHODID 29
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:18 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:position_changed METHODID:29 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 29-position_changed

__BEGIN_METHOD_CODE__

BreakPoint::position_changed()
{ return myposition_changed; }

__END_METHOD_CODE__


	METHOD BreakPoint!address_changed

		METRICS
			myaddress_changed REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 17
			CALLEDN 0
			CLASS BreakPoint
			CLASSID 106
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD address_changed
			METHODID 30
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:17 CALLEDN:0 CLASS:BreakPoint CLASSID:106 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:address_changed METHODID:30 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 30-address_changed

__BEGIN_METHOD_CODE__

BreakPoint::address_changed()
{ return myaddress_changed; }

__END_METHOD_CODE__


	METHOD SourceView!copy_bp
		CALLS
		move_bp : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD copy_bp
			METHODID 67
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:copy_bp METHODID:67 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 67-copy_bp

__BEGIN_METHOD_CODE__

SourceView::copy_bp(int nr, const string& address, Widget origin = 0)
{
	return move_bp(nr, address, origin, true);
    }

__END_METHOD_CODE__


	METHOD SourceView!set_bps_cond
		CALLS
		_set_bps_cond : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD set_bps_cond
			METHODID 69
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:set_bps_cond METHODID:69 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 69-set_bps_cond

__BEGIN_METHOD_CODE__

SourceView::set_bps_cond(IntArray& nrs, string cond,
				    Widget origin = 0)
{
	_set_bps_cond(nrs, cond, -1, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!set_bps_cond_enabled
		CALLS
		_set_bps_cond : SourceView,
		char : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD set_bps_cond_enabled
			METHODID 70
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 1
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:set_bps_cond_enabled METHODID:70 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:1 USEDVARS:0 
		;


#ID 70-set_bps_cond_enabled

__BEGIN_METHOD_CODE__

SourceView::set_bps_cond_enabled(IntArray& nrs, bool enabled,
					    Widget origin = 0)
{
	_set_bps_cond(nrs, char(-1), enabled ? 0 : 1, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!enable_bps_cond
		CALLS
		set_bps_cond_enabled : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD enable_bps_cond
			METHODID 71
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:enable_bps_cond METHODID:71 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 71-enable_bps_cond

__BEGIN_METHOD_CODE__

SourceView::enable_bps_cond(IntArray& nrs, Widget origin = 0)
{
	set_bps_cond_enabled(nrs, true, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!disable_bps_cond
		CALLS
		set_bps_cond_enabled : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD disable_bps_cond
			METHODID 72
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:disable_bps_cond METHODID:72 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 72-disable_bps_cond

__BEGIN_METHOD_CODE__

SourceView::disable_bps_cond(IntArray& nrs, Widget origin = 0)
{
	set_bps_cond_enabled(nrs, false, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!unmap_drag_arrow
		CALLS
		map_drag_arrow_at : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD unmap_drag_arrow
			METHODID 134
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:unmap_drag_arrow METHODID:134 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 134-unmap_drag_arrow

__BEGIN_METHOD_CODE__

SourceView::unmap_drag_arrow(Widget w)
{
	map_drag_arrow_at(w, XmTextPosition(-1));
    }

__END_METHOD_CODE__


	METHOD SourceView!unmap_drag_stop
		CALLS
		map_drag_stop_at : SourceView



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD unmap_drag_stop
			METHODID 136
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:unmap_drag_stop METHODID:136 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 136-unmap_drag_stop

__BEGIN_METHOD_CODE__

SourceView::unmap_drag_stop(Widget w)
{
	map_drag_stop_at(w, XmTextPosition(-1));
    }

__END_METHOD_CODE__


	METHOD SourceView!enable_bp
		CALLS
		enable_bps : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD enable_bp
			METHODID 199
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:enable_bp METHODID:199 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 199-enable_bp

__BEGIN_METHOD_CODE__

SourceView::enable_bp(int nr, Widget origin = 0)
{
	IntArray nrs;
	nrs += nr;
	enable_bps(nrs, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!disable_bp
		CALLS
		disable_bps : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD disable_bp
			METHODID 200
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:disable_bp METHODID:200 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 200-disable_bp

__BEGIN_METHOD_CODE__

SourceView::disable_bp(int nr, Widget origin = 0)
{
	IntArray nrs;
	nrs += nr;
	disable_bps(nrs, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!delete_bp
		CALLS
		delete_bps : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD delete_bp
			METHODID 201
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:delete_bp METHODID:201 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 201-delete_bp

__BEGIN_METHOD_CODE__

SourceView::delete_bp(int nr, Widget origin = 0)
{
	IntArray nrs;
	nrs += nr;
	delete_bps(nrs, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!edit_bp
		CALLS
		edit_bps : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD edit_bp
			METHODID 202
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:edit_bp METHODID:202 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 202-edit_bp

__BEGIN_METHOD_CODE__

SourceView::edit_bp(int nr, Widget origin = 0)
{
	IntArray nrs;
	nrs += nr;
	edit_bps(nrs, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!set_bp_commands
		CALLS
		set_bp_commands : SourceView



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD set_bp_commands
			METHODID 204
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:set_bp_commands METHODID:204 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 204-set_bp_commands

__BEGIN_METHOD_CODE__

SourceView::set_bp_commands(int nr, const StringArray& commands,
				       Widget origin = 0)
{
	IntArray nrs;
	nrs += nr;
	set_bp_commands(nrs, commands, origin);
    }

__END_METHOD_CODE__


	METHOD SourceView!pwd

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD pwd
			METHODID 212
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:pwd METHODID:212 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 212-pwd

__BEGIN_METHOD_CODE__

SourceView::pwd()
{ return current_pwd; }

__END_METHOD_CODE__


	METHOD SourceView!class_path

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD class_path
			METHODID 213
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:class_path METHODID:213 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 213-class_path

__BEGIN_METHOD_CODE__

SourceView::class_path()
{ return current_class_path; }

__END_METHOD_CODE__


	METHOD SourceView!source

		METRICS
			source_text_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 13
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD source
			METHODID 214
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:13 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:source METHODID:214 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 214-source

__BEGIN_METHOD_CODE__

SourceView::source()
{ return source_text_w; }

__END_METHOD_CODE__


	METHOD SourceView!code

		METRICS
			code_text_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 11
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD code
			METHODID 215
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:11 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:code METHODID:215 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 215-code

__BEGIN_METHOD_CODE__

SourceView::code()
{ return code_text_w; }

__END_METHOD_CODE__


	METHOD SourceView!source_form

		METRICS
			source_form_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 13
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD source_form
			METHODID 216
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:13 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:source_form METHODID:216 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 216-source_form

__BEGIN_METHOD_CODE__

SourceView::source_form()
{ return source_form_w; }

__END_METHOD_CODE__


	METHOD SourceView!code_form

		METRICS
			code_form_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 11
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD code_form
			METHODID 217
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:11 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:code_form METHODID:217 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 217-code_form

__BEGIN_METHOD_CODE__

SourceView::code_form()
{ return code_form_w; }

__END_METHOD_CODE__


	METHOD SourceView!have_source
		CALLS
		length : AssocRec



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD have_source
			METHODID 229
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:have_source METHODID:229 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 229-have_source

__BEGIN_METHOD_CODE__

SourceView::have_source()
{ return current_source.length() != 0; }

__END_METHOD_CODE__


	METHOD SourceView!have_exec_pos

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD have_exec_pos
			METHODID 230
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:have_exec_pos METHODID:230 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 230-have_exec_pos

__BEGIN_METHOD_CODE__

SourceView::have_exec_pos()
{ return last_execution_file != _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD SourceView!have_pc

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD have_pc
			METHODID 231
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:have_pc METHODID:231 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 231-have_pc

__BEGIN_METHOD_CODE__

SourceView::have_pc()
{ return last_execution_pc != _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD SourceView!need_pc

		METRICS
			disassemble REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 11
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD need_pc
			METHODID 233
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:11 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:need_pc METHODID:233 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 233-need_pc

__BEGIN_METHOD_CODE__

SourceView::need_pc()
{ return disassemble; }

__END_METHOD_CODE__


	METHOD SourceView!get_frame

		METRICS
			current_frame REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 13
			CALLEDN 0
			CLASS SourceView
			CLASSID 107
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD get_frame
			METHODID 234
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:13 CALLEDN:0 CLASS:SourceView CLASSID:107 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:get_frame METHODID:234 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 234-get_frame

__BEGIN_METHOD_CODE__

SourceView::get_frame()
{ return current_frame; }

__END_METHOD_CODE__

#==================================================================
#File ../../code/ddd-3.0/ddd/args.o.nu.cls	 Class Number = 4
#==================================================================
#Process file  ../../code/ddd-3.0/ddd/buttons.o.nu.cls


	METHOD DispValue!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-operator_=

__BEGIN_METHOD_CODE__

DispValue::operator_=(const DispValue&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD DispValue!_expand

		METRICS
			myexpanded REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 10
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _expand
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:10 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_expand METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-_expand

__BEGIN_METHOD_CODE__

DispValue::_expand()
{ myexpanded = true;  }

__END_METHOD_CODE__


	METHOD DispValue!_collapse

		METRICS
			myexpanded REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 10
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD _collapse
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:10 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:_collapse METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-_collapse

__BEGIN_METHOD_CODE__

DispValue::_collapse()
{ myexpanded = false; }

__END_METHOD_CODE__


	METHOD DispValue!type

		METRICS
			mytype REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD type
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:type METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-type

__BEGIN_METHOD_CODE__

DispValue::type()
{ return mytype; }

__END_METHOD_CODE__


	METHOD DispValue!parent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD parent
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:parent METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-parent

__BEGIN_METHOD_CODE__

DispValue::parent()
{ return myparent; }

__END_METHOD_CODE__


	METHOD DispValue!depth

		METRICS
			mydepth REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD depth
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:depth METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-depth

__BEGIN_METHOD_CODE__

DispValue::depth()
{ return mydepth; }

__END_METHOD_CODE__


	METHOD DispValue!repeats

		METRICS
			myrepeats REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD repeats
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:repeats METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-repeats

__BEGIN_METHOD_CODE__

DispValue::repeats()
{ return myrepeats; }

__END_METHOD_CODE__


	METHOD DispValue!full_name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD full_name
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:full_name METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-full_name

__BEGIN_METHOD_CODE__

DispValue::full_name()
{ return myfull_name; }

__END_METHOD_CODE__


	METHOD DispValue!name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD name
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:name METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-name

__BEGIN_METHOD_CODE__

DispValue::name()
{ return print_name; }

__END_METHOD_CODE__


	METHOD DispValue!addr

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD addr
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:addr METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-addr

__BEGIN_METHOD_CODE__

DispValue::addr()
{ return myaddr; }

__END_METHOD_CODE__


	METHOD DispValue!parent

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD parent
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:parent METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-parent

__BEGIN_METHOD_CODE__

DispValue::parent()
{ return myparent; }

__END_METHOD_CODE__


	METHOD DispValue!depth

		METRICS
			mydepth REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD depth
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:depth METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-depth

__BEGIN_METHOD_CODE__

DispValue::depth()
{ return mydepth; }

__END_METHOD_CODE__


	METHOD DispValue!repeats

		METRICS
			myrepeats REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD repeats
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:repeats METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-repeats

__BEGIN_METHOD_CODE__

DispValue::repeats()
{ return myrepeats; }

__END_METHOD_CODE__


	METHOD DispValue!full_name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD full_name
			METHODID 15
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:full_name METHODID:15 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 15-full_name

__BEGIN_METHOD_CODE__

DispValue::full_name()
{ return myfull_name; }

__END_METHOD_CODE__


	METHOD DispValue!name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD name
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:name METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 16-name

__BEGIN_METHOD_CODE__

DispValue::name()
{ return print_name; }

__END_METHOD_CODE__


	METHOD DispValue!is_changed

		METRICS
			changed REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD is_changed
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:is_changed METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 23-is_changed

__BEGIN_METHOD_CODE__

DispValue::is_changed()
{ return changed; }

__END_METHOD_CODE__


	METHOD DispValue!expanded

		METRICS
			myexpanded REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD expanded
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:expanded METHODID:24 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 24-expanded

__BEGIN_METHOD_CODE__

DispValue::expanded()
{ return myexpanded; }

__END_METHOD_CODE__


	METHOD DispValue!collapsed
		CALLS
		expanded : DispValue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD collapsed
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:collapsed METHODID:25 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-collapsed

__BEGIN_METHOD_CODE__

DispValue::collapsed()
{ return !expanded(); }

__END_METHOD_CODE__


	METHOD DispValue!collapse
		CALLS
		collapseAll : DispValue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD collapse
			METHODID 36
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:collapse METHODID:36 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 36-collapse

__BEGIN_METHOD_CODE__

DispValue::collapse()
{ collapseAll(1); }

__END_METHOD_CODE__


	METHOD DispValue!expand
		CALLS
		expandAll : DispValue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispValue
			CLASSID 108
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD expand
			METHODID 37
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispValue CLASSID:108 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:expand METHODID:37 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 37-expand

__BEGIN_METHOD_CODE__

DispValue::expand()
{ expandAll(1); }

__END_METHOD_CODE__


	METHOD DispBox!DispBox

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispBox
			CLASSID 109
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DispBox
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispBox CLASSID:109 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DispBox METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-DispBox

__BEGIN_METHOD_CODE__

DispBox::DispBox(const DispBox&)
{  ; }

__END_METHOD_CODE__


	METHOD DispBox!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispBox
			CLASSID 109
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispBox CLASSID:109 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-operator_=

__BEGIN_METHOD_CODE__

DispBox::operator_=(const DispBox&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD DispBox!box

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispBox
			CLASSID 109
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD box
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispBox CLASSID:109 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:box METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-box

__BEGIN_METHOD_CODE__

DispBox::box()
{ return mybox; }

__END_METHOD_CODE__


	METHOD DispBox!vsllib
		CALLS
		init_vsllib : DispBox



		METRICS
			vsllib_initialized REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 18
			CALLEDN 1
			CLASS DispBox
			CLASSID 109
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 6
			LT 0
			METHOD vsllib
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:18 CALLEDN:1 CLASS:DispBox CLASSID:109 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:6 LT:0 METHOD:vsllib METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:1 
		;


#ID 8-vsllib

__BEGIN_METHOD_CODE__

DispBox::vsllib()
{
	if(!vsllib_initialized)
	    init_vsllib();

	return vsllib_ptr;
    }

__END_METHOD_CODE__


	METHOD DispBox!eval
		CALLS
		dup : DispBox,
		vsllib : DispBox,
		eval : DispBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DispBox
			CLASSID 109
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD eval
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DispBox CLASSID:109 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:eval METHODID:10 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-eval

__BEGIN_METHOD_CODE__

DispBox::eval(const string& func_name, ListBox *arg)
{
	return dup(func_name, vsllib()->eval(func_name, arg));
    }

__END_METHOD_CODE__


	METHOD DispBox!eval
		CALLS
		dup : DispBox,
		vsllib : DispBox,
		eval : DispBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DispBox
			CLASSID 109
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD eval
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DispBox CLASSID:109 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:eval METHODID:11 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-eval

__BEGIN_METHOD_CODE__

DispBox::eval(const string& func_name, VSLArg args[])
{
	return dup(func_name, vsllib()->eval(func_name, args));
    }

__END_METHOD_CODE__


	METHOD DispBox!eval
		CALLS
		dup : DispBox,
		vsllib : DispBox,
		eval : DispBox



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DispBox
			CLASSID 109
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 3
			LT 0
			METHOD eval
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DispBox CLASSID:109 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:3 LT:0 METHOD:eval METHODID:12 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-eval

__BEGIN_METHOD_CODE__

DispBox::eval(const string& func_name, 
		     VSLArg arg1 = (Box *)0,
		     VSLArg arg2 = (Box *)0,
		     VSLArg arg3 = (Box *)0)
{
	return dup(func_name, vsllib()->eval(func_name, arg1, arg2, arg3));
    }

__END_METHOD_CODE__


	METHOD DispNode!DispNode

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD DispNode
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:DispNode METHODID:1 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-DispNode

__BEGIN_METHOD_CODE__

DispNode::DispNode(const DispNode&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD DispNode!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_=
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_= METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-operator_=

__BEGIN_METHOD_CODE__

DispNode::operator_=(const DispNode&)
{  ; return *this; }

__END_METHOD_CODE__


	METHOD DispNode!disp_nr

		METRICS
			mydisp_nr REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD disp_nr
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:disp_nr METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-disp_nr

__BEGIN_METHOD_CODE__

DispNode::disp_nr()
{ return mydisp_nr; }

__END_METHOD_CODE__


	METHOD DispNode!name

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD name
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:name METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-name

__BEGIN_METHOD_CODE__

DispNode::name()
{ return myname; }

__END_METHOD_CODE__


	METHOD DispNode!addr

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD addr
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:addr METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-addr

__BEGIN_METHOD_CODE__

DispNode::addr()
{ return myaddr; }

__END_METHOD_CODE__


	METHOD DispNode!scope

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD scope
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:scope METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-scope

__BEGIN_METHOD_CODE__

DispNode::scope()
{ return myscope; }

__END_METHOD_CODE__


	METHOD DispNode!depends_on

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD depends_on
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:depends_on METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-depends_on

__BEGIN_METHOD_CODE__

DispNode::depends_on()
{
	 ; 
	return mydepends_on;
    }

__END_METHOD_CODE__


	METHOD DispNode!depends_on

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD depends_on
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:depends_on METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-depends_on

__BEGIN_METHOD_CODE__

DispNode::depends_on()
{ 
	 ; 
	return mydepends_on;
    }

__END_METHOD_CODE__


	METHOD DispNode!enabled

		METRICS
			myenabled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD enabled
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:enabled METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-enabled

__BEGIN_METHOD_CODE__

DispNode::enabled()
{ return myenabled; }

__END_METHOD_CODE__


	METHOD DispNode!disabled

		METRICS
			myenabled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 9
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD disabled
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:9 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:disabled METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-disabled

__BEGIN_METHOD_CODE__

DispNode::disabled()
{ return !myenabled; }

__END_METHOD_CODE__


	METHOD DispNode!active

		METRICS
			myactive REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD active
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:active METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-active

__BEGIN_METHOD_CODE__

DispNode::active()
{ return myactive; }

__END_METHOD_CODE__


	METHOD DispNode!deferred

		METRICS
			mydeferred REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD deferred
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:deferred METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-deferred

__BEGIN_METHOD_CODE__

DispNode::deferred()
{ return mydeferred; }

__END_METHOD_CODE__


	METHOD DispNode!deferred

		METRICS
			mydeferred REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD deferred
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:deferred METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-deferred

__BEGIN_METHOD_CODE__

DispNode::deferred()
{ return mydeferred; }

__END_METHOD_CODE__


	METHOD DispNode!last_change

		METRICS
			mylast_change REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 13
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD last_change
			METHODID 16
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:13 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:last_change METHODID:16 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 16-last_change

__BEGIN_METHOD_CODE__

DispNode::last_change()
{ return mylast_change; }

__END_METHOD_CODE__


	METHOD DispNode!is_user_command
		CALLS
		name : DispNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD is_user_command
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:is_user_command METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-is_user_command

__BEGIN_METHOD_CODE__

DispNode::is_user_command()
{ return ::is_user_command(name()); }

__END_METHOD_CODE__


	METHOD DispNode!user_command
		CALLS
		name : DispNode



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD user_command
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:user_command METHODID:18 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 18-user_command

__BEGIN_METHOD_CODE__

DispNode::user_command()
{ return ::user_command(name()); }

__END_METHOD_CODE__


	METHOD DispNode!nodeptr

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD nodeptr
			METHODID 20
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:nodeptr METHODID:20 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 20-nodeptr

__BEGIN_METHOD_CODE__

DispNode::nodeptr()
{ return mynodeptr; }

__END_METHOD_CODE__


	METHOD DispNode!box
		CALLS
		box : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD box
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:box METHODID:21 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 21-box

__BEGIN_METHOD_CODE__

DispNode::box()
{ return mynodeptr->box(); }

__END_METHOD_CODE__


	METHOD DispNode!value

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD value
			METHODID 22
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:value METHODID:22 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 22-value

__BEGIN_METHOD_CODE__

DispNode::value()
{ return disp_value; }

__END_METHOD_CODE__


	METHOD DispNode!selected_value

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD selected_value
			METHODID 23
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:selected_value METHODID:23 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 23-selected_value

__BEGIN_METHOD_CODE__

DispNode::selected_value()
{ return myselected_value; }

__END_METHOD_CODE__


	METHOD DispNode!selected
		CALLS
		selected : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD selected
			METHODID 24
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:selected METHODID:24 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 24-selected

__BEGIN_METHOD_CODE__

DispNode::selected()
{ return mynodeptr->selected(); }

__END_METHOD_CODE__


	METHOD DispNode!moveTo
		CALLS
		moveTo : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispNode
			CLASSID 110
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD moveTo
			METHODID 25
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispNode CLASSID:110 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:moveTo METHODID:25 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 25-moveTo

__BEGIN_METHOD_CODE__

DispNode::moveTo(const BoxPoint& newPos)
{ mynodeptr->moveTo(newPos); }

__END_METHOD_CODE__


	METHOD DataDisp!new_display
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		new_display_cmd : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD new_display
			METHODID 74
			MMINUS 0
			OUT 0
			PARNUM 4
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:new_display METHODID:74 MMINUS:0 OUT:0 PARNUM:4 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 74-new_display

__BEGIN_METHOD_CODE__

DataDisp::new_display(string display_expression,
			    BoxPoint *pos = 0,
			    string depends_on = _REMOVED_STR_,
			    Widget origin = 0)
{
	gdb_command(new_display_cmd(display_expression, pos, depends_on), 
		    origin);
    }

__END_METHOD_CODE__


	METHOD DataDisp!refresh_display
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		refresh_display_cmd : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD refresh_display
			METHODID 75
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:refresh_display METHODID:75 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 75-refresh_display

__BEGIN_METHOD_CODE__

DataDisp::refresh_display(Widget origin = 0)
{
	gdb_command(refresh_display_cmd(), origin);
    }

__END_METHOD_CODE__


	METHOD DataDisp!disable_display
		CALLS
		size : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		disable_display_cmd : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD disable_display
			METHODID 76
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:disable_display METHODID:76 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 76-disable_display

__BEGIN_METHOD_CODE__

DataDisp::disable_display(IntArray& display_nrs, Widget origin = 0)
{
	if(display_nrs.size() > 0)
	    gdb_command(disable_display_cmd(display_nrs), origin);
    }

__END_METHOD_CODE__


	METHOD DataDisp!enable_display
		CALLS
		size : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		enable_display_cmd : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD enable_display
			METHODID 77
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:enable_display METHODID:77 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 77-enable_display

__BEGIN_METHOD_CODE__

DataDisp::enable_display(IntArray& display_nrs, Widget origin = 0)
{
	if(display_nrs.size() > 0)
	    gdb_command(enable_display_cmd(display_nrs), origin);
    }

__END_METHOD_CODE__


	METHOD DataDisp!delete_display
		CALLS
		size : _SYSTEM_OR_USER_,
		gdb_command : _SYSTEM_OR_USER_,
		delete_display_cmd : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 3
			CLASS DataDisp
			CLASSID 111
			CYCLO 2
			DOTS 1
			EQTEST 0
			EXPRORCALL 4
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD delete_display
			METHODID 78
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:3 CLASS:DataDisp CLASSID:111 CYCLO:2 DOTS:1 EQTEST:0 EXPRORCALL:4 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:delete_display METHODID:78 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 78-delete_display

__BEGIN_METHOD_CODE__

DataDisp::delete_display(IntArray& display_nrs, Widget origin = 0)
{
	if(display_nrs.size() > 0)
	    gdb_command(delete_display_cmd(display_nrs), origin);
    }

__END_METHOD_CODE__


	METHOD DataDisp!delete_display
		CALLS
		gdb_command : _SYSTEM_OR_USER_,
		delete_display_cmd : DataDisp



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 2
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 2
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD delete_display
			METHODID 79
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:2 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:2 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:delete_display METHODID:79 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 79-delete_display

__BEGIN_METHOD_CODE__

DataDisp::delete_display(const string& name, Widget origin = 0)
{
	gdb_command(delete_display_cmd(name), origin);
    }

__END_METHOD_CODE__


	METHOD DataDisp!graph_form

		METRICS
			graph_form_w REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS DataDisp
			CLASSID 111
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD graph_form
			METHODID 123
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:DataDisp CLASSID:111 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:graph_form METHODID:123 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 123-graph_form

__BEGIN_METHOD_CODE__

DataDisp::graph_form()
{ return graph_form_w; }

__END_METHOD_CODE__


	METHOD _StatusMsg!_StatusMsg
		CALLS
		set_status : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS _StatusMsg
			CLASSID 112
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD _StatusMsg
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:_StatusMsg CLASSID:112 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:_StatusMsg METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-_StatusMsg

__BEGIN_METHOD_CODE__

_StatusMsg::_StatusMsg(const string& c)
{
	set_status(cause + _REMOVED_STR_);
    }

__END_METHOD_CODE__


	METHOD _StatusMsg!~_StatusMsg
		CALLS
		set_status : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS _StatusMsg
			CLASSID 112
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~_StatusMsg
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:_StatusMsg CLASSID:112 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~_StatusMsg METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-~_StatusMsg

__BEGIN_METHOD_CODE__

_StatusMsg::~_StatusMsg()
{
	set_status(cause + _REMOVED_STR_ + outcome + _REMOVED_STR_);
    }

__END_METHOD_CODE__


	METHOD StatusMsg!StatusMsg
		CALLS
		lock_status : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS StatusMsg
			CLASSID 113
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD StatusMsg
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:StatusMsg CLASSID:113 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:StatusMsg METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-StatusMsg

__BEGIN_METHOD_CODE__

StatusMsg::StatusMsg(const string& c)
{
	lock_status();
    }

__END_METHOD_CODE__


	METHOD StatusMsg!~StatusMsg
		CALLS
		unlock_status : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS StatusMsg
			CLASSID 113
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~StatusMsg
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:StatusMsg CLASSID:113 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~StatusMsg METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-~StatusMsg

__BEGIN_METHOD_CODE__

StatusMsg::~StatusMsg()
{
	unlock_status();
    }

__END_METHOD_CODE__


	METHOD StatusDelay!StatusDelay

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StatusDelay
			CLASSID 114
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD StatusDelay
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StatusDelay CLASSID:114 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:StatusDelay METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-StatusDelay

__BEGIN_METHOD_CODE__

StatusDelay::StatusDelay(const string& c)
{}

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/buttons.o.nu.cls	 Class Number = 7
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/cmdtty.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/complete.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/userinfo.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/configinfo.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/dbx-lookup.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/disp-read.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/editing.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/environ.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/examine.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/exectty.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/exit.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/file.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/filetype.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/fonts.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/fortranize.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/gdbinit.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/graph.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/hostname.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/index.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/java.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/logo.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/mydialogs.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/options.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/post.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/question.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/regexps.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/resources.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/roulette.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/sashes.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/session.o.nu.cls


	METHOD StreamAction!StreamAction

		METRICS
			stream REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 6
			CALLEDN 0
			CLASS StreamAction
			CLASSID 115
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 4
			METHOD StreamAction
			METHODID 0
			MMINUS 0
			OUT 2
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:6 CALLEDN:0 CLASS:StreamAction CLASSID:115 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:4 METHOD:StreamAction METHODID:0 MMINUS:0 OUT:2 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 0-StreamAction

__BEGIN_METHOD_CODE__

StreamAction::StreamAction(ostream& os, const string& c)
{
	stream << action << _REMOVED_STR_;
    }

__END_METHOD_CODE__


	METHOD StreamAction!~StreamAction

		METRICS
			stream REFERRED 1 TIMES,
			ok REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 4
			CALLEDN 0
			CLASS StreamAction
			CLASSID 115
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 4
			METHOD ~StreamAction
			METHODID 1
			MMINUS 0
			OUT 2
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:4 CALLEDN:0 CLASS:StreamAction CLASSID:115 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:4 METHOD:~StreamAction METHODID:1 MMINUS:0 OUT:2 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:2 
		;


#ID 1-~StreamAction

__BEGIN_METHOD_CODE__

StreamAction::~StreamAction()
{
	if(ok)
	    stream << action << _REMOVED_STR_;
    }

__END_METHOD_CODE__


	METHOD StreamAction!failed

		METRICS
			stream REFERRED 1 TIMES,
			ok REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 1
			AVVARLEN 4
			CALLEDN 0
			CLASS StreamAction
			CLASSID 115
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 8
			METHOD failed
			METHODID 2
			MMINUS 0
			OUT 4
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 2

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:4 CALLEDN:0 CLASS:StreamAction CLASSID:115 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:8 METHOD:failed METHODID:2 MMINUS:0 OUT:4 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:2 
		;


#ID 2-failed

__BEGIN_METHOD_CODE__

StreamAction::failed(const string& msg)
{
	stream << action << _REMOVED_STR_ << msg << _REMOVED_STR_;
	ok = false;
    }

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/session.o.nu.cls	 Class Number = 1
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/settings.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/shell.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/shorten.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/show.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/source.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/string-fun.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/tips.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/toolbar.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ungrab.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/windows.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/xconfig.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/AliasGE.o.nu.cls


	METHOD AliasGraphEdge!AliasGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AliasGraphEdge
			CLASSID 116
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AliasGraphEdge
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AliasGraphEdge CLASSID:116 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AliasGraphEdge METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-AliasGraphEdge

__BEGIN_METHOD_CODE__

AliasGraphEdge::AliasGraphEdge(const AliasGraphEdge& edge)
{}

__END_METHOD_CODE__


	METHOD AliasGraphEdge!AliasGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AliasGraphEdge
			CLASSID 116
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD AliasGraphEdge
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 3
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AliasGraphEdge CLASSID:116 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:AliasGraphEdge METHODID:1 MMINUS:0 OUT:0 PARNUM:3 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-AliasGraphEdge

__BEGIN_METHOD_CODE__

AliasGraphEdge::AliasGraphEdge(int disp_nr, GraphNode *from, GraphNode *to)
{}

__END_METHOD_CODE__


	METHOD AliasGraphEdge!~AliasGraphEdge

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS AliasGraphEdge
			CLASSID 116
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~AliasGraphEdge
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:AliasGraphEdge CLASSID:116 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~AliasGraphEdge METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-~AliasGraphEdge

__BEGIN_METHOD_CODE__

AliasGraphEdge::~AliasGraphEdge()
{}

__END_METHOD_CODE__


	METHOD AliasGraphEdge!disp_nr

		METRICS
			_disp_nr REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS AliasGraphEdge
			CLASSID 116
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD disp_nr
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:AliasGraphEdge CLASSID:116 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:disp_nr METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-disp_nr

__BEGIN_METHOD_CODE__

AliasGraphEdge::disp_nr()
{ return _disp_nr; }

__END_METHOD_CODE__


	METHOD AliasGraphEdge!dup
		CALLS
		AliasGraphEdge : AliasGraphEdge



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS AliasGraphEdge
			CLASSID 116
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD dup
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:AliasGraphEdge CLASSID:116 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:dup METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-dup

__BEGIN_METHOD_CODE__

AliasGraphEdge::dup()
{
	return new AliasGraphEdge(*this);
    }

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/AliasGE.o.nu.cls	 Class Number = 1
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/BreakPoint.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/BreakPM.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/CodeCache.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/Command.o.nu.cls


	METHOD Queue!firstRec

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD firstRec
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:firstRec METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-firstRec

__BEGIN_METHOD_CODE__

Queue::firstRec()
{ return _first; }

__END_METHOD_CODE__


	METHOD Queue!clear

		METRICS
			ARRAYOP 0
			ASS 6
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 12
			LT 2
			METHOD clear
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 6
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:6 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:12 LT:2 METHOD:clear METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:6 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-clear

__BEGIN_METHOD_CODE__

Queue::clear()
{
        QueueRec<E> *rec = _first;    
	while(rec != 0)
	{
	    QueueRec<E> *kill = rec;
	    rec = rec->next;
	    delete kill;
	}

	_first = 0;
	_last  = 0;
    }

__END_METHOD_CODE__


	METHOD Queue!add
		CALLS
		ok : _SYSTEM_OR_USER_,
		next : _SYSTEM_OR_USER_,
		i : _SYSTEM_OR_USER_



		METRICS
			ARRAYOP 0
			ASS 3
			AVVARLEN 0
			CALLEDN 3
			CLASS Queue
			CLASSID 117
			CYCLO 2
			DOTS 2
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 1
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 1
			METHOD add
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:0 CALLEDN:3 CLASS:Queue CLASSID:117 CYCLO:2 DOTS:2 EQTEST:0 EXPRORCALL:5 GE:0 GT:1 IN:0 INDR:0 LE:0 LOC:4 LT:1 METHOD:add METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-add

__BEGIN_METHOD_CODE__

Queue::add(const Queue<E>& e)
{
	for(QueueIter<E> i = e; i.ok(); i = i.next())
	    operator += (i());
    }

__END_METHOD_CODE__


	METHOD Queue!Queue

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD Queue
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:Queue METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-Queue

__BEGIN_METHOD_CODE__

Queue::Queue()
{}

__END_METHOD_CODE__


	METHOD Queue!~Queue
		CALLS
		clear : Queue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD ~Queue
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:~Queue METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-~Queue

__BEGIN_METHOD_CODE__

Queue::~Queue()
{
	clear();
    }

__END_METHOD_CODE__


	METHOD Queue!Queue
		CALLS
		add : Queue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD Queue
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:Queue METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-Queue

__BEGIN_METHOD_CODE__

Queue::Queue(const Queue<E>& e)
{
	add(e);
    }

__END_METHOD_CODE__


	METHOD Queue!operator_=
		CALLS
		clear : Queue,
		add : Queue



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 2
			CLASS Queue
			CLASSID 117
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 3
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 8
			LT 0
			METHOD operator_=
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:2 CLASS:Queue CLASSID:117 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:3 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:8 LT:0 METHOD:operator_= METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-operator_=

__BEGIN_METHOD_CODE__

Queue::operator_=(const Queue<E>& e)
{
	if(&e != this)
	{
	    clear();
	    add(e);
	}
	return *this;
    }

__END_METHOD_CODE__


	METHOD Queue!enqueue_at_end

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 8
			LT 2
			METHOD enqueue_at_end
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:8 LT:2 METHOD:enqueue_at_end METHODID:7 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-enqueue_at_end

__BEGIN_METHOD_CODE__

Queue::enqueue_at_end(const E& e)
{
	QueueRec<E> *rec = new QueueRec<E>(e);
	if(_last == 0)
	    _first = rec;
	else
	    _last->next = rec;
	_last = rec;
    }

__END_METHOD_CODE__


	METHOD Queue!enqueue_after
		CALLS
		theRec : QueueIter



		METRICS
			ARRAYOP 0
			ASS 5
			AVVARLEN 0
			CALLEDN 1
			CLASS Queue
			CLASSID 117
			CYCLO 2
			DOTS 1
			EQTEST 1
			EXPRORCALL 3
			GE 0
			GT 3
			IN 0
			INDR 3
			LE 0
			LOC 8
			LT 3
			METHOD enqueue_after
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 5
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:5 AVVARLEN:0 CALLEDN:1 CLASS:Queue CLASSID:117 CYCLO:2 DOTS:1 EQTEST:1 EXPRORCALL:3 GE:0 GT:3 IN:0 INDR:3 LE:0 LOC:8 LT:3 METHOD:enqueue_after METHODID:8 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:5 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-enqueue_after

__BEGIN_METHOD_CODE__

Queue::enqueue_after(const E& e, QueueIter<E> a)
{
	QueueRec<E> *rec = new QueueRec<E>(e);
	QueueRec<E> *after = a.theRec();
	rec->next = after->next;
	after->next = rec;
	if(after == _last)
	    _last = rec;
    }

__END_METHOD_CODE__


	METHOD Queue!enqueue_at_start

		METRICS
			ARRAYOP 0
			ASS 4
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 2
			DOTS 0
			EQTEST 1
			EXPRORCALL 2
			GE 0
			GT 2
			IN 0
			INDR 1
			LE 0
			LOC 7
			LT 2
			METHOD enqueue_at_start
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 4
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:4 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:2 DOTS:0 EQTEST:1 EXPRORCALL:2 GE:0 GT:2 IN:0 INDR:1 LE:0 LOC:7 LT:2 METHOD:enqueue_at_start METHODID:9 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:4 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-enqueue_at_start

__BEGIN_METHOD_CODE__

Queue::enqueue_at_start(const E& e)
{
	QueueRec<E> *rec = new QueueRec<E>(e);
	rec->next = _first;
	if(_first == _last)
	    _last = rec;
	_first = rec;
    }

__END_METHOD_CODE__


	METHOD Queue!dequeue

		METRICS
			ARRAYOP 0
			ASS 9
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 5
			DOTS 0
			EQTEST 3
			EXPRORCALL 4
			GE 0
			GT 3
			IN 0
			INDR 5
			LE 0
			LOC 31
			LT 3
			METHOD dequeue
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 10
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:9 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:5 DOTS:0 EQTEST:3 EXPRORCALL:4 GE:0 GT:3 IN:0 INDR:5 LE:0 LOC:31 LT:3 METHOD:dequeue METHODID:10 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:10 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-dequeue

__BEGIN_METHOD_CODE__

Queue::dequeue(const E& e)
{
	QueueRec<E> *prev = 0;        
        QueueRec<E> *rec = _first;    

	while(rec != 0)
	{
	    QueueRec<E> *kill = rec;
	    rec = rec->next;

	    if(kill->elem == e)
	    {
		 
		if(kill == _last)
		    _last = prev;

		 
		if(prev == 0)
		    _first = kill->next;
		else
		    prev->next = kill->next;

		 
		delete kill;

		 
		break;
	    }
	    else
		prev = kill;
	}
    }

__END_METHOD_CODE__


	METHOD Queue!operator_+=
		CALLS
		enqueue_at_end : Queue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_+=
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_+= METHODID:11 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 11-operator_+=

__BEGIN_METHOD_CODE__

Queue::operator_+=(const E& e)
{ enqueue_at_end(e); }

__END_METHOD_CODE__


	METHOD Queue!operator_-=
		CALLS
		dequeue : Queue



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD operator_-=
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:operator_-= METHODID:12 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 12-operator_-=

__BEGIN_METHOD_CODE__

Queue::operator_-=(const E& e)
{ dequeue(e); }

__END_METHOD_CODE__


	METHOD Queue!first

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD first
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:first METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-first

__BEGIN_METHOD_CODE__

Queue::first()
{ return _first->elem; }

__END_METHOD_CODE__


	METHOD Queue!last

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD last
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:last METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-last

__BEGIN_METHOD_CODE__

Queue::last()
{ return _last->elem; }

__END_METHOD_CODE__


	METHOD Queue!first

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD first
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:first METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 13-first

__BEGIN_METHOD_CODE__

Queue::first()
{ return _first->elem; }

__END_METHOD_CODE__


	METHOD Queue!last

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD last
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:last METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 14-last

__BEGIN_METHOD_CODE__

Queue::last()
{ return _last->elem; }

__END_METHOD_CODE__


	METHOD Queue!isEmpty

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS Queue
			CLASSID 117
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD isEmpty
			METHODID 17
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:Queue CLASSID:117 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:isEmpty METHODID:17 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 17-isEmpty

__BEGIN_METHOD_CODE__

Queue::isEmpty()
{ return _first == 0; }

__END_METHOD_CODE__


	METHOD QueueIter!QueueIter

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD QueueIter
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:QueueIter METHODID:0 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-QueueIter

__BEGIN_METHOD_CODE__

QueueIter::QueueIter(QueueRec<E> *ptr)
{}

__END_METHOD_CODE__


	METHOD QueueIter!theRec

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD theRec
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:theRec METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-theRec

__BEGIN_METHOD_CODE__

QueueIter::theRec()
{ return rec; }

__END_METHOD_CODE__


	METHOD QueueIter!QueueIter

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD QueueIter
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:QueueIter METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-QueueIter

__BEGIN_METHOD_CODE__

QueueIter::QueueIter(const Queue<E>& queue)
{}

__END_METHOD_CODE__


	METHOD QueueIter!QueueIter

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD QueueIter
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:QueueIter METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-QueueIter

__BEGIN_METHOD_CODE__

QueueIter::QueueIter(const QueueIter<E>& iter)
{}

__END_METHOD_CODE__


	METHOD QueueIter!operator_=

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_=
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_= METHODID:4 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-operator_=

__BEGIN_METHOD_CODE__

QueueIter::operator_=(const QueueIter<E>& iter)
{
	rec = iter.rec;
	return *this;
    }

__END_METHOD_CODE__


	METHOD QueueIter!operator_=
		CALLS
		firstRec : Queue



		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 1
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 4
			LT 0
			METHOD operator_=
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:1 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:4 LT:0 METHOD:operator_= METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-operator_=

__BEGIN_METHOD_CODE__

QueueIter::operator_=(const Queue<E>& queue)
{
	rec = queue.firstRec();
	return *this;
    }

__END_METHOD_CODE__


	METHOD QueueIter!operator_

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD operator_
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:operator_ METHODID:-1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID -1-operator_

__BEGIN_METHOD_CODE__

QueueIter::operator_()
{ return rec->elem; }

__END_METHOD_CODE__


	METHOD QueueIter!operator_

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 0
			METHOD operator_
			METHODID -1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:1 LE:0 LOC:1 LT:0 METHOD:operator_ METHODID:-1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID -1-operator_

__BEGIN_METHOD_CODE__

QueueIter::operator_()
{ return rec->elem; }

__END_METHOD_CODE__


	METHOD QueueIter!ok

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ok
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ok METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-ok

__BEGIN_METHOD_CODE__

QueueIter::ok()
{ return rec != 0; }

__END_METHOD_CODE__


	METHOD QueueIter!next

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS QueueIter
			CLASSID 118
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 1
			IN 0
			INDR 1
			LE 0
			LOC 1
			LT 1
			METHOD next
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:QueueIter CLASSID:118 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:1 IN:0 INDR:1 LE:0 LOC:1 LT:1 METHOD:next METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-next

__BEGIN_METHOD_CODE__

QueueIter::next()
{ return QueueIter<E>(rec->next); }

__END_METHOD_CODE__

#=====================================================================
#File ../../code/ddd-3.0/ddd/Command.o.nu.cls	 Class Number = 2
#=====================================================================
#Process file  ../../code/ddd-3.0/ddd/DataDisp.o.nu.cls


	METHOD DispGraph!count_all
		CALLS
		length : DispNodeMap



		METRICS
			idMap REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD count_all
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:count_all METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 3-count_all

__BEGIN_METHOD_CODE__

DispGraph::count_all()
{ return idMap.length(); }

__END_METHOD_CODE__


	METHOD DispGraph!has_enabled

		METRICS
			no_enabled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_enabled
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_enabled METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 6-has_enabled

__BEGIN_METHOD_CODE__

DispGraph::has_enabled()
{ return !no_enabled; }

__END_METHOD_CODE__


	METHOD DispGraph!has_disabled

		METRICS
			no_disabled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 11
			CALLEDN 0
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD has_disabled
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:11 CALLEDN:0 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:has_disabled METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 7-has_disabled

__BEGIN_METHOD_CODE__

DispGraph::has_disabled()
{ return !no_disabled; }

__END_METHOD_CODE__


	METHOD DispGraph!get
		CALLS
		get : DispNodeMap



		METRICS
			idMap REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD get
			METHODID 18
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:get METHODID:18 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 18-get

__BEGIN_METHOD_CODE__

DispGraph::get(int disp_nr)
{ return idMap.get(disp_nr); }

__END_METHOD_CODE__


	METHOD DispGraph!contains
		CALLS
		contains : DispNodeMap



		METRICS
			idMap REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 5
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 1
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD contains
			METHODID 21
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:5 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:1 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:contains METHODID:21 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 21-contains

__BEGIN_METHOD_CODE__

DispGraph::contains(int disp_nr)
{ return idMap.contains(disp_nr); }

__END_METHOD_CODE__


	METHOD DispGraph!print
		CALLS
		print : Graph



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS DispGraph
			CLASSID 119
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD print
			METHODID 26
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 1
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:DispGraph CLASSID:119 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:print METHODID:26 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:1 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 26-print

__BEGIN_METHOD_CODE__

DispGraph::print(ostream& os, const GraphGC& gc = GraphGC())
{
	Graph::print(os, gc);
    }

__END_METHOD_CODE__


	METHOD PosBuffer!clear

		METRICS
			already_read REFERRED 1 TIMES,
			started REFERRED 1 TIMES,
			terminated REFERRED 1 TIMES,
			signaled REFERRED 1 TIMES,
			recompiled REFERRED 1 TIMES,
			check_pc REFERRED 1 TIMES,
			check_func REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 12
			AVVARLEN 9
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 14
			LT 0
			METHOD clear
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 12
			TERNINSTR 0
			USEDVARS 7

#METRICS ARRAYOP:0 ASS:12 AVVARLEN:9 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:14 LT:0 METHOD:clear METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:12 TERNINSTR:0 USEDVARS:7 
		;


#ID 0-clear

__BEGIN_METHOD_CODE__

PosBuffer::clear()
{
	pos_buffer      = _REMOVED_STR_;
	func_buffer     = _REMOVED_STR_;
	answer_buffer   = _REMOVED_STR_;
	pc_buffer       = _REMOVED_STR_;
	already_read    = Null;
	started         = false;
	terminated      = false;
	signaled        = false;
	recompiled      = false;
	auto_cmd_buffer = _REMOVED_STR_;
	check_pc        = true;
	check_func      = true;
    }

__END_METHOD_CODE__


	METHOD PosBuffer!PosBuffer

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD PosBuffer
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:PosBuffer METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-PosBuffer

__BEGIN_METHOD_CODE__

PosBuffer::PosBuffer()
{
	 
    }

__END_METHOD_CODE__


	METHOD PosBuffer!pos_found

		METRICS
			already_read REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 12
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 1
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD pos_found
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:12 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:1 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:pos_found METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 4-pos_found

__BEGIN_METHOD_CODE__

PosBuffer::pos_found()
{ return already_read == PosComplete; }

__END_METHOD_CODE__


	METHOD PosBuffer!pc_found

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD pc_found
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:pc_found METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-pc_found

__BEGIN_METHOD_CODE__

PosBuffer::pc_found()
{ return pc_buffer != _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD PosBuffer!auto_cmd_found

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD auto_cmd_found
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:auto_cmd_found METHODID:6 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-auto_cmd_found

__BEGIN_METHOD_CODE__

PosBuffer::auto_cmd_found()
{ return auto_cmd_buffer != _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD PosBuffer!get_position

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD get_position
			METHODID 7
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:get_position METHODID:7 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 7-get_position

__BEGIN_METHOD_CODE__

PosBuffer::get_position()
{ return pos_buffer; }

__END_METHOD_CODE__


	METHOD PosBuffer!get_function

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD get_function
			METHODID 8
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:get_function METHODID:8 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 8-get_function

__BEGIN_METHOD_CODE__

PosBuffer::get_function()
{ return func_buffer; }

__END_METHOD_CODE__


	METHOD PosBuffer!get_pc

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD get_pc
			METHODID 9
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:get_pc METHODID:9 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 9-get_pc

__BEGIN_METHOD_CODE__

PosBuffer::get_pc()
{ return pc_buffer; }

__END_METHOD_CODE__


	METHOD PosBuffer!get_auto_cmd

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD get_auto_cmd
			METHODID 10
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:get_auto_cmd METHODID:10 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 10-get_auto_cmd

__BEGIN_METHOD_CODE__

PosBuffer::get_auto_cmd()
{ return auto_cmd_buffer; }

__END_METHOD_CODE__


	METHOD PosBuffer!started_found

		METRICS
			started REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 7
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD started_found
			METHODID 11
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:7 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:started_found METHODID:11 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 11-started_found

__BEGIN_METHOD_CODE__

PosBuffer::started_found()
{ return started; }

__END_METHOD_CODE__


	METHOD PosBuffer!terminated_found

		METRICS
			terminated REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD terminated_found
			METHODID 12
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:terminated_found METHODID:12 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 12-terminated_found

__BEGIN_METHOD_CODE__

PosBuffer::terminated_found()
{ return terminated; }

__END_METHOD_CODE__


	METHOD PosBuffer!signaled_found

		METRICS
			signaled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 8
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD signaled_found
			METHODID 13
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:8 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:signaled_found METHODID:13 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 13-signaled_found

__BEGIN_METHOD_CODE__

PosBuffer::signaled_found()
{ return signaled; }

__END_METHOD_CODE__


	METHOD PosBuffer!recompiled_found

		METRICS
			recompiled REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 0
			AVVARLEN 10
			CALLEDN 0
			CLASS PosBuffer
			CLASSID 120
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD recompiled_found
			METHODID 14
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:10 CALLEDN:0 CLASS:PosBuffer CLASSID:120 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:recompiled_found METHODID:14 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 14-recompiled_found

__BEGIN_METHOD_CODE__

PosBuffer::recompiled_found()
{ return recompiled; }

__END_METHOD_CODE__


	METHOD NewDisplayInfo!NewDisplayInfo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NewDisplayInfo
			CLASSID 121
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD NewDisplayInfo
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NewDisplayInfo CLASSID:121 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:NewDisplayInfo METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-NewDisplayInfo

__BEGIN_METHOD_CODE__

NewDisplayInfo::NewDisplayInfo()
{}

__END_METHOD_CODE__


	METHOD NewDisplayInfo!~NewDisplayInfo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NewDisplayInfo
			CLASSID 121
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~NewDisplayInfo
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NewDisplayInfo CLASSID:121 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~NewDisplayInfo METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-~NewDisplayInfo

__BEGIN_METHOD_CODE__

NewDisplayInfo::~NewDisplayInfo()
{}

__END_METHOD_CODE__


	METHOD NewDisplayInfo!NewDisplayInfo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NewDisplayInfo
			CLASSID 121
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD NewDisplayInfo
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NewDisplayInfo CLASSID:121 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:NewDisplayInfo METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-NewDisplayInfo

__BEGIN_METHOD_CODE__

NewDisplayInfo::NewDisplayInfo(const NewDisplayInfo&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD NewDisplayInfo!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS NewDisplayInfo
			CLASSID 121
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:NewDisplayInfo CLASSID:121 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

NewDisplayInfo::operator_=(const NewDisplayInfo&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD RefreshInfo!RefreshInfo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RefreshInfo
			CLASSID 122
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD RefreshInfo
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RefreshInfo CLASSID:122 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:RefreshInfo METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-RefreshInfo

__BEGIN_METHOD_CODE__

RefreshInfo::RefreshInfo()
{}

__END_METHOD_CODE__


	METHOD RefreshInfo!~RefreshInfo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RefreshInfo
			CLASSID 122
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ~RefreshInfo
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RefreshInfo CLASSID:122 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:~RefreshInfo METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 1-~RefreshInfo

__BEGIN_METHOD_CODE__

RefreshInfo::~RefreshInfo()
{}

__END_METHOD_CODE__


	METHOD RefreshInfo!RefreshInfo

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RefreshInfo
			CLASSID 122
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD RefreshInfo
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RefreshInfo CLASSID:122 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:RefreshInfo METHODID:2 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 2-RefreshInfo

__BEGIN_METHOD_CODE__

RefreshInfo::RefreshInfo(const RefreshInfo&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD RefreshInfo!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS RefreshInfo
			CLASSID 122
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:RefreshInfo CLASSID:122 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:3 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-operator_=

__BEGIN_METHOD_CODE__

RefreshInfo::operator_=(const RefreshInfo&)
{
	 ; return *this;
    }

__END_METHOD_CODE__

#======================================================================
#File ../../code/ddd-3.0/ddd/DataDisp.o.nu.cls	 Class Number = 4
#======================================================================
#Process file  ../../code/ddd-3.0/ddd/DispBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/DispBuffer.o.nu.cls


	METHOD DispBuffer!DispBuffer

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispBuffer
			CLASSID 123
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD DispBuffer
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispBuffer CLASSID:123 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:DispBuffer METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-DispBuffer

__BEGIN_METHOD_CODE__

DispBuffer::DispBuffer()
{}

__END_METHOD_CODE__


	METHOD DispBuffer!displays_found

		METRICS
			ARRAYOP 0
			ASS 1
			AVVARLEN 0
			CALLEDN 0
			CLASS DispBuffer
			CLASSID 123
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD displays_found
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:1 AVVARLEN:0 CALLEDN:0 CLASS:DispBuffer CLASSID:123 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:displays_found METHODID:3 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-displays_found

__BEGIN_METHOD_CODE__

DispBuffer::displays_found()
{ return display_buffer != _REMOVED_STR_; }

__END_METHOD_CODE__


	METHOD DispBuffer!get_displays

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS DispBuffer
			CLASSID 123
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD get_displays
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:DispBuffer CLASSID:123 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:get_displays METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-get_displays

__BEGIN_METHOD_CODE__

DispBuffer::get_displays()
{ return display_buffer; }

__END_METHOD_CODE__


	METHOD DispBuffer!clear

		METRICS
			already_read REFERRED 1 TIMES,
			ARRAYOP 0
			ASS 3
			AVVARLEN 12
			CALLEDN 0
			CLASS DispBuffer
			CLASSID 123
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD clear
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:0 ASS:3 AVVARLEN:12 CALLEDN:0 CLASS:DispBuffer CLASSID:123 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:clear METHODID:5 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:1 
		;


#ID 5-clear

__BEGIN_METHOD_CODE__

DispBuffer::clear()
{
	display_buffer = _REMOVED_STR_;
	answer_buffer = _REMOVED_STR_;
	already_read = Null;
    }

__END_METHOD_CODE__

#========================================================================
#File ../../code/ddd-3.0/ddd/DispBuffer.o.nu.cls	 Class Number = 1
#========================================================================
#Process file  ../../code/ddd-3.0/ddd/DispGraph.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/DispNodeM.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/DispValue.o.nu.cls


	METHOD SimpleDispValue!SimpleDispValue

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS SimpleDispValue
			CLASSID 124
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD SimpleDispValue
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:SimpleDispValue CLASSID:124 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:SimpleDispValue METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-SimpleDispValue

__BEGIN_METHOD_CODE__

SimpleDispValue::SimpleDispValue()
{}

__END_METHOD_CODE__


	METHOD PointerDispValue!PointerDispValue

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PointerDispValue
			CLASSID 125
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD PointerDispValue
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PointerDispValue CLASSID:125 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:PointerDispValue METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-PointerDispValue

__BEGIN_METHOD_CODE__

PointerDispValue::PointerDispValue()
{}

__END_METHOD_CODE__


	METHOD ArrayDispValue!ArrayDispValue

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS ArrayDispValue
			CLASSID 126
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD ArrayDispValue
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:ArrayDispValue CLASSID:126 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:ArrayDispValue METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-ArrayDispValue

__BEGIN_METHOD_CODE__

ArrayDispValue::ArrayDispValue()
{}

__END_METHOD_CODE__


	METHOD StructOrClassDispValue!StructOrClassDispValue

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS StructOrClassDispValue
			CLASSID 127
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD StructOrClassDispValue
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:StructOrClassDispValue CLASSID:127 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:StructOrClassDispValue METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-StructOrClassDispValue

__BEGIN_METHOD_CODE__

StructOrClassDispValue::StructOrClassDispValue()
{}

__END_METHOD_CODE__

#=======================================================================
#File ../../code/ddd-3.0/ddd/DispValue.o.nu.cls	 Class Number = 4
#=======================================================================
#Process file  ../../code/ddd-3.0/ddd/DispValueA.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/EntryType.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/GDBAgent.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/HelpCB.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/HistoryF.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/MinMaxA.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/PosBuffer.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/SmartC.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/SourceView.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ddd.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/compare.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/glob.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/uniquify.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/StringMap.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/AsyncAgent.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/charsets.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ComboBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/LessTifH.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/MakeMenu.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/printBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/BoxPoint.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/FontFixBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/StringBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/TrueBox.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/DummyNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/NameNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ListNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VSLDefList.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/VSLLib.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/GraphEdge.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/PannedGE.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/comm-manag.o.nu.cls


	METHOD CmdData!add_destroy_callback

		METRICS
			origin REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 6
			CALLEDN 0
			CLASS CmdData
			CLASSID 128
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD add_destroy_callback
			METHODID 1
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:6 CALLEDN:0 CLASS:CmdData CLASSID:128 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:add_destroy_callback METHODID:1 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 1-add_destroy_callback

__BEGIN_METHOD_CODE__

CmdData::add_destroy_callback()
{
	if(origin != 0)
	    XtAddCallback(origin, ((char*)&XtStrings[_ARGS_]) , clear_origin, 
			  (XtPointer)this);
    }

__END_METHOD_CODE__


	METHOD CmdData!remove_destroy_callback

		METRICS
			origin REFERRED 2 TIMES,
			ARRAYOP 1
			ASS 1
			AVVARLEN 6
			CALLEDN 0
			CLASS CmdData
			CLASSID 128
			CYCLO 2
			DOTS 0
			EQTEST 0
			EXPRORCALL 5
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD remove_destroy_callback
			METHODID 2
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 1

#METRICS ARRAYOP:1 ASS:1 AVVARLEN:6 CALLEDN:0 CLASS:CmdData CLASSID:128 CYCLO:2 DOTS:0 EQTEST:0 EXPRORCALL:5 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:remove_destroy_callback METHODID:2 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:1 
		;


#ID 2-remove_destroy_callback

__BEGIN_METHOD_CODE__

CmdData::remove_destroy_callback()
{
	if(origin != 0)
	    XtRemoveCallback(origin, ((char*)&XtStrings[_ARGS_]) , clear_origin,
			     (XtPointer)this);
    }

__END_METHOD_CODE__


	METHOD CmdData!CmdData
		CALLS
		add_destroy_callback : CmdData



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS CmdData
			CLASSID 128
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD CmdData
			METHODID 3
			MMINUS 0
			OUT 0
			PARNUM 2
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:CmdData CLASSID:128 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:CmdData METHODID:3 MMINUS:0 OUT:0 PARNUM:2 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 3-CmdData

__BEGIN_METHOD_CODE__

CmdData::CmdData(Widget orig = 0, Filtering fd = TryFilter)
{
	add_destroy_callback();
    }

__END_METHOD_CODE__


	METHOD CmdData!~CmdData
		CALLS
		remove_destroy_callback : CmdData



		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 1
			CLASS CmdData
			CLASSID 128
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 1
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 5
			LT 0
			METHOD ~CmdData
			METHODID 4
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 3
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:1 CLASS:CmdData CLASSID:128 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:1 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:5 LT:0 METHOD:~CmdData METHODID:4 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:3 TERNINSTR:0 USEDVARS:0 
		;


#ID 4-~CmdData

__BEGIN_METHOD_CODE__

CmdData::~CmdData()
{
	remove_destroy_callback();
	delete disp_buffer;
	delete pos_buffer;
    }

__END_METHOD_CODE__


	METHOD CmdData!CmdData

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CmdData
			CLASSID 128
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD CmdData
			METHODID 5
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 1
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CmdData CLASSID:128 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:CmdData METHODID:5 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:1 TERNINSTR:0 USEDVARS:0 
		;


#ID 5-CmdData

__BEGIN_METHOD_CODE__

CmdData::CmdData(const CmdData&)
{
	 ;
    }

__END_METHOD_CODE__


	METHOD CmdData!operator_=

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS CmdData
			CLASSID 128
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 3
			LT 0
			METHOD operator_=
			METHODID 6
			MMINUS 0
			OUT 0
			PARNUM 1
			PPLUS 0
			RETPOINT 1
			SCOPEOP 0
			STMNT 2
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:CmdData CLASSID:128 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:3 LT:0 METHOD:operator_= METHODID:6 MMINUS:0 OUT:0 PARNUM:1 PPLUS:0 RETPOINT:1 SCOPEOP:0 STMNT:2 TERNINSTR:0 USEDVARS:0 
		;


#ID 6-operator_=

__BEGIN_METHOD_CODE__

CmdData::operator_=(const CmdData&)
{
	 ; return *this;
    }

__END_METHOD_CODE__


	METHOD PlusCmdData!PlusCmdData

		METRICS
			ARRAYOP 0
			ASS 0
			AVVARLEN 0
			CALLEDN 0
			CLASS PlusCmdData
			CLASSID 129
			CYCLO 1
			DOTS 0
			EQTEST 0
			EXPRORCALL 0
			GE 0
			GT 0
			IN 0
			INDR 0
			LE 0
			LOC 1
			LT 0
			METHOD PlusCmdData
			METHODID 0
			MMINUS 0
			OUT 0
			PARNUM 0
			PPLUS 0
			RETPOINT 0
			SCOPEOP 0
			STMNT 0
			TERNINSTR 0
			USEDVARS 0

#METRICS ARRAYOP:0 ASS:0 AVVARLEN:0 CALLEDN:0 CLASS:PlusCmdData CLASSID:129 CYCLO:1 DOTS:0 EQTEST:0 EXPRORCALL:0 GE:0 GT:0 IN:0 INDR:0 LE:0 LOC:1 LT:0 METHOD:PlusCmdData METHODID:0 MMINUS:0 OUT:0 PARNUM:0 PPLUS:0 RETPOINT:0 SCOPEOP:0 STMNT:0 TERNINSTR:0 USEDVARS:0 
		;


#ID 0-PlusCmdData

__BEGIN_METHOD_CODE__

PlusCmdData::PlusCmdData()
{}

__END_METHOD_CODE__

#========================================================================
#File ../../code/ddd-3.0/ddd/comm-manag.o.nu.cls	 Class Number = 2
#========================================================================
#Process file  ../../code/ddd-3.0/ddd/expired.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/history.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/mainloop.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/print.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/select.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/status.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/value-read.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/ArgField.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/DispNode.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/HistoryD.o.nu.cls

#Process file  ../../code/ddd-3.0/ddd/WhatNextCB.o.nu.cls
