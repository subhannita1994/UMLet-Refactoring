/*
 * (c) Copyright 2001-2004 Yann-Gaël Guéhéneuc,
 * University of Montréal.
 *
 * Use and copying of this software and preparation of derivative works
 * based upon this software are permitted. Any copy of this software or
 * of any derivative work must include the above copyright notice of
 * the author, this paragraph and the one after it.
 *
 * This software is made available AS IS, and THE AUTHOR DISCLAIMS
 * ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, AND NOT WITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN,
 * ANY LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
 * EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
 * NEGLIGENCE) OR STRICT LIABILITY, EVEN IF THE AUTHOR IS ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 *
 * All Rights Reserved.
 */
package padl.creator.parser;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import padl.kernel.Constants;
import padl.kernel.IAssociation;
import padl.kernel.IContainerAggregation;
import padl.kernel.IElement;
import padl.kernel.IEntity;
import padl.kernel.IField;
import padl.kernel.IFirstClassEntity;
import padl.kernel.IIdiomLevelModel;
import padl.kernel.IMethod;
import padl.kernel.IParameter;
import padl.kernel.IPackage;
import padl.kernel.exception.ModelDeclarationException;
import padl.kernel.impl.Factory;
import padl.util.Util;

import padl.creator.AOLCreator;
import padl.creator.misc.Utils;

import util.lang.Modifier;
import util.multilingual.MultilingualManager;

parser code {:
    public static void main(final String args[]) throws Exception {
        new AOLIdiomParser(new AOLLexer(new FileInputStream(".src/DDD/ddd.raw.aol"))).parse();
    }

	// Yann 2004/12/13: Hack!
	// This is just a hack to print out the number of classes currently analysed.
	// public int numberOfClasses = 0;
	private boolean areSemanticActionsEnabled = false;
    private IIdiomLevelModel idiomLevelModel;
    private List listOfElements = new ArrayList();
    private List listOfGeneralizations = new ArrayList();
    private List listOfRelations = new ArrayList();
    private List listOfArguments = new ArrayList();

	IPackage createAndGetDefaultPackage() {
		IPackage enclosingPackage = (IPackage) this.getIdiomLevelModel().getConstituentFromID(AOLCreator.AOL_PACKAGE_ID);
		if (enclosingPackage == null) {
        	try {
				enclosingPackage = Factory.getInstance().createPackage(AOLCreator.AOL_PACKAGE_ID);
            }
            catch(final ModelDeclarationException mde) {
            	mde.printStackTrace();
            }
		}
		return enclosingPackage;
	}
    List getListOfElements() {
        return this.listOfElements;
    }
    void addToListOfElements(final IElement anElement) {
        this.listOfElements.add(anElement);
    }
    void resetListOfElements() {
        this.listOfElements.clear();
    }
    List getListOfGeneralizations() {
        return this.listOfGeneralizations;
    }
    void addToListOfGeneralizations(final String aName) {
        this.listOfGeneralizations.add(aName);
    }
    void resetListOfGeneralizations() {
        this.listOfGeneralizations.clear();
    }
    List getListOfRelations() {
        return this.listOfRelations;
    }
    void addToListOfRelations(final String aTargetClassName) {
        this.listOfRelations.add(aTargetClassName);
    }
    void resetListOfRelations() {
        this.listOfRelations.clear();
    }
    List getListOfArguments() {
        return this.listOfArguments;
    }
    void addToListOfArguments(final IParameter aParameter) {
        this.listOfArguments.add(aParameter);
    }
    void resetListOfArguments() {
        this.listOfArguments.clear();
    }
    public void syntax_error(padl.creator.javacup.runtime.Symbol current) {
		report_error(
			MultilingualManager.getString(
				"SYN_ERR",
				AOLIdiomParser.class,
				new Object[] { new Integer(current.sym)}),
			current);
    }
    public void report_error(String message, padl.creator.javacup.runtime.Symbol info) {
        ((AOLLexer) this.getScanner()).reportErrorMessage(message, info);
    }
    public IIdiomLevelModel getIdiomLevelModel() {
        return this.idiomLevelModel;
    }
    public void setIdiomLevelModel(final IIdiomLevelModel aIdiomLevelModel) {
        this.idiomLevelModel = aIdiomLevelModel;
    }
	public boolean areSemanticActionsEnabled() {
		return this.areSemanticActionsEnabled;
	}
	public void enableSemanticActions(final boolean b) {
		this.areSemanticActionsEnabled = b;
	}
:}

/* Terminals (tokens returned by the scanner) */
terminal String ABSTRACT, AGGREGATION, ATTRIBUTES, CLASS;
terminal String COLON, CONST, COMMA, CONTAINER;
terminal String GENERALIZATION, IDENTIFIER, LPAREN, MANY, MULT, NAME;
terminal String ONE, ONE_OR_MANY, OPERATIONS, OPTIONALLY_ONE;
terminal String PARTS, PRIVATE, PROTECTED, PUBLIC;
terminal String RELATION, ROLES, RPAREN, SEMICOLON, SHARED, SUBCLASSES;
terminal String UNDEF_SCOPE, UNDEFINED, UNSIGNED, VOLATILE;
terminal String DOLLARPLUS, DOLLARMINUS, DOLLAR, PLUS, MINUS;

/* Non terminals */
non terminal IIdiomLevelModel model;
non terminal String list_declarations, declaration;
non terminal String class_declaration, class_content;
non terminal String attribute_list, attribute, attribute_type_list;
non terminal String operation_list, operation, visibility, operation_name, operation_content;
non terminal String operation_arg_list, operation_arg, operation_type_list;
non terminal String association, association_arg, roles, role, superclasses, targetedclasses, multiplicity;
non terminal String aggregation, generalization, sub_classes_names;
non terminal String type, string;



/*-------------------------- MODEL --------------------------*/

model                   ::= list_declarations
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
                            		RESULT = this.parser.getIdiomLevelModel();
                            	}
                            :}
                          ;
list_declarations       ::= list_declarations declaration
                          | declaration;
declaration             ::= class_declaration SEMICOLON
                          | association SEMICOLON
                          | generalization SEMICOLON
                          | aggregation SEMICOLON;

/*-------------------------- CLASSES ------------------------*/

class_declaration       ::= CLASS string:name 
                            {:
                            	// System.out.println(++this.parser.numberOfClasses);
                            	if (this.parser.areSemanticActionsEnabled()) {
                            		// final IEntity entity = Factory.getInstance().createClass(name.toCharArray(), name.toCharArray());
	                                final IFirstClassEntity sourceEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(name.toCharArray());
	                                final Iterator iterator = this.parser.getListOfElements().iterator();
	                                while (iterator.hasNext()) {
	                                	try {
		                                    sourceEntity.addConstituent((IElement) iterator.next());
		                                }
		                                catch(final ModelDeclarationException mde) {
		                                	mde.printStackTrace();
		                                }
		                                catch(final NullPointerException e) {
		                                	System.err.println(name + " cannot be found!?!");
		                                }
	                                }
	                                this.parser.resetListOfElements();
									//	try {
									//		this.parser.createAndGetDefaultPackage().addConstituent(entity);
									//	}
									//	catch(final ModelDeclarationException mde) {
									//		mde.printStackTrace();
									//	}
								}
                            :}
						  | CLASS string:name class_content
                            {:
                            	// System.out.println(++this.parser.numberOfClasses);
                            	if (this.parser.areSemanticActionsEnabled()) {
                            		// final IEntity entity = Factory.getInstance().createClass(name.toCharArray(), name.toCharArray());
	                                final IFirstClassEntity sourceEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(name.toCharArray());
	                                final Iterator iterator = this.parser.getListOfElements().iterator();
	                                while (iterator.hasNext()) {
	                                	try {
		                                    sourceEntity.addConstituent((IElement) iterator.next());
		                                }
		                                catch(final ModelDeclarationException mde) {
		                                	mde.printStackTrace();
		                                }
		                                catch(final NullPointerException e) {
		                                	System.err.println(name + " cannot be found!?!");
		                                }
	                                }
	                                this.parser.resetListOfElements();
									//	try {
									//		this.parser.createAndGetDefaultPackage().addConstituent(entity);
									//	}
									//	catch(final ModelDeclarationException mde) {
									//		mde.printStackTrace();
									//	}
								}
                            :}
                          ;
class_content           ::= ATTRIBUTES attribute_list OPERATIONS operation_list
                          | ATTRIBUTES attribute_list
                          | ATTRIBUTES attribute_list OPERATIONS
                          | OPERATIONS operation_list
                          | ATTRIBUTES OPERATIONS operation_list
                          | ATTRIBUTES OPERATIONS;
attribute_list          ::= attribute COMMA attribute_list
                          | attribute;
                        /* Hack to handle line 34289 of mozilla-1.0-concat_des_2006-02-15114305.aol */
attribute_type_list     ::= string attribute_type_list
                          | string:t1 COLON COLON string:t2
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t1 + "::" + t2;
                            	}
                            :}
                          | UNSIGNED string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | VOLATILE string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | string:t UNSIGNED
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          ;
attribute               ::= UNDEF_SCOPE visibility:v string:n COLON attribute_type_list:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
                            	    // TODO: Should compute the cardinality!
	                                final IField field = Factory.getInstance().createField(n.toCharArray(), n.toCharArray(), t.toCharArray(), Constants.CARDINALITY_ONE);
	                                if (v.equals("PUBLIC")) {
	                                    field.setVisibility(Modifier.PUBLIC);
	                                }
	                                else if (v.equals("PROTECTED")) {
	                                    field.setVisibility(Modifier.PROTECTED);
	                                }
	                                else if (v.equals("PRIVATE")) {
	                                    field.setVisibility(Modifier.PRIVATE);
	                                }
	                                this.parser.addToListOfElements(field);
								}
                            :}
                          | UNDEF_SCOPE visibility:v string:n COLON 
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
                            	    // TODO: Should compute the cardinality!
	                                final IField field = Factory.getInstance().createField(n.toCharArray(), n.toCharArray(), "".toCharArray(), Constants.CARDINALITY_ONE);
	                                if (v.equals("PUBLIC")) {
	                                    field.setVisibility(Modifier.PUBLIC);
	                                }
	                                else if (v.equals("PROTECTED")) {
	                                    field.setVisibility(Modifier.PROTECTED);
	                                }
	                                else if (v.equals("PRIVATE")) {
	                                    field.setVisibility(Modifier.PRIVATE);
	                                }
	                                this.parser.addToListOfElements(field);
								}
                            :}
                          | UNDEF_SCOPE string:n COLON
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
                            	    // TODO: Should compute the cardinality!
	                                final IField field = Factory.getInstance().createField(n.toCharArray(), n.toCharArray(), "".toCharArray(), Constants.CARDINALITY_ONE);
	                                this.parser.addToListOfElements(field);
                                }
                            :}
                          | UNDEF_SCOPE string:n COLON attribute_type_list:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
                            	    // TODO: Should compute the cardinality!
	                                final IField field = Factory.getInstance().createField(n.toCharArray(), n.toCharArray(), t.toCharArray(), Constants.CARDINALITY_ONE);
	                                this.parser.addToListOfElements(field);
                                }
                            :}
                          ;
operation_list          ::= operation COMMA operation_list
                          | operation COMMA 
                          | operation
                          ;
operation               ::= UNDEF_SCOPE visibility:v operation_name:n operation_content:oc
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                final IMethod method = Factory.getInstance().createMethod((n + Math.random()).toCharArray(),(n + Math.random()).toCharArray());
	                                method.setName(n.toCharArray());
	                                method.setReturnType(oc.toCharArray());
	                                if (v.equals("PUBLIC")) {
	                                    method.setVisibility(Modifier.PUBLIC);
	                                }
	                                else if (v.equals("PROTECTED")) {
	                                    method.setVisibility(Modifier.PROTECTED);
	                                }
	                                else if (v.equals("PRIVATE")) {
	                                    method.setVisibility(Modifier.PRIVATE);
	                                }
	                                final Iterator iterator = this.parser.getListOfArguments().iterator();
	                                while (iterator.hasNext()) {
	                                    method.addConstituent((IParameter) iterator.next());
	                                }
	                                this.parser.resetListOfArguments();
	                                this.parser.addToListOfElements(method);
                                }
                            :}
                          | UNDEF_SCOPE operation_name:n operation_content:oc
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                final IMethod method = Factory.getInstance().createMethod((n + Math.random()).toCharArray(),(n + Math.random()).toCharArray());
	                                method.setName(n.toCharArray());
	                                method.setReturnType(oc.toCharArray());
	                                final Iterator iterator = this.parser.getListOfArguments().iterator();
	                                while (iterator.hasNext()) {
	                                    method.addConstituent((IParameter) iterator.next());
	                                }
	                                this.parser.resetListOfArguments();
	                                this.parser.addToListOfElements(method);
                                }
                            :}
                          ;
operation_name          ::= LPAREN string:s1 string:s2 COMMA string:s3 string:s4 RPAREN
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s1 + ' ' + s2 + ' ' + s3 + ' ' + s4;
                            	}
                            :}
                          | LPAREN string:s1 string:s2 RPAREN
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s1 + ' ' + s2;
                            	}
                            :}
                          | LPAREN string:n RPAREN
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
                            	}
                            :}
                          | string:n
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
	                            }
                            :}
                          | UNSIGNED:n
							/* See line 211515 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
	                            }
                            :}
                          | CONST:n
                            /*
                            	I manage the case where the name of the
                            	operation is actually "const".
								See line 87207 of the original moz-1.0.rel.n.aol file.
                            */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
	                            }
                            :}
                          ;
operation_content       ::= LPAREN operation_arg_list RPAREN COLON operation_type_list:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | LPAREN operation_arg_list RPAREN COLON
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = "";
                            	}
                            :}
                          | LPAREN operation_arg_list RPAREN
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = "void";
                            	}
                            :}
                          | LPAREN RPAREN COLON operation_type_list:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | LPAREN RPAREN COLON
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = "void";
                            	}
                            :}
                          | LPAREN RPAREN
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = "void";
                            	}
                            :}
                          ;
operation_arg_list      ::= operation_arg COMMA operation_arg_list
                          | operation_arg
                          ;
operation_arg           ::= type:t string:n
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                IEntity targetEntity = (IEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(t.toCharArray());
	                                if (targetEntity == null) {
										if (Util.isPrimtiveType(t.toCharArray())) {
											targetEntity = Factory.getInstance().createPrimitiveEntity(t.toCharArray());
										}
										else {
											try {
												targetEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(t.toCharArray()), Utils.cleanCppEntityName(t.toCharArray()));
												this.parser.createAndGetDefaultPackage().addConstituent(targetEntity);
								            }
            								catch(final ModelDeclarationException mde) {
            									mde.printStackTrace();
            								}
										}
									}
	                                if (targetEntity != null) {
		                                this.parser.addToListOfArguments(Factory.getInstance().createParameter(targetEntity, n.toCharArray(), Constants.CARDINALITY_ONE));
		                            }
                                }
                            :}
                          | type:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
									/* See line 13 of mozilla-1.0-concat_des_2006-02-15114305.aol */
									final int pos;
									final String targetName;
                            	    if ((pos = t.indexOf('*')) > 0) {
		                                t = t.substring(0, pos);
                            	    }
	                                IEntity targetEntity = (IEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(t.toCharArray());
	                                if (targetEntity == null) {
										if (Util.isPrimtiveType(t.toCharArray())) {
											targetEntity = Factory.getInstance().createPrimitiveEntity(t.toCharArray());
										}
										else {
											try {
												targetEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(t.toCharArray()), Utils.cleanCppEntityName(t.toCharArray()));
												this.parser.createAndGetDefaultPackage().addConstituent(targetEntity);
								            }
            								catch(final ModelDeclarationException mde) {
            									mde.printStackTrace();
            								}
										}
									}
	                                if (targetEntity != null) {
	                                	this.parser.addToListOfArguments(Factory.getInstance().createParameter(targetEntity, ("a" + t).toCharArray(), Constants.CARDINALITY_ONE));
	                               	}
                                }
                            :}
                          | UNSIGNED:t
                            /* See line 2697 of ddd.raw.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                IEntity targetEntity = (IEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(t.toCharArray());
	                                if (targetEntity == null) {
										if (Util.isPrimtiveType(t.toCharArray())) {
											targetEntity = Factory.getInstance().createPrimitiveEntity(t.toCharArray());
										}
										else {
											try {
												targetEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(t.toCharArray()), Utils.cleanCppEntityName(t.toCharArray()));
												this.parser.createAndGetDefaultPackage().addConstituent(targetEntity);
								            }
            								catch(final ModelDeclarationException mde) {
            									mde.printStackTrace();
            								}
										}
									}
	                                if (targetEntity != null) {
		                                this.parser.addToListOfArguments(Factory.getInstance().createParameter(targetEntity, ("a" + t).toCharArray(), Constants.CARDINALITY_ONE));
		                            }
                                }
                            :}
                          ;
                        /* See line 32364 of mozilla-1.0-concat_des_2006-02-15114305.aol */
operation_type_list     ::= string operation_type_list:t
                            {:
	                           	RESULT = t;
                            :}
                          | string:t1 COLON COLON string:t2
							/* See line 103713 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t1 + "::" + t2;
                            	}
                            :}
                          | COLON string:t
							/* See line 22713 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | UNSIGNED string:t
							/* See line 118818 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | UNSIGNED 
							/* See line 211515 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = "void";
                            	}
                            :}
                          | CONST
							/* See line 192050 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = "void";
                            	}
                            :}
                          | string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          ;
/*
operation_type          ::= string:t1 COLON COLON string:t2
							See line 103713 of mozilla-1.0-concat_des_2006-02-15114305.aol
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t1 + "::" + t2;
                            	}
                            :}
                          | type:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | string:t COLON
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | UNSIGNED:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          ;
*/
visibility              ::= DOLLARPLUS:v
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = v;
                            	}
                            :}
                          | DOLLARMINUS:v
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = v;
                            	}
                            :}
                          | DOLLAR:v
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = v;
                            	}
                            :}
                          | PLUS:v
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = v;
                            	}
                            :}
                          | MINUS:v
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = v;
                            	}
                            :}
                          ;

/*-------------------------- RELATIONS ----------------------*/

association             ::= RELATION string:n ROLES roles
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
                            		// Yann 2007/02/22: Assumption
                            		// I assume that the first class is the source
                            		// and any following classes are the target.
                               		final Iterator iterator = this.parser.getListOfRelations().iterator();
                               		final String sourceClassname = (String) iterator.next();
	                                final IFirstClassEntity sourceEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(sourceClassname.toCharArray());
	                                if (sourceEntity != null) {
	                                	try {
	                                		while (iterator.hasNext()) {
	                                			final String targetClassName = (String) iterator.next();
				                                IFirstClassEntity targetEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(targetClassName.toCharArray());
				                                if (targetEntity == null) {
				                                	// Yann 2004/12/20: Null target entity.
				                                	// The target entity might be null in the case of:
				                                	//	RELATION 
													//	ROLES
													//	CLASS	nsAString MULT UNDEFINED,
													//	CLASS	const_iterator MULT UNDEFINED
													// where "const_iterator" is not an entity.
													// Yann 2007/02/01: Ghosts
													// I also handle ghosts now...
													try {
														targetEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(targetClassName.toCharArray()), Utils.cleanCppEntityName(targetClassName.toCharArray()));
														this.parser.createAndGetDefaultPackage().addConstituent(targetEntity);
										            }
		            								catch(final ModelDeclarationException mde) {
		            									mde.printStackTrace();
		            								}
												}
				                                if (targetEntity != null) {
					                                final IAssociation association = Factory.getInstance().createAssociationRelationship(("UNKNOWN" + Math.random()).toCharArray(), targetEntity, Constants.CARDINALITY_MANY);
					                                association.setName(n.toCharArray());
					                                sourceEntity.addConstituent(association);
					                            }
				                        	}
				                        	this.parser.resetListOfRelations();
			                        	}
			                        	catch(final ModelDeclarationException mde) {
			                        		// Yann 2007/02/01: Primitives
			                        		// In case one tries to built a ghost named "int".
			                        	}
	                                }
	                                else {
	                                	System.err.print("Cannot find source entity in AOL Idiom Parser!?");
	                                }
                                }
                            :}
                          | RELATION ROLES roles
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
                               		final Iterator iterator = this.parser.getListOfRelations().iterator();
                               		final String sourceClassname = (String) iterator.next();
	                                final IFirstClassEntity sourceEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(sourceClassname.toCharArray());
	                                if (sourceEntity != null) {
	                                	try {
	                                		while (iterator.hasNext()) {
	                                			final String targetClassName = (String) iterator.next();
				                                IFirstClassEntity targetEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(targetClassName.toCharArray());
				                                if (targetEntity == null) {
				                                	// Yann 2004/12/20: Null target entity.
				                                	// The target entity might be null in the case of:
				                                	//	RELATION 
													//	ROLES
													//	CLASS	nsAString MULT UNDEFINED,
													//	CLASS	const_iterator MULT UNDEFINED
													// where "const_iterator" is not an entity.
													// Yann 2007/02/01: Ghosts
													// I also handle ghosts now...
													try {
														targetEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(targetClassName.toCharArray()), Utils.cleanCppEntityName(targetClassName.toCharArray()));
														this.parser.createAndGetDefaultPackage().addConstituent(targetEntity);
										            }
		            								catch(final ModelDeclarationException mde) {
		            									mde.printStackTrace();
		            								}
												}
				                                if (targetEntity != null) {
					                                final IAssociation association = Factory.getInstance().createAssociationRelationship(("UNKNOWN" + Math.random()).toCharArray(), targetEntity, Constants.CARDINALITY_MANY);
					                                sourceEntity.addConstituent(association);
					                            }
				                        	}
				                        	this.parser.resetListOfRelations();
			                        	}
			                        	catch(final ModelDeclarationException mde) {
			                        		// Yann 2007/02/01: Primitives
			                        		// In case one tries to built a ghost named "int".
			                        	}
	                                }
	                                else {
	                                	System.err.print("Cannot find source entity ");
	                                	System.err.println(sourceEntity);
	                                }
                                }
                            :}
                          ;
roles                   ::= roles COMMA role:r
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	this.parser.addToListOfRelations(r);
                            	}
                            :}
                          | role role:r
                            /* See line 272592 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	this.parser.addToListOfRelations(r);
                            	}
                            :}
                          | role:r
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	this.parser.addToListOfRelations(r);
                            	}
                            :}
                          ;
role                    ::= CLASS targetedclasses:s MULT multiplicity
							/* See line 72731 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s;
                            	}
                            :}
                          | CLASS string:n COLON COLON superclasses MULT multiplicity
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
                            	}
                            :}
                          | CLASS string:n COLON COLON MULT multiplicity
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
                            	}
                            :}
                          | CLASS string COLON string:n MULT multiplicity
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
                            	}
                            :}
/*
                          | CLASS string:n MULT multiplicity
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
                            	}
                            :}
*/
                          ;
superclasses            ::= string:s superclasses 
							{:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s;
                            	}
							:}
							/* See line 115144 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                          | string:s COLON COLON superclasses 
							{:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s;
                            	}
							:}
                          | string:s
							{:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s;
                            	}
							:}
                          ;
targetedclasses         ::= /* See line 25384 of mozilla-1.4-concat_des_2006-02-14072834.aol */
							string:s1 COLON COLON string: s2 COMMA targetedclasses
							{:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s1 + "::" + s2;
                            	}
							:}
                          | /* See line 115146 of mozilla-1.0-concat_des_2006-02-15114305.aol */
							string:s COMMA targetedclasses
							{:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s;
                            	}
							:}
                          | string:s
							{:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = s;
                            	}
							:}
                          ;
multiplicity            ::= /*
                               So far, AOL files contain UNDEFINED
                               multiplicity relationships only.
                            */
                            ONE
                          | MANY
                          | ONE_OR_MANY
                          | OPTIONALLY_ONE
                          | UNDEFINED;

aggregation             ::= AGGREGATION NAME string:n CONTAINER role:source PARTS roles
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                final IFirstClassEntity sourceEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(source.toCharArray());
	                                if (sourceEntity != null) {
	                                	try {
	                                		final Iterator iterator = this.parser.getListOfRelations().iterator();
	                                		while (iterator.hasNext()) {
	                                			final String targetClassName = (String) iterator.next();
				                                IFirstClassEntity targetEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(targetClassName.toCharArray());
				                                if (targetEntity == null) {
				                                	// Yann 2004/12/20: Null target entity.
				                                	// The target entity might be null in the case of:
				                                	//	RELATION 
													//	ROLES
													//	CLASS	nsAString MULT UNDEFINED,
													//	CLASS	const_iterator MULT UNDEFINED
													// where "const_iterator" is not an entity.
													// Yann 2007/02/01: Ghosts
													// I also handle ghosts now...
													try {
														targetEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(targetClassName.toCharArray()), Utils.cleanCppEntityName(targetClassName.toCharArray()));
														this.parser.createAndGetDefaultPackage().addConstituent(targetEntity);
										            }
		            								catch(final ModelDeclarationException mde) {
		            									mde.printStackTrace();
		            								}
												}
				                                if (targetEntity != null) {
					                                final IContainerAggregation aggregation = Factory.getInstance().createContainerAggregationRelationship(("UNKNOWN" + Math.random()).toCharArray(), targetEntity, Constants.CARDINALITY_MANY);
					                                aggregation.setName(n.toCharArray());
					                                sourceEntity.addConstituent(aggregation);
					                            }
				                        	}
				                        	this.parser.resetListOfRelations();
			                        	}
			                        	catch(final ModelDeclarationException mde) {
			                        		// Yann 2007/02/01: Primitives
			                        		// In case one tries to built a ghost named "int".
			                        	}
	                                }
	                                else {
	                                	System.err.print("Cannot find source entity ");
	                                	System.err.println(sourceEntity);
	                                }
                                }
                            :}
                          | AGGREGATION CONTAINER role:source PARTS roles
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                final IFirstClassEntity sourceEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(source.toCharArray());
	                                if (sourceEntity != null) {
	                                	try {
	                                		final Iterator iterator = this.parser.getListOfRelations().iterator();
	                                		while (iterator.hasNext()) {
	                                			final String targetClassName = (String) iterator.next();
				                                IFirstClassEntity targetEntity = (IFirstClassEntity) this.parser.createAndGetDefaultPackage().getConstituentFromName(targetClassName.toCharArray());
				                                if (targetEntity == null) {
				                                	// Yann 2004/12/20: Null target entity.
				                                	// The target entity might be null in the case of:
				                                	//	RELATION 
													//	ROLES
													//	CLASS	nsAString MULT UNDEFINED,
													//	CLASS	const_iterator MULT UNDEFINED
													// where "const_iterator" is not an entity.
													// Yann 2007/02/01: Ghosts
													// I also handle ghosts now...
													try {
														targetEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(targetClassName.toCharArray()), Utils.cleanCppEntityName(targetClassName.toCharArray()));
														this.parser.createAndGetDefaultPackage().addConstituent(targetEntity);
										            }
		            								catch(final ModelDeclarationException mde) {
		            									mde.printStackTrace();
		            								}
												}
				                                if (targetEntity != null) {
					                                final IContainerAggregation aggregation = Factory.getInstance().createContainerAggregationRelationship(("UNKNOWN" + Math.random()).toCharArray(), targetEntity, Constants.CARDINALITY_MANY);
					                                sourceEntity.addConstituent(aggregation);
					                            }
				                        	}
				                        	this.parser.resetListOfRelations();
			                        	}
			                        	catch(final ModelDeclarationException mde) {
			                        		// Yann 2007/02/01: Primitives
			                        		// In case one tries to built a ghost named "int".
			                        	}
	                                }
	                                else {
	                                	System.err.print("Cannot find source entity ");
	                                	System.err.println(sourceEntity);
	                                }
                                }
                            :}
                          ;

generalization          ::= GENERALIZATION SUBCLASSES sub_classes_names
                          | GENERALIZATION string:n SUBCLASSES sub_classes_names:l
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                final IPackage enclosingPackage = this.parser.createAndGetDefaultPackage();
	                                IFirstClassEntity superEntity = (IFirstClassEntity) enclosingPackage.getConstituentFromName(n.toCharArray());
	                                // Yann 2004/03/30: Exception!
	                                // An invalid superclass is given on line 1545 of the original moz-1.0.rel.n.aol file.
	                                // I check if the superclass is valid before adding subclasses.
	                                if (superEntity == null) {
	                                	try {
											superEntity = Factory.getInstance().createGhost(Utils.cleanCppEntityName(n.toCharArray()), Utils.cleanCppEntityName(n.toCharArray()));
											enclosingPackage.addConstituent(superEntity);
											//        System.err.print("Invalid superclass: ");
											//        System.err.println(n);
											//        System.err.print("(Look for \"GENERALIZATION ");
											//        System.err.print(n);
											//        System.err.println("\")");
							            }
        								catch(final ModelDeclarationException mde) {
        									mde.printStackTrace();
        								}
	                                }
                                    final Iterator iterator = this.parser.getListOfGeneralizations().iterator();
                                    while (iterator.hasNext()) {
                                    	final String entityName = (String) iterator.next();
                                        final IFirstClassEntity entity = (IFirstClassEntity) enclosingPackage.getConstituentFromName(entityName.toCharArray());
                                        try {
                                        	entity.addInheritedEntity(superEntity);
                                        }
                                        catch(final ModelDeclarationException mde) {
                                        	mde.printStackTrace();
                                        }
                                        catch(final NullPointerException npe) {
                                        	System.err.println(entityName + " cannot be found!?!");
                                        	// npe.printStackTrace();
                                        }
                                    }
	                                this.parser.resetListOfGeneralizations();
                                }
                            :}
                          ;

sub_classes_names       ::= string:n COMMA sub_classes_names:l
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                this.parser.addToListOfGeneralizations(n);
                                }
                            :}
                          | string:n
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                                this.parser.addToListOfGeneralizations(n);
                                }
                            :}
                          ;

/*-------------------------- STRINGS ------------------------*/

string                  ::= IDENTIFIER:n
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = n;
                            	}
                            :}
                          ;

type                    ::= CONST string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | UNSIGNED string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          /* See line 31406 of mozilla-1.0-concat_des_2006-02-15114305.aol */
                          | VOLATILE string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | string:t UNSIGNED 
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          | string:t
                            {:
                            	if (this.parser.areSemanticActionsEnabled()) {
	                            	RESULT = t;
                            	}
                            :}
                          ;
