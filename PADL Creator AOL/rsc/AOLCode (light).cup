package aol;

import java.io.FileInputStream;

parser code {:
	public static void main(final String args[]) throws Exception {
		new AOLParser(new AOLLexer(new FileInputStream("../Ptidej UI Viewer Standalone/aol/DDD/ddd.raw.aol"))).parse();
	}
:}

/* Terminals (tokens returned by the scanner). */
terminal String ABSTRACT, AGGREGATION, ATTRIBUTES, CLASS;
terminal String COLON, CONST, COMMA, CONTAINER;
terminal String GENERALIZATION, IDENTIFIER, LPAREN, MANY, MULT, NAME;
terminal String ONE, ONE_OR_MANY, OPERATIONS, OPTIONALLY_ONE;
terminal String PARTS, PRIVATE, PROTECTED, PUBLIC;
terminal String RELATION, ROLES, RPAREN, SEMICOLON, SHARED, SQUARE, SUBCLASSES;
terminal String UNDEF_SCOPE, UNDEFINED, UNSIGNED;

/* Non terminals */
non terminal String model, list_declarations, declaration, comment_line, comment;
non terminal String class_declaration, class_content, attribute_list, attribute;
non terminal String operation_list, operation, operation_arg_list, operation_name, operation_content, argument, operation_type, visibility;
non terminal String association, association_arg, roles, role, multiplicity;
non terminal String aggregation, generalization, sub_classes_names;
non terminal String type, string;



/*-------------------------- MODEL --------------------------*/

model					::= list_declarations;
list_declarations		::= list_declarations declaration
						  | list_declarations comment_line
						  | declaration
						  | comment_line;
declaration				::= class_declaration SEMICOLON
						  | association SEMICOLON
						  | generalization SEMICOLON
						  | aggregation SEMICOLON;

/*-------------------------- CLASSES ------------------------*/

class_declaration		::= CLASS string class_content
						  | CLASS string comment_line class_content
						  ;
class_content			::= ATTRIBUTES attribute_list OPERATIONS operation_list
						  | ATTRIBUTES attribute_list
						  | OPERATIONS operation_list
						  | ATTRIBUTES OPERATIONS operation_list;
attribute_list			::= attribute COMMA attribute_list
						  | attribute;
attribute				::= /* See line 800 of ddd.raw.aol */
							visibility SHARED string COLON string COLON type
						  | /* See line 800 of ddd.raw.aol */
							visibility string COLON string COLON type
						  | /* See line 800 of ddd.raw.aol */
							visibility SHARED string COLON string COLON UNSIGNED
						  | /* See line 800 of ddd.raw.aol */
							visibility string COLON string COLON UNSIGNED
						  | visibility SHARED string COLON type
						  | visibility string COLON type
						  | visibility SHARED string COLON UNSIGNED
						  | visibility string COLON UNSIGNED;
operation_list			::= operation:o COMMA operation_list:list
							{: System.out.println("CUP/operation:" + o); :}
						  | operation:o
							{: System.out.println("CUP/operation:" + o); RESULT = o; :} ;
operation				::= visibility:v ABSTRACT SHARED operation_name:n operation_content:oc
							{: RESULT = v + " SHARED " + n + ' ' + oc ; :}
						  | visibility:v ABSTRACT operation_name:n operation_content:oc
							{: RESULT = v + ' ' + n + ' ' + oc ; :}
						  | visibility:v SHARED operation_name:n operation_content:oc
							{: RESULT = v + " SHARED " + n + ' ' + oc ; :}
						  | visibility:v operation_name:n operation_content:oc
							{: RESULT = v + ' ' + n + ' ' + oc ; :}
						  ;
operation_name			::= LPAREN string:s RPAREN
							{: RESULT = s; :}
						  | string:s 
							{: RESULT = s; :}
						  ;
operation_content		::= LPAREN operation_arg_list:args RPAREN COLON operation_type
						  | LPAREN operation_arg_list:args RPAREN
						  | LPAREN RPAREN COLON operation_type
						  | LPAREN RPAREN
						  ;
operation_arg_list		::= argument:a COMMA operation_arg_list:list
							{: RESULT = a + ',' + list; :}
						  | argument:a
							{: RESULT = a; :}
						  ;
argument				::= type:t string:s
							{: RESULT = t + ' ' + s; :}
						  | type:t
							{: RESULT = t; :}
						  | /* See line 2697 of ddd.raw.aol */
							UNSIGNED:t
							{: RESULT = t; :}
						  ;
operation_type			::= /* See line 1441 of ddd.raw.aol */
							string:s COLON type:t
							{: RESULT = s + ':' + t; :}
						  | string:s COLON
							{: RESULT = s + ':'; :}
						  | /* See line 2274 of ddd.raw.aol */
							type:t string:s
						  	{: RESULT = t + ' ' + s; :}
						  | type:t
							{: RESULT = t; :}
						  | UNSIGNED:t
							{: RESULT = t; :}
						  ;
visibility				::= PUBLIC:s
							{: RESULT = s; :}
						  | PRIVATE:s
							{: RESULT = s; :}
						  | PROTECTED:s
							{: RESULT = s; :}
						  | UNDEF_SCOPE:s
							{: RESULT = s; :}
						  ;

/*-------------------------- RELATIONS ----------------------*/

association				::= RELATION string association_arg
						  | RELATION association_arg;
association_arg			::= ROLES roles;
roles					::= role COMMA roles
						  | role;
role					::= CLASS string COLON COLON string MULT multiplicity
						  | CLASS string COLON COLON MULT multiplicity
						  | CLASS string COLON string MULT multiplicity
						  | CLASS string MULT multiplicity;
multiplicity			::= ONE
						  | MANY
						  | ONE_OR_MANY 
						  | OPTIONALLY_ONE
						  | UNDEFINED;

aggregation				::= AGGREGATION CONTAINER role PARTS roles
						  | AGGREGATION NAME string CONTAINER role PARTS roles;

generalization			::= GENERALIZATION string SUBCLASSES sub_classes_names;

sub_classes_names		::= string COMMA sub_classes_names
						  | string;

/*-------------------------- COMMENTS ----------------------*/

comment_line			::= SQUARE comment
						  | SQUARE;
comment					::= string comment
						  | string;

/*-------------------------- STRINGS ------------------------*/

type					::= CONST string:s
							{: RESULT = s; :}
						  | UNSIGNED string:s
							{: RESULT = s; :}
						  | string:s
							{: RESULT = s; :}
						  ;
string					::= IDENTIFIER:id
							{: System.out.println("CUP/string: " + id); RESULT = id; :}
						  ;