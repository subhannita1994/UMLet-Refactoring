/*******************************************************************************
 * Copyright (c) 2001-2014 Yann-Gaël Guéhéneuc and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Yann-Gaël Guéhéneuc and others, see in file; API and its implementation
 ******************************************************************************/
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Oct 23 18:05:49 EDT 2007
//----------------------------------------------------

package sad.rule.creator;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import sad.rule.creator.javacup.runtime.Symbol;
import sad.rule.creator.javacup.runtime.lr_parser;
import sad.rule.creator.model.IAssociation;
import sad.rule.creator.model.IAttribute;
import sad.rule.creator.model.IConstituent;
import sad.rule.creator.model.IInheritance;
import sad.rule.creator.model.IMetric;
import sad.rule.creator.model.IOperator;
import sad.rule.creator.model.IRule;
import sad.rule.creator.model.IRuleCard;
import sad.rule.creator.model.ISemantic;
import sad.rule.creator.model.IStruct;
import sad.rule.creator.model.impl.Factory;
import sad.rule.creator.utils.Constants;
import sad.rule.creator.visitor.GhostRuleCleaner;
import util.io.ProxyConsole;

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$RULEParser$actions {
	private final RULEParser parser;

	/** Constructor */
	CUP$RULEParser$actions(final RULEParser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final sad.rule.creator.javacup.runtime.Symbol CUP$RULEParser$do_action(
		final int CUP$RULEParser$act_num,
		final sad.rule.creator.javacup.runtime.lr_parser CUP$RULEParser$parser,
		final java.util.Stack CUP$RULEParser$stack,
		final int CUP$RULEParser$top) throws java.lang.Exception {
		/* Symbol object for return from actions */
		sad.rule.creator.javacup.runtime.Symbol CUP$RULEParser$result;

		/* select the action based on the action number */
		switch (CUP$RULEParser$act_num) {
		/*. . . . . . . . . . . . . . . . . . . .*/
			case 67 : // string ::= IDENTIFIER 
				{
					String RESULT = null;
					final java.lang.String n =
						(java.lang.String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					RESULT = n;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							22/*string*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 66 : // cardinality ::= OPTIONNALY_ONE 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.CARDINALITY_OPTIONNALY_ONE);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							21/*cardinality*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 65 : // cardinality ::= ONE_OR_MANY 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.CARDINALITY_ONE_OR_MANY);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							21/*cardinality*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 64 : // cardinality ::= MANY 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.CARDINALITY_MANY);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							21/*cardinality*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 63 : // cardinality ::= ONE 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.CARDINALITY_ONE);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							21/*cardinality*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 62 : // name_relation ::= INHERIT 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.RELATION_INHERIT);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							20/*name_relation*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 61 : // name_relation ::= COMPOS 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.RELATION_COMPOS);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							20/*name_relation*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 60 : // name_relation ::= AGGREG 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.RELATION_AGGREG);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							20/*name_relation*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 59 : // name_relation ::= ASSOC 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.RELATION_ASSOC);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							20/*name_relation*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 58 : // relationship ::= name_relation TWO_DOT string FROM TWO_DOT string cardinality TO TWO_DOT string cardinality 
				{
					final Object RESULT = null;
					final Object nr =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 10)).value;
					final String name =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 8)).value;
					final String from =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 5)).value;
					final Object sourceCardinality =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 4)).value;
					final String to =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;
					final Object targetCardinality =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					//System.out.println ("Association : " + nr.toString());
					IAssociation association = null;
					IInheritance inheritance = null;

					IConstituent sourceConstituent = null; //this.parser.getRulesSet().getConstituentFromName(from);
					IConstituent targetConstituent = null; //this.parser.getRulesSet().getConstituentFromName(to);

					// Create a temporary RuleGhost if the source constituent does not exist
					if (sourceConstituent == null) {
						sourceConstituent =
							Factory.getInstance().createRuleGhost(from);
					}

					// Create a temporary RuleGhost if the target constituent does not exist
					if (targetConstituent == null) {
						targetConstituent =
							Factory.getInstance().createRuleGhost(to);
					}

					if (((Integer) nr).intValue() == Constants.RELATION_ASSOC) {
						association =
							Factory
								.getInstance()
								.createAssociationRelationship(
									name,
									sourceConstituent,
									targetConstituent,
									((Integer) sourceCardinality).intValue(),
									((Integer) targetCardinality).intValue());
						this.parser.addToListOfElements(association);
					}
					else if (((Integer) nr).intValue() == Constants.RELATION_AGGREG) {
						association =
							Factory
								.getInstance()
								.createAssociationRelationship(
									name,
									sourceConstituent,
									targetConstituent,
									((Integer) sourceCardinality).intValue(),
									((Integer) targetCardinality).intValue());
						this.parser.addToListOfElements(association);
					}
					else if (((Integer) nr).intValue() == Constants.RELATION_COMPOS) {
						association =
							Factory
								.getInstance()
								.createAssociationRelationship(
									name,
									sourceConstituent,
									targetConstituent,
									((Integer) sourceCardinality).intValue(),
									((Integer) targetCardinality).intValue());
						this.parser.addToListOfElements(association);
					}
					else if (((Integer) nr).intValue() == Constants.RELATION_INHERIT) {
						inheritance =
							Factory
								.getInstance()
								.createInheritanceRelationship(
									name,
									sourceConstituent,
									targetConstituent,
									((Integer) sourceCardinality).intValue(),
									((Integer) targetCardinality).intValue());
						this.parser.addToListOfElements(inheritance);
					}

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							19/*relationship*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 10)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 57 : // list_relationships ::= relationship list_relationships 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							18/*list_relationships*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 1)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 56 : // list_relationships ::= relationship 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							18/*list_relationships*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 55 : // id_struct_noparam ::= ONE_METHOD 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.ONE_METHOD);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							17/*id_struct_noparam*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 54 : // id_struct_noparam ::= DIFFERENT_PARAMETER 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.DIFFERENT_PARAMETER);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							17/*id_struct_noparam*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 53 : // id_struct_noparam ::= METHOD_NO_PARAM 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.METHOD_NO_PARAM);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							17/*id_struct_noparam*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 52 : // id_struct_param ::= IS_ABSTRACT 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.IS_ABSTRACT);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							16/*id_struct_param*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 51 : // id_struct_param ::= GLOBAL_VARIABLE 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.GLOBAL_VARIABLE);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							16/*id_struct_param*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 50 : // id_struct_param ::= MULTIPLE_INTERFACE 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.MULTIPLE_INTERFACE);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							16/*id_struct_param*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 49 : // id_struct_param ::= PUBLIC_FIELD 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.PUBLIC_FIELD);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							16/*id_struct_param*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 48 : // id_struct_param ::= PRIVATE_FIELD 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.PRIVATE_FIELD);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							16/*id_struct_param*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 47 : // id_struct_param ::= METHOD_ACCESSOR 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.METHOD_ACCESSOR);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							16/*id_struct_param*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 46 : // cont_value_semantic ::= string COLON cont_value_semantic 
				{
					final Object RESULT = null;
					final String value_semantic =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 2)).value;

					this.parser.addToListOfSemanticElements(value_semantic);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							15/*cont_value_semantic*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 2)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 45 : // cont_value_semantic ::= string 
				{
					final Object RESULT = null;
					final String value_semantic =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					this.parser.addToListOfSemanticElements(value_semantic);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							15/*cont_value_semantic*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 44 : // value_semantic ::= LBRACE cont_value_semantic RBRACE 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							14/*value_semantic*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 2)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 43 : // id_semantic ::= FIELDNAME 
				{
					Object RESULT = null;
					RESULT = new Integer(Constants.FIELD_NAME);
					;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							13/*id_semantic*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 42 : // id_semantic ::= METHODNAME 
				{
					Object RESULT = null;
					RESULT = new Integer(Constants.METHOD_NAME);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							13/*id_semantic*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 41 : // id_semantic ::= CLASSNAME 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.CLASS_NAME);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							13/*id_semantic*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 40 : // fuzziness ::= string 
				{
					Object RESULT = null;
					final String value =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					RESULT = new Double(value);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							12/*fuzziness*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 39 : // comparison_operator ::= NOT_EQ 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.NOT_EQ);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							11/*comparison_operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 38 : // comparison_operator ::= SUP_EQ 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.SUP_EQ);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							11/*comparison_operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 37 : // comparison_operator ::= SUP 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.SUP);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							11/*comparison_operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 36 : // comparison_operator ::= EQ 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.EQ);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							11/*comparison_operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 35 : // comparison_operator ::= INF_EQ 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.INF_EQ);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							11/*comparison_operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 34 : // comparison_operator ::= INF 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.INF);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							11/*comparison_operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 33 : // value_ordi ::= string 
				{
					Object RESULT = null;
					final String dv =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					RESULT = new Double(dv);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							10/*value_ordi*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 32 : // value_ordi ::= NONE 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.NONE);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							10/*value_ordi*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 31 : // value_ordi ::= VERY_LOW 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.VERY_LOW);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							10/*value_ordi*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 30 : // value_ordi ::= LOW 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.LOW);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							10/*value_ordi*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 29 : // value_ordi ::= MEDIUM 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.MEDIUM);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							10/*value_ordi*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 28 : // value_ordi ::= HIGH 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.HIGH);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							10/*value_ordi*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 27 : // value_ordi ::= VERY_HIGH 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.VERY_HIGH);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							10/*value_ordi*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 26 : // id_metric ::= string 
				{
					Object RESULT = null;
					final String idMetric =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					RESULT =
						Factory.getInstance().createMetric(
							idMetric.toString(),
							0,
							0);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							9/*id_metric*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 25 : // id_metric ::= id_metric MINUS id_metric 
				{
					Object RESULT = null;
					final Object op1 =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 2)).value;
					final Object op2 =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					final IMetric operator =
						Factory.getInstance().createMetric(
							op1.toString() + "+" + op2.toString(),
							Constants.MINUS,
							(IMetric) op1,
							(IMetric) op2);

					RESULT = operator;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							9/*id_metric*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 2)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 24 : // id_metric ::= id_metric PLUS id_metric 
				{
					Object RESULT = null;
					final Object op1 =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 2)).value;
					final Object op2 =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					final IMetric operator =
						Factory.getInstance().createMetric(
							op1.toString() + "+" + op2.toString(),
							Constants.PLUS,
							(IMetric) op1,
							(IMetric) op2);

					RESULT = operator;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							9/*id_metric*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 2)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 23 : // attribute ::= LPAREN STRUCT TWO_DOT id_struct_noparam RPAREN 
				{
					final Object RESULT = null;
					final Object st =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;

					final IStruct struct =
						Factory.getInstance().createStruct(
							"STRUCT." + Math.random(),
							((Integer) st).intValue());
					this.parser.addToListOfAttributes(struct);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							8/*attribute*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 4)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 22 : // attribute ::= LPAREN STRUCT TWO_DOT id_struct_param COLON string RPAREN 
				{
					final Object RESULT = null;
					final Object st =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 3)).value;
					final String val =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;

					final IStruct struct =
						Factory.getInstance().createStruct(
							"STRUCT." + Math.random(),
							((Integer) st).intValue(),
							new Integer(val).intValue());
					this.parser.addToListOfAttributes(struct);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							8/*attribute*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 6)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 21 : // attribute ::= LPAREN SEMANTIC TWO_DOT id_semantic COLON value_semantic RPAREN 
				{
					final Object RESULT = null;
					final Object sy =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 3)).value;

					//System.out.println ("Semantic : " + sy);
					final ISemantic semantic =
						Factory.getInstance().createSemantic(
							"SEMANTIC." + Math.random(),
							((Integer) sy).intValue(),
							this.parser.getListOfSemanticElements());

					this.parser.resetListOfSemanticElements();
					this.parser.addToListOfAttributes(semantic);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							8/*attribute*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 6)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 20 : // attribute ::= LPAREN METRIC TWO_DOT id_metric COLON value_ordi COLON fuzziness RPAREN 
				{
					final Object RESULT = null;
					final Object newMetric =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 5)).value;
					final Object vo =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 3)).value;
					final Object fuzz =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;

					//IMetric metric;

					if (vo instanceof Integer) {
						((IMetric) newMetric).setOrdinalValue(((Integer) vo)
							.intValue());
					}
					else {
						((IMetric) newMetric).setNumericValue(((Double) vo)
							.doubleValue());
					}

					((IMetric) newMetric).setFuzziness(((Double) fuzz)
						.doubleValue());

					this.parser.addToListOfAttributes((IMetric) newMetric);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							8/*attribute*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 8)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 19 : // attribute ::= LPAREN METRIC TWO_DOT id_metric COLON comparison_operator COLON value_ordi COLON fuzziness RPAREN 
				{
					final Object RESULT = null;
					final Object newMetric =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 7)).value;
					final Object co =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 5)).value;
					final Object vo =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 3)).value;
					final Object fuzz =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;

					//IMetric metric;

					if (vo instanceof Integer) {
						((IMetric) newMetric).setOrdinalValue(((Integer) vo)
							.intValue());
					}
					else {
						((IMetric) newMetric).setNumericValue(((Double) vo)
							.doubleValue());
					}

					((IMetric) newMetric).setFuzziness(((Double) fuzz)
						.doubleValue());

					((IMetric) newMetric).setComparisonOperator(((Integer) co)
						.intValue());

					this.parser.addToListOfAttributes((IMetric) newMetric);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							8/*attribute*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 10)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 18 : // list_attributes ::= operator attribute attribute 
				{
					final Object RESULT = null;
					final Object op =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 2)).value;

					// Ouf, this is a dangerous thing  :-(

					// Once we are here we can assume that "ListOfAttributes" contains the two operand of the operation
					final IAttribute operand1 =
						(IAttribute) this.parser.getListOfAttributes().get(0);
					final IAttribute operand2 =
						(IAttribute) this.parser.getListOfAttributes().get(1);

					final IOperator operator =
						Factory.getInstance().createOperator(
							"OPERATOR." + Math.random(),
							((Integer) op).intValue(),
							operand1,
							operand2);
					this.parser.addToListOfElements(operator);

					this.parser.resetListOfAttributes();

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							7/*list_attributes*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 2)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 17 : // list_attributes ::= attribute 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							7/*list_attributes*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 16 : // operator ::= NEG 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.OPERATOR_NEG);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							6/*operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 15 : // operator ::= INCL 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.OPERATOR_INCL);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							6/*operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 14 : // operator ::= DIFF 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.OPERATOR_DIFF);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							6/*operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 13 : // operator ::= UNION 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.OPERATOR_UNION);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							6/*operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 12 : // operator ::= INTER 
				{
					Object RESULT = null;

					RESULT = new Integer(Constants.OPERATOR_INTER);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							6/*operator*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 11 : // content_rule ::= list_attributes 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							5/*content_rule*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 10 : // content_rule ::= list_relationships 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							5/*content_rule*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 9 : // content_rule ::= operator string string 
				{
					final Object RESULT = null;
					final Object op =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 2)).value;
					final String op1 =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;
					final String op2 =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 0)).value;

					IConstituent operator1 = null; //this.parser.getRulesSet().getConstituentFromName(op1);
					IConstituent operator2 = null; //this.parser.getRulesSet().getConstituentFromName(op2);

					// Create a temporary RuleGhost if the operator constituent does not exist
					if (operator1 == null) {
						operator1 = Factory.getInstance().createRuleGhost(op1);
					}

					// Create a temporary RuleGhost if the operator constituent does not exist
					if (operator2 == null) {
						operator2 = Factory.getInstance().createRuleGhost(op2);
					}

					final IOperator operator =
						Factory.getInstance().createOperator(
							"OPERATOR." + Math.random(),
							((Integer) op).intValue(),
							operator1,
							operator2);
					this.parser.addToListOfElements(operator);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							5/*content_rule*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 2)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 8 : // rule ::= RULE TWO_DOT string LBRACE error RBRACE SEMI 
				{
					final Object RESULT = null;
					final String ruleName =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 4)).value;

					ProxyConsole
						.getInstance()
						.errorOutput()
						.print("Syntax error near \"");
					ProxyConsole
						.getInstance()
						.errorOutput()
						.print(this.parser.tokenInError);
					ProxyConsole
						.getInstance()
						.errorOutput()
						.print("\" on rule \"");
					ProxyConsole.getInstance().errorOutput().print(ruleName);
					ProxyConsole.getInstance().errorOutput().println("\"");
					this.parser.hasError = true;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							4/*rule*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 6)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 7 : // rule ::= RULE TWO_DOT string SEMI 
				{
					final Object RESULT = null;
					final String ruleName =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;

					//System.out.println ("Rule : " + ruleName);
					final IRule rule =
						Factory.getInstance().createRule(ruleName);
					this.parser.addToListOfRules(rule);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							4/*rule*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 3)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 6 : // rule ::= RULE TWO_DOT string LBRACE content_rule RBRACE SEMI 
				{
					final Object RESULT = null;
					final String ruleName =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 4)).value;

					//System.out.println ("Rule : " + ruleName);
					final IRule rule =
						Factory.getInstance().createRule(ruleName);

					Iterator iterator =
						this.parser.getListOfElements().iterator();
					while (iterator.hasNext()) {
						rule.addConstituent((IConstituent) iterator.next());
					}

					iterator = this.parser.getListOfAttributes().iterator();
					while (iterator.hasNext()) {
						rule.addConstituent((IConstituent) iterator.next());
					}

					this.parser.resetListOfAttributes();
					this.parser.resetListOfElements();
					this.parser.addToListOfRules(rule);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							4/*rule*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 6)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 5 : // list_rules ::= list_rules rule 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							3/*list_rules*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 1)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 4 : // list_rules ::= rule 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							3/*list_rules*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 3 : // rule_card ::= RULE_CARD TWO_DOT string LBRACE list_rules RBRACE SEMI 
				{
					final Object RESULT = null;
					final String name =
						(String) ((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 4)).value;

					//System.out.println ("Rule_Card : " + name);
					final IRuleCard ruleCard =
						Factory.getInstance().createRuleCard(name);

					final Iterator iterator =
						this.parser.getListOfRules().iterator();
					while (iterator.hasNext()) {
						ruleCard.addConstituent((IConstituent) iterator.next());
					}

					this.parser.resetListOfRules();

					// Now that we have all Rules loaded we can try to substitute
					// all ruleghost entity that was not found.  This is due to the fact 
					// that some Rule reffer to other Rule that was not created yet.
					ruleCard.accept(new GhostRuleCleaner());
					this.parser.getRulesSet().add(ruleCard);

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							2/*rule_card*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 6)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 2 : // set_rules ::= set_rules rule_card 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							1/*set_rules*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 1)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 1 : // $START ::= set_rules EOF 
				{
					Object RESULT = null;
					final Object start_val =
						((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
							.elementAt(CUP$RULEParser$top - 1)).value;
					RESULT = start_val;
					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							0/*$START*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 1)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				/* ACCEPT */
				CUP$RULEParser$parser.done_parsing();
				return CUP$RULEParser$result;

				/*. . . . . . . . . . . . . . . . . . . .*/
			case 0 : // set_rules ::= rule_card 
				{
					final Object RESULT = null;

					CUP$RULEParser$result =
						new sad.rule.creator.javacup.runtime.Symbol(
							1/*set_rules*/,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).left,
							((sad.rule.creator.javacup.runtime.Symbol) CUP$RULEParser$stack
								.elementAt(CUP$RULEParser$top - 0)).right,
							RESULT);
				}
				return CUP$RULEParser$result;

				/* . . . . . .*/
			default :
				throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}

/** CUP v0.10k generated parser.
  * @version Tue Oct 23 18:05:49 EDT 2007
  */
public class RULEParser extends sad.rule.creator.javacup.runtime.lr_parser {

	/** Production table. */
	protected static final short _production_table[][] =
		lr_parser
			.unpackFromStrings(new String[] { "\000\104\000\002\003\003\000\002\002\004\000\002\003"
					+ "\004\000\002\004\011\000\002\005\003\000\002\005\004"
					+ "\000\002\006\011\000\002\006\006\000\002\006\011\000"
					+ "\002\007\005\000\002\007\003\000\002\007\003\000\002"
					+ "\010\003\000\002\010\003\000\002\010\003\000\002\010"
					+ "\003\000\002\010\003\000\002\011\003\000\002\011\005"
					+ "\000\002\012\015\000\002\012\013\000\002\012\011\000"
					+ "\002\012\011\000\002\012\007\000\002\013\005\000\002"
					+ "\013\005\000\002\013\003\000\002\014\003\000\002\014"
					+ "\003\000\002\014\003\000\002\014\003\000\002\014\003"
					+ "\000\002\014\003\000\002\014\003\000\002\015\003\000"
					+ "\002\015\003\000\002\015\003\000\002\015\003\000\002"
					+ "\015\003\000\002\015\003\000\002\016\003\000\002\017"
					+ "\003\000\002\017\003\000\002\017\003\000\002\020\005"
					+ "\000\002\021\003\000\002\021\005\000\002\022\003\000"
					+ "\002\022\003\000\002\022\003\000\002\022\003\000\002"
					+ "\022\003\000\002\022\003\000\002\023\003\000\002\023"
					+ "\003\000\002\023\003\000\002\024\003\000\002\024\004"
					+ "\000\002\025\015\000\002\026\003\000\002\026\003\000"
					+ "\002\026\003\000\002\026\003\000\002\027\003\000\002"
					+ "\027\003\000\002\027\003\000\002\027\003\000\002\030"
					+ "\003" });

	/** Parse-action table. */
	protected static final short[][] _action_table =
		lr_parser
			.unpackFromStrings(new String[] { "\000\176\000\004\060\006\001\002\000\006\002\177\060"
					+ "\006\001\002\000\006\002\001\060\001\001\002\000\004"
					+ "\020\007\001\002\000\004\017\011\001\002\000\004\007"
					+ "\012\001\002\000\034\004\uffbe\006\uffbe\007\uffbe\010\uffbe"
					+ "\011\uffbe\017\uffbe\046\uffbe\054\uffbe\055\uffbe\056\uffbe\057"
					+ "\uffbe\062\uffbe\063\uffbe\001\002\000\004\061\013\001\002"
					+ "\000\004\020\021\001\002\000\006\010\ufffd\061\ufffd\001"
					+ "\002\000\006\010\016\061\013\001\002\000\004\004\020"
					+ "\001\002\000\006\010\ufffc\061\ufffc\001\002\000\006\002"
					+ "\ufffe\060\ufffe\001\002\000\004\017\011\001\002\000\006"
					+ "\004\024\007\023\001\002\000\030\003\041\005\032\012"
					+ "\046\013\040\014\044\015\031\016\027\050\045\051\025"
					+ "\052\030\053\043\001\002\000\006\010\ufffa\061\ufffa\001"
					+ "\002\000\004\020\uffc5\001\002\000\014\010\uffc9\050\045"
					+ "\051\025\052\030\053\043\001\002\000\006\005\ufff1\017"
					+ "\ufff1\001\002\000\004\020\uffc4\001\002\000\006\005\ufff2"
					+ "\017\ufff2\001\002\000\010\021\075\022\077\023\076\001"
					+ "\002\000\006\005\032\017\011\001\002\000\004\020\053"
					+ "\001\002\000\004\010\ufff0\001\002\000\004\010\ufff6\001"
					+ "\002\000\004\010\051\001\002\000\006\005\ufff4\017\ufff4"
					+ "\001\002\000\004\010\047\001\002\000\004\010\ufff7\001"
					+ "\002\000\004\020\uffc3\001\002\000\006\005\ufff3\017\ufff3"
					+ "\001\002\000\004\020\uffc6\001\002\000\006\005\ufff5\017"
					+ "\ufff5\001\002\000\004\004\050\001\002\000\006\010\ufff9"
					+ "\061\ufff9\001\002\000\004\004\052\001\002\000\006\010"
					+ "\ufffb\061\ufffb\001\002\000\004\017\011\001\002\000\004"
					+ "\046\055\001\002\000\004\020\056\001\002\000\004\017"
					+ "\011\001\002\000\012\054\062\055\064\056\063\057\060"
					+ "\001\002\000\016\010\uffbf\047\uffbf\050\uffbf\051\uffbf\052"
					+ "\uffbf\053\uffbf\001\002\000\004\047\065\001\002\000\016"
					+ "\010\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\001"
					+ "\002\000\016\010\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0"
					+ "\053\uffc0\001\002\000\016\010\uffc1\047\uffc1\050\uffc1\051"
					+ "\uffc1\052\uffc1\053\uffc1\001\002\000\004\020\066\001\002"
					+ "\000\004\017\011\001\002\000\012\054\062\055\064\056"
					+ "\063\057\060\001\002\000\014\010\uffc7\050\uffc7\051\uffc7"
					+ "\052\uffc7\053\uffc7\001\002\000\004\017\011\001\002\000"
					+ "\004\005\032\001\002\000\004\010\uffef\001\002\000\004"
					+ "\010\ufff8\001\002\000\004\020\136\001\002\000\004\020"
					+ "\116\001\002\000\004\020\100\001\002\000\010\032\102"
					+ "\033\103\034\104\001\002\000\004\011\105\001\002\000"
					+ "\004\011\uffd8\001\002\000\004\011\uffd7\001\002\000\004"
					+ "\011\uffd6\001\002\000\004\007\106\001\002\000\004\017"
					+ "\011\001\002\000\004\006\110\001\002\000\006\005\uffec"
					+ "\010\uffec\001\002\000\006\010\uffd4\011\114\001\002\000"
					+ "\004\010\113\001\002\000\004\006\uffd5\001\002\000\004"
					+ "\017\011\001\002\000\004\010\uffd3\001\002\000\024\035"
					+ "\131\036\127\037\126\040\120\041\124\042\122\043\125"
					+ "\044\123\045\121\001\002\000\004\011\133\001\002\000"
					+ "\004\011\uffcd\001\002\000\004\011\uffcf\001\002\000\004"
					+ "\006\uffca\001\002\000\004\011\uffd0\001\002\000\004\006"
					+ "\uffcb\001\002\000\004\011\uffd1\001\002\000\004\011\uffce"
					+ "\001\002\000\004\006\uffcc\001\002\000\004\006\132\001"
					+ "\002\000\004\011\uffd2\001\002\000\006\005\uffea\010\uffea"
					+ "\001\002\000\004\017\011\001\002\000\004\006\135\001"
					+ "\002\000\006\005\uffeb\010\uffeb\001\002\000\004\017\011"
					+ "\001\002\000\010\011\uffe7\062\uffe7\063\uffe7\001\002\000"
					+ "\010\011\143\062\141\063\142\001\002\000\004\017\011"
					+ "\001\002\000\004\017\011\001\002\000\034\017\011\024"
					+ "\151\025\145\026\161\027\144\030\160\031\156\064\157"
					+ "\065\153\066\150\067\162\070\147\071\146\001\002\000"
					+ "\004\011\uffe3\001\002\000\004\011\uffe5\001\002\000\004"
					+ "\011\uffda\001\002\000\004\011\uffdb\001\002\000\004\011"
					+ "\uffdd\001\002\000\004\011\uffe6\001\002\000\004\011\uffe0"
					+ "\001\002\000\004\011\uffde\001\002\000\004\011\167\001"
					+ "\002\000\004\011\163\001\002\000\004\011\uffe1\001\002"
					+ "\000\004\011\uffdf\001\002\000\004\011\uffe2\001\002\000"
					+ "\004\011\uffe4\001\002\000\004\011\uffdc\001\002\000\004"
					+ "\017\011\001\002\000\004\006\166\001\002\000\004\006"
					+ "\uffd9\001\002\000\006\005\uffed\010\uffed\001\002\000\020"
					+ "\017\011\024\151\025\145\026\161\027\144\030\160\031"
					+ "\156\001\002\000\004\011\171\001\002\000\004\017\011"
					+ "\001\002\000\004\006\173\001\002\000\006\005\uffee\010"
					+ "\uffee\001\002\000\010\011\uffe8\062\uffe8\063\uffe8\001\002"
					+ "\000\010\011\uffe9\062\uffe9\063\uffe9\001\002\000\004\010"
					+ "\uffc8\001\002\000\004\002\000\001\002\000\006\002\uffff"
					+ "\060\uffff\001\002" });

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table =
		lr_parser
			.unpackFromStrings(new String[] { "\000\176\000\006\003\003\004\004\001\001\000\004\004"
					+ "\177\001\001\000\002\001\001\000\002\001\001\000\004"
					+ "\030\007\001\001\000\002\001\001\000\002\001\001\000"
					+ "\006\005\014\006\013\001\001\000\002\001\001\000\002"
					+ "\001\001\000\004\006\016\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\004\030\021\001\001"
					+ "\000\002\001\001\000\020\007\036\010\032\011\035\012"
					+ "\034\024\041\025\025\026\033\001\001\000\002\001\001"
					+ "\000\002\001\001\000\010\024\175\025\025\026\033\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\006\012\071\030\070\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\004\030\053\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\030\056\001"
					+ "\001\000\004\027\060\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\004\030\066\001\001\000\004"
					+ "\027\067\001\001\000\002\001\001\000\004\030\073\001"
					+ "\001\000\004\012\072\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\004\017\100\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\004\020"
					+ "\106\001\001\000\006\021\111\030\110\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\006\021\114\030\110\001\001"
					+ "\000\002\001\001\000\006\022\116\023\127\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\030\133\001"
					+ "\001\000\002\001\001\000\002\001\001\000\006\013\137"
					+ "\030\136\001\001\000\002\001\001\000\002\001\001\000"
					+ "\006\013\174\030\136\001\001\000\006\013\173\030\136"
					+ "\001\001\000\010\014\154\015\153\030\151\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\006\016\163\030\164"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\006\014\167\030\151\001\001\000\002\001\001"
					+ "\000\006\016\171\030\164\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001" });

	/** Instance of action encapsulation class. */
	protected CUP$RULEParser$actions action_obj;

	// Create an instance of SetRules
	private final List rulesSet = new ArrayList();

	private final List listOfElements = new ArrayList();

	private final List listOfRules = new ArrayList();

	private final List listOfSemanticElements = new ArrayList();

	private final List ListOfAttributes = new ArrayList();

	protected String tokenInError;

	protected boolean hasError;

	/** Default constructor. */
	public RULEParser() {
	}
	/** Constructor which sets the default scanner. */
	public RULEParser(final sad.rule.creator.javacup.runtime.Scanner s) {
		super(s);
	}

	/** Access to parse-action table. */
	public short[][] action_table() {
		return RULEParser._action_table;
	}

	public void addToListOfAttributes(final IAttribute anAttribute) {
		this.ListOfAttributes.add(anAttribute);
	}

	public void addToListOfElements(final IConstituent aConstituent) {
		this.listOfElements.add(aConstituent);
	}
	public void addToListOfRules(final IRule aConstituent) {
		this.listOfRules.add(aConstituent);
	}
	public void addToListOfSemanticElements(final String aValue) {
		this.listOfSemanticElements.add(aValue);
	}
	/** Invoke a user supplied parse action. */
	public sad.rule.creator.javacup.runtime.Symbol do_action(
		final int act_num,
		final sad.rule.creator.javacup.runtime.lr_parser parser,
		final java.util.Stack stack,
		final int top) throws java.lang.Exception {
		/* call code in generated class */
		return this.action_obj.CUP$RULEParser$do_action(
			act_num,
			parser,
			stack,
			top);
	}
	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}
	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}
	public List getListOfAttributes() {
		return this.ListOfAttributes;
	}

	public List getListOfElements() {
		return this.listOfElements;
	}
	public List getListOfRules() {
		return this.listOfRules;
	}
	public List getListOfSemanticElements() {
		return this.listOfSemanticElements;
	}
	public List getRulesSet() {
		return this.rulesSet;
	}
	public boolean hasError() {
		return this.hasError;
	}
	/** Action encapsulation object initializer. */
	protected void init_actions() {
		this.action_obj = new CUP$RULEParser$actions(this);
	}
	/** Access to production table. */
	public short[][] production_table() {
		return RULEParser._production_table;
	}
	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return RULEParser._reduce_table;
	}
	public void resetListOfAttributes() {
		this.ListOfAttributes.clear();
	}
	public void resetListOfElements() {
		this.listOfElements.clear();
	}
	public void resetListOfRules() {
		this.listOfRules.clear();
	}
	public void resetListOfSemanticElements() {
		this.listOfSemanticElements.clear();
	}
	/** Indicates start production. */
	public int start_production() {
		return 1;
	}
	/** Indicates start state. */
	public int start_state() {
		return 0;
	}
	public void syntax_error(final Symbol cur_token) {
		this.tokenInError = cur_token.value.toString();
	}

}
